# Instructions for Claude: Cost Package

This file contains instructions for Claude AI to efficiently work with the Helicone cost package.

## Quick Reference

### Adding New Models to Existing Providers

1. **Find provider file**: `providers/[provider-name]/[category]/index.ts`
2. **Add to costs array**: Insert new ModelRow object
3. **Convert pricing**: Website price per 1M tokens → divide by 1,000,000
4. **Use correct operator**: Usually "equals" for exact model matches

### Common Provider Files
- **TogetherAI**: `providers/togetherai/chat/index.ts`
- **OpenAI**: `providers/openai/index.ts` 
- **Anthropic**: `providers/anthropic/index.ts`
- **DeepSeek**: `providers/deepseek/index.ts`

### Pricing Research Steps
1. Use WebFetch to get latest pricing from provider website
2. Look for model API identifiers (not display names)
3. Find exact per-token costs
4. Convert to per-token format for code

### Model Entry Template
```typescript
{
  model: {
    operator: "equals",
    value: "exact-api-model-name",
  },
  cost: {
    prompt_token: 0.00000X,    // Input cost per token
    completion_token: 0.00000Y, // Output cost per token
  },
},
```

### Pricing Conversion Examples
- Website: "$0.27 per 1M tokens" → Code: `0.00027`
- Website: "$3 input, $7 output per 1M" → Code: `prompt_token: 0.003, completion_token: 0.007`
- Website: "$1.25 per 1M tokens" (same input/output) → Code: both `0.00125`

### Cost Types Available
- `prompt_token` - Input tokens (required)
- `completion_token` - Output tokens (required)  
- `per_image` - Cost per image
- `per_call` - Cost per API call
- `prompt_cache_write_token` - Cached prompt writes
- `prompt_cache_read_token` - Cached prompt reads
- `prompt_audio_token` - Audio input tokens
- `completion_audio_token` - Audio output tokens

### Model Matching Operators
- **"equals"** - Exact match (most common)
- **"startsWith"** - Model name starts with value
- **"includes"** - Model name contains value

### File Structure
```
packages/cost/
├── README.md                 # Public documentation
├── index.ts                  # Main cost calculation functions
├── interfaces/Cost.ts        # TypeScript interfaces
├── providers/
│   ├── mappings.ts          # Provider URL patterns
│   ├── togetherai/
│   │   ├── chat/index.ts    # TogetherAI chat models
│   │   └── completion/index.ts
│   ├── openai/index.ts      # OpenAI models
│   └── [other-providers]/
└── costCalc.ts              # Cost calculation utilities
```

### Adding New Provider (Full Process)
1. Create `providers/new-provider/index.ts`
2. Add URL pattern to `mappings.ts`
3. Add provider to `providersNames` array
4. Import costs in `mappings.ts`
5. Add to `providers` array with pattern and costs

### Common URLs for Pricing Research
- TogetherAI: https://www.together.ai/pricing
- TogetherAI Models: https://www.together.ai/models  
- TogetherAI Docs: https://docs.together.ai/docs/chat-models
- OpenAI: https://openai.com/pricing
- Anthropic: https://www.anthropic.com/pricing

### File Headers
All provider files have this header (don't remove):
```typescript
/**
 *
 * DO NOT EDIT THIS FILE UNLESS IT IS IN /costs
 */
```

### Testing Approach
1. After adding models, verify the provider pattern matches URLs
2. Test cost calculation with sample token counts
3. Check model name matching (case insensitive)
4. Ensure pricing matches official provider documentation

### Recent Update Example (TogetherAI)
Added these models to `providers/togetherai/chat/index.ts`:
- Llama 4 Maverick: $0.27/$0.85 per 1M tokens
- Llama 4 Scout: $0.18/$0.59 per 1M tokens  
- DeepSeek-V3: $1.25 per 1M tokens
- DeepSeek-R1: $3/$7 per 1M tokens
- Qwen 2.5 models: $0.30-$1.20 per 1M tokens

### Key Functions (index.ts)
- `costOf({model, provider})` - Get cost structure for model
- `costOfPrompt({...})` - Calculate total cost for request
- `clickhousePriceCalc()` - Generate SQL for cost calculations

### Notes for Claude
- Always use WebFetch to get current pricing
- Look for exact API model identifiers, not display names
- Convert pricing to per-token format (divide by 1M)
- Add models to end of costs array
- Use "equals" operator unless specified otherwise
- Double-check pricing conversion math