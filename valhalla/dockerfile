# This docker file must be built using the context of it's parent directory
# docker build -t valhalla .. -f dockerfile

# Use an official Node.js runtime as the base image
FROM node:20.19.4-bookworm-slim

ARG TARGETARCH

WORKDIR /usr/src/app/valhalla/prompt_security

SHELL ["/bin/bash", "-c"]
RUN apt-get update && apt-get install -y python3-venv python3
RUN python3 -m venv venv
# Install supervisor
RUN apt-get update && apt-get install -y supervisor

# Apply security updates
RUN apt-get update && apt-get upgrade -y && apt-get autoremove -y && apt-get clean

# Install patched versions to fix security vulnerabilities
# CVE-2023-26819: libcjson vulnerability 
# CVE-2025-6170: libxml2 vulnerability
RUN apt-get update && \
    apt-get install -y \
    libcjson-dev=1.7.15-1+deb12u3 \
    libxml2-dev \
    && apt-get clean

# Fix CVE-2023-6879 by installing fixed aom version from testing
RUN echo "deb https://deb.debian.org/debian testing main" > /etc/apt/sources.list.d/testing.list && \
    apt-get update && \
    apt-get install -y -t testing libaom3=3.12.1-1 && \
    rm /etc/apt/sources.list.d/testing.list && \
    apt-get update

# Install FFMEG and FFPROBE
RUN apt-get install -y ffmpeg
ENV FFMPEG_PATH="/usr/bin/ffmpeg"
ENV FFPROBE_PATH="/usr/bin/ffprobe"

COPY ./valhalla/prompt_security/requirements.txt ./
RUN . venv/bin/activate && \
    if [ "$TARGETARCH" = "arm64" ]; then \
      pip3 install torch==2.3.1 torchvision==0.18.1 -f https://download.pytorch.org/whl/torch_stable.html; \
    else \
      pip3 install torch==2.3.1+cpu torchvision==0.18.1+cpu -f https://download.pytorch.org/whl/torch_stable.html; \
    fi && \
    pip3 install "transformers[torch]"

RUN . venv/bin/activate && \
    pip3 install tokenizers safetensors fastapi tqdm uvicorn boto3

RUN . venv/bin/activate && \
    pip3 install regex numpy packaging requests tqdm filelock typing-extensions


RUN apt install curl -y
WORKDIR /usr/src/app
COPY ./shared ./shared
COPY ./packages ./packages
COPY ./package.json ./package.json


WORKDIR /usr/src/app/valhalla/jawn
COPY ./valhalla/jawn .


RUN find /usr/src/app/valhalla/jawn -name ".env.*" -exec rm {} \;

#yarn workspace jawn serve
ENV PORT=8585

RUN yarn
RUN yarn build
COPY ./valhalla/prompt_security/main.py /usr/src/app/valhalla/prompt_security/main.py
COPY ./valhalla/prompt_security/run_service.sh /usr/src/app/valhalla/prompt_security/run_service.sh
RUN chmod +x /usr/src/app/valhalla/prompt_security/run_service.sh


ENV PYTHONUNBUFFERED=1
ENV PYTHONFAULTHANDLER=1

ENV DLQ_MESSAGES_PER_MINI_BATCH=1
ENV DLQ_WORKER_COUNT=1
ENV NORMAL_WORKER_COUNT=3
ENV CSB_API_KEY="1234567890"
ENV ENABLE_PROMPT_SECURITY="true"



# Add supervisor configuration
COPY ./valhalla/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

CMD ["/usr/bin/supervisord", "-n", "-c", "/etc/supervisor/supervisord.conf"]