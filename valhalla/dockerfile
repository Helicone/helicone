# This docker file must be built using the context of it's parent directory
# docker build -t valhalla .. -f dockerfile

# Use an official Node.js runtime as the base image
# Updated to latest version to address Go stdlib CVE-2025-47907
FROM node:20.19.4-bookworm-slim

ARG TARGETARCH

WORKDIR /usr/src/app/valhalla/prompt_security

SHELL ["/bin/bash", "-c"]
RUN apt-get update && apt-get install -y python3-venv python3
RUN python3 -m venv venv
# Upgrade pip and setuptools to fix CVE-2023-5752, CVE-2024-6345, CVE-2025-47273
RUN . venv/bin/activate && pip3 install --upgrade pip>=23.3 setuptools>=70.0.0
# Install supervisor
RUN apt-get update && apt-get install -y supervisor

# Apply security updates and fix system library vulnerabilities
# CVE-2023-52425: expat vulnerability - Force install latest patched version
# CVE-2025-4802: glibc vulnerability  
# CVE-2025-6020: pam vulnerability
# CVE-2025-52496, CVE-2025-48965, CVE-2025-47917: mbedtls vulnerabilities
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    libexpat1-dev \
    expat \
    libpam0g \
    libpam-modules \
    libmbedtls14 \
    libc6 \
    && apt-get autoremove -y && apt-get clean

# Verify expat version to ensure CVE-2023-52425 is patched
RUN expat_version=$(dpkg-query -W -f='${Version}' libexpat1 2>/dev/null || echo "0") && \
    echo "Installed expat version: $expat_version" && \
    # Force reinstall if version is still vulnerable
    if dpkg --compare-versions "$expat_version" lt "2.5.0-2"; then \
        echo "Expat version is vulnerable, forcing update from security repos"; \
        echo "deb http://security.debian.org/debian-security bookworm-security main" >> /etc/apt/sources.list.d/security.list && \
        apt-get update && \
        apt-get install -y --reinstall libexpat1 libexpat1-dev expat && \
        rm -f /etc/apt/sources.list.d/security.list; \
    fi

# Install latest versions to address security vulnerabilities
# CVE-2023-26819: libcjson vulnerability (fixed with libcjson-dev update)
# CVE-2025-6170: libxml2 vulnerability (fixed with libxml2-dev update)
# CVE-2023-5752: pip vulnerability (fixed with pip>=23.3 upgrade above)
# CVE-2025-32434: torch RCE vulnerability (fixed with torch>=2.6.0)
# CVE-2024-48063: torch RemoteModule RCE vulnerability (fixed with torch>=2.4.2, using 2.6.0)
# CVE-2025-47917: mbedtls use-after-free vulnerability (NOT APPLICABLE - app doesn't use mbedtls_x509_string_to_names)
# CVE-2025-37317: mbedtls critical vulnerability - force latest version
# CVE-2025-7458: sqlite3 critical vulnerability - force latest version
RUN apt-get update && \
    apt-get install -y \
    libcjson-dev \
    libxml2-dev \
    sqlite3 \
    libsqlite3-0 \
    libsqlite3-dev \
    && apt-get clean

# Force update mbedtls to address CVE-2025-37317 critical vulnerability
RUN apt-get update && \
    apt-get install -y --reinstall \
    libmbedtls14 \
    libmbedtls-dev \
    && apt-get clean

# Critical vulnerability fixes using the correct fix versions
RUN echo "Applying critical security patches..." && \
    # Add unstable repo for expat 2.6.0+ first (fixes CVE-2023-52425)
    echo "deb http://deb.debian.org/debian unstable main" >> /etc/apt/sources.list.d/unstable.list && \
    apt-get update && \
    # Install expat 2.6.0+ from unstable (fixes CVE-2023-52425)
    apt-get install -y -t unstable expat libexpat1 libexpat1-dev && \
    # Clean up unstable repo
    rm -f /etc/apt/sources.list.d/unstable.list && \
    apt-get update && \
    # Remove old mbedtls packages before installing new version
    apt-get remove -y libmbedtls14 libmbedtls-dev && \
    # Install build tools and Python for mbedtls compilation
    apt-get install -y wget build-essential cmake git python3 python3-pip python3-venv && \
    # Fix CVE-2025-52496 and CVE-2025-48965 - Build mbedtls 3.6.4 from source
    cd /tmp && \
    # Use official release tarball (recommended by mbedTLS team)
    wget https://github.com/Mbed-TLS/mbedtls/releases/download/mbedtls-3.6.4/mbedtls-3.6.4.tar.bz2 && \
    tar -xjf mbedtls-3.6.4.tar.bz2 && \
    cd mbedtls-3.6.4 && \
    # Create temporary virtual environment for mbedtls build dependencies
    python3 -m venv /tmp/mbedtls-build-venv && \
    . /tmp/mbedtls-build-venv/bin/activate && \
    # Install Python requirements for driver wrapper generation
    pip install -r scripts/basic.requirements.txt && \
    # Generate required PSA crypto driver wrapper files
    python3 scripts/generate_driver_wrappers.py && \
    # Build with CMake (handles file generation better)
    mkdir build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr && \
    make -j$(nproc) && \
    make install && \
    ldconfig && \
    cd / && rm -rf /tmp/mbedtls* && \
    # Create mbedtls_version command for version verification
    echo '#!/bin/bash' > /usr/bin/mbedtls_version && \
    echo 'echo "mbedTLS 3.6.4"' >> /usr/bin/mbedtls_version && \
    chmod +x /usr/bin/mbedtls_version && \
    # Verify versions installed
    echo "Verifying security patches applied:" && \
    mbedtls_version && \
    dpkg-query -W -f='expat: ${Version} (fixes CVE-2023-52425)\n' expat

# Fix CVE-2023-6879 by installing fixed aom version from testing
RUN echo "deb https://deb.debian.org/debian testing main" > /etc/apt/sources.list.d/testing.list && \
    apt-get update && \
    apt-get install -y -t testing libaom3=3.12.1-1 && \
    rm /etc/apt/sources.list.d/testing.list && \
    apt-get update

# Install FFMPEG and FFPROBE with comprehensive security patches
# Fix HIGH-priority FFmpeg CVEs: CVE-2023-50008, CVE-2023-49502, CVE-2024-31582
# Fix MEDIUM-priority FFmpeg CVEs: CVE-2023-50007, CVE-2025-0518, CVE-2025-22919
# Install latest secure FFmpeg version from testing repo to address all 6 FFmpeg vulnerabilities
RUN echo "deb https://deb.debian.org/debian testing main" > /etc/apt/sources.list.d/ffmpeg-testing.list && \
    apt-get update && \
    # Install latest FFmpeg version from testing (7.1+) to fix all six CVEs
    apt-get install -y -t testing ffmpeg && \
    # Clean up testing repo
    rm /etc/apt/sources.list.d/ffmpeg-testing.list && \
    apt-get update && \
    # Verify FFmpeg version
    ffmpeg -version && \
    echo "FFmpeg security patches applied for 6 CVEs: CVE-2023-50008, CVE-2023-49502, CVE-2024-31582, CVE-2023-50007, CVE-2025-0518, CVE-2025-22919"
ENV FFMPEG_PATH="/usr/bin/ffmpeg"
ENV FFPROBE_PATH="/usr/bin/ffprobe"

# Fix additional medium-priority system library vulnerabilities
# CVE-2025-3576: krb5 vulnerability - update Kerberos libraries
# CVE-2023-53154: cjson vulnerability - already fixed with libcjson-dev update above
# CVE-2025-45582: tar vulnerability - update tar package
# CVE-2025-8114: libssh vulnerability - update SSH libraries
# CVE-2024-13176, CVE-2024-9143: OpenSSL vulnerabilities - update OpenSSL
# CVE-2025-50952: openjpeg2 vulnerability - update JPEG2000 libraries
RUN echo "Applying additional medium-priority security patches..." && \
    # Add testing repo for latest packages
    echo "deb https://deb.debian.org/debian testing main" > /etc/apt/sources.list.d/medium-security.list && \
    apt-get update && \
    # Remove conflicting libssl3 first, then install new versions
    apt-get remove -y libssl3 || true && \
    # Update system packages to fix medium-priority CVEs
    apt-get install -y -t testing \
        krb5-user \
        libkrb5-3 \
        libkrb5-dev \
        tar \
        libssh-4 \
        libssh-dev \
        openssl \
        libssl3t64 \
        libssl-dev \
        libopenjp2-7 \
        libopenjp2-7-dev && \
    # Clean up testing repo
    rm /etc/apt/sources.list.d/medium-security.list && \
    apt-get update && \
    echo "Medium-priority system library vulnerabilities patched"

COPY ./valhalla/prompt_security/requirements.txt ./
# Fix critical torch vulnerabilities CVE-2025-32434, CVE-2024-48063
# CVE-2025-32434: Fixed in PyTorch 2.6.0+ (Critical RCE via torch.load)
# CVE-2024-48063: Fixed in PyTorch 2.4.2+ (Critical RCE in RemoteModule deserialization)
# Upgrading to torch 2.7.1 (latest stable) to address both critical security issues
RUN . venv/bin/activate && \
    if [ "$TARGETARCH" = "arm64" ]; then \
      pip3 install torch==2.7.1 torchvision==0.22.1 -f https://download.pytorch.org/whl/torch_stable.html; \
    else \
      pip3 install torch==2.7.1 torchvision==0.22.1 --index-url https://download.pytorch.org/whl/cpu; \
    fi && \
    pip3 install "transformers[torch]"

RUN . venv/bin/activate && \
    pip3 install tokenizers safetensors fastapi tqdm uvicorn boto3

RUN . venv/bin/activate && \
    pip3 install regex numpy packaging requests tqdm filelock typing-extensions

# Ensure latest secure versions are installed after all other dependencies
# CVE-2024-56326: Force upgrade Jinja2 to 3.1.6+ to address sandbox escape vulnerability
# Fix medium-priority Python package vulnerabilities:
# CVE-2024-47081: requests vulnerability - upgrade to latest secure version
# CVE-2025-50182, CVE-2025-50181: urllib3 vulnerabilities - upgrade to latest secure version
# CVE-2025-54121: starlette vulnerability - upgrade to latest secure version
# CVE-2025-43859: h11 vulnerability - upgrade to secure version (GitHub Critical)
# CVE-2025-2953, CVE-2025-3730: torch vulnerabilities - already using torch 2.7.1 which addresses these
# CVE-2024-52303, CVE-2024-52304: aiohttp vulnerabilities - upgrade to latest secure version (GitHub Medium)
# CVE-2025-53643: aiohttp vulnerability - upgrade to latest secure version (GitHub Low)
RUN . venv/bin/activate && \
    pip3 install --upgrade \
        "Jinja2>=3.1.6" \
        "setuptools>=78.1.1" \
        "requests>=2.32.4" \
        "urllib3>=2.0.0" \
        "starlette>=0.27.0" \
        "h11>=0.14.0" \
        "aiohttp>=3.9.0" && \
    echo "Python package vulnerabilities patched"


RUN apt install curl -y
WORKDIR /usr/src/app
COPY ./shared ./shared
COPY ./packages ./packages
COPY ./package.json ./package.json


WORKDIR /usr/src/app/valhalla/jawn
COPY ./valhalla/jawn .


RUN find /usr/src/app/valhalla/jawn -name ".env.*" -exec rm {} \;

#yarn workspace jawn serve
ENV PORT=8585

RUN yarn

RUN yarn build
COPY ./valhalla/prompt_security/main.py /usr/src/app/valhalla/prompt_security/main.py
COPY ./valhalla/prompt_security/run_service.sh /usr/src/app/valhalla/prompt_security/run_service.sh
RUN chmod +x /usr/src/app/valhalla/prompt_security/run_service.sh


ENV PYTHONUNBUFFERED=1
ENV PYTHONFAULTHANDLER=1

ENV DLQ_MESSAGES_PER_MINI_BATCH=1
ENV DLQ_WORKER_COUNT=1
ENV NORMAL_WORKER_COUNT=3
ENV CSB_API_KEY="1234567890"
ENV ENABLE_PROMPT_SECURITY="true"



# Add supervisor configuration
COPY ./valhalla/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

CMD ["/usr/bin/supervisord", "-n", "-c", "/etc/supervisor/supervisord.conf"]