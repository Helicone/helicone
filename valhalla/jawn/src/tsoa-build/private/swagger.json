{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"EvaluatorResult": {
				"properties": {
					"id": {
						"type": "string"
					},
					"created_at": {
						"type": "string"
					},
					"scoring_type": {
						"type": "string"
					},
					"llm_template": {},
					"organization_id": {
						"type": "string"
					},
					"updated_at": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"code_template": {},
					"last_mile_config": {}
				},
				"required": [
					"id",
					"created_at",
					"scoring_type",
					"llm_template",
					"organization_id",
					"updated_at",
					"name",
					"code_template",
					"last_mile_config"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_EvaluatorResult_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/EvaluatorResult"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultError_string_": {
				"properties": {
					"data": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"error": {
						"type": "string"
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_EvaluatorResult.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_EvaluatorResult_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"CreateEvaluatorParams": {
				"properties": {
					"scoring_type": {
						"type": "string"
					},
					"llm_template": {},
					"name": {
						"type": "string"
					},
					"code_template": {},
					"last_mile_config": {}
				},
				"required": [
					"scoring_type",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_EvaluatorResult-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/EvaluatorResult"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_EvaluatorResult-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_EvaluatorResult-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"UpdateEvaluatorParams": {
				"properties": {
					"scoring_type": {
						"type": "string"
					},
					"llm_template": {},
					"code_template": {},
					"name": {
						"type": "string"
					},
					"last_mile_config": {}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_null_": {
				"properties": {
					"data": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_null.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_null_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"EvaluatorExperiment": {
				"properties": {
					"experiment_name": {
						"type": "string"
					},
					"experiment_created_at": {
						"type": "string"
					},
					"experiment_id": {
						"type": "string"
					}
				},
				"required": [
					"experiment_name",
					"experiment_created_at",
					"experiment_id"
				],
				"type": "object"
			},
			"ResultSuccess_EvaluatorExperiment-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/EvaluatorExperiment"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_EvaluatorExperiment-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_EvaluatorExperiment-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"OnlineEvaluatorByEvaluatorId": {
				"properties": {
					"config": {},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"config",
					"id"
				],
				"type": "object"
			},
			"ResultSuccess_OnlineEvaluatorByEvaluatorId-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/OnlineEvaluatorByEvaluatorId"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_OnlineEvaluatorByEvaluatorId-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_OnlineEvaluatorByEvaluatorId-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"Record_string.any_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"CreateOnlineEvaluatorParams": {
				"properties": {
					"config": {
						"$ref": "#/components/schemas/Record_string.any_"
					}
				},
				"required": [
					"config"
				],
				"type": "object"
			},
			"ResultSuccess__output-string--traces-string-Array--statusCode_63_-number__": {
				"properties": {
					"data": {
						"properties": {
							"statusCode": {
								"type": "number",
								"format": "double"
							},
							"traces": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"output": {
								"type": "string"
							}
						},
						"required": [
							"traces",
							"output"
						],
						"type": "object"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__output-string--traces-string-Array--statusCode_63_-number_.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__output-string--traces-string-Array--statusCode_63_-number__"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"Record_string.string_": {
				"properties": {},
				"additionalProperties": {
					"type": "string"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"TestInput": {
				"properties": {
					"promptTemplate": {
						"type": "string"
					},
					"inputs": {
						"properties": {
							"autoInputs": {
								"$ref": "#/components/schemas/Record_string.string_"
							},
							"inputs": {
								"$ref": "#/components/schemas/Record_string.string_"
							}
						},
						"required": [
							"inputs"
						],
						"type": "object"
					},
					"outputBody": {
						"type": "string"
					},
					"inputBody": {
						"type": "string"
					}
				},
				"required": [
					"inputs",
					"outputBody",
					"inputBody"
				],
				"type": "object"
			},
			"EvaluatorScore": {
				"properties": {
					"score": {
						"anyOf": [
							{
								"type": "number",
								"format": "double"
							},
							{
								"type": "boolean"
							}
						]
					}
				},
				"required": [
					"score"
				],
				"type": "object"
			},
			"ResultSuccess_EvaluatorScore_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/EvaluatorScore"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_EvaluatorScore.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_EvaluatorScore_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"EvaluatorScoreResult": {
				"$ref": "#/components/schemas/Result_EvaluatorScore.string_"
			},
			"EvaluatorConfig": {
				"properties": {
					"evaluator_code_template": {
						"type": "string"
					},
					"evaluator_llm_template": {
						"type": "string"
					},
					"evaluator_scoring_type": {
						"type": "string"
					}
				},
				"required": [
					"evaluator_scoring_type"
				],
				"type": "object"
			},
			"ResultSuccess__score-number--input-string--output-string--ground_truth_63_-string__": {
				"properties": {
					"data": {
						"properties": {
							"ground_truth": {
								"type": "string"
							},
							"output": {
								"type": "string"
							},
							"input": {
								"type": "string"
							},
							"score": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"output",
							"input",
							"score"
						],
						"type": "object"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__score-number--input-string--output-string--ground_truth_63_-string_.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__score-number--input-string--output-string--ground_truth_63_-string__"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"DataEntry": {
				"anyOf": [
					{
						"properties": {
							"_type": {
								"type": "string",
								"enum": [
									"system-prompt"
								],
								"nullable": false
							}
						},
						"required": [
							"_type"
						],
						"type": "object"
					},
					{
						"properties": {
							"inputKey": {
								"type": "string"
							},
							"_type": {
								"type": "string",
								"enum": [
									"prompt-input"
								],
								"nullable": false
							}
						},
						"required": [
							"inputKey",
							"_type"
						],
						"type": "object"
					},
					{
						"properties": {
							"content": {
								"type": "string",
								"enum": [
									"jsonify",
									"message"
								]
							},
							"_type": {
								"type": "string",
								"enum": [
									"input-body"
								],
								"nullable": false
							}
						},
						"required": [
							"content",
							"_type"
						],
						"type": "object"
					},
					{
						"properties": {
							"content": {
								"type": "string",
								"enum": [
									"jsonify",
									"message"
								]
							},
							"_type": {
								"type": "string",
								"enum": [
									"output-body"
								],
								"nullable": false
							}
						},
						"required": [
							"content",
							"_type"
						],
						"type": "object"
					}
				]
			},
			"BaseLastMileConfigForm": {
				"properties": {
					"output": {
						"$ref": "#/components/schemas/DataEntry"
					},
					"input": {
						"$ref": "#/components/schemas/DataEntry"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"output",
					"input",
					"name"
				],
				"type": "object"
			},
			"LastMileConfigForm": {
				"allOf": [
					{
						"$ref": "#/components/schemas/BaseLastMileConfigForm"
					},
					{
						"anyOf": [
							{
								"properties": {
									"_type": {
										"type": "string",
										"enum": [
											"relevance",
											"context_relevance"
										]
									}
								},
								"required": [
									"_type"
								],
								"type": "object"
							},
							{
								"properties": {
									"groundTruth": {
										"$ref": "#/components/schemas/DataEntry"
									},
									"_type": {
										"type": "string",
										"enum": [
											"faithfulness"
										],
										"nullable": false
									}
								},
								"required": [
									"groundTruth",
									"_type"
								],
								"type": "object"
							}
						]
					}
				]
			},
			"EvaluatorStats": {
				"properties": {
					"averageScore": {
						"type": "number",
						"format": "double"
					},
					"totalUses": {
						"type": "number",
						"format": "double"
					},
					"recentTrend": {
						"type": "string",
						"enum": [
							"up",
							"down",
							"stable"
						]
					},
					"scoreDistribution": {
						"items": {
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								},
								"range": {
									"type": "string"
								}
							},
							"required": [
								"count",
								"range"
							],
							"type": "object"
						},
						"type": "array"
					},
					"timeSeriesData": {
						"items": {
							"properties": {
								"value": {
									"type": "number",
									"format": "double"
								},
								"date": {
									"type": "string"
								}
							},
							"required": [
								"value",
								"date"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"averageScore",
					"totalUses",
					"recentTrend",
					"scoreDistribution",
					"timeSeriesData"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_EvaluatorStats_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/EvaluatorStats"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_EvaluatorStats.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_EvaluatorStats_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess__experimentId-string__": {
				"properties": {
					"data": {
						"properties": {
							"experimentId": {
								"type": "string"
							}
						},
						"required": [
							"experimentId"
						],
						"type": "object"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__experimentId-string_.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__experimentId-string__"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ExperimentV2": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"original_prompt_version": {
						"type": "string"
					},
					"copied_original_prompt_version": {
						"type": "string",
						"nullable": true
					},
					"input_keys": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true
					},
					"created_at": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"original_prompt_version",
					"copied_original_prompt_version",
					"input_keys",
					"created_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_ExperimentV2-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/ExperimentV2"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_ExperimentV2-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_ExperimentV2-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ExperimentV2Output": {
				"properties": {
					"id": {
						"type": "string"
					},
					"request_id": {
						"type": "string"
					},
					"is_original": {
						"type": "boolean"
					},
					"prompt_version_id": {
						"type": "string"
					},
					"created_at": {
						"type": "string"
					},
					"input_record_id": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"request_id",
					"is_original",
					"prompt_version_id",
					"created_at",
					"input_record_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ExperimentV2Row": {
				"properties": {
					"id": {
						"type": "string"
					},
					"inputs": {
						"$ref": "#/components/schemas/Record_string.string_"
					},
					"prompt_version": {
						"type": "string"
					},
					"requests": {
						"items": {
							"$ref": "#/components/schemas/ExperimentV2Output"
						},
						"type": "array"
					},
					"auto_prompt_inputs": {
						"items": {},
						"type": "array"
					}
				},
				"required": [
					"id",
					"inputs",
					"prompt_version",
					"requests",
					"auto_prompt_inputs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ExtendedExperimentData": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"original_prompt_version": {
						"type": "string"
					},
					"copied_original_prompt_version": {
						"type": "string",
						"nullable": true
					},
					"input_keys": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true
					},
					"created_at": {
						"type": "string"
					},
					"rows": {
						"items": {
							"$ref": "#/components/schemas/ExperimentV2Row"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"original_prompt_version",
					"copied_original_prompt_version",
					"input_keys",
					"created_at",
					"rows"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_ExtendedExperimentData_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ExtendedExperimentData"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_ExtendedExperimentData.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_ExtendedExperimentData_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"PromptVersionResult": {
				"properties": {
					"id": {
						"type": "string"
					},
					"minor_version": {
						"type": "number",
						"format": "double"
					},
					"major_version": {
						"type": "number",
						"format": "double"
					},
					"prompt_v2": {
						"type": "string"
					},
					"model": {
						"type": "string"
					},
					"helicone_template": {
						"type": "string"
					},
					"created_at": {
						"type": "string"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.any_"
					},
					"parent_prompt_version": {
						"type": "string",
						"nullable": true
					},
					"experiment_id": {
						"type": "string",
						"nullable": true
					},
					"updated_at": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"minor_version",
					"major_version",
					"prompt_v2",
					"model",
					"helicone_template",
					"created_at",
					"metadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_PromptVersionResult_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PromptVersionResult"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_PromptVersionResult.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_PromptVersionResult_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"CreateNewPromptVersionForExperimentParams": {
				"properties": {
					"newHeliconeTemplate": {},
					"isMajorVersion": {
						"type": "boolean"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.any_"
					},
					"experimentId": {
						"type": "string"
					},
					"bumpForMajorPromptVersionId": {
						"type": "string"
					},
					"parentPromptVersionId": {
						"type": "string"
					}
				},
				"required": [
					"newHeliconeTemplate",
					"parentPromptVersionId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Json": {
				"anyOf": [
					{
						"type": "string"
					},
					{
						"type": "number",
						"format": "double"
					},
					{
						"type": "boolean"
					},
					{
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/Json"
						},
						"type": "object"
					},
					{
						"items": {
							"$ref": "#/components/schemas/Json"
						},
						"type": "array"
					}
				],
				"nullable": true
			},
			"ExperimentV2PromptVersion": {
				"properties": {
					"created_at": {
						"type": "string",
						"nullable": true
					},
					"experiment_id": {
						"type": "string",
						"nullable": true
					},
					"helicone_template": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Json"
							}
						],
						"nullable": true
					},
					"id": {
						"type": "string"
					},
					"major_version": {
						"type": "number",
						"format": "double"
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Json"
							}
						],
						"nullable": true
					},
					"minor_version": {
						"type": "number",
						"format": "double"
					},
					"model": {
						"type": "string",
						"nullable": true
					},
					"organization": {
						"type": "string"
					},
					"prompt_v2": {
						"type": "string"
					},
					"soft_delete": {
						"type": "boolean",
						"nullable": true
					}
				},
				"required": [
					"created_at",
					"experiment_id",
					"helicone_template",
					"id",
					"major_version",
					"metadata",
					"minor_version",
					"model",
					"organization",
					"prompt_v2",
					"soft_delete"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_ExperimentV2PromptVersion-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/ExperimentV2PromptVersion"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_ExperimentV2PromptVersion-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_ExperimentV2PromptVersion-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess_string-Array_": {
				"properties": {
					"data": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_string-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_string-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess_string_": {
				"properties": {
					"data": {
						"type": "string"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_string.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_string_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess_boolean_": {
				"properties": {
					"data": {
						"type": "boolean"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_boolean.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_boolean_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ScoreV2": {
				"properties": {
					"valueType": {
						"type": "string"
					},
					"value": {
						"anyOf": [
							{
								"type": "number",
								"format": "double"
							},
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						]
					},
					"max": {
						"type": "number",
						"format": "double"
					},
					"min": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"valueType",
					"value",
					"max",
					"min"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.ScoreV2_": {
				"properties": {},
				"additionalProperties": {
					"$ref": "#/components/schemas/ScoreV2"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"ResultSuccess_Record_string.ScoreV2__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/Record_string.ScoreV2_"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_Record_string.ScoreV2_.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_Record_string.ScoreV2__"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess_ScoreV2-or-null_": {
				"properties": {
					"data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ScoreV2"
							}
						],
						"nullable": true
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_ScoreV2-or-null.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_ScoreV2-or-null_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ProviderName": {
				"type": "string",
				"enum": [
					"OPENAI",
					"ANTHROPIC",
					"AZURE",
					"LOCAL",
					"HELICONE",
					"AMDBARTEK",
					"ANYSCALE",
					"CLOUDFLARE",
					"2YFV",
					"TOGETHER",
					"LEMONFOX",
					"FIREWORKS",
					"PERPLEXITY",
					"GOOGLE",
					"OPENROUTER",
					"WISDOMINANUTSHELL",
					"GROQ",
					"COHERE",
					"MISTRAL",
					"DEEPINFRA",
					"QSTASH",
					"FIRECRAWL",
					"AWS",
					"DEEPSEEK",
					"X",
					"AVIAN",
					"NEBIUS",
					"NOVITA"
				]
			},
			"Provider": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ProviderName"
					},
					{
						"type": "string",
						"enum": [
							"CUSTOM"
						]
					}
				]
			},
			"LlmType": {
				"type": "string",
				"enum": [
					"chat",
					"completion"
				]
			},
			"FunctionCall": {
				"properties": {
					"name": {
						"type": "string"
					},
					"arguments": {
						"$ref": "#/components/schemas/Record_string.any_"
					}
				},
				"required": [
					"name",
					"arguments"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Message": {
				"properties": {
					"deleted": {
						"type": "boolean"
					},
					"contentArray": {
						"items": {
							"$ref": "#/components/schemas/Message"
						},
						"type": "array"
					},
					"idx": {
						"type": "number",
						"format": "double"
					},
					"detail": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"file_id": {
						"type": "string"
					},
					"file_data": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"input_image",
							"input_text",
							"input_file"
						]
					},
					"audio_data": {
						"type": "string"
					},
					"image_url": {
						"type": "string"
					},
					"timestamp": {
						"type": "string"
					},
					"tool_call_id": {
						"type": "string"
					},
					"tool_calls": {
						"items": {
							"$ref": "#/components/schemas/FunctionCall"
						},
						"type": "array"
					},
					"content": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"instruction": {
						"type": "string"
					},
					"role": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "string",
								"enum": [
									"user",
									"assistant",
									"system",
									"developer"
								]
							}
						]
					},
					"id": {
						"type": "string"
					},
					"_type": {
						"type": "string",
						"enum": [
							"functionCall",
							"function",
							"image",
							"file",
							"message",
							"autoInput",
							"contentArray",
							"audio"
						]
					}
				},
				"required": [
					"_type"
				],
				"type": "object"
			},
			"Tool": {
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"parameters": {
						"$ref": "#/components/schemas/Record_string.any_"
					}
				},
				"required": [
					"name",
					"description"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HeliconeEventTool": {
				"properties": {
					"_type": {
						"type": "string",
						"enum": [
							"tool"
						],
						"nullable": false
					},
					"toolName": {
						"type": "string"
					},
					"input": {}
				},
				"required": [
					"_type",
					"toolName",
					"input"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"HeliconeEventVectorDB": {
				"properties": {
					"_type": {
						"type": "string",
						"enum": [
							"vector_db"
						],
						"nullable": false
					},
					"operation": {
						"type": "string",
						"enum": [
							"search",
							"insert",
							"delete",
							"update"
						]
					},
					"text": {
						"type": "string"
					},
					"vector": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					},
					"topK": {
						"type": "number",
						"format": "double"
					},
					"filter": {
						"additionalProperties": false,
						"type": "object"
					},
					"databaseName": {
						"type": "string"
					}
				},
				"required": [
					"_type",
					"operation"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"LLMRequestBody": {
				"properties": {
					"llm_type": {
						"$ref": "#/components/schemas/LlmType"
					},
					"provider": {
						"type": "string"
					},
					"model": {
						"type": "string"
					},
					"messages": {
						"items": {
							"$ref": "#/components/schemas/Message"
						},
						"type": "array",
						"nullable": true
					},
					"prompt": {
						"type": "string",
						"nullable": true
					},
					"instructions": {
						"type": "string",
						"nullable": true
					},
					"max_tokens": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"temperature": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"top_p": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"seed": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"stream": {
						"type": "boolean",
						"nullable": true
					},
					"presence_penalty": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"frequency_penalty": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"stop": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"type": "string"
							}
						],
						"nullable": true
					},
					"reasoning_effort": {
						"type": "string",
						"enum": [
							"low",
							"medium",
							"high",
							null
						],
						"nullable": true
					},
					"tools": {
						"items": {
							"$ref": "#/components/schemas/Tool"
						},
						"type": "array"
					},
					"parallel_tool_calls": {
						"type": "boolean",
						"nullable": true
					},
					"tool_choice": {
						"properties": {
							"name": {
								"type": "string"
							},
							"type": {
								"type": "string",
								"enum": [
									"none",
									"auto",
									"any",
									"tool"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					},
					"response_format": {
						"properties": {
							"json_schema": {},
							"type": {
								"type": "string"
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					},
					"toolDetails": {
						"$ref": "#/components/schemas/HeliconeEventTool"
					},
					"vectorDBDetails": {
						"$ref": "#/components/schemas/HeliconeEventVectorDB"
					},
					"input": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							}
						]
					},
					"n": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"size": {
						"type": "string"
					},
					"quality": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Response": {
				"properties": {
					"contentArray": {
						"items": {
							"$ref": "#/components/schemas/Response"
						},
						"type": "array"
					},
					"detail": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"file_id": {
						"type": "string"
					},
					"file_data": {
						"type": "string"
					},
					"idx": {
						"type": "number",
						"format": "double"
					},
					"audio_data": {
						"type": "string"
					},
					"image_url": {
						"type": "string"
					},
					"timestamp": {
						"type": "string"
					},
					"tool_call_id": {
						"type": "string"
					},
					"tool_calls": {
						"items": {
							"$ref": "#/components/schemas/FunctionCall"
						},
						"type": "array"
					},
					"text": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"input_image",
							"input_text",
							"input_file"
						]
					},
					"name": {
						"type": "string"
					},
					"role": {
						"type": "string",
						"enum": [
							"user",
							"assistant",
							"system",
							"developer"
						]
					},
					"id": {
						"type": "string"
					},
					"_type": {
						"type": "string",
						"enum": [
							"functionCall",
							"function",
							"image",
							"text",
							"file",
							"contentArray"
						]
					}
				},
				"required": [
					"type",
					"role",
					"_type"
				],
				"type": "object"
			},
			"LLMResponseBody": {
				"properties": {
					"vectorDBDetailsResponse": {
						"properties": {
							"_type": {
								"type": "string",
								"enum": [
									"vector_db"
								],
								"nullable": false
							},
							"metadata": {
								"properties": {
									"timestamp": {
										"type": "string"
									},
									"destination_parsed": {
										"type": "boolean"
									},
									"destination": {
										"type": "string"
									}
								},
								"required": [
									"timestamp"
								],
								"type": "object"
							},
							"actualSimilarity": {
								"type": "number",
								"format": "double"
							},
							"similarityThreshold": {
								"type": "number",
								"format": "double"
							},
							"message": {
								"type": "string"
							},
							"status": {
								"type": "string"
							}
						},
						"required": [
							"_type",
							"metadata",
							"message",
							"status"
						],
						"type": "object"
					},
					"toolDetailsResponse": {
						"properties": {
							"toolName": {
								"type": "string"
							},
							"_type": {
								"type": "string",
								"enum": [
									"tool"
								],
								"nullable": false
							},
							"metadata": {
								"properties": {
									"timestamp": {
										"type": "string"
									}
								},
								"required": [
									"timestamp"
								],
								"type": "object"
							},
							"tips": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"message": {
								"type": "string"
							},
							"status": {
								"type": "string"
							}
						},
						"required": [
							"toolName",
							"_type",
							"metadata",
							"tips",
							"message",
							"status"
						],
						"type": "object"
					},
					"error": {
						"properties": {
							"heliconeMessage": {}
						},
						"required": [
							"heliconeMessage"
						],
						"type": "object"
					},
					"model": {
						"type": "string",
						"nullable": true
					},
					"instructions": {
						"type": "string",
						"nullable": true
					},
					"responses": {
						"items": {
							"$ref": "#/components/schemas/Response"
						},
						"type": "array",
						"nullable": true
					},
					"messages": {
						"items": {
							"$ref": "#/components/schemas/Message"
						},
						"type": "array",
						"nullable": true
					}
				},
				"type": "object"
			},
			"LlmSchema": {
				"properties": {
					"request": {
						"$ref": "#/components/schemas/LLMRequestBody"
					},
					"response": {
						"allOf": [
							{
								"$ref": "#/components/schemas/LLMResponseBody"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"request"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.number_": {
				"properties": {},
				"additionalProperties": {
					"type": "number",
					"format": "double"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"HeliconeRequest": {
				"properties": {
					"response_id": {
						"type": "string",
						"nullable": true
					},
					"response_created_at": {
						"type": "string",
						"nullable": true
					},
					"response_body": {},
					"response_status": {
						"type": "number",
						"format": "double"
					},
					"response_model": {
						"type": "string",
						"nullable": true
					},
					"request_id": {
						"type": "string"
					},
					"request_created_at": {
						"type": "string"
					},
					"request_body": {},
					"request_path": {
						"type": "string"
					},
					"request_user_id": {
						"type": "string",
						"nullable": true
					},
					"request_properties": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Record_string.string_"
							}
						],
						"nullable": true
					},
					"request_model": {
						"type": "string",
						"nullable": true
					},
					"model_override": {
						"type": "string",
						"nullable": true
					},
					"helicone_user": {
						"type": "string",
						"nullable": true
					},
					"provider": {
						"$ref": "#/components/schemas/Provider"
					},
					"delay_ms": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"time_to_first_token": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"total_tokens": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"prompt_tokens": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"prompt_cache_write_tokens": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"prompt_cache_read_tokens": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"completion_tokens": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"prompt_audio_tokens": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"completion_audio_tokens": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"prompt_id": {
						"type": "string",
						"nullable": true
					},
					"feedback_created_at": {
						"type": "string",
						"nullable": true
					},
					"feedback_id": {
						"type": "string",
						"nullable": true
					},
					"feedback_rating": {
						"type": "boolean",
						"nullable": true
					},
					"signed_body_url": {
						"type": "string",
						"nullable": true
					},
					"llmSchema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/LlmSchema"
							}
						],
						"nullable": true
					},
					"country_code": {
						"type": "string",
						"nullable": true
					},
					"asset_ids": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true
					},
					"asset_urls": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Record_string.string_"
							}
						],
						"nullable": true
					},
					"scores": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Record_string.number_"
							}
						],
						"nullable": true
					},
					"costUSD": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"properties": {
						"$ref": "#/components/schemas/Record_string.string_"
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"target_url": {
						"type": "string"
					},
					"model": {
						"type": "string"
					}
				},
				"required": [
					"response_id",
					"response_created_at",
					"response_status",
					"response_model",
					"request_id",
					"request_created_at",
					"request_body",
					"request_path",
					"request_user_id",
					"request_properties",
					"request_model",
					"model_override",
					"helicone_user",
					"provider",
					"delay_ms",
					"time_to_first_token",
					"total_tokens",
					"prompt_tokens",
					"prompt_cache_write_tokens",
					"prompt_cache_read_tokens",
					"completion_tokens",
					"prompt_audio_tokens",
					"completion_audio_tokens",
					"prompt_id",
					"llmSchema",
					"country_code",
					"asset_ids",
					"asset_urls",
					"scores",
					"properties",
					"assets",
					"target_url",
					"model"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_HeliconeRequest-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/HeliconeRequest"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_HeliconeRequest-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_HeliconeRequest-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"Partial_NumberOperators_": {
				"properties": {
					"not-equals": {
						"type": "number",
						"format": "double"
					},
					"equals": {
						"type": "number",
						"format": "double"
					},
					"gte": {
						"type": "number",
						"format": "double"
					},
					"lte": {
						"type": "number",
						"format": "double"
					},
					"lt": {
						"type": "number",
						"format": "double"
					},
					"gt": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_TimestampOperators_": {
				"properties": {
					"gte": {
						"type": "string"
					},
					"lte": {
						"type": "string"
					},
					"lt": {
						"type": "string"
					},
					"gt": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_BooleanOperators_": {
				"properties": {
					"equals": {
						"type": "boolean"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_TextOperators_": {
				"properties": {
					"not-equals": {
						"type": "string"
					},
					"equals": {
						"type": "string"
					},
					"like": {
						"type": "string"
					},
					"ilike": {
						"type": "string"
					},
					"contains": {
						"type": "string"
					},
					"not-contains": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_FeedbackTableToOperators_": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"created_at": {
						"$ref": "#/components/schemas/Partial_TimestampOperators_"
					},
					"rating": {
						"$ref": "#/components/schemas/Partial_BooleanOperators_"
					},
					"response_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_RequestTableToOperators_": {
				"properties": {
					"prompt": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"created_at": {
						"$ref": "#/components/schemas/Partial_TimestampOperators_"
					},
					"user_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"auth_hash": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"org_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"node_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"model": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"modelOverride": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"path": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"prompt_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_ResponseTableToOperators_": {
				"properties": {
					"body_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"body_model": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"body_completion": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"status": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"model": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_TimestampOperatorsTyped_": {
				"properties": {
					"gte": {
						"type": "string",
						"format": "date-time"
					},
					"lte": {
						"type": "string",
						"format": "date-time"
					},
					"lt": {
						"type": "string",
						"format": "date-time"
					},
					"gt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_CacheHitsTableToOperators_": {
				"properties": {
					"organization_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"request_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"latency": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"completion_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"prompt_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"created_at": {
						"$ref": "#/components/schemas/Partial_TimestampOperatorsTyped_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_VectorOperators_": {
				"properties": {
					"contains": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_RequestResponseRMTToOperators_": {
				"properties": {
					"latency": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"status": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"request_created_at": {
						"$ref": "#/components/schemas/Partial_TimestampOperatorsTyped_"
					},
					"response_created_at": {
						"$ref": "#/components/schemas/Partial_TimestampOperatorsTyped_"
					},
					"model": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"user_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"organization_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"node_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"job_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"threat": {
						"$ref": "#/components/schemas/Partial_BooleanOperators_"
					},
					"request_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"prompt_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"completion_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"total_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"target_url": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"properties": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/Partial_TextOperators_"
						},
						"type": "object"
					},
					"search_properties": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/Partial_TextOperators_"
						},
						"type": "object"
					},
					"scores": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/Partial_TextOperators_"
						},
						"type": "object"
					},
					"scores_column": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"request_body": {
						"$ref": "#/components/schemas/Partial_VectorOperators_"
					},
					"response_body": {
						"$ref": "#/components/schemas/Partial_VectorOperators_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_SessionsRequestResponseRMTToOperators_": {
				"properties": {
					"session_session_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"session_session_name": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"session_total_cost": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"session_total_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"session_prompt_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"session_completion_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"session_total_requests": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"session_created_at": {
						"$ref": "#/components/schemas/Partial_TimestampOperatorsTyped_"
					},
					"session_latest_request_created_at": {
						"$ref": "#/components/schemas/Partial_TimestampOperatorsTyped_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_FilterLeaf.feedback-or-request-or-response-or-properties-or-values-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_": {
				"properties": {
					"feedback": {
						"$ref": "#/components/schemas/Partial_FeedbackTableToOperators_"
					},
					"request": {
						"$ref": "#/components/schemas/Partial_RequestTableToOperators_"
					},
					"response": {
						"$ref": "#/components/schemas/Partial_ResponseTableToOperators_"
					},
					"properties": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/Partial_TextOperators_"
						},
						"type": "object"
					},
					"values": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/Partial_TextOperators_"
						},
						"type": "object"
					},
					"cache_hits": {
						"$ref": "#/components/schemas/Partial_CacheHitsTableToOperators_"
					},
					"request_response_rmt": {
						"$ref": "#/components/schemas/Partial_RequestResponseRMTToOperators_"
					},
					"sessions_request_response_rmt": {
						"$ref": "#/components/schemas/Partial_SessionsRequestResponseRMTToOperators_"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"FilterLeafSubset_feedback-or-request-or-response-or-properties-or-values-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_": {
				"$ref": "#/components/schemas/Pick_FilterLeaf.feedback-or-request-or-response-or-properties-or-values-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_"
			},
			"RequestFilterNode": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/FilterLeafSubset_feedback-or-request-or-response-or-properties-or-values-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_"
					},
					{
						"$ref": "#/components/schemas/RequestFilterBranch"
					},
					{
						"type": "string",
						"enum": [
							"all"
						]
					}
				]
			},
			"RequestFilterBranch": {
				"properties": {
					"right": {
						"$ref": "#/components/schemas/RequestFilterNode"
					},
					"operator": {
						"type": "string",
						"enum": [
							"or",
							"and"
						]
					},
					"left": {
						"$ref": "#/components/schemas/RequestFilterNode"
					}
				},
				"required": [
					"right",
					"operator",
					"left"
				],
				"type": "object"
			},
			"SortDirection": {
				"type": "string",
				"enum": [
					"asc",
					"desc"
				]
			},
			"SortLeafRequest": {
				"properties": {
					"random": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"created_at": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"cache_created_at": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"latency": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"last_active": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"total_tokens": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"completion_tokens": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"prompt_tokens": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"user_id": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"body_model": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"is_cached": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"request_prompt": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"response_text": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"properties": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/SortDirection"
						},
						"type": "object"
					},
					"values": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/SortDirection"
						},
						"type": "object"
					},
					"cost_usd": {
						"$ref": "#/components/schemas/SortDirection"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"RequestQueryParams": {
				"properties": {
					"filter": {
						"$ref": "#/components/schemas/RequestFilterNode"
					},
					"offset": {
						"type": "number",
						"format": "double"
					},
					"limit": {
						"type": "number",
						"format": "double"
					},
					"sort": {
						"$ref": "#/components/schemas/SortLeafRequest"
					},
					"isCached": {
						"type": "boolean"
					},
					"includeInputs": {
						"type": "boolean"
					},
					"isPartOfExperiment": {
						"type": "boolean"
					},
					"isScored": {
						"type": "boolean"
					}
				},
				"required": [
					"filter"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_HeliconeRequest_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/HeliconeRequest"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_HeliconeRequest.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_HeliconeRequest_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"HeliconeRequestAsset": {
				"properties": {
					"assetUrl": {
						"type": "string"
					}
				},
				"required": [
					"assetUrl"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_HeliconeRequestAsset_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/HeliconeRequestAsset"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_HeliconeRequestAsset.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_HeliconeRequestAsset_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"Record_string.number-or-boolean-or-undefined_": {
				"properties": {},
				"additionalProperties": {
					"anyOf": [
						{
							"type": "number",
							"format": "double"
						},
						{
							"type": "boolean"
						}
					]
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"Scores": {
				"$ref": "#/components/schemas/Record_string.number-or-boolean-or-undefined_"
			},
			"ScoreRequest": {
				"properties": {
					"scores": {
						"$ref": "#/components/schemas/Scores"
					}
				},
				"required": [
					"scores"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromptsResult": {
				"properties": {
					"id": {
						"type": "string"
					},
					"user_defined_id": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"pretty_name": {
						"type": "string"
					},
					"created_at": {
						"type": "string"
					},
					"major_version": {
						"type": "number",
						"format": "double"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.any_"
					}
				},
				"required": [
					"id",
					"user_defined_id",
					"description",
					"pretty_name",
					"created_at",
					"major_version"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_PromptsResult-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/PromptsResult"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_PromptsResult-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_PromptsResult-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"Partial_PromptToOperators_": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"user_defined_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_FilterLeaf.prompt_v2_": {
				"properties": {
					"prompt_v2": {
						"$ref": "#/components/schemas/Partial_PromptToOperators_"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"FilterLeafSubset_prompt_v2_": {
				"$ref": "#/components/schemas/Pick_FilterLeaf.prompt_v2_"
			},
			"PromptsFilterNode": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/FilterLeafSubset_prompt_v2_"
					},
					{
						"$ref": "#/components/schemas/PromptsFilterBranch"
					},
					{
						"type": "string",
						"enum": [
							"all"
						]
					}
				]
			},
			"PromptsFilterBranch": {
				"properties": {
					"right": {
						"$ref": "#/components/schemas/PromptsFilterNode"
					},
					"operator": {
						"type": "string",
						"enum": [
							"or",
							"and"
						]
					},
					"left": {
						"$ref": "#/components/schemas/PromptsFilterNode"
					}
				},
				"required": [
					"right",
					"operator",
					"left"
				],
				"type": "object"
			},
			"PromptsQueryParams": {
				"properties": {
					"filter": {
						"$ref": "#/components/schemas/PromptsFilterNode"
					}
				},
				"required": [
					"filter"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromptResult": {
				"properties": {
					"id": {
						"type": "string"
					},
					"user_defined_id": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"pretty_name": {
						"type": "string"
					},
					"major_version": {
						"type": "number",
						"format": "double"
					},
					"latest_version_id": {
						"type": "string"
					},
					"latest_model_used": {
						"type": "string"
					},
					"created_at": {
						"type": "string"
					},
					"last_used": {
						"type": "string"
					},
					"versions": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.any_"
					}
				},
				"required": [
					"id",
					"user_defined_id",
					"description",
					"pretty_name",
					"major_version",
					"latest_version_id",
					"latest_model_used",
					"created_at",
					"last_used",
					"versions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_PromptResult_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PromptResult"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_PromptResult.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_PromptResult_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"PromptQueryParams": {
				"properties": {
					"timeFilter": {
						"properties": {
							"end": {
								"type": "string"
							},
							"start": {
								"type": "string"
							}
						},
						"required": [
							"end",
							"start"
						],
						"type": "object"
					}
				},
				"required": [
					"timeFilter"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreatePromptResponse": {
				"properties": {
					"id": {
						"type": "string"
					},
					"prompt_version_id": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"prompt_version_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_CreatePromptResponse_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/CreatePromptResponse"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_CreatePromptResponse.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_CreatePromptResponse_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess__metadata-Record_string.any___": {
				"properties": {
					"data": {
						"properties": {
							"metadata": {
								"$ref": "#/components/schemas/Record_string.any_"
							}
						},
						"required": [
							"metadata"
						],
						"type": "object"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__metadata-Record_string.any__.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__metadata-Record_string.any___"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"PromptEditSubversionLabelParams": {
				"properties": {
					"label": {
						"type": "string"
					}
				},
				"required": [
					"label"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromptEditSubversionTemplateParams": {
				"properties": {
					"heliconeTemplate": {},
					"experimentId": {
						"type": "string"
					}
				},
				"required": [
					"heliconeTemplate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromptCreateSubversionParams": {
				"properties": {
					"newHeliconeTemplate": {},
					"isMajorVersion": {
						"type": "boolean"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.any_"
					},
					"experimentId": {
						"type": "string"
					},
					"bumpForMajorPromptVersionId": {
						"type": "string"
					}
				},
				"required": [
					"newHeliconeTemplate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromptInputRecord": {
				"properties": {
					"id": {
						"type": "string"
					},
					"inputs": {
						"$ref": "#/components/schemas/Record_string.string_"
					},
					"dataset_row_id": {
						"type": "string"
					},
					"source_request": {
						"type": "string"
					},
					"prompt_version": {
						"type": "string"
					},
					"created_at": {
						"type": "string"
					},
					"response_body": {
						"type": "string"
					},
					"request_body": {
						"type": "string"
					},
					"auto_prompt_inputs": {
						"items": {},
						"type": "array"
					}
				},
				"required": [
					"id",
					"inputs",
					"source_request",
					"prompt_version",
					"created_at",
					"auto_prompt_inputs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_PromptInputRecord-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/PromptInputRecord"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_PromptInputRecord-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_PromptInputRecord-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array_": {
				"properties": {
					"data": {
						"items": {
							"properties": {
								"meta": {
									"$ref": "#/components/schemas/Record_string.any_"
								},
								"dataset": {
									"type": "string"
								},
								"num_hypotheses": {
									"type": "number",
									"format": "double"
								},
								"created_at": {
									"type": "string"
								},
								"id": {
									"type": "string"
								}
							},
							"required": [
								"meta",
								"dataset",
								"num_hypotheses",
								"created_at",
								"id"
							],
							"type": "object"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess_PromptVersionResult-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/PromptVersionResult"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_PromptVersionResult-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_PromptVersionResult-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"Partial_PromptVersionsToOperators_": {
				"properties": {
					"minor_version": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"major_version": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"prompt_v2": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_FilterLeaf.prompts_versions_": {
				"properties": {
					"prompts_versions": {
						"$ref": "#/components/schemas/Partial_PromptVersionsToOperators_"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"FilterLeafSubset_prompts_versions_": {
				"$ref": "#/components/schemas/Pick_FilterLeaf.prompts_versions_"
			},
			"PromptVersionsFilterNode": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/FilterLeafSubset_prompts_versions_"
					},
					{
						"$ref": "#/components/schemas/PromptVersionsFilterBranch"
					},
					{
						"type": "string",
						"enum": [
							"all"
						]
					}
				]
			},
			"PromptVersionsFilterBranch": {
				"properties": {
					"right": {
						"$ref": "#/components/schemas/PromptVersionsFilterNode"
					},
					"operator": {
						"type": "string",
						"enum": [
							"or",
							"and"
						]
					},
					"left": {
						"$ref": "#/components/schemas/PromptVersionsFilterNode"
					}
				},
				"required": [
					"right",
					"operator",
					"left"
				],
				"type": "object"
			},
			"PromptVersionsQueryParams": {
				"properties": {
					"filter": {
						"$ref": "#/components/schemas/PromptVersionsFilterNode"
					},
					"includeExperimentVersions": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"PromptVersionResultCompiled": {
				"properties": {
					"id": {
						"type": "string"
					},
					"minor_version": {
						"type": "number",
						"format": "double"
					},
					"major_version": {
						"type": "number",
						"format": "double"
					},
					"prompt_v2": {
						"type": "string"
					},
					"model": {
						"type": "string"
					},
					"prompt_compiled": {}
				},
				"required": [
					"id",
					"minor_version",
					"major_version",
					"prompt_v2",
					"model",
					"prompt_compiled"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_PromptVersionResultCompiled_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PromptVersionResultCompiled"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_PromptVersionResultCompiled.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_PromptVersionResultCompiled_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"PromptVersiosQueryParamsCompiled": {
				"properties": {
					"filter": {
						"$ref": "#/components/schemas/PromptVersionsFilterNode"
					},
					"includeExperimentVersions": {
						"type": "boolean"
					},
					"inputs": {
						"$ref": "#/components/schemas/Record_string.string_"
					}
				},
				"required": [
					"inputs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromptVersionResultFilled": {
				"properties": {
					"id": {
						"type": "string"
					},
					"minor_version": {
						"type": "number",
						"format": "double"
					},
					"major_version": {
						"type": "number",
						"format": "double"
					},
					"prompt_v2": {
						"type": "string"
					},
					"model": {
						"type": "string"
					},
					"filled_helicone_template": {}
				},
				"required": [
					"id",
					"minor_version",
					"major_version",
					"prompt_v2",
					"model",
					"filled_helicone_template"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_PromptVersionResultFilled_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PromptVersionResultFilled"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_PromptVersionResultFilled.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_PromptVersionResultFilled_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"UpgradeToProRequest": {
				"properties": {
					"addons": {
						"properties": {
							"evals": {
								"type": "boolean"
							},
							"experiments": {
								"type": "boolean"
							},
							"prompts": {
								"type": "boolean"
							},
							"alerts": {
								"type": "boolean"
							}
						},
						"type": "object"
					},
					"seats": {
						"type": "number",
						"format": "double"
					},
					"ui_mode": {
						"type": "string",
						"enum": [
							"embedded",
							"hosted"
						]
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UpgradeToTeamBundleRequest": {
				"properties": {
					"ui_mode": {
						"type": "string",
						"enum": [
							"embedded",
							"hosted"
						]
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"LLMUsage": {
				"properties": {
					"model": {
						"type": "string"
					},
					"provider": {
						"type": "string"
					},
					"prompt_tokens": {
						"type": "number",
						"format": "double"
					},
					"completion_tokens": {
						"type": "number",
						"format": "double"
					},
					"total_count": {
						"type": "number",
						"format": "double"
					},
					"amount": {
						"type": "number",
						"format": "double"
					},
					"description": {
						"type": "string"
					},
					"totalCost": {
						"properties": {
							"prompt_token": {
								"type": "number",
								"format": "double"
							},
							"completion_token": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"prompt_token",
							"completion_token"
						],
						"type": "object"
					}
				},
				"required": [
					"model",
					"provider",
					"prompt_tokens",
					"completion_tokens",
					"total_count",
					"amount",
					"description",
					"totalCost"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess__40_Database-at-public_91_Tables_93_-at-organization_91_Row_93_-and-_role-string__41_-Array_": {
				"properties": {
					"data": {
						"items": {
							"allOf": [
								{
									"properties": {
										"tier": {
											"type": "string",
											"nullable": true
										},
										"subscription_status": {
											"type": "string",
											"nullable": true
										},
										"stripe_subscription_item_id": {
											"type": "string",
											"nullable": true
										},
										"stripe_subscription_id": {
											"type": "string",
											"nullable": true
										},
										"stripe_metadata": {
											"$ref": "#/components/schemas/Json"
										},
										"stripe_customer_id": {
											"type": "string",
											"nullable": true
										},
										"soft_delete": {
											"type": "boolean"
										},
										"size": {
											"type": "string",
											"nullable": true
										},
										"reseller_id": {
											"type": "string",
											"nullable": true
										},
										"request_limit": {
											"type": "number",
											"format": "double",
											"nullable": true
										},
										"referral": {
											"type": "string",
											"nullable": true
										},
										"percent_to_log": {
											"type": "number",
											"format": "double",
											"nullable": true
										},
										"owner": {
											"type": "string"
										},
										"organization_type": {
											"type": "string"
										},
										"org_provider_key": {
											"type": "string",
											"nullable": true
										},
										"onboarding_status": {
											"$ref": "#/components/schemas/Json"
										},
										"name": {
											"type": "string"
										},
										"logo_path": {
											"type": "string",
											"nullable": true
										},
										"limits": {
											"allOf": [
												{
													"$ref": "#/components/schemas/Json"
												}
											],
											"nullable": true
										},
										"is_personal": {
											"type": "boolean"
										},
										"is_main_org": {
											"type": "boolean"
										},
										"id": {
											"type": "string"
										},
										"icon": {
											"type": "string"
										},
										"has_onboarded": {
											"type": "boolean"
										},
										"governance_settings": {
											"allOf": [
												{
													"$ref": "#/components/schemas/Json"
												}
											],
											"nullable": true
										},
										"domain": {
											"type": "string",
											"nullable": true
										},
										"created_at": {
											"type": "string",
											"nullable": true
										},
										"color": {
											"type": "string"
										}
									},
									"required": [
										"tier",
										"subscription_status",
										"stripe_subscription_item_id",
										"stripe_subscription_id",
										"stripe_metadata",
										"stripe_customer_id",
										"soft_delete",
										"size",
										"reseller_id",
										"request_limit",
										"referral",
										"percent_to_log",
										"owner",
										"organization_type",
										"org_provider_key",
										"onboarding_status",
										"name",
										"logo_path",
										"limits",
										"is_personal",
										"is_main_org",
										"id",
										"icon",
										"has_onboarded",
										"governance_settings",
										"domain",
										"created_at",
										"color"
									],
									"type": "object"
								},
								{
									"properties": {
										"role": {
											"type": "string"
										}
									},
									"required": [
										"role"
									],
									"type": "object"
								}
							]
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__40_Database-at-public_91_Tables_93_-at-organization_91_Row_93_-and-_role-string__41_-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__40_Database-at-public_91_Tables_93_-at-organization_91_Row_93_-and-_role-string__41_-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess_Database-at-public_91_Tables_93_-at-organization_91_Row_93__": {
				"properties": {
					"data": {
						"properties": {
							"tier": {
								"type": "string",
								"nullable": true
							},
							"subscription_status": {
								"type": "string",
								"nullable": true
							},
							"stripe_subscription_item_id": {
								"type": "string",
								"nullable": true
							},
							"stripe_subscription_id": {
								"type": "string",
								"nullable": true
							},
							"stripe_metadata": {
								"$ref": "#/components/schemas/Json"
							},
							"stripe_customer_id": {
								"type": "string",
								"nullable": true
							},
							"soft_delete": {
								"type": "boolean"
							},
							"size": {
								"type": "string",
								"nullable": true
							},
							"reseller_id": {
								"type": "string",
								"nullable": true
							},
							"request_limit": {
								"type": "number",
								"format": "double",
								"nullable": true
							},
							"referral": {
								"type": "string",
								"nullable": true
							},
							"percent_to_log": {
								"type": "number",
								"format": "double",
								"nullable": true
							},
							"owner": {
								"type": "string"
							},
							"organization_type": {
								"type": "string"
							},
							"org_provider_key": {
								"type": "string",
								"nullable": true
							},
							"onboarding_status": {
								"$ref": "#/components/schemas/Json"
							},
							"name": {
								"type": "string"
							},
							"logo_path": {
								"type": "string",
								"nullable": true
							},
							"limits": {
								"allOf": [
									{
										"$ref": "#/components/schemas/Json"
									}
								],
								"nullable": true
							},
							"is_personal": {
								"type": "boolean"
							},
							"is_main_org": {
								"type": "boolean"
							},
							"id": {
								"type": "string"
							},
							"icon": {
								"type": "string"
							},
							"has_onboarded": {
								"type": "boolean"
							},
							"governance_settings": {
								"allOf": [
									{
										"$ref": "#/components/schemas/Json"
									}
								],
								"nullable": true
							},
							"domain": {
								"type": "string",
								"nullable": true
							},
							"created_at": {
								"type": "string",
								"nullable": true
							},
							"color": {
								"type": "string"
							}
						},
						"required": [
							"tier",
							"subscription_status",
							"stripe_subscription_item_id",
							"stripe_subscription_id",
							"stripe_metadata",
							"stripe_customer_id",
							"soft_delete",
							"size",
							"reseller_id",
							"request_limit",
							"referral",
							"percent_to_log",
							"owner",
							"organization_type",
							"org_provider_key",
							"onboarding_status",
							"name",
							"logo_path",
							"limits",
							"is_personal",
							"is_main_org",
							"id",
							"icon",
							"has_onboarded",
							"governance_settings",
							"domain",
							"created_at",
							"color"
						],
						"type": "object"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_Database-at-public_91_Tables_93_-at-organization_91_Row_93_.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_Database-at-public_91_Tables_93_-at-organization_91_Row_93__"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array_": {
				"properties": {
					"data": {
						"items": {
							"properties": {
								"tier": {
									"type": "string"
								},
								"subscription_status": {
									"type": "string"
								},
								"stripe_subscription_item_id": {
									"type": "string"
								},
								"stripe_subscription_id": {
									"type": "string"
								},
								"stripe_metadata": {
									"$ref": "#/components/schemas/Json"
								},
								"stripe_customer_id": {
									"type": "string"
								},
								"soft_delete": {
									"type": "boolean"
								},
								"size": {
									"type": "string"
								},
								"reseller_id": {
									"type": "string"
								},
								"request_limit": {
									"type": "number",
									"format": "double"
								},
								"referral": {
									"type": "string"
								},
								"percent_to_log": {
									"type": "number",
									"format": "double"
								},
								"owner": {
									"type": "string"
								},
								"organization_type": {
									"type": "string"
								},
								"org_provider_key": {
									"type": "string"
								},
								"onboarding_status": {
									"$ref": "#/components/schemas/Json"
								},
								"name": {
									"type": "string"
								},
								"logo_path": {
									"type": "string"
								},
								"limits": {
									"$ref": "#/components/schemas/Json"
								},
								"is_personal": {
									"type": "boolean"
								},
								"is_main_org": {
									"type": "boolean"
								},
								"id": {
									"type": "string"
								},
								"icon": {
									"type": "string"
								},
								"has_onboarded": {
									"type": "boolean"
								},
								"governance_settings": {
									"$ref": "#/components/schemas/Json"
								},
								"domain": {
									"type": "string"
								},
								"created_at": {
									"type": "string"
								},
								"color": {
									"type": "string"
								}
							},
							"required": [
								"tier",
								"subscription_status",
								"stripe_subscription_item_id",
								"stripe_subscription_id",
								"stripe_metadata",
								"stripe_customer_id",
								"soft_delete",
								"size",
								"reseller_id",
								"request_limit",
								"referral",
								"percent_to_log",
								"owner",
								"organization_type",
								"org_provider_key",
								"onboarding_status",
								"name",
								"logo_path",
								"limits",
								"is_personal",
								"is_main_org",
								"id",
								"icon",
								"has_onboarded",
								"governance_settings",
								"domain",
								"created_at",
								"color"
							],
							"type": "object"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess_Result__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array.string__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/Result__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array.string_"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultError_unknown_": {
				"properties": {
					"data": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"error": {}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_Result__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array.string_.unknown_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_Result__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array.string__"
					},
					{
						"$ref": "#/components/schemas/ResultError_unknown_"
					}
				]
			},
			"NewOrganizationParams": {
				"properties": {
					"tier": {
						"type": "string",
						"nullable": true
					},
					"subscription_status": {
						"type": "string",
						"nullable": true
					},
					"stripe_subscription_item_id": {
						"type": "string",
						"nullable": true
					},
					"stripe_subscription_id": {
						"type": "string",
						"nullable": true
					},
					"stripe_metadata": {
						"$ref": "#/components/schemas/Json"
					},
					"stripe_customer_id": {
						"type": "string",
						"nullable": true
					},
					"soft_delete": {
						"type": "boolean"
					},
					"size": {
						"type": "string",
						"nullable": true
					},
					"reseller_id": {
						"type": "string",
						"nullable": true
					},
					"request_limit": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"referral": {
						"type": "string",
						"nullable": true
					},
					"percent_to_log": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"owner": {
						"type": "string"
					},
					"organization_type": {
						"type": "string"
					},
					"org_provider_key": {
						"type": "string",
						"nullable": true
					},
					"onboarding_status": {
						"$ref": "#/components/schemas/Json"
					},
					"name": {
						"type": "string"
					},
					"logo_path": {
						"type": "string",
						"nullable": true
					},
					"limits": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Json"
							}
						],
						"nullable": true
					},
					"is_personal": {
						"type": "boolean"
					},
					"is_main_org": {
						"type": "boolean"
					},
					"id": {
						"type": "string"
					},
					"icon": {
						"type": "string"
					},
					"has_onboarded": {
						"type": "boolean"
					},
					"governance_settings": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Json"
							}
						],
						"nullable": true
					},
					"domain": {
						"type": "string",
						"nullable": true
					},
					"created_at": {
						"type": "string",
						"nullable": true
					},
					"color": {
						"type": "string"
					}
				},
				"required": [
					"owner",
					"name"
				],
				"type": "object"
			},
			"Pick_NewOrganizationParams.name-or-color-or-icon-or-org_provider_key-or-limits-or-reseller_id-or-organization_type-or-onboarding_status_": {
				"properties": {
					"name": {
						"type": "string"
					},
					"color": {
						"type": "string"
					},
					"icon": {
						"type": "string"
					},
					"org_provider_key": {
						"type": "string"
					},
					"limits": {
						"$ref": "#/components/schemas/Json"
					},
					"reseller_id": {
						"type": "string"
					},
					"organization_type": {
						"type": "string"
					},
					"onboarding_status": {
						"$ref": "#/components/schemas/Json"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"UpdateOrganizationParams": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Pick_NewOrganizationParams.name-or-color-or-icon-or-org_provider_key-or-limits-or-reseller_id-or-organization_type-or-onboarding_status_"
					},
					{
						"properties": {
							"variant": {
								"type": "string"
							}
						},
						"type": "object"
					}
				]
			},
			"UIFilterRowTree": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/UIFilterRowNode"
					},
					{
						"$ref": "#/components/schemas/FilterRow"
					}
				]
			},
			"UIFilterRowNode": {
				"properties": {
					"operator": {
						"type": "string",
						"enum": [
							"and",
							"or"
						]
					},
					"rows": {
						"items": {
							"$ref": "#/components/schemas/UIFilterRowTree"
						},
						"type": "array"
					}
				},
				"required": [
					"operator",
					"rows"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FilterRow": {
				"properties": {
					"value": {
						"type": "string"
					},
					"operatorIdx": {
						"type": "number",
						"format": "double"
					},
					"filterMapIdx": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"value",
					"operatorIdx",
					"filterMapIdx"
				],
				"type": "object"
			},
			"OrganizationFilter": {
				"properties": {
					"softDelete": {
						"type": "boolean"
					},
					"createdAt": {
						"type": "string"
					},
					"filter": {
						"items": {
							"$ref": "#/components/schemas/UIFilterRowTree"
						},
						"type": "array"
					},
					"name": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"softDelete",
					"filter",
					"name",
					"id"
				],
				"type": "object"
			},
			"OrganizationLayout": {
				"properties": {
					"filters": {
						"items": {
							"$ref": "#/components/schemas/OrganizationFilter"
						},
						"type": "array"
					},
					"type": {
						"type": "string"
					},
					"organization_id": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"filters",
					"type",
					"organization_id",
					"id"
				],
				"type": "object"
			},
			"ResultSuccess_OrganizationLayout_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/OrganizationLayout"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_OrganizationLayout.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_OrganizationLayout_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"OrganizationMember": {
				"properties": {
					"org_role": {
						"type": "string"
					},
					"member": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				},
				"required": [
					"org_role",
					"member",
					"email"
				],
				"type": "object"
			},
			"ResultSuccess_OrganizationMember-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/OrganizationMember"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_OrganizationMember-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_OrganizationMember-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"OrganizationOwner": {
				"properties": {
					"tier": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				},
				"required": [
					"tier",
					"email"
				],
				"type": "object"
			},
			"ResultSuccess_OrganizationOwner-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/OrganizationOwner"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_OrganizationOwner-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_OrganizationOwner-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"Partial__currentStep-string--selectedTier-string--hasOnboarded-boolean--members-any-Array--addons_58__prompts-boolean--experiments-boolean--evals-boolean___": {
				"properties": {
					"currentStep": {
						"type": "string"
					},
					"selectedTier": {
						"type": "string"
					},
					"hasOnboarded": {
						"type": "boolean"
					},
					"members": {
						"items": {},
						"type": "array"
					},
					"addons": {
						"properties": {
							"evals": {
								"type": "boolean"
							},
							"experiments": {
								"type": "boolean"
							},
							"prompts": {
								"type": "boolean"
							}
						},
						"required": [
							"evals",
							"experiments",
							"prompts"
						],
						"type": "object"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"OnboardingStatus": {
				"$ref": "#/components/schemas/Partial__currentStep-string--selectedTier-string--hasOnboarded-boolean--members-any-Array--addons_58__prompts-boolean--experiments-boolean--evals-boolean___"
			},
			"HeliconeMeta": {
				"properties": {
					"heliconeManualAccessKey": {
						"type": "string"
					},
					"lytixHost": {
						"type": "string"
					},
					"lytixKey": {
						"type": "string"
					},
					"posthogHost": {
						"type": "string"
					},
					"posthogApiKey": {
						"type": "string"
					},
					"webhookEnabled": {
						"type": "boolean"
					},
					"omitResponseLog": {
						"type": "boolean"
					},
					"omitRequestLog": {
						"type": "boolean"
					},
					"modelOverride": {
						"type": "string"
					}
				},
				"required": [
					"webhookEnabled",
					"omitResponseLog",
					"omitRequestLog"
				],
				"type": "object"
			},
			"TemplateWithInputs": {
				"description": "Parses a string containing custom JSX-like tags and extracts information to produce two outputs:\n1. A version of the string with all JSX tags removed, leaving only the text content.\n2. An object representing a template with self-closing JSX tags and a separate mapping of keys to their\n   corresponding text content.\n\nThe function specifically targets `<helicone-prompt-input>` tags, which include a `key` attribute and enclosed text content.\nThese tags are transformed or removed based on the desired output structure. The process involves regular expressions\nto match and manipulate the input string to produce the outputs.\n\nParameters:\n- input: A string containing the text and JSX-like tags to be parsed.\n\nReturns:\nAn object with two properties:\n1. stringWithoutJSXTags: A string where all `<helicone-prompt-input>` tags are removed, and only their text content remains.\n2. templateWithInputs: An object containing:\n   - template: A version of the input string where `<helicone-prompt-input>` tags are replaced with self-closing versions,\n     preserving the `key` attributes but removing the text content.\n   - inputs: An object mapping the `key` attributes to their corresponding text content, effectively extracting\n     the data from the original tags.\n\nExample Usage:\n```ts\nconst input = `\nThe scene is <helicone-prompt-input key=\"scene\" >Harry Potter</helicone-prompt-input>.\n<helicone-prompt-input key=\"name\" >justin</helicone-prompt-input>  test`;\n\nconst expectedOutput = parseJSXString(input);\nconsole.log(expectedOutput);\n```\nThe function is useful for preprocessing strings with embedded custom JSX-like tags, extracting useful data,\nand preparing templates for further processing or rendering. It demonstrates a practical application of regular\nexpressions for text manipulation in TypeScript, specifically tailored to a custom JSX-like syntax.",
				"properties": {
					"template": {
						"additionalProperties": false,
						"type": "object"
					},
					"inputs": {
						"properties": {},
						"additionalProperties": {
							"type": "string"
						},
						"type": "object"
					},
					"autoInputs": {
						"items": {},
						"type": "array"
					}
				},
				"required": [
					"template",
					"inputs",
					"autoInputs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Log": {
				"properties": {
					"response": {
						"properties": {
							"delayMs": {
								"type": "number",
								"format": "double"
							},
							"responseCreatedAt": {
								"type": "string",
								"format": "date-time"
							},
							"timeToFirstToken": {
								"type": "number",
								"format": "double"
							},
							"bodySize": {
								"type": "number",
								"format": "double"
							},
							"status": {
								"type": "number",
								"format": "double"
							},
							"id": {
								"type": "string"
							}
						},
						"required": [
							"delayMs",
							"responseCreatedAt",
							"bodySize",
							"status",
							"id"
						],
						"type": "object"
					},
					"request": {
						"properties": {
							"experimentRowIndex": {
								"type": "string"
							},
							"experimentColumnId": {
								"type": "string"
							},
							"heliconeTemplate": {
								"$ref": "#/components/schemas/TemplateWithInputs"
							},
							"isStream": {
								"type": "boolean"
							},
							"requestCreatedAt": {
								"type": "string",
								"format": "date-time"
							},
							"countryCode": {
								"type": "string"
							},
							"threat": {
								"type": "boolean"
							},
							"path": {
								"type": "string"
							},
							"bodySize": {
								"type": "number",
								"format": "double"
							},
							"provider": {
								"$ref": "#/components/schemas/Provider"
							},
							"targetUrl": {
								"type": "string"
							},
							"heliconeProxyKeyId": {
								"type": "string"
							},
							"heliconeApiKeyId": {
								"type": "number",
								"format": "double"
							},
							"properties": {
								"$ref": "#/components/schemas/Record_string.string_"
							},
							"promptVersion": {
								"type": "string"
							},
							"promptId": {
								"type": "string"
							},
							"userId": {
								"type": "string"
							},
							"id": {
								"type": "string"
							}
						},
						"required": [
							"isStream",
							"requestCreatedAt",
							"path",
							"bodySize",
							"provider",
							"targetUrl",
							"properties",
							"userId",
							"id"
						],
						"type": "object"
					}
				},
				"required": [
					"response",
					"request"
				],
				"type": "object"
			},
			"KafkaMessageContents": {
				"properties": {
					"log": {
						"$ref": "#/components/schemas/Log"
					},
					"heliconeMeta": {
						"$ref": "#/components/schemas/HeliconeMeta"
					},
					"authorization": {
						"type": "string"
					}
				},
				"required": [
					"log",
					"heliconeMeta",
					"authorization"
				],
				"type": "object"
			},
			"ResultSuccess_any_": {
				"properties": {
					"data": {},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_unknown_": {
				"properties": {
					"data": {},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KeyPermissions": {
				"type": "string",
				"enum": [
					"w",
					"rw"
				]
			},
			"GenerateHashQueryParams": {
				"properties": {
					"apiKey": {
						"type": "string"
					},
					"governance": {
						"type": "boolean"
					},
					"keyName": {
						"type": "string"
					},
					"permissions": {
						"$ref": "#/components/schemas/KeyPermissions"
					}
				},
				"required": [
					"apiKey",
					"governance",
					"keyName",
					"permissions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FineTuneResult": {
				"anyOf": [
					{
						"properties": {
							"error": {
								"type": "string"
							}
						},
						"required": [
							"error"
						],
						"type": "object"
					},
					{
						"properties": {
							"data": {
								"properties": {
									"url": {
										"type": "string"
									},
									"fineTuneJob": {
										"type": "string"
									}
								},
								"required": [
									"url",
									"fineTuneJob"
								],
								"type": "object"
							},
							"success": {
								"type": "boolean"
							}
						},
						"required": [
							"data",
							"success"
						],
						"type": "object"
					}
				]
			},
			"FineTuneBodyParams": {
				"properties": {
					"providerKeyId": {
						"type": "string"
					}
				},
				"required": [
					"providerKeyId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FineTuneBody": {
				"properties": {
					"providerKeyId": {
						"type": "string"
					}
				},
				"required": [
					"providerKeyId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"StoreFilterType": {
				"properties": {
					"createdAt": {
						"type": "string"
					},
					"filter": {},
					"name": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"filter",
					"name"
				],
				"type": "object"
			},
			"ResultSuccess_StoreFilterType-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/StoreFilterType"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_StoreFilterType-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_StoreFilterType-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess_StoreFilterType_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/StoreFilterType"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_StoreFilterType.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_StoreFilterType_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess__id-string__": {
				"properties": {
					"data": {
						"properties": {
							"id": {
								"type": "string"
							}
						},
						"required": [
							"id"
						],
						"type": "object"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__id-string_.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__id-string__"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ChatCompletionTokenLogprob.TopLogprob": {
				"properties": {
					"token": {
						"type": "string",
						"description": "The token."
					},
					"bytes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"nullable": true,
						"description": "A list of integers representing the UTF-8 bytes representation of the token.\nUseful in instances where characters are represented by multiple tokens and\ntheir byte representations must be combined to generate the correct text\nrepresentation. Can be `null` if there is no bytes representation for the token."
					},
					"logprob": {
						"type": "number",
						"format": "double",
						"description": "The log probability of this token, if it is within the top 20 most likely\ntokens. Otherwise, the value `-9999.0` is used to signify that the token is very\nunlikely."
					}
				},
				"required": [
					"token",
					"bytes",
					"logprob"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionTokenLogprob": {
				"properties": {
					"token": {
						"type": "string",
						"description": "The token."
					},
					"bytes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"nullable": true,
						"description": "A list of integers representing the UTF-8 bytes representation of the token.\nUseful in instances where characters are represented by multiple tokens and\ntheir byte representations must be combined to generate the correct text\nrepresentation. Can be `null` if there is no bytes representation for the token."
					},
					"logprob": {
						"type": "number",
						"format": "double",
						"description": "The log probability of this token, if it is within the top 20 most likely\ntokens. Otherwise, the value `-9999.0` is used to signify that the token is very\nunlikely."
					},
					"top_logprobs": {
						"items": {
							"$ref": "#/components/schemas/ChatCompletionTokenLogprob.TopLogprob"
						},
						"type": "array",
						"description": "List of the most likely tokens and their log probability, at this token\nposition. In rare cases, there may be fewer than the number of requested\n`top_logprobs` returned."
					}
				},
				"required": [
					"token",
					"bytes",
					"logprob",
					"top_logprobs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletion.Choice.Logprobs": {
				"description": "Log probability information for the choice.",
				"properties": {
					"content": {
						"items": {
							"$ref": "#/components/schemas/ChatCompletionTokenLogprob"
						},
						"type": "array",
						"nullable": true,
						"description": "A list of message content tokens with log probability information."
					},
					"refusal": {
						"items": {
							"$ref": "#/components/schemas/ChatCompletionTokenLogprob"
						},
						"type": "array",
						"nullable": true,
						"description": "A list of message refusal tokens with log probability information."
					}
				},
				"required": [
					"content",
					"refusal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionAudio": {
				"description": "If the audio output modality is requested, this object contains data about the\naudio response from the model.\n[Learn more](https://platform.openai.com/docs/guides/audio).",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for this audio response."
					},
					"data": {
						"type": "string",
						"description": "Base64 encoded audio bytes generated by the model, in the format specified in\nthe request."
					},
					"expires_at": {
						"type": "number",
						"format": "double",
						"description": "The Unix timestamp (in seconds) for when this audio response will no longer be\naccessible on the server for use in multi-turn conversations."
					},
					"transcript": {
						"type": "string",
						"description": "Transcript of the audio generated by the model."
					}
				},
				"required": [
					"id",
					"data",
					"expires_at",
					"transcript"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionMessage.FunctionCall": {
				"properties": {
					"arguments": {
						"type": "string",
						"description": "The arguments to call the function with, as generated by the model in JSON\nformat. Note that the model does not always generate valid JSON, and may\nhallucinate parameters not defined by your function schema. Validate the\narguments in your code before calling your function."
					},
					"name": {
						"type": "string",
						"description": "The name of the function to call."
					}
				},
				"required": [
					"arguments",
					"name"
				],
				"type": "object",
				"additionalProperties": false,
				"deprecated": true
			},
			"ChatCompletionMessageToolCall.Function": {
				"description": "The function that the model called.",
				"properties": {
					"arguments": {
						"type": "string",
						"description": "The arguments to call the function with, as generated by the model in JSON\nformat. Note that the model does not always generate valid JSON, and may\nhallucinate parameters not defined by your function schema. Validate the\narguments in your code before calling your function."
					},
					"name": {
						"type": "string",
						"description": "The name of the function to call."
					}
				},
				"required": [
					"arguments",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionMessageToolCall": {
				"properties": {
					"id": {
						"type": "string",
						"description": "The ID of the tool call."
					},
					"function": {
						"$ref": "#/components/schemas/ChatCompletionMessageToolCall.Function",
						"description": "The function that the model called."
					},
					"type": {
						"type": "string",
						"enum": [
							"function"
						],
						"nullable": false,
						"description": "The type of the tool. Currently, only `function` is supported."
					}
				},
				"required": [
					"id",
					"function",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionMessage": {
				"description": "A chat completion message generated by the model.",
				"properties": {
					"content": {
						"type": "string",
						"nullable": true,
						"description": "The contents of the message."
					},
					"refusal": {
						"type": "string",
						"nullable": true,
						"description": "The refusal message generated by the model."
					},
					"role": {
						"type": "string",
						"enum": [
							"assistant"
						],
						"nullable": false,
						"description": "The role of the author of this message."
					},
					"audio": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ChatCompletionAudio"
							}
						],
						"nullable": true,
						"description": "If the audio output modality is requested, this object contains data about the\naudio response from the model.\n[Learn more](https://platform.openai.com/docs/guides/audio)."
					},
					"function_call": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ChatCompletionMessage.FunctionCall"
							}
						],
						"nullable": true,
						"deprecated": true
					},
					"tool_calls": {
						"items": {
							"$ref": "#/components/schemas/ChatCompletionMessageToolCall"
						},
						"type": "array",
						"description": "The tool calls generated by the model, such as function calls."
					}
				},
				"required": [
					"content",
					"refusal",
					"role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletion.Choice": {
				"properties": {
					"finish_reason": {
						"type": "string",
						"enum": [
							"stop",
							"length",
							"tool_calls",
							"content_filter",
							"function_call"
						],
						"description": "The reason the model stopped generating tokens. This will be `stop` if the model\nhit a natural stop point or a provided stop sequence, `length` if the maximum\nnumber of tokens specified in the request was reached, `content_filter` if\ncontent was omitted due to a flag from our content filters, `tool_calls` if the\nmodel called a tool, or `function_call` (deprecated) if the model called a\nfunction."
					},
					"index": {
						"type": "number",
						"format": "double",
						"description": "The index of the choice in the list of choices."
					},
					"logprobs": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ChatCompletion.Choice.Logprobs"
							}
						],
						"nullable": true,
						"description": "Log probability information for the choice."
					},
					"message": {
						"$ref": "#/components/schemas/ChatCompletionMessage",
						"description": "A chat completion message generated by the model."
					}
				},
				"required": [
					"finish_reason",
					"index",
					"logprobs",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CompletionUsage.CompletionTokensDetails": {
				"description": "Breakdown of tokens used in a completion.",
				"properties": {
					"audio_tokens": {
						"type": "number",
						"format": "double",
						"description": "Audio input tokens generated by the model."
					},
					"reasoning_tokens": {
						"type": "number",
						"format": "double",
						"description": "Tokens generated by the model for reasoning."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CompletionUsage.PromptTokensDetails": {
				"description": "Breakdown of tokens used in the prompt.",
				"properties": {
					"audio_tokens": {
						"type": "number",
						"format": "double",
						"description": "Audio input tokens present in the prompt."
					},
					"cached_tokens": {
						"type": "number",
						"format": "double",
						"description": "Cached tokens present in the prompt."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CompletionUsage": {
				"description": "Usage statistics for the completion request.",
				"properties": {
					"completion_tokens": {
						"type": "number",
						"format": "double",
						"description": "Number of tokens in the generated completion."
					},
					"prompt_tokens": {
						"type": "number",
						"format": "double",
						"description": "Number of tokens in the prompt."
					},
					"total_tokens": {
						"type": "number",
						"format": "double",
						"description": "Total number of tokens used in the request (prompt + completion)."
					},
					"completion_tokens_details": {
						"$ref": "#/components/schemas/CompletionUsage.CompletionTokensDetails",
						"description": "Breakdown of tokens used in a completion."
					},
					"prompt_tokens_details": {
						"$ref": "#/components/schemas/CompletionUsage.PromptTokensDetails",
						"description": "Breakdown of tokens used in the prompt."
					}
				},
				"required": [
					"completion_tokens",
					"prompt_tokens",
					"total_tokens"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletion": {
				"description": "Represents a chat completion response returned by model, based on the provided\ninput.",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier for the chat completion."
					},
					"choices": {
						"items": {
							"$ref": "#/components/schemas/ChatCompletion.Choice"
						},
						"type": "array",
						"description": "A list of chat completion choices. Can be more than one if `n` is greater\nthan 1."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "The Unix timestamp (in seconds) of when the chat completion was created."
					},
					"model": {
						"type": "string",
						"description": "The model used for the chat completion."
					},
					"object": {
						"type": "string",
						"enum": [
							"chat.completion"
						],
						"nullable": false,
						"description": "The object type, which is always `chat.completion`."
					},
					"service_tier": {
						"type": "string",
						"enum": [
							"scale",
							"default",
							null
						],
						"nullable": true,
						"description": "The service tier used for processing the request. This field is only included if\nthe `service_tier` parameter is specified in the request."
					},
					"system_fingerprint": {
						"type": "string",
						"description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when\nbackend changes have been made that might impact determinism."
					},
					"usage": {
						"$ref": "#/components/schemas/CompletionUsage",
						"description": "Usage statistics for the completion request."
					}
				},
				"required": [
					"id",
					"choices",
					"created",
					"model",
					"object"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_ChatCompletion_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChatCompletion"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_ChatCompletion.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_ChatCompletion_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ChatCompletionContentPartText": {
				"description": "Learn about\n[text inputs](https://platform.openai.com/docs/guides/text-generation).",
				"properties": {
					"text": {
						"type": "string",
						"description": "The text content."
					},
					"type": {
						"type": "string",
						"enum": [
							"text"
						],
						"nullable": false,
						"description": "The type of the content part."
					}
				},
				"required": [
					"text",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionSystemMessageParam": {
				"properties": {
					"content": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ChatCompletionContentPartText"
								},
								"type": "array"
							}
						],
						"description": "The contents of the system message."
					},
					"role": {
						"type": "string",
						"enum": [
							"system"
						],
						"nullable": false,
						"description": "The role of the messages author, in this case `system`."
					},
					"name": {
						"type": "string",
						"description": "An optional name for the participant. Provides the model information to\ndifferentiate between participants of the same role."
					}
				},
				"required": [
					"content",
					"role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionContentPartImage.ImageURL": {
				"properties": {
					"url": {
						"type": "string",
						"description": "Either a URL of the image or the base64 encoded image data."
					},
					"detail": {
						"type": "string",
						"enum": [
							"auto",
							"low",
							"high"
						],
						"description": "Specifies the detail level of the image. Learn more in the\n[Vision guide](https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding)."
					}
				},
				"required": [
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionContentPartImage": {
				"description": "Learn about [image inputs](https://platform.openai.com/docs/guides/vision).",
				"properties": {
					"image_url": {
						"$ref": "#/components/schemas/ChatCompletionContentPartImage.ImageURL"
					},
					"type": {
						"type": "string",
						"enum": [
							"image_url"
						],
						"nullable": false,
						"description": "The type of the content part."
					}
				},
				"required": [
					"image_url",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionContentPartInputAudio.InputAudio": {
				"properties": {
					"data": {
						"type": "string",
						"description": "Base64 encoded audio data."
					},
					"format": {
						"type": "string",
						"enum": [
							"wav",
							"mp3"
						],
						"description": "The format of the encoded audio data. Currently supports \"wav\" and \"mp3\"."
					}
				},
				"required": [
					"data",
					"format"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionContentPartInputAudio": {
				"description": "Learn about [audio inputs](https://platform.openai.com/docs/guides/audio).",
				"properties": {
					"input_audio": {
						"$ref": "#/components/schemas/ChatCompletionContentPartInputAudio.InputAudio"
					},
					"type": {
						"type": "string",
						"enum": [
							"input_audio"
						],
						"nullable": false,
						"description": "The type of the content part. Always `input_audio`."
					}
				},
				"required": [
					"input_audio",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionContentPart": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ChatCompletionContentPartText"
					},
					{
						"$ref": "#/components/schemas/ChatCompletionContentPartImage"
					},
					{
						"$ref": "#/components/schemas/ChatCompletionContentPartInputAudio"
					}
				],
				"description": "Learn about\n[text inputs](https://platform.openai.com/docs/guides/text-generation)."
			},
			"ChatCompletionUserMessageParam": {
				"properties": {
					"content": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ChatCompletionContentPart"
								},
								"type": "array"
							}
						],
						"description": "The contents of the user message."
					},
					"role": {
						"type": "string",
						"enum": [
							"user"
						],
						"nullable": false,
						"description": "The role of the messages author, in this case `user`."
					},
					"name": {
						"type": "string",
						"description": "An optional name for the participant. Provides the model information to\ndifferentiate between participants of the same role."
					}
				},
				"required": [
					"content",
					"role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionAssistantMessageParam.Audio": {
				"description": "Data about a previous audio response from the model.\n[Learn more](https://platform.openai.com/docs/guides/audio).",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for a previous audio response from the model."
					}
				},
				"required": [
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionContentPartRefusal": {
				"properties": {
					"refusal": {
						"type": "string",
						"description": "The refusal message generated by the model."
					},
					"type": {
						"type": "string",
						"enum": [
							"refusal"
						],
						"nullable": false,
						"description": "The type of the content part."
					}
				},
				"required": [
					"refusal",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionAssistantMessageParam.FunctionCall": {
				"properties": {
					"arguments": {
						"type": "string",
						"description": "The arguments to call the function with, as generated by the model in JSON\nformat. Note that the model does not always generate valid JSON, and may\nhallucinate parameters not defined by your function schema. Validate the\narguments in your code before calling your function."
					},
					"name": {
						"type": "string",
						"description": "The name of the function to call."
					}
				},
				"required": [
					"arguments",
					"name"
				],
				"type": "object",
				"additionalProperties": false,
				"deprecated": true
			},
			"ChatCompletionAssistantMessageParam": {
				"properties": {
					"role": {
						"type": "string",
						"enum": [
							"assistant"
						],
						"nullable": false,
						"description": "The role of the messages author, in this case `assistant`."
					},
					"audio": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ChatCompletionAssistantMessageParam.Audio"
							}
						],
						"nullable": true,
						"description": "Data about a previous audio response from the model.\n[Learn more](https://platform.openai.com/docs/guides/audio)."
					},
					"content": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"items": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ChatCompletionContentPartText"
										},
										{
											"$ref": "#/components/schemas/ChatCompletionContentPartRefusal"
										}
									]
								},
								"type": "array"
							}
						],
						"nullable": true,
						"description": "The contents of the assistant message. Required unless `tool_calls` or\n`function_call` is specified."
					},
					"function_call": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ChatCompletionAssistantMessageParam.FunctionCall"
							}
						],
						"nullable": true,
						"deprecated": true
					},
					"name": {
						"type": "string",
						"description": "An optional name for the participant. Provides the model information to\ndifferentiate between participants of the same role."
					},
					"refusal": {
						"type": "string",
						"nullable": true,
						"description": "The refusal message by the assistant."
					},
					"tool_calls": {
						"items": {
							"$ref": "#/components/schemas/ChatCompletionMessageToolCall"
						},
						"type": "array",
						"description": "The tool calls generated by the model, such as function calls."
					}
				},
				"required": [
					"role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionToolMessageParam": {
				"properties": {
					"content": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ChatCompletionContentPartText"
								},
								"type": "array"
							}
						],
						"description": "The contents of the tool message."
					},
					"role": {
						"type": "string",
						"enum": [
							"tool"
						],
						"nullable": false,
						"description": "The role of the messages author, in this case `tool`."
					},
					"tool_call_id": {
						"type": "string",
						"description": "Tool call that this message is responding to."
					}
				},
				"required": [
					"content",
					"role",
					"tool_call_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionFunctionMessageParam": {
				"properties": {
					"content": {
						"type": "string",
						"nullable": true,
						"description": "The contents of the function message."
					},
					"name": {
						"type": "string",
						"description": "The name of the function to call."
					},
					"role": {
						"type": "string",
						"enum": [
							"function"
						],
						"nullable": false,
						"description": "The role of the messages author, in this case `function`."
					}
				},
				"required": [
					"content",
					"name",
					"role"
				],
				"type": "object",
				"additionalProperties": false,
				"deprecated": true
			},
			"ChatCompletionMessageParam": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ChatCompletionSystemMessageParam"
					},
					{
						"$ref": "#/components/schemas/ChatCompletionUserMessageParam"
					},
					{
						"$ref": "#/components/schemas/ChatCompletionAssistantMessageParam"
					},
					{
						"$ref": "#/components/schemas/ChatCompletionToolMessageParam"
					},
					{
						"$ref": "#/components/schemas/ChatCompletionFunctionMessageParam"
					}
				]
			},
			"Record_string.unknown_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"FunctionParameters": {
				"$ref": "#/components/schemas/Record_string.unknown_",
				"description": "The parameters the functions accepts, described as a JSON Schema object. See the\n[guide](https://platform.openai.com/docs/guides/function-calling) for examples,\nand the\n[JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\ndocumentation about the format.\n\nOmitting `parameters` defines a function with an empty parameter list."
			},
			"FunctionDefinition": {
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64."
					},
					"description": {
						"type": "string",
						"description": "A description of what the function does, used by the model to choose when and\nhow to call the function."
					},
					"parameters": {
						"$ref": "#/components/schemas/FunctionParameters",
						"description": "The parameters the functions accepts, described as a JSON Schema object. See the\n[guide](https://platform.openai.com/docs/guides/function-calling) for examples,\nand the\n[JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\ndocumentation about the format.\n\nOmitting `parameters` defines a function with an empty parameter list."
					},
					"strict": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether to enable strict schema adherence when generating the function call. If\nset to true, the model will follow the exact schema defined in the `parameters`\nfield. Only a subset of JSON Schema is supported when `strict` is `true`. Learn\nmore about Structured Outputs in the\n[function calling guide](docs/guides/function-calling)."
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionTool": {
				"properties": {
					"function": {
						"$ref": "#/components/schemas/FunctionDefinition"
					},
					"type": {
						"type": "string",
						"enum": [
							"function"
						],
						"nullable": false,
						"description": "The type of the tool. Currently, only `function` is supported."
					}
				},
				"required": [
					"function",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionNamedToolChoice.Function": {
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the function to call."
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionNamedToolChoice": {
				"description": "Specifies a tool the model should use. Use to force the model to call a specific\nfunction.",
				"properties": {
					"function": {
						"$ref": "#/components/schemas/ChatCompletionNamedToolChoice.Function"
					},
					"type": {
						"type": "string",
						"enum": [
							"function"
						],
						"nullable": false,
						"description": "The type of the tool. Currently, only `function` is supported."
					}
				},
				"required": [
					"function",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionToolChoiceOption": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ChatCompletionNamedToolChoice"
					},
					{
						"type": "string",
						"enum": [
							"none",
							"auto",
							"required"
						]
					}
				],
				"description": "Controls which (if any) tool is called by the model. `none` means the model will\nnot call any tool and instead generates a message. `auto` means the model can\npick between generating a message or calling one or more tools. `required` means\nthe model must call one or more tools. Specifying a particular tool via\n`{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\ncall that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools\nare present."
			},
			"AlertResponse": {
				"properties": {
					"alerts": {
						"items": {
							"properties": {
								"updated_at": {
									"type": "string",
									"nullable": true
								},
								"time_window": {
									"type": "number",
									"format": "double"
								},
								"time_block_duration": {
									"type": "number",
									"format": "double"
								},
								"threshold": {
									"type": "number",
									"format": "double"
								},
								"status": {
									"type": "string"
								},
								"soft_delete": {
									"type": "boolean"
								},
								"slack_channels": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"org_id": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"minimum_request_count": {
									"type": "number",
									"format": "double",
									"nullable": true
								},
								"metric": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"emails": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"created_at": {
									"type": "string",
									"nullable": true
								}
							},
							"required": [
								"updated_at",
								"time_window",
								"time_block_duration",
								"threshold",
								"status",
								"soft_delete",
								"slack_channels",
								"org_id",
								"name",
								"minimum_request_count",
								"metric",
								"id",
								"emails",
								"created_at"
							],
							"type": "object"
						},
						"type": "array"
					},
					"history": {
						"items": {
							"properties": {
								"updated_at": {
									"type": "string",
									"nullable": true
								},
								"triggered_value": {
									"type": "string"
								},
								"status": {
									"type": "string"
								},
								"soft_delete": {
									"type": "boolean"
								},
								"org_id": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"created_at": {
									"type": "string",
									"nullable": true
								},
								"alert_start_time": {
									"type": "string"
								},
								"alert_name": {
									"type": "string"
								},
								"alert_metric": {
									"type": "string"
								},
								"alert_id": {
									"type": "string"
								},
								"alert_end_time": {
									"type": "string",
									"nullable": true
								}
							},
							"required": [
								"updated_at",
								"triggered_value",
								"status",
								"soft_delete",
								"org_id",
								"id",
								"created_at",
								"alert_start_time",
								"alert_name",
								"alert_metric",
								"alert_id",
								"alert_end_time"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"alerts",
					"history"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_AlertResponse_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/AlertResponse"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_AlertResponse.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_AlertResponse_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"AlertRequest": {
				"properties": {
					"name": {
						"type": "string"
					},
					"metric": {
						"type": "string"
					},
					"threshold": {
						"type": "number",
						"format": "double"
					},
					"time_window": {
						"type": "string"
					},
					"emails": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"slack_channels": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"minimum_request_count": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"metric",
					"threshold",
					"time_window",
					"emails",
					"slack_channels"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess__active-boolean--created_at-string--id-number--message-string--title-string--updated_at-string_-Array_": {
				"properties": {
					"data": {
						"items": {
							"properties": {
								"updated_at": {
									"type": "string"
								},
								"title": {
									"type": "string"
								},
								"message": {
									"type": "string"
								},
								"id": {
									"type": "number",
									"format": "double"
								},
								"created_at": {
									"type": "string"
								},
								"active": {
									"type": "boolean"
								}
							},
							"required": [
								"updated_at",
								"title",
								"message",
								"id",
								"created_at",
								"active"
							],
							"type": "object"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__active-boolean--created_at-string--id-number--message-string--title-string--updated_at-string_-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__active-boolean--created_at-string--id-number--message-string--title-string--updated_at-string_-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess__organization_id-string--name-string--flags-string-Array_-Array_": {
				"properties": {
					"data": {
						"items": {
							"properties": {
								"flags": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"name": {
									"type": "string"
								},
								"organization_id": {
									"type": "string"
								}
							},
							"required": [
								"flags",
								"name",
								"organization_id"
							],
							"type": "object"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__organization_id-string--name-string--flags-string-Array_-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__organization_id-string--name-string--flags-string-Array_-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"KafkaSettings": {
				"properties": {
					"miniBatchSize": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"miniBatchSize"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AzureExperiment": {
				"properties": {
					"azureBaseUri": {
						"type": "string"
					},
					"azureApiVersion": {
						"type": "string"
					},
					"azureDeploymentName": {
						"type": "string"
					},
					"azureApiKey": {
						"type": "string"
					}
				},
				"required": [
					"azureBaseUri",
					"azureApiVersion",
					"azureDeploymentName",
					"azureApiKey"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiKey": {
				"properties": {
					"apiKey": {
						"type": "string"
					}
				},
				"required": [
					"apiKey"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Setting": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/KafkaSettings"
					},
					{
						"$ref": "#/components/schemas/AzureExperiment"
					},
					{
						"$ref": "#/components/schemas/ApiKey"
					}
				]
			},
			"SettingName": {
				"type": "string",
				"enum": [
					"kafka:dlq",
					"kafka:log",
					"kafka:score",
					"kafka:dlq:score",
					"kafka:dlq:eu",
					"kafka:log:eu",
					"kafka:orgs-to-dlq",
					"azure:experiment",
					"openai:apiKey",
					"anthropic:apiKey",
					"openrouter:apiKey"
				],
				"nullable": false
			},
			"url.URL": {
				"type": "string",
				"description": "The URL interface represents an object providing static methods used for creating object URLs.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL)\n`URL` class is a global reference for `import { URL } from 'node:url'`\nhttps://nodejs.org/api/url.html#the-whatwg-url-api"
			},
			"stripe.Stripe.Application": {
				"description": "The Application object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"application"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "The name of the application."
					}
				},
				"required": [
					"id",
					"object",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.DeletedApplication": {
				"description": "The DeletedApplication object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"application"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"deleted": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false,
						"description": "Always true for a deleted object"
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "The name of the application."
					}
				},
				"required": [
					"id",
					"object",
					"deleted",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.BusinessProfile.AnnualRevenue": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "A non-negative integer representing the amount in the [smallest currency unit](https://stripe.com/currencies#zero-decimal)."
					},
					"currency": {
						"type": "string",
						"nullable": true,
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"fiscal_year_end": {
						"type": "string",
						"nullable": true,
						"description": "The close-out date of the preceding fiscal year in ISO 8601 format. E.g. 2023-12-31 for the 31st of December, 2023."
					}
				},
				"required": [
					"amount",
					"currency",
					"fiscal_year_end"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.BusinessProfile.MonthlyEstimatedRevenue": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "A non-negative integer representing how much to charge in the [smallest currency unit](https://stripe.com/currencies#zero-decimal)."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					}
				},
				"required": [
					"amount",
					"currency"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Address": {
				"description": "The Address object.",
				"properties": {
					"city": {
						"type": "string",
						"nullable": true,
						"description": "City/District/Suburb/Town/Village."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "2-letter country code."
					},
					"line1": {
						"type": "string",
						"nullable": true,
						"description": "Address line 1 (Street address/PO Box/Company name)."
					},
					"line2": {
						"type": "string",
						"nullable": true,
						"description": "Address line 2 (Apartment/Suite/Unit/Building)."
					},
					"postal_code": {
						"type": "string",
						"nullable": true,
						"description": "ZIP or postal code."
					},
					"state": {
						"type": "string",
						"nullable": true,
						"description": "State/County/Province/Region."
					}
				},
				"required": [
					"city",
					"country",
					"line1",
					"line2",
					"postal_code",
					"state"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.BusinessProfile": {
				"properties": {
					"annual_revenue": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account.BusinessProfile.AnnualRevenue"
							}
						],
						"nullable": true,
						"description": "The applicant's gross annual revenue for its preceding fiscal year."
					},
					"estimated_worker_count": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "An estimated upper bound of employees, contractors, vendors, etc. currently working for the business."
					},
					"mcc": {
						"type": "string",
						"nullable": true,
						"description": "[The merchant category code for the account](https://stripe.com/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide."
					},
					"monthly_estimated_revenue": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.BusinessProfile.MonthlyEstimatedRevenue"
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "The customer-facing business name."
					},
					"product_description": {
						"type": "string",
						"nullable": true,
						"description": "Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes."
					},
					"support_address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "A publicly available mailing address for sending support issues to."
					},
					"support_email": {
						"type": "string",
						"nullable": true,
						"description": "A publicly available email address for sending support issues to."
					},
					"support_phone": {
						"type": "string",
						"nullable": true,
						"description": "A publicly available phone number to call with support issues."
					},
					"support_url": {
						"type": "string",
						"nullable": true,
						"description": "A publicly available website for handling support issues."
					},
					"url": {
						"type": "string",
						"nullable": true,
						"description": "The business's publicly available website."
					}
				},
				"required": [
					"annual_revenue",
					"estimated_worker_count",
					"mcc",
					"name",
					"support_address",
					"support_email",
					"support_phone",
					"support_url",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.BusinessType": {
				"type": "string",
				"enum": [
					"company",
					"government_entity",
					"individual",
					"non_profit"
				]
			},
			"stripe.Stripe.Account.Capabilities.AcssDebitPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.AffirmPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.AfterpayClearpayPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.AmazonPayPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.AuBecsDebitPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.BacsDebitPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.BancontactPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.BankTransferPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.BlikPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.BoletoPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.CardIssuing": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.CardPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.CartesBancairesPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.CashappPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.EpsPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.FpxPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.GbBankTransferPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.GiropayPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.GrabpayPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.IdealPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.IndiaInternationalPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.JcbPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.JpBankTransferPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.KlarnaPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.KonbiniPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.LegacyPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.LinkPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.MobilepayPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.MultibancoPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.MxBankTransferPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.OxxoPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.P24Payments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.PaynowPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.PromptpayPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.RevolutPayPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.SepaBankTransferPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.SepaDebitPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.SofortPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.SwishPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.TaxReportingUs1099K": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.TaxReportingUs1099Misc": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.Transfers": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.Treasury": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.TwintPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.UsBankAccountAchPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.UsBankTransferPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities.ZipPayments": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Account.Capabilities": {
				"properties": {
					"acss_debit_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.AcssDebitPayments",
						"description": "The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges."
					},
					"affirm_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.AffirmPayments",
						"description": "The status of the Affirm capability of the account, or whether the account can directly process Affirm charges."
					},
					"afterpay_clearpay_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.AfterpayClearpayPayments",
						"description": "The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges."
					},
					"amazon_pay_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.AmazonPayPayments",
						"description": "The status of the AmazonPay capability of the account, or whether the account can directly process AmazonPay payments."
					},
					"au_becs_debit_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.AuBecsDebitPayments",
						"description": "The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges."
					},
					"bacs_debit_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.BacsDebitPayments",
						"description": "The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges."
					},
					"bancontact_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.BancontactPayments",
						"description": "The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges."
					},
					"bank_transfer_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.BankTransferPayments",
						"description": "The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges."
					},
					"blik_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.BlikPayments",
						"description": "The status of the blik payments capability of the account, or whether the account can directly process blik charges."
					},
					"boleto_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.BoletoPayments",
						"description": "The status of the boleto payments capability of the account, or whether the account can directly process boleto charges."
					},
					"card_issuing": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.CardIssuing",
						"description": "The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards"
					},
					"card_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.CardPayments",
						"description": "The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges."
					},
					"cartes_bancaires_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.CartesBancairesPayments",
						"description": "The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency."
					},
					"cashapp_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.CashappPayments",
						"description": "The status of the Cash App Pay capability of the account, or whether the account can directly process Cash App Pay payments."
					},
					"eps_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.EpsPayments",
						"description": "The status of the EPS payments capability of the account, or whether the account can directly process EPS charges."
					},
					"fpx_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.FpxPayments",
						"description": "The status of the FPX payments capability of the account, or whether the account can directly process FPX charges."
					},
					"gb_bank_transfer_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.GbBankTransferPayments",
						"description": "The status of the GB customer_balance payments (GBP currency) capability of the account, or whether the account can directly process GB customer_balance charges."
					},
					"giropay_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.GiropayPayments",
						"description": "The status of the giropay payments capability of the account, or whether the account can directly process giropay charges."
					},
					"grabpay_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.GrabpayPayments",
						"description": "The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges."
					},
					"ideal_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.IdealPayments",
						"description": "The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges."
					},
					"india_international_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.IndiaInternationalPayments",
						"description": "The status of the india_international_payments capability of the account, or whether the account can process international charges (non INR) in India."
					},
					"jcb_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.JcbPayments",
						"description": "The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency."
					},
					"jp_bank_transfer_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.JpBankTransferPayments",
						"description": "The status of the Japanese customer_balance payments (JPY currency) capability of the account, or whether the account can directly process Japanese customer_balance charges."
					},
					"klarna_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.KlarnaPayments",
						"description": "The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges."
					},
					"konbini_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.KonbiniPayments",
						"description": "The status of the konbini payments capability of the account, or whether the account can directly process konbini charges."
					},
					"legacy_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.LegacyPayments",
						"description": "The status of the legacy payments capability of the account."
					},
					"link_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.LinkPayments",
						"description": "The status of the link_payments capability of the account, or whether the account can directly process Link charges."
					},
					"mobilepay_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.MobilepayPayments",
						"description": "The status of the MobilePay capability of the account, or whether the account can directly process MobilePay charges."
					},
					"multibanco_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.MultibancoPayments",
						"description": "The status of the Multibanco payments capability of the account, or whether the account can directly process Multibanco charges."
					},
					"mx_bank_transfer_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.MxBankTransferPayments",
						"description": "The status of the Mexican customer_balance payments (MXN currency) capability of the account, or whether the account can directly process Mexican customer_balance charges."
					},
					"oxxo_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.OxxoPayments",
						"description": "The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges."
					},
					"p24_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.P24Payments",
						"description": "The status of the P24 payments capability of the account, or whether the account can directly process P24 charges."
					},
					"paynow_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.PaynowPayments",
						"description": "The status of the paynow payments capability of the account, or whether the account can directly process paynow charges."
					},
					"promptpay_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.PromptpayPayments",
						"description": "The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges."
					},
					"revolut_pay_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.RevolutPayPayments",
						"description": "The status of the RevolutPay capability of the account, or whether the account can directly process RevolutPay payments."
					},
					"sepa_bank_transfer_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.SepaBankTransferPayments",
						"description": "The status of the SEPA customer_balance payments (EUR currency) capability of the account, or whether the account can directly process SEPA customer_balance charges."
					},
					"sepa_debit_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.SepaDebitPayments",
						"description": "The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges."
					},
					"sofort_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.SofortPayments",
						"description": "The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges."
					},
					"swish_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.SwishPayments",
						"description": "The status of the Swish capability of the account, or whether the account can directly process Swish payments."
					},
					"tax_reporting_us_1099_k": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.TaxReportingUs1099K",
						"description": "The status of the tax reporting 1099-K (US) capability of the account."
					},
					"tax_reporting_us_1099_misc": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.TaxReportingUs1099Misc",
						"description": "The status of the tax reporting 1099-MISC (US) capability of the account."
					},
					"transfers": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.Transfers",
						"description": "The status of the transfers capability of the account, or whether your platform can transfer funds to the account."
					},
					"treasury": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.Treasury",
						"description": "The status of the banking capability, or whether the account can have bank accounts."
					},
					"twint_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.TwintPayments",
						"description": "The status of the TWINT capability of the account, or whether the account can directly process TWINT charges."
					},
					"us_bank_account_ach_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.UsBankAccountAchPayments",
						"description": "The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges."
					},
					"us_bank_transfer_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.UsBankTransferPayments",
						"description": "The status of the US customer_balance payments (USD currency) capability of the account, or whether the account can directly process US customer_balance charges."
					},
					"zip_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities.ZipPayments",
						"description": "The status of the Zip capability of the account, or whether the account can directly process Zip charges."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Company.AddressKana": {
				"properties": {
					"city": {
						"type": "string",
						"nullable": true,
						"description": "City/Ward."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."
					},
					"line1": {
						"type": "string",
						"nullable": true,
						"description": "Block/Building number."
					},
					"line2": {
						"type": "string",
						"nullable": true,
						"description": "Building details."
					},
					"postal_code": {
						"type": "string",
						"nullable": true,
						"description": "ZIP or postal code."
					},
					"state": {
						"type": "string",
						"nullable": true,
						"description": "Prefecture."
					},
					"town": {
						"type": "string",
						"nullable": true,
						"description": "Town/cho-me."
					}
				},
				"required": [
					"city",
					"country",
					"line1",
					"line2",
					"postal_code",
					"state",
					"town"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Company.AddressKanji": {
				"properties": {
					"city": {
						"type": "string",
						"nullable": true,
						"description": "City/Ward."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."
					},
					"line1": {
						"type": "string",
						"nullable": true,
						"description": "Block/Building number."
					},
					"line2": {
						"type": "string",
						"nullable": true,
						"description": "Building details."
					},
					"postal_code": {
						"type": "string",
						"nullable": true,
						"description": "ZIP or postal code."
					},
					"state": {
						"type": "string",
						"nullable": true,
						"description": "Prefecture."
					},
					"town": {
						"type": "string",
						"nullable": true,
						"description": "Town/cho-me."
					}
				},
				"required": [
					"city",
					"country",
					"line1",
					"line2",
					"postal_code",
					"state",
					"town"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Company.OwnershipDeclaration": {
				"properties": {
					"date": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The Unix timestamp marking when the beneficial owner attestation was made."
					},
					"ip": {
						"type": "string",
						"nullable": true,
						"description": "The IP address from which the beneficial owner attestation was made."
					},
					"user_agent": {
						"type": "string",
						"nullable": true,
						"description": "The user-agent string from the browser where the beneficial owner attestation was made."
					}
				},
				"required": [
					"date",
					"ip",
					"user_agent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Company.Structure": {
				"type": "string",
				"enum": [
					"free_zone_establishment",
					"free_zone_llc",
					"government_instrumentality",
					"governmental_unit",
					"incorporated_non_profit",
					"incorporated_partnership",
					"limited_liability_partnership",
					"llc",
					"multi_member_llc",
					"private_company",
					"private_corporation",
					"private_partnership",
					"public_company",
					"public_corporation",
					"public_partnership",
					"registered_charity",
					"single_member_llc",
					"sole_establishment",
					"sole_proprietorship",
					"tax_exempt_government_instrumentality",
					"unincorporated_association",
					"unincorporated_non_profit",
					"unincorporated_partnership"
				]
			},
			"stripe.Stripe.File": {
				"description": "This object represents files hosted on Stripe's servers. You can upload\nfiles with the [create file](https://stripe.com/docs/api#create_file) request\n(for example, when uploading dispute evidence). Stripe also\ncreates files independently (for example, the results of a [Sigma scheduled\nquery](https://stripe.com/docs/api#scheduled_queries)).\n\nRelated guide: [File upload guide](https://stripe.com/docs/file-upload)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"file"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"expires_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The file expires and isn't available at this time in epoch seconds."
					},
					"filename": {
						"type": "string",
						"nullable": true,
						"description": "The suitable name for saving the file to a filesystem."
					},
					"links": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.ApiList_stripe.Stripe.FileLink_"
							}
						],
						"nullable": true,
						"description": "A list of [file links](https://stripe.com/docs/api#file_links) that point at this file."
					},
					"purpose": {
						"$ref": "#/components/schemas/stripe.Stripe.File.Purpose",
						"description": "The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file."
					},
					"size": {
						"type": "number",
						"format": "double",
						"description": "The size of the file object in bytes."
					},
					"title": {
						"type": "string",
						"nullable": true,
						"description": "A suitable title for the document."
					},
					"type": {
						"type": "string",
						"nullable": true,
						"description": "The returned file type (for example, `csv`, `pdf`, `jpg`, or `png`)."
					},
					"url": {
						"type": "string",
						"nullable": true,
						"description": "Use your live secret API key to download the file from this URL."
					}
				},
				"required": [
					"id",
					"object",
					"created",
					"expires_at",
					"filename",
					"purpose",
					"size",
					"title",
					"type",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Metadata": {
				"description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
				"properties": {},
				"type": "object",
				"additionalProperties": {
					"type": "string"
				}
			},
			"stripe.Stripe.FileLink": {
				"description": "To share the contents of a `File` object with non-Stripe users, you can\ncreate a `FileLink`. `FileLink`s contain a URL that you can use to\nretrieve the contents of the file without authentication.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"file_link"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"expired": {
						"type": "boolean",
						"description": "Returns if the link is already expired."
					},
					"expires_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Time that the link expires."
					},
					"file": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"description": "The file object this link points to."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"url": {
						"type": "string",
						"nullable": true,
						"description": "The publicly accessible URL to download the file."
					}
				},
				"required": [
					"id",
					"object",
					"created",
					"expired",
					"expires_at",
					"file",
					"livemode",
					"metadata",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ApiList_stripe.Stripe.FileLink_": {
				"description": "A container for paginated lists of objects.\nThe array of objects is on the `.data` property,\nand `.has_more` indicates whether there are additional objects beyond the end of this list.\n\nLearn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)\nor, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.",
				"properties": {
					"object": {
						"type": "string",
						"enum": [
							"list"
						],
						"nullable": false
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.FileLink"
						},
						"type": "array"
					},
					"has_more": {
						"type": "boolean",
						"description": "True if this list has another page of items after this one that can be fetched."
					},
					"url": {
						"type": "string",
						"description": "The URL where this list can be accessed."
					}
				},
				"required": [
					"object",
					"data",
					"has_more",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.File.Purpose": {
				"type": "string",
				"enum": [
					"account_requirement",
					"additional_verification",
					"business_icon",
					"business_logo",
					"customer_signature",
					"dispute_evidence",
					"document_provider_identity_document",
					"finance_report_run",
					"identity_document",
					"identity_document_downloadable",
					"issuing_regulatory_reporting",
					"pci_document",
					"selfie",
					"sigma_scheduled_query",
					"tax_document_user_upload",
					"terminal_reader_splashscreen"
				]
			},
			"stripe.Stripe.Account.Company.Verification.Document": {
				"properties": {
					"back": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`."
					},
					"details": {
						"type": "string",
						"nullable": true,
						"description": "A user-displayable string describing the verification state of this document."
					},
					"details_code": {
						"type": "string",
						"nullable": true,
						"description": "One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document."
					},
					"front": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`."
					}
				},
				"required": [
					"back",
					"details",
					"details_code",
					"front"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Company.Verification": {
				"properties": {
					"document": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Company.Verification.Document"
					}
				},
				"required": [
					"document"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Company": {
				"properties": {
					"address": {
						"$ref": "#/components/schemas/stripe.Stripe.Address"
					},
					"address_kana": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account.Company.AddressKana"
							}
						],
						"nullable": true,
						"description": "The Kana variation of the company's primary address (Japan only)."
					},
					"address_kanji": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account.Company.AddressKanji"
							}
						],
						"nullable": true,
						"description": "The Kanji variation of the company's primary address (Japan only)."
					},
					"directors_provided": {
						"type": "boolean",
						"description": "Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided)."
					},
					"executives_provided": {
						"type": "boolean",
						"description": "Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided."
					},
					"export_license_id": {
						"type": "string",
						"description": "The export license ID number of the company, also referred as Import Export Code (India only)."
					},
					"export_purpose_code": {
						"type": "string",
						"description": "The purpose code to use for export transactions (India only)."
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "The company's legal name."
					},
					"name_kana": {
						"type": "string",
						"nullable": true,
						"description": "The Kana variation of the company's legal name (Japan only)."
					},
					"name_kanji": {
						"type": "string",
						"nullable": true,
						"description": "The Kanji variation of the company's legal name (Japan only)."
					},
					"owners_provided": {
						"type": "boolean",
						"description": "Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together)."
					},
					"ownership_declaration": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account.Company.OwnershipDeclaration"
							}
						],
						"nullable": true,
						"description": "This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct."
					},
					"phone": {
						"type": "string",
						"nullable": true,
						"description": "The company's phone number (used for verification)."
					},
					"structure": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Company.Structure",
						"description": "The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details."
					},
					"tax_id_provided": {
						"type": "boolean",
						"description": "Whether the company's business ID number was provided."
					},
					"tax_id_registrar": {
						"type": "string",
						"description": "The jurisdiction in which the `tax_id` is registered (Germany-based companies only)."
					},
					"vat_id_provided": {
						"type": "boolean",
						"description": "Whether the company's business VAT number was provided."
					},
					"verification": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account.Company.Verification"
							}
						],
						"nullable": true,
						"description": "Information on the verification state of the company."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Controller.Fees.Payer": {
				"type": "string",
				"enum": [
					"account",
					"application",
					"application_custom",
					"application_express"
				]
			},
			"stripe.Stripe.Account.Controller.Fees": {
				"properties": {
					"payer": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Controller.Fees.Payer",
						"description": "A value indicating the responsible payer of a bundle of Stripe fees for pricing-control eligible products on this account. Learn more about [fee behavior on connected accounts](https://docs.stripe.com/connect/direct-charges-fee-payer-behavior)."
					}
				},
				"required": [
					"payer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Controller.Losses.Payments": {
				"type": "string",
				"enum": [
					"application",
					"stripe"
				]
			},
			"stripe.Stripe.Account.Controller.Losses": {
				"properties": {
					"payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Controller.Losses.Payments",
						"description": "A value indicating who is liable when this account can't pay back negative balances from payments."
					}
				},
				"required": [
					"payments"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Controller.RequirementCollection": {
				"type": "string",
				"enum": [
					"application",
					"stripe"
				]
			},
			"stripe.Stripe.Account.Controller.StripeDashboard.Type": {
				"type": "string",
				"enum": [
					"express",
					"full",
					"none"
				]
			},
			"stripe.Stripe.Account.Controller.StripeDashboard": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Controller.StripeDashboard.Type",
						"description": "A value indicating the Stripe dashboard this account has access to independent of the Connect application."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Controller.Type": {
				"type": "string",
				"enum": [
					"account",
					"application"
				]
			},
			"stripe.Stripe.Account.Controller": {
				"properties": {
					"fees": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Controller.Fees"
					},
					"is_controller": {
						"type": "boolean",
						"description": "`true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null."
					},
					"losses": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Controller.Losses"
					},
					"requirement_collection": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Controller.RequirementCollection",
						"description": "A value indicating responsibility for collecting requirements on this account. Only returned when the Connect application retrieving the resource controls the account."
					},
					"stripe_dashboard": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Controller.StripeDashboard"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Controller.Type",
						"description": "The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account": {
				"description": "This is an object representing a Stripe account. You can retrieve it to see\nproperties on the account like its current requirements or if the account is\nenabled to make live charges or receive payouts.\n\nFor accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection)\nis `application`, which includes Custom accounts, the properties below are always\nreturned.\n\nFor accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection)\nis `stripe`, which includes Standard and Express accounts, some properties are only returned\nuntil you create an [Account Link](https://stripe.com/api/account_links) or [Account Session](https://stripe.com/api/account_sessions)\nto start Connect Onboarding. Learn about the [differences between accounts](https://stripe.com/connect/accounts).",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"account"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"business_profile": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account.BusinessProfile"
							}
						],
						"nullable": true,
						"description": "Business information about the account."
					},
					"business_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account.BusinessType"
							}
						],
						"nullable": true,
						"description": "The business type. After you create an [Account Link](https://stripe.com/api/account_links) or [Account Session](https://stripe.com/api/account_sessions), this property is only returned for accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts."
					},
					"capabilities": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Capabilities"
					},
					"charges_enabled": {
						"type": "boolean",
						"description": "Whether the account can create live charges."
					},
					"company": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Company"
					},
					"controller": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Controller"
					},
					"country": {
						"type": "string",
						"description": "The account's country."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the account was connected. Measured in seconds since the Unix epoch."
					},
					"default_currency": {
						"type": "string",
						"description": "Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts)."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"details_submitted": {
						"type": "boolean",
						"description": "Whether account details have been submitted. Accounts with Stripe Dashboard access, which includes Standard accounts, cannot receive payouts before this is true. Accounts where this is false should be directed to [an onboarding flow](https://stripe.com/connect/onboarding) to finish submitting account details."
					},
					"email": {
						"type": "string",
						"nullable": true,
						"description": "An email address associated with the account. It's not used for authentication and Stripe doesn't market to this field without explicit approval from the platform."
					},
					"external_accounts": {
						"$ref": "#/components/schemas/stripe.Stripe.ApiList_stripe.Stripe.ExternalAccount_",
						"description": "External accounts (bank accounts and debit cards) currently attached to this account. External accounts are only returned for requests where `controller[is_controller]` is true."
					},
					"future_requirements": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.FutureRequirements"
					},
					"individual": {
						"$ref": "#/components/schemas/stripe.Stripe.Person",
						"description": "This is an object representing a person associated with a Stripe account.\n\nA platform cannot access a person for an account where [account.controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, after creating an Account Link or Account Session to start Connect onboarding.\n\nSee the [Standard onboarding](https://stripe.com/connect/standard-accounts) or [Express onboarding](https://stripe.com/connect/express-accounts) documentation for information about prefilling information and account onboarding steps. Learn more about [handling identity verification with the API](https://stripe.com/connect/handling-api-verification#person-information)."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"payouts_enabled": {
						"type": "boolean",
						"description": "Whether Stripe can send payouts to this account."
					},
					"requirements": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Requirements"
					},
					"settings": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account.Settings"
							}
						],
						"nullable": true,
						"description": "Options for customizing how the account functions within Stripe."
					},
					"tos_acceptance": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.TosAcceptance"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Type",
						"description": "The Stripe account type. Can be `standard`, `express`, `custom`, or `none`."
					}
				},
				"required": [
					"id",
					"object",
					"charges_enabled",
					"details_submitted",
					"email",
					"payouts_enabled",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.BankAccount.AvailablePayoutMethod": {
				"type": "string",
				"enum": [
					"instant",
					"standard"
				]
			},
			"stripe.Stripe.CashBalance.Settings.ReconciliationMode": {
				"type": "string",
				"enum": [
					"automatic",
					"manual"
				]
			},
			"stripe.Stripe.CashBalance.Settings": {
				"properties": {
					"reconciliation_mode": {
						"$ref": "#/components/schemas/stripe.Stripe.CashBalance.Settings.ReconciliationMode",
						"description": "The configuration for how funds that land in the customer cash balance are reconciled."
					},
					"using_merchant_default": {
						"type": "boolean",
						"description": "A flag to indicate if reconciliation mode returned is the user's default or is specific to this customer cash balance"
					}
				},
				"required": [
					"reconciliation_mode",
					"using_merchant_default"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.CashBalance": {
				"description": "A customer's `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.",
				"properties": {
					"object": {
						"type": "string",
						"enum": [
							"cash_balance"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"available": {
						"properties": {},
						"additionalProperties": {
							"type": "number",
							"format": "double"
						},
						"type": "object",
						"nullable": true,
						"description": "A hash of all cash balances available to this customer. You cannot delete a customer with any cash balances, even if the balance is 0. Amounts are represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."
					},
					"customer": {
						"type": "string",
						"description": "The ID of the customer whose cash balance this object represents."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"settings": {
						"$ref": "#/components/schemas/stripe.Stripe.CashBalance.Settings"
					}
				},
				"required": [
					"object",
					"available",
					"customer",
					"livemode",
					"settings"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.BankAccount": {
				"description": "These bank accounts are payment methods on `Customer` objects.\n\nOn the other hand [External Accounts](https://stripe.com/api#external_accounts) are transfer\ndestinations on `Account` objects for connected accounts.\nThey can be bank accounts or debit cards as well, and are documented in the links above.\n\nRelated guide: [Bank debits and transfers](https://stripe.com/payments/bank-debits-transfers)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"bank_account"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"account": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"nullable": true,
						"description": "The ID of the account that the bank account is associated with."
					},
					"account_holder_name": {
						"type": "string",
						"nullable": true,
						"description": "The name of the person or business that owns the bank account."
					},
					"account_holder_type": {
						"type": "string",
						"nullable": true,
						"description": "The type of entity that holds the account. This can be either `individual` or `company`."
					},
					"account_type": {
						"type": "string",
						"nullable": true,
						"description": "The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`."
					},
					"available_payout_methods": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.BankAccount.AvailablePayoutMethod"
						},
						"type": "array",
						"nullable": true,
						"description": "A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout."
					},
					"bank_name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the bank associated with the routing number (e.g., `WELLS FARGO`)."
					},
					"country": {
						"type": "string",
						"description": "Two-letter ISO code representing the country the bank account is located in."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomer"
							}
						],
						"nullable": true,
						"description": "The ID of the customer that the bank account is associated with."
					},
					"default_for_currency": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether this bank account is the default external account for its currency."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."
					},
					"future_requirements": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.BankAccount.FutureRequirements"
							}
						],
						"nullable": true,
						"description": "Information about the [upcoming new requirements for the bank account](https://stripe.com/docs/connect/custom-accounts/future-requirements), including what information needs to be collected, and by when."
					},
					"last4": {
						"type": "string",
						"description": "The last four digits of the bank account number."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"requirements": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.BankAccount.Requirements"
							}
						],
						"nullable": true,
						"description": "Information about the requirements for the bank account, including what information needs to be collected."
					},
					"routing_number": {
						"type": "string",
						"nullable": true,
						"description": "The routing transit number for the bank account."
					},
					"status": {
						"type": "string",
						"description": "For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn't enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a payout sent to this bank account fails, we'll set the status to `errored` and will not continue to send [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) until the bank details are updated.\n\nFor external accounts, possible values are `new`, `errored` and `verification_failed`. If a payout fails, the status is set to `errored` and scheduled payouts are stopped until account details are updated. In the US and India, if we can't [verify the owner of the bank account](https://support.stripe.com/questions/bank-account-ownership-verification), we'll set the status to `verification_failed`. Other validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply."
					}
				},
				"required": [
					"id",
					"object",
					"account_holder_name",
					"account_holder_type",
					"account_type",
					"bank_name",
					"country",
					"currency",
					"fingerprint",
					"last4",
					"routing_number",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Card.AvailablePayoutMethod": {
				"type": "string",
				"enum": [
					"instant",
					"standard"
				]
			},
			"stripe.Stripe.Customer": {
				"description": "This object represents a customer of your business. Use it to create recurring charges and track payments that belong to the same customer.\n\nRelated guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"customer"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "The customer's address."
					},
					"balance": {
						"type": "number",
						"format": "double",
						"description": "The current balance, if any, that's stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that's added to their next invoice. The balance only considers amounts that Stripe hasn't successfully applied to any invoice. It doesn't reflect unpaid invoices. This balance is only taken into account after invoices finalize."
					},
					"cash_balance": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.CashBalance"
							}
						],
						"nullable": true,
						"description": "The current funds being held by Stripe on behalf of the customer. You can apply these funds towards payment intents when the source is \"cash_balance\". The `settings[reconciliation_mode]` field describes if these funds apply to these payment intents manually or automatically."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"nullable": true,
						"description": "Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes."
					},
					"default_source": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.CustomerSource"
							}
						],
						"nullable": true,
						"description": "ID of the default payment source for the customer.\n\nIf you use payment methods created through the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"delinquent": {
						"type": "boolean",
						"nullable": true,
						"description": "Tracks the most recent state change on any invoice belonging to the customer. Paying an invoice or marking it uncollectible via the API will set this field to false. An automatic payment failure or passing the `invoice.due_date` will set this field to `true`.\n\nIf an invoice becomes uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't reset to `false`.\n\nIf you care whether the customer has paid their most recent subscription invoice, use `subscription.status` instead. Paying or marking uncollectible any customer invoice regardless of whether it is the latest invoice for a subscription will always set this field to `false`."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "An arbitrary string attached to the object. Often useful for displaying to users."
					},
					"discount": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Discount"
							}
						],
						"nullable": true,
						"description": "Describes the current discount active on the customer, if there is one."
					},
					"email": {
						"type": "string",
						"nullable": true,
						"description": "The customer's email address."
					},
					"invoice_credit_balance": {
						"properties": {},
						"additionalProperties": {
							"type": "number",
							"format": "double"
						},
						"type": "object",
						"description": "The current multi-currency balances, if any, that's stored on the customer. If positive in a currency, the customer has a credit to apply to their next invoice denominated in that currency. If negative, the customer has an amount owed that's added to their next invoice denominated in that currency. These balances don't apply to unpaid invoices. They solely track amounts that Stripe hasn't successfully applied to any invoice. Stripe only applies a balance in a specific currency to an invoice after that invoice (which is in the same currency) finalizes."
					},
					"invoice_prefix": {
						"type": "string",
						"nullable": true,
						"description": "The prefix for the customer used to generate unique invoice numbers."
					},
					"invoice_settings": {
						"$ref": "#/components/schemas/stripe.Stripe.Customer.InvoiceSettings"
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "The customer's full name or business name."
					},
					"next_invoice_sequence": {
						"type": "number",
						"format": "double",
						"description": "The suffix of the customer's next invoice number (for example, 0001). When the account uses account level sequencing, this parameter is ignored in API requests and the field omitted in API responses."
					},
					"phone": {
						"type": "string",
						"nullable": true,
						"description": "The customer's phone number."
					},
					"preferred_locales": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "The customer's preferred locales (languages), ordered by preference."
					},
					"shipping": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer.Shipping"
							}
						],
						"nullable": true,
						"description": "Mailing and shipping address for the customer. Appears on invoices emailed to this customer."
					},
					"sources": {
						"$ref": "#/components/schemas/stripe.Stripe.ApiList_stripe.Stripe.CustomerSource_",
						"description": "The customer's payment sources, if any."
					},
					"subscriptions": {
						"$ref": "#/components/schemas/stripe.Stripe.ApiList_stripe.Stripe.Subscription_",
						"description": "The customer's current subscriptions, if any."
					},
					"tax": {
						"$ref": "#/components/schemas/stripe.Stripe.Customer.Tax"
					},
					"tax_exempt": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer.TaxExempt"
							}
						],
						"nullable": true,
						"description": "Describes the customer's tax exemption status, which is `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the following text: **\"Reverse charge\"**."
					},
					"tax_ids": {
						"$ref": "#/components/schemas/stripe.Stripe.ApiList_stripe.Stripe.TaxId_",
						"description": "The customer's tax IDs."
					},
					"test_clock": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.TestHelpers.TestClock"
							}
						],
						"nullable": true,
						"description": "ID of the test clock that this customer belongs to."
					}
				},
				"required": [
					"id",
					"object",
					"balance",
					"created",
					"default_source",
					"description",
					"email",
					"invoice_settings",
					"livemode",
					"metadata",
					"shipping"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.DeletedCustomer": {
				"description": "The DeletedCustomer object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"customer"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"deleted": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false,
						"description": "Always true for a deleted object"
					}
				},
				"required": [
					"id",
					"object",
					"deleted"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Card.Networks": {
				"properties": {
					"preferred": {
						"type": "string",
						"nullable": true,
						"description": "The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card."
					}
				},
				"required": [
					"preferred"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Card": {
				"description": "You can store multiple cards on a customer in order to charge the customer\nlater. You can also store multiple debit cards on a recipient in order to\ntransfer to those cards later.\n\nRelated guide: [Card payments with Sources](https://stripe.com/docs/sources/cards)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"card"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"account": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"nullable": true,
						"description": "The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. This property is only available for accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts."
					},
					"address_city": {
						"type": "string",
						"nullable": true,
						"description": "City/District/Suburb/Town/Village."
					},
					"address_country": {
						"type": "string",
						"nullable": true,
						"description": "Billing address country, if provided when creating card."
					},
					"address_line1": {
						"type": "string",
						"nullable": true,
						"description": "Address line 1 (Street address/PO Box/Company name)."
					},
					"address_line1_check": {
						"type": "string",
						"nullable": true,
						"description": "If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."
					},
					"address_line2": {
						"type": "string",
						"nullable": true,
						"description": "Address line 2 (Apartment/Suite/Unit/Building)."
					},
					"address_state": {
						"type": "string",
						"nullable": true,
						"description": "State/County/Province/Region."
					},
					"address_zip": {
						"type": "string",
						"nullable": true,
						"description": "ZIP or postal code."
					},
					"address_zip_check": {
						"type": "string",
						"nullable": true,
						"description": "If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."
					},
					"available_payout_methods": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Card.AvailablePayoutMethod"
						},
						"type": "array",
						"nullable": true,
						"description": "A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout."
					},
					"brand": {
						"type": "string",
						"description": "Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `Girocard`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
					},
					"currency": {
						"type": "string",
						"nullable": true,
						"description": "Three-letter [ISO code for currency](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. Must be a [supported currency](https://docs.stripe.com/currencies). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. This property is only available for accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomer"
							}
						],
						"nullable": true,
						"description": "The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead."
					},
					"cvc_check": {
						"type": "string",
						"nullable": true,
						"description": "If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge)."
					},
					"default_for_currency": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether this card is the default external account for its currency. This property is only available for accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"description": {
						"type": "string",
						"description": "A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)"
					},
					"dynamic_last4": {
						"type": "string",
						"nullable": true,
						"description": "(For tokenized numbers only.) The last four digits of the device account number."
					},
					"exp_month": {
						"type": "number",
						"format": "double",
						"description": "Two-digit number representing the card's expiration month."
					},
					"exp_year": {
						"type": "number",
						"format": "double",
						"description": "Four-digit number representing the card's expiration year."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*"
					},
					"funding": {
						"type": "string",
						"description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."
					},
					"iin": {
						"type": "string",
						"description": "Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)"
					},
					"issuer": {
						"type": "string",
						"description": "The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)"
					},
					"last4": {
						"type": "string",
						"description": "The last four digits of the card."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "Cardholder name."
					},
					"networks": {
						"$ref": "#/components/schemas/stripe.Stripe.Card.Networks"
					},
					"status": {
						"type": "string",
						"nullable": true,
						"description": "For external accounts that are cards, possible values are `new` and `errored`. If a payout fails, the status is set to `errored` and [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) are stopped until account details are updated."
					},
					"tokenization_method": {
						"type": "string",
						"nullable": true,
						"description": "If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null."
					}
				},
				"required": [
					"id",
					"object",
					"address_city",
					"address_country",
					"address_line1",
					"address_line1_check",
					"address_line2",
					"address_state",
					"address_zip",
					"address_zip_check",
					"brand",
					"country",
					"cvc_check",
					"dynamic_last4",
					"exp_month",
					"exp_year",
					"funding",
					"last4",
					"metadata",
					"name",
					"tokenization_method"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.AchCreditTransfer": {
				"properties": {
					"account_number": {
						"type": "string",
						"nullable": true
					},
					"bank_name": {
						"type": "string",
						"nullable": true
					},
					"fingerprint": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_name": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_type": {
						"type": "string",
						"nullable": true
					},
					"refund_routing_number": {
						"type": "string",
						"nullable": true
					},
					"routing_number": {
						"type": "string",
						"nullable": true
					},
					"swift_code": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.AchDebit": {
				"properties": {
					"bank_name": {
						"type": "string",
						"nullable": true
					},
					"country": {
						"type": "string",
						"nullable": true
					},
					"fingerprint": {
						"type": "string",
						"nullable": true
					},
					"last4": {
						"type": "string",
						"nullable": true
					},
					"routing_number": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.AcssDebit": {
				"properties": {
					"bank_address_city": {
						"type": "string",
						"nullable": true
					},
					"bank_address_line_1": {
						"type": "string",
						"nullable": true
					},
					"bank_address_line_2": {
						"type": "string",
						"nullable": true
					},
					"bank_address_postal_code": {
						"type": "string",
						"nullable": true
					},
					"bank_name": {
						"type": "string",
						"nullable": true
					},
					"category": {
						"type": "string",
						"nullable": true
					},
					"country": {
						"type": "string",
						"nullable": true
					},
					"fingerprint": {
						"type": "string",
						"nullable": true
					},
					"last4": {
						"type": "string",
						"nullable": true
					},
					"routing_number": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.Alipay": {
				"properties": {
					"data_string": {
						"type": "string",
						"nullable": true
					},
					"native_url": {
						"type": "string",
						"nullable": true
					},
					"statement_descriptor": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.AuBecsDebit": {
				"properties": {
					"bsb_number": {
						"type": "string",
						"nullable": true
					},
					"fingerprint": {
						"type": "string",
						"nullable": true
					},
					"last4": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.Bancontact": {
				"properties": {
					"bank_code": {
						"type": "string",
						"nullable": true
					},
					"bank_name": {
						"type": "string",
						"nullable": true
					},
					"bic": {
						"type": "string",
						"nullable": true
					},
					"iban_last4": {
						"type": "string",
						"nullable": true
					},
					"preferred_language": {
						"type": "string",
						"nullable": true
					},
					"statement_descriptor": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.Card": {
				"properties": {
					"address_line1_check": {
						"type": "string",
						"nullable": true
					},
					"address_zip_check": {
						"type": "string",
						"nullable": true
					},
					"brand": {
						"type": "string",
						"nullable": true
					},
					"country": {
						"type": "string",
						"nullable": true
					},
					"cvc_check": {
						"type": "string",
						"nullable": true
					},
					"description": {
						"type": "string"
					},
					"dynamic_last4": {
						"type": "string",
						"nullable": true
					},
					"exp_month": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"exp_year": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"fingerprint": {
						"type": "string"
					},
					"funding": {
						"type": "string",
						"nullable": true
					},
					"iin": {
						"type": "string"
					},
					"issuer": {
						"type": "string"
					},
					"last4": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"three_d_secure": {
						"type": "string"
					},
					"tokenization_method": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.CardPresent": {
				"properties": {
					"application_cryptogram": {
						"type": "string"
					},
					"application_preferred_name": {
						"type": "string"
					},
					"authorization_code": {
						"type": "string",
						"nullable": true
					},
					"authorization_response_code": {
						"type": "string"
					},
					"brand": {
						"type": "string",
						"nullable": true
					},
					"country": {
						"type": "string",
						"nullable": true
					},
					"cvm_type": {
						"type": "string"
					},
					"data_type": {
						"type": "string",
						"nullable": true
					},
					"dedicated_file_name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"emv_auth_data": {
						"type": "string"
					},
					"evidence_customer_signature": {
						"type": "string",
						"nullable": true
					},
					"evidence_transaction_certificate": {
						"type": "string",
						"nullable": true
					},
					"exp_month": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"exp_year": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"fingerprint": {
						"type": "string"
					},
					"funding": {
						"type": "string",
						"nullable": true
					},
					"iin": {
						"type": "string"
					},
					"issuer": {
						"type": "string"
					},
					"last4": {
						"type": "string",
						"nullable": true
					},
					"pos_device_id": {
						"type": "string",
						"nullable": true
					},
					"pos_entry_mode": {
						"type": "string"
					},
					"read_method": {
						"type": "string",
						"nullable": true
					},
					"reader": {
						"type": "string",
						"nullable": true
					},
					"terminal_verification_results": {
						"type": "string"
					},
					"transaction_status_information": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.CodeVerification": {
				"properties": {
					"attempts_remaining": {
						"type": "number",
						"format": "double",
						"description": "The number of attempts remaining to authenticate the source object with a verification code."
					},
					"status": {
						"type": "string",
						"description": "The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0)."
					}
				},
				"required": [
					"attempts_remaining",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.Eps": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true
					},
					"statement_descriptor": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.Giropay": {
				"properties": {
					"bank_code": {
						"type": "string",
						"nullable": true
					},
					"bank_name": {
						"type": "string",
						"nullable": true
					},
					"bic": {
						"type": "string",
						"nullable": true
					},
					"statement_descriptor": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.Ideal": {
				"properties": {
					"bank": {
						"type": "string",
						"nullable": true
					},
					"bic": {
						"type": "string",
						"nullable": true
					},
					"iban_last4": {
						"type": "string",
						"nullable": true
					},
					"statement_descriptor": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.Klarna": {
				"properties": {
					"background_image_url": {
						"type": "string"
					},
					"client_token": {
						"type": "string",
						"nullable": true
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"locale": {
						"type": "string"
					},
					"logo_url": {
						"type": "string"
					},
					"page_title": {
						"type": "string"
					},
					"pay_later_asset_urls_descriptive": {
						"type": "string"
					},
					"pay_later_asset_urls_standard": {
						"type": "string"
					},
					"pay_later_name": {
						"type": "string"
					},
					"pay_later_redirect_url": {
						"type": "string"
					},
					"pay_now_asset_urls_descriptive": {
						"type": "string"
					},
					"pay_now_asset_urls_standard": {
						"type": "string"
					},
					"pay_now_name": {
						"type": "string"
					},
					"pay_now_redirect_url": {
						"type": "string"
					},
					"pay_over_time_asset_urls_descriptive": {
						"type": "string"
					},
					"pay_over_time_asset_urls_standard": {
						"type": "string"
					},
					"pay_over_time_name": {
						"type": "string"
					},
					"pay_over_time_redirect_url": {
						"type": "string"
					},
					"payment_method_categories": {
						"type": "string"
					},
					"purchase_country": {
						"type": "string"
					},
					"purchase_type": {
						"type": "string"
					},
					"redirect_url": {
						"type": "string"
					},
					"shipping_delay": {
						"type": "number",
						"format": "double"
					},
					"shipping_first_name": {
						"type": "string"
					},
					"shipping_last_name": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.Multibanco": {
				"properties": {
					"entity": {
						"type": "string",
						"nullable": true
					},
					"reference": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_address_city": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_address_country": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_address_line1": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_address_line2": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_address_postal_code": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_address_state": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_name": {
						"type": "string",
						"nullable": true
					},
					"refund_iban": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.Owner": {
				"properties": {
					"address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "Owner's address."
					},
					"email": {
						"type": "string",
						"nullable": true,
						"description": "Owner's email address."
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "Owner's full name."
					},
					"phone": {
						"type": "string",
						"nullable": true,
						"description": "Owner's phone number (including extension)."
					},
					"verified_address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"verified_email": {
						"type": "string",
						"nullable": true,
						"description": "Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"verified_name": {
						"type": "string",
						"nullable": true,
						"description": "Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"verified_phone": {
						"type": "string",
						"nullable": true,
						"description": "Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated."
					}
				},
				"required": [
					"address",
					"email",
					"name",
					"phone",
					"verified_address",
					"verified_email",
					"verified_name",
					"verified_phone"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.P24": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.Receiver": {
				"properties": {
					"address": {
						"type": "string",
						"nullable": true,
						"description": "The address of the receiver source. This is the value that should be communicated to the customer to send their funds to."
					},
					"amount_charged": {
						"type": "number",
						"format": "double",
						"description": "The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency."
					},
					"amount_received": {
						"type": "number",
						"format": "double",
						"description": "The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency."
					},
					"amount_returned": {
						"type": "number",
						"format": "double",
						"description": "The total amount that was returned to the customer. The amount returned is expressed in the source's currency."
					},
					"refund_attributes_method": {
						"type": "string",
						"description": "Type of refund attribute method, one of `email`, `manual`, or `none`."
					},
					"refund_attributes_status": {
						"type": "string",
						"description": "Type of refund attribute status, one of `missing`, `requested`, or `available`."
					}
				},
				"required": [
					"address",
					"amount_charged",
					"amount_received",
					"amount_returned",
					"refund_attributes_method",
					"refund_attributes_status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.Redirect": {
				"properties": {
					"failure_reason": {
						"type": "string",
						"nullable": true,
						"description": "The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`."
					},
					"return_url": {
						"type": "string",
						"description": "The URL you provide to redirect the customer to after they authenticated their payment."
					},
					"status": {
						"type": "string",
						"description": "The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused)."
					},
					"url": {
						"type": "string",
						"description": "The URL provided to you to redirect a customer to as part of a `redirect` authentication flow."
					}
				},
				"required": [
					"failure_reason",
					"return_url",
					"status",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.SepaCreditTransfer": {
				"properties": {
					"bank_name": {
						"type": "string",
						"nullable": true
					},
					"bic": {
						"type": "string",
						"nullable": true
					},
					"iban": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_address_city": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_address_country": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_address_line1": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_address_line2": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_address_postal_code": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_address_state": {
						"type": "string",
						"nullable": true
					},
					"refund_account_holder_name": {
						"type": "string",
						"nullable": true
					},
					"refund_iban": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.SepaDebit": {
				"properties": {
					"bank_code": {
						"type": "string",
						"nullable": true
					},
					"branch_code": {
						"type": "string",
						"nullable": true
					},
					"country": {
						"type": "string",
						"nullable": true
					},
					"fingerprint": {
						"type": "string",
						"nullable": true
					},
					"last4": {
						"type": "string",
						"nullable": true
					},
					"mandate_reference": {
						"type": "string",
						"nullable": true
					},
					"mandate_url": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.Sofort": {
				"properties": {
					"bank_code": {
						"type": "string",
						"nullable": true
					},
					"bank_name": {
						"type": "string",
						"nullable": true
					},
					"bic": {
						"type": "string",
						"nullable": true
					},
					"country": {
						"type": "string",
						"nullable": true
					},
					"iban_last4": {
						"type": "string",
						"nullable": true
					},
					"preferred_language": {
						"type": "string",
						"nullable": true
					},
					"statement_descriptor": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.SourceOrder.Item": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount (price) for this order item."
					},
					"currency": {
						"type": "string",
						"nullable": true,
						"description": "This currency of this order item. Required when `amount` is present."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "Human-readable description for this order item."
					},
					"parent": {
						"type": "string",
						"nullable": true,
						"description": "The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU)."
					},
					"quantity": {
						"type": "number",
						"format": "double",
						"description": "The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered."
					},
					"type": {
						"type": "string",
						"nullable": true,
						"description": "The type of this order item. Must be `sku`, `tax`, or `shipping`."
					}
				},
				"required": [
					"amount",
					"currency",
					"description",
					"parent",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.SourceOrder.Shipping": {
				"properties": {
					"address": {
						"$ref": "#/components/schemas/stripe.Stripe.Address"
					},
					"carrier": {
						"type": "string",
						"nullable": true,
						"description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc."
					},
					"name": {
						"type": "string",
						"description": "Recipient name."
					},
					"phone": {
						"type": "string",
						"nullable": true,
						"description": "Recipient phone (including extension)."
					},
					"tracking_number": {
						"type": "string",
						"nullable": true,
						"description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.SourceOrder": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"email": {
						"type": "string",
						"description": "The email address of the customer placing the order."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Source.SourceOrder.Item"
						},
						"type": "array",
						"nullable": true,
						"description": "List of items constituting the order."
					},
					"shipping": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.SourceOrder.Shipping"
					}
				},
				"required": [
					"amount",
					"currency",
					"items"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.ThreeDSecure": {
				"properties": {
					"address_line1_check": {
						"type": "string",
						"nullable": true
					},
					"address_zip_check": {
						"type": "string",
						"nullable": true
					},
					"authenticated": {
						"type": "boolean",
						"nullable": true
					},
					"brand": {
						"type": "string",
						"nullable": true
					},
					"card": {
						"type": "string",
						"nullable": true
					},
					"country": {
						"type": "string",
						"nullable": true
					},
					"customer": {
						"type": "string",
						"nullable": true
					},
					"cvc_check": {
						"type": "string",
						"nullable": true
					},
					"description": {
						"type": "string"
					},
					"dynamic_last4": {
						"type": "string",
						"nullable": true
					},
					"exp_month": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"exp_year": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"fingerprint": {
						"type": "string"
					},
					"funding": {
						"type": "string",
						"nullable": true
					},
					"iin": {
						"type": "string"
					},
					"issuer": {
						"type": "string"
					},
					"last4": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"three_d_secure": {
						"type": "string"
					},
					"tokenization_method": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source.Type": {
				"type": "string",
				"enum": [
					"ach_credit_transfer",
					"ach_debit",
					"acss_debit",
					"alipay",
					"au_becs_debit",
					"bancontact",
					"card",
					"card_present",
					"eps",
					"giropay",
					"ideal",
					"klarna",
					"multibanco",
					"p24",
					"sepa_credit_transfer",
					"sepa_debit",
					"sofort",
					"three_d_secure",
					"wechat"
				]
			},
			"stripe.Stripe.Source.Wechat": {
				"properties": {
					"prepay_id": {
						"type": "string"
					},
					"qr_code_url": {
						"type": "string",
						"nullable": true
					},
					"statement_descriptor": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Source": {
				"description": "`Source` objects allow you to accept a variety of payment methods. They\nrepresent a customer's payment instrument, and can be used with the Stripe API\njust like a `Card` object: once chargeable, they can be charged, or can be\nattached to customers.\n\nStripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).\nWe recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).\nThis newer API provides access to our latest features and payment method types.\n\nRelated guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"source"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"ach_credit_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.AchCreditTransfer"
					},
					"ach_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.AchDebit"
					},
					"acss_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.AcssDebit"
					},
					"alipay": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.Alipay"
					},
					"amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources."
					},
					"au_becs_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.AuBecsDebit"
					},
					"bancontact": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.Bancontact"
					},
					"card": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.Card"
					},
					"card_present": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.CardPresent"
					},
					"client_secret": {
						"type": "string",
						"description": "The client secret of the source. Used for client-side retrieval using a publishable key."
					},
					"code_verification": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.CodeVerification"
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"nullable": true,
						"description": "Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources."
					},
					"customer": {
						"type": "string",
						"description": "The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer."
					},
					"eps": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.Eps"
					},
					"flow": {
						"type": "string",
						"description": "The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`."
					},
					"giropay": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.Giropay"
					},
					"ideal": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.Ideal"
					},
					"klarna": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.Klarna"
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"multibanco": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.Multibanco"
					},
					"owner": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Source.Owner"
							}
						],
						"nullable": true,
						"description": "Information about the owner of the payment instrument that may be used or required by particular source types."
					},
					"p24": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.P24"
					},
					"receiver": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.Receiver"
					},
					"redirect": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.Redirect"
					},
					"sepa_credit_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.SepaCreditTransfer"
					},
					"sepa_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.SepaDebit"
					},
					"sofort": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.Sofort"
					},
					"source_order": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.SourceOrder"
					},
					"statement_descriptor": {
						"type": "string",
						"nullable": true,
						"description": "Extra information about a source. This will appear on your customer's statement every time you charge the source."
					},
					"status": {
						"type": "string",
						"description": "The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge."
					},
					"three_d_secure": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.ThreeDSecure"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.Type",
						"description": "The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used."
					},
					"usage": {
						"type": "string",
						"nullable": true,
						"description": "Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned."
					},
					"wechat": {
						"$ref": "#/components/schemas/stripe.Stripe.Source.Wechat"
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"client_secret",
					"created",
					"currency",
					"flow",
					"livemode",
					"metadata",
					"owner",
					"statement_descriptor",
					"status",
					"type",
					"usage"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.CustomerSource": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/stripe.Stripe.Account"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.BankAccount"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.Card"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.Source"
					}
				]
			},
			"stripe.Stripe.Coupon.AppliesTo": {
				"properties": {
					"products": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "A list of product IDs this coupon applies to"
					}
				},
				"required": [
					"products"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Coupon.CurrencyOptions": {
				"properties": {
					"amount_off": {
						"type": "number",
						"format": "double",
						"description": "Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer."
					}
				},
				"required": [
					"amount_off"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Coupon.Duration": {
				"type": "string",
				"enum": [
					"forever",
					"once",
					"repeating"
				]
			},
			"stripe.Stripe.Coupon": {
				"description": "A coupon contains information about a percent-off or amount-off discount you\nmight want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),\n[checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"coupon"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount_off": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer."
					},
					"applies_to": {
						"$ref": "#/components/schemas/stripe.Stripe.Coupon.AppliesTo"
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"nullable": true,
						"description": "If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off."
					},
					"currency_options": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/stripe.Stripe.Coupon.CurrencyOptions"
						},
						"type": "object",
						"description": "Coupons defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies)."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"duration": {
						"$ref": "#/components/schemas/stripe.Stripe.Coupon.Duration",
						"description": "One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount."
					},
					"duration_in_months": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"max_redemptions": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the coupon displayed to customers on for instance invoices or receipts."
					},
					"percent_off": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $ (or local equivalent)100 invoice $ (or local equivalent)50 instead."
					},
					"redeem_by": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Date after which the coupon can no longer be redeemed."
					},
					"times_redeemed": {
						"type": "number",
						"format": "double",
						"description": "Number of times this coupon has been applied to a customer."
					},
					"valid": {
						"type": "boolean",
						"description": "Taking account of the above properties, whether this coupon can still be applied to a customer."
					}
				},
				"required": [
					"id",
					"object",
					"amount_off",
					"created",
					"currency",
					"duration",
					"duration_in_months",
					"livemode",
					"max_redemptions",
					"metadata",
					"name",
					"percent_off",
					"redeem_by",
					"times_redeemed",
					"valid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PromotionCode.Restrictions.CurrencyOptions": {
				"properties": {
					"minimum_amount": {
						"type": "number",
						"format": "double",
						"description": "Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work)."
					}
				},
				"required": [
					"minimum_amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PromotionCode.Restrictions": {
				"properties": {
					"currency_options": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/stripe.Stripe.PromotionCode.Restrictions.CurrencyOptions"
						},
						"type": "object",
						"description": "Promotion code restrictions defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies)."
					},
					"first_time_transaction": {
						"type": "boolean",
						"description": "A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices"
					},
					"minimum_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work)."
					},
					"minimum_amount_currency": {
						"type": "string",
						"nullable": true,
						"description": "Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount"
					}
				},
				"required": [
					"first_time_transaction",
					"minimum_amount",
					"minimum_amount_currency"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PromotionCode": {
				"description": "A Promotion Code represents a customer-redeemable code for a [coupon](https://stripe.com/docs/api#coupons). It can be used to\ncreate multiple codes for a single coupon.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"promotion_code"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"active": {
						"type": "boolean",
						"description": "Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid."
					},
					"code": {
						"type": "string",
						"description": "The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer."
					},
					"coupon": {
						"$ref": "#/components/schemas/stripe.Stripe.Coupon",
						"description": "A coupon contains information about a percent-off or amount-off discount you\nmight want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),\n[checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents)."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomer"
							}
						],
						"nullable": true,
						"description": "The customer that this promotion code can be used by."
					},
					"expires_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Date at which the promotion code can no longer be redeemed."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"max_redemptions": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Maximum number of times this promotion code can be redeemed."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"restrictions": {
						"$ref": "#/components/schemas/stripe.Stripe.PromotionCode.Restrictions"
					},
					"times_redeemed": {
						"type": "number",
						"format": "double",
						"description": "Number of times this promotion code has been used."
					}
				},
				"required": [
					"id",
					"object",
					"active",
					"code",
					"coupon",
					"created",
					"customer",
					"expires_at",
					"livemode",
					"max_redemptions",
					"metadata",
					"restrictions",
					"times_redeemed"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Discount": {
				"description": "A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).\nIt contains information about when the discount began, when it will end, and what it is applied to.\n\nRelated guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)",
				"properties": {
					"id": {
						"type": "string",
						"description": "The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array."
					},
					"object": {
						"type": "string",
						"enum": [
							"discount"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"checkout_session": {
						"type": "string",
						"nullable": true,
						"description": "The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode."
					},
					"coupon": {
						"$ref": "#/components/schemas/stripe.Stripe.Coupon",
						"description": "A coupon contains information about a percent-off or amount-off discount you\nmight want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),\n[checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents)."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomer"
							}
						],
						"nullable": true,
						"description": "The ID of the customer associated with this discount."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"end": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null."
					},
					"invoice": {
						"type": "string",
						"nullable": true,
						"description": "The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice."
					},
					"invoice_item": {
						"type": "string",
						"nullable": true,
						"description": "The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item."
					},
					"promotion_code": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PromotionCode"
							}
						],
						"nullable": true,
						"description": "The promotion code applied to create this discount."
					},
					"start": {
						"type": "number",
						"format": "double",
						"description": "Date that the coupon was applied."
					},
					"subscription": {
						"type": "string",
						"nullable": true,
						"description": "The subscription that this coupon is applied to, if it is applied to a particular subscription."
					},
					"subscription_item": {
						"type": "string",
						"nullable": true,
						"description": "The subscription item that this coupon is applied to, if it is applied to a particular subscription item."
					}
				},
				"required": [
					"id",
					"object",
					"checkout_session",
					"coupon",
					"customer",
					"end",
					"invoice",
					"invoice_item",
					"promotion_code",
					"start",
					"subscription",
					"subscription_item"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Customer.InvoiceSettings.CustomField": {
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the custom field."
					},
					"value": {
						"type": "string",
						"description": "The value of the custom field."
					}
				},
				"required": [
					"name",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.AcssDebit": {
				"properties": {
					"bank_name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the bank associated with the bank account."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."
					},
					"institution_number": {
						"type": "string",
						"nullable": true,
						"description": "Institution number of the bank account."
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four digits of the bank account number."
					},
					"transit_number": {
						"type": "string",
						"nullable": true,
						"description": "Transit number of the bank account."
					}
				},
				"required": [
					"bank_name",
					"fingerprint",
					"institution_number",
					"last4",
					"transit_number"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Affirm": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.AfterpayClearpay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Alipay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.AllowRedisplay": {
				"type": "string",
				"enum": [
					"always",
					"limited",
					"unspecified"
				]
			},
			"stripe.Stripe.PaymentMethod.AmazonPay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.AuBecsDebit": {
				"properties": {
					"bsb_number": {
						"type": "string",
						"nullable": true,
						"description": "Six-digit number identifying bank and branch associated with this bank account."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four digits of the bank account number."
					}
				},
				"required": [
					"bsb_number",
					"fingerprint",
					"last4"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.BacsDebit": {
				"properties": {
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four digits of the bank account number."
					},
					"sort_code": {
						"type": "string",
						"nullable": true,
						"description": "Sort code of the bank account. (e.g., `10-20-30`)"
					}
				},
				"required": [
					"fingerprint",
					"last4",
					"sort_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Bancontact": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.BillingDetails": {
				"properties": {
					"address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "Billing address."
					},
					"email": {
						"type": "string",
						"nullable": true,
						"description": "Email address."
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "Full name."
					},
					"phone": {
						"type": "string",
						"nullable": true,
						"description": "Billing phone number (including extension)."
					}
				},
				"required": [
					"address",
					"email",
					"name",
					"phone"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Blik": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Boleto": {
				"properties": {
					"tax_id": {
						"type": "string",
						"description": "Uniquely identifies the customer tax id (CNPJ or CPF)"
					}
				},
				"required": [
					"tax_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.Checks": {
				"properties": {
					"address_line1_check": {
						"type": "string",
						"nullable": true,
						"description": "If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."
					},
					"address_postal_code_check": {
						"type": "string",
						"nullable": true,
						"description": "If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."
					},
					"cvc_check": {
						"type": "string",
						"nullable": true,
						"description": "If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."
					}
				},
				"required": [
					"address_line1_check",
					"address_postal_code_check",
					"cvc_check"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Offline": {
				"properties": {
					"stored_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Time at which the payment was collected while offline"
					},
					"type": {
						"type": "string",
						"enum": [
							"deferred",
							null
						],
						"nullable": true,
						"description": "The method used to process this payment method offline. Only deferred is allowed."
					}
				},
				"required": [
					"stored_at",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.ReadMethod": {
				"type": "string",
				"enum": [
					"contact_emv",
					"contactless_emv",
					"contactless_magstripe_mode",
					"magnetic_stripe_fallback",
					"magnetic_stripe_track2"
				]
			},
			"stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Receipt.AccountType": {
				"type": "string",
				"enum": [
					"checking",
					"credit",
					"prepaid",
					"unknown"
				]
			},
			"stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Receipt": {
				"properties": {
					"account_type": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Receipt.AccountType",
						"description": "The type of account being debited or credited"
					},
					"application_cryptogram": {
						"type": "string",
						"nullable": true,
						"description": "EMV tag 9F26, cryptogram generated by the integrated circuit chip."
					},
					"application_preferred_name": {
						"type": "string",
						"nullable": true,
						"description": "Mnenomic of the Application Identifier."
					},
					"authorization_code": {
						"type": "string",
						"nullable": true,
						"description": "Identifier for this transaction."
					},
					"authorization_response_code": {
						"type": "string",
						"nullable": true,
						"description": "EMV tag 8A. A code returned by the card issuer."
					},
					"cardholder_verification_method": {
						"type": "string",
						"nullable": true,
						"description": "Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`."
					},
					"dedicated_file_name": {
						"type": "string",
						"nullable": true,
						"description": "EMV tag 84. Similar to the application identifier stored on the integrated circuit chip."
					},
					"terminal_verification_results": {
						"type": "string",
						"nullable": true,
						"description": "The outcome of a series of EMV functions performed by the card reader."
					},
					"transaction_status_information": {
						"type": "string",
						"nullable": true,
						"description": "An indication of various EMV functions performed during the transaction."
					}
				},
				"required": [
					"application_cryptogram",
					"application_preferred_name",
					"authorization_code",
					"authorization_response_code",
					"cardholder_verification_method",
					"dedicated_file_name",
					"terminal_verification_results",
					"transaction_status_information"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Wallet.Type": {
				"type": "string",
				"enum": [
					"apple_pay",
					"google_pay",
					"samsung_pay",
					"unknown"
				]
			},
			"stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Wallet": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Wallet.Type",
						"description": "The type of mobile wallet, one of `apple_pay`, `google_pay`, `samsung_pay`, or `unknown`."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent": {
				"properties": {
					"amount_authorized": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The authorized amount"
					},
					"brand": {
						"type": "string",
						"nullable": true,
						"description": "Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."
					},
					"brand_product": {
						"type": "string",
						"nullable": true,
						"description": "The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card."
					},
					"capture_before": {
						"type": "number",
						"format": "double",
						"description": "When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured."
					},
					"cardholder_name": {
						"type": "string",
						"nullable": true,
						"description": "The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)"
					},
					"emv_auth_data": {
						"type": "string",
						"nullable": true,
						"description": "Authorization response cryptogram."
					},
					"exp_month": {
						"type": "number",
						"format": "double",
						"description": "Two-digit number representing the card's expiration month."
					},
					"exp_year": {
						"type": "number",
						"format": "double",
						"description": "Four-digit number representing the card's expiration year."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*"
					},
					"funding": {
						"type": "string",
						"nullable": true,
						"description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."
					},
					"generated_card": {
						"type": "string",
						"nullable": true,
						"description": "ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod."
					},
					"iin": {
						"type": "string",
						"nullable": true,
						"description": "Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)"
					},
					"incremental_authorization_supported": {
						"type": "boolean",
						"description": "Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support)."
					},
					"issuer": {
						"type": "string",
						"nullable": true,
						"description": "The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)"
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "The last four digits of the card."
					},
					"network": {
						"type": "string",
						"nullable": true,
						"description": "Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."
					},
					"network_transaction_id": {
						"type": "string",
						"nullable": true,
						"description": "This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. The first three digits of the Trace ID is the Financial Network Code, the next 6 digits is the Banknet Reference Number, and the last 4 digits represent the date (MM/DD). This field will be available for successful Visa, Mastercard, or American Express transactions and always null for other card brands."
					},
					"offline": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Offline"
							}
						],
						"nullable": true,
						"description": "Details about payments collected offline."
					},
					"overcapture_supported": {
						"type": "boolean",
						"description": "Defines whether the authorized amount can be over-captured or not"
					},
					"preferred_locales": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "EMV tag 5F2D. Preferred languages specified by the integrated circuit chip."
					},
					"read_method": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.ReadMethod"
							}
						],
						"nullable": true,
						"description": "How card details were read in this transaction."
					},
					"receipt": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Receipt"
							}
						],
						"nullable": true,
						"description": "A collection of fields required to be displayed on receipts. Only required for EMV transactions."
					},
					"wallet": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Wallet"
					}
				},
				"required": [
					"amount_authorized",
					"brand",
					"brand_product",
					"cardholder_name",
					"country",
					"emv_auth_data",
					"exp_month",
					"exp_year",
					"fingerprint",
					"funding",
					"generated_card",
					"incremental_authorization_supported",
					"last4",
					"network",
					"network_transaction_id",
					"offline",
					"overcapture_supported",
					"preferred_locales",
					"read_method",
					"receipt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails": {
				"properties": {
					"card_present": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent"
					},
					"type": {
						"type": "string",
						"description": "The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.FlowDirection": {
				"type": "string",
				"enum": [
					"inbound",
					"outbound"
				]
			},
			"stripe.Stripe.PaymentMethod": {
				"description": "PaymentMethod objects represent your customer's payment instruments.\nYou can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to\nCustomer objects to store instrument details for future payments.\n\nRelated guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"payment_method"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"acss_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.AcssDebit"
					},
					"affirm": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Affirm"
					},
					"afterpay_clearpay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.AfterpayClearpay"
					},
					"alipay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Alipay"
					},
					"allow_redisplay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.AllowRedisplay",
						"description": "This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”."
					},
					"amazon_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.AmazonPay"
					},
					"au_becs_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.AuBecsDebit"
					},
					"bacs_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.BacsDebit"
					},
					"bancontact": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Bancontact"
					},
					"billing_details": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.BillingDetails"
					},
					"blik": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Blik"
					},
					"boleto": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Boleto"
					},
					"card": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card"
					},
					"card_present": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.CardPresent"
					},
					"cashapp": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Cashapp"
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							}
						],
						"nullable": true,
						"description": "The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer."
					},
					"customer_balance": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.CustomerBalance"
					},
					"eps": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Eps"
					},
					"fpx": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Fpx"
					},
					"giropay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Giropay"
					},
					"grabpay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Grabpay"
					},
					"ideal": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Ideal"
					},
					"interac_present": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.InteracPresent"
					},
					"klarna": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Klarna"
					},
					"konbini": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Konbini"
					},
					"link": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Link"
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"mobilepay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Mobilepay"
					},
					"multibanco": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Multibanco"
					},
					"oxxo": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Oxxo"
					},
					"p24": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.P24"
					},
					"paynow": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Paynow"
					},
					"paypal": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Paypal"
					},
					"pix": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Pix"
					},
					"promptpay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Promptpay"
					},
					"radar_options": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.RadarOptions",
						"description": "Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information."
					},
					"revolut_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.RevolutPay"
					},
					"sepa_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.SepaDebit"
					},
					"sofort": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Sofort"
					},
					"swish": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Swish"
					},
					"twint": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Twint"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Type",
						"description": "The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type."
					},
					"us_bank_account": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.UsBankAccount"
					},
					"wechat_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.WechatPay"
					},
					"zip": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Zip"
					}
				},
				"required": [
					"id",
					"object",
					"billing_details",
					"created",
					"customer",
					"livemode",
					"metadata",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.AcssDebit": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.AmazonPay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.AuBecsDebit": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.BacsDebit": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.CustomerAcceptance.Offline": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.CustomerAcceptance.Online": {
				"properties": {
					"ip_address": {
						"type": "string",
						"nullable": true,
						"description": "The customer accepts the mandate from this IP address."
					},
					"user_agent": {
						"type": "string",
						"nullable": true,
						"description": "The customer accepts the mandate using the user agent of the browser."
					}
				},
				"required": [
					"ip_address",
					"user_agent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.CustomerAcceptance.Type": {
				"type": "string",
				"enum": [
					"offline",
					"online"
				]
			},
			"stripe.Stripe.Mandate.CustomerAcceptance": {
				"properties": {
					"accepted_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The time that the customer accepts the mandate."
					},
					"offline": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.CustomerAcceptance.Offline"
					},
					"online": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.CustomerAcceptance.Online"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.CustomerAcceptance.Type",
						"description": "The mandate includes the type of customer acceptance information, such as: `online` or `offline`."
					}
				},
				"required": [
					"accepted_at",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.MultiUse": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit.DefaultFor": {
				"type": "string",
				"enum": [
					"invoice",
					"subscription"
				]
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit.PaymentSchedule": {
				"type": "string",
				"enum": [
					"combined",
					"interval",
					"sporadic"
				]
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit.TransactionType": {
				"type": "string",
				"enum": [
					"business",
					"personal"
				]
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit": {
				"properties": {
					"default_for": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit.DefaultFor"
						},
						"type": "array",
						"description": "List of Stripe products where this mandate can be selected automatically."
					},
					"interval_description": {
						"type": "string",
						"nullable": true,
						"description": "Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'."
					},
					"payment_schedule": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit.PaymentSchedule",
						"description": "Payment schedule for the mandate."
					},
					"transaction_type": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit.TransactionType",
						"description": "Transaction type of the mandate."
					}
				},
				"required": [
					"interval_description",
					"payment_schedule",
					"transaction_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.AmazonPay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.AuBecsDebit": {
				"properties": {
					"url": {
						"type": "string",
						"description": "The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively."
					}
				},
				"required": [
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.BacsDebit.NetworkStatus": {
				"type": "string",
				"enum": [
					"accepted",
					"pending",
					"refused",
					"revoked"
				]
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.BacsDebit.RevocationReason": {
				"type": "string",
				"enum": [
					"account_closed",
					"bank_account_restricted",
					"bank_ownership_changed",
					"could_not_process",
					"debit_not_authorized"
				]
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.BacsDebit": {
				"properties": {
					"network_status": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.BacsDebit.NetworkStatus",
						"description": "The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`."
					},
					"reference": {
						"type": "string",
						"description": "The unique reference identifying the mandate on the Bacs network."
					},
					"revocation_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.BacsDebit.RevocationReason"
							}
						],
						"nullable": true,
						"description": "When the mandate is revoked on the Bacs network this field displays the reason for the revocation."
					},
					"url": {
						"type": "string",
						"description": "The URL that will contain the mandate that the customer has signed."
					}
				},
				"required": [
					"network_status",
					"reference",
					"revocation_reason",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.Card": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.Cashapp": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.Link": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.Paypal": {
				"properties": {
					"billing_agreement_id": {
						"type": "string",
						"nullable": true,
						"description": "The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer."
					},
					"payer_id": {
						"type": "string",
						"nullable": true,
						"description": "PayPal account PayerID. This identifier uniquely identifies the PayPal customer."
					}
				},
				"required": [
					"billing_agreement_id",
					"payer_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.RevolutPay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.SepaDebit": {
				"properties": {
					"reference": {
						"type": "string",
						"description": "The unique reference of the mandate."
					},
					"url": {
						"type": "string",
						"description": "The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively."
					}
				},
				"required": [
					"reference",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails.UsBankAccount": {
				"properties": {
					"collection_method": {
						"type": "string",
						"enum": [
							"paper"
						],
						"nullable": false,
						"description": "Mandate collection method"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.PaymentMethodDetails": {
				"properties": {
					"acss_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit"
					},
					"amazon_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.AmazonPay"
					},
					"au_becs_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.AuBecsDebit"
					},
					"bacs_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.BacsDebit"
					},
					"card": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.Card"
					},
					"cashapp": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.Cashapp"
					},
					"link": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.Link"
					},
					"paypal": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.Paypal"
					},
					"revolut_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.RevolutPay"
					},
					"sepa_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.SepaDebit"
					},
					"type": {
						"type": "string",
						"description": "This mandate corresponds with a specific payment method type. The `payment_method_details` includes an additional hash with the same name and contains mandate information that's specific to that payment method."
					},
					"us_bank_account": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails.UsBankAccount"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.SingleUse": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The amount of the payment on a single use mandate."
					},
					"currency": {
						"type": "string",
						"description": "The currency of the payment on a single use mandate."
					}
				},
				"required": [
					"amount",
					"currency"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Mandate.Status": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"pending"
				]
			},
			"stripe.Stripe.Mandate.Type": {
				"type": "string",
				"enum": [
					"multi_use",
					"single_use"
				]
			},
			"stripe.Stripe.Mandate": {
				"description": "A Mandate is a record of the permission that your customer gives you to debit their payment method.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"mandate"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"customer_acceptance": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.CustomerAcceptance"
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"multi_use": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.MultiUse"
					},
					"on_behalf_of": {
						"type": "string",
						"description": "The account (if any) that the mandate is intended for."
					},
					"payment_method": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"description": "ID of the payment method associated with this mandate."
					},
					"payment_method_details": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.PaymentMethodDetails"
					},
					"single_use": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.SingleUse"
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.Status",
						"description": "The mandate status indicates whether or not you can use it to initiate a payment."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Mandate.Type",
						"description": "The type of the mandate."
					}
				},
				"required": [
					"id",
					"object",
					"customer_acceptance",
					"livemode",
					"payment_method",
					"payment_method_details",
					"status",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Bancontact.PreferredLanguage": {
				"type": "string",
				"enum": [
					"de",
					"en",
					"fr",
					"nl"
				]
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Bancontact": {
				"properties": {
					"bank_code": {
						"type": "string",
						"nullable": true,
						"description": "Bank code of bank associated with the bank account."
					},
					"bank_name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the bank associated with the bank account."
					},
					"bic": {
						"type": "string",
						"nullable": true,
						"description": "Bank Identifier Code of the bank associated with the bank account."
					},
					"generated_sepa_debit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"nullable": true,
						"description": "The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt."
					},
					"generated_sepa_debit_mandate": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Mandate"
							}
						],
						"nullable": true,
						"description": "The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt."
					},
					"iban_last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four characters of the IBAN."
					},
					"preferred_language": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Bancontact.PreferredLanguage"
							}
						],
						"nullable": true,
						"description": "Preferred language of the Bancontact authorization page that the customer is redirected to.\nCan be one of `en`, `de`, `fr`, or `nl`"
					},
					"verified_name": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified full name. Values are verified or provided by Bancontact directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
					}
				},
				"required": [
					"bank_code",
					"bank_name",
					"bic",
					"generated_sepa_debit",
					"generated_sepa_debit_mandate",
					"iban_last4",
					"preferred_language",
					"verified_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Boleto": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Checks": {
				"properties": {
					"address_line1_check": {
						"type": "string",
						"nullable": true,
						"description": "If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."
					},
					"address_postal_code_check": {
						"type": "string",
						"nullable": true,
						"description": "If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."
					},
					"cvc_check": {
						"type": "string",
						"nullable": true,
						"description": "If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."
					}
				},
				"required": [
					"address_line1_check",
					"address_postal_code_check",
					"cvc_check"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.AuthenticationFlow": {
				"type": "string",
				"enum": [
					"challenge",
					"frictionless"
				]
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.ElectronicCommerceIndicator": {
				"type": "string",
				"enum": [
					"01",
					"02",
					"05",
					"06",
					"07"
				]
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.Result": {
				"type": "string",
				"enum": [
					"attempt_acknowledged",
					"authenticated",
					"exempted",
					"failed",
					"not_supported",
					"processing_error"
				]
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.ResultReason": {
				"type": "string",
				"enum": [
					"abandoned",
					"bypassed",
					"canceled",
					"card_not_enrolled",
					"network_not_supported",
					"protocol_error",
					"rejected"
				]
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.Version": {
				"type": "string",
				"enum": [
					"1.0.2",
					"2.1.0",
					"2.2.0"
				]
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure": {
				"properties": {
					"authentication_flow": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.AuthenticationFlow"
							}
						],
						"nullable": true,
						"description": "For authenticated transactions: how the customer was authenticated by\nthe issuing bank."
					},
					"electronic_commerce_indicator": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.ElectronicCommerceIndicator"
							}
						],
						"nullable": true,
						"description": "The Electronic Commerce Indicator (ECI). A protocol-level field\nindicating what degree of authentication was performed."
					},
					"result": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.Result"
							}
						],
						"nullable": true,
						"description": "Indicates the outcome of 3D Secure authentication."
					},
					"result_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.ResultReason"
							}
						],
						"nullable": true,
						"description": "Additional information about why 3D Secure succeeded or failed based\non the `result`."
					},
					"transaction_id": {
						"type": "string",
						"nullable": true,
						"description": "The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID\n(dsTransId) for this payment."
					},
					"version": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.Version"
							}
						],
						"nullable": true,
						"description": "The version of 3D Secure that was used."
					}
				},
				"required": [
					"authentication_flow",
					"electronic_commerce_indicator",
					"result",
					"result_reason",
					"transaction_id",
					"version"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet.ApplePay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet.GooglePay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet.Type": {
				"type": "string",
				"enum": [
					"apple_pay",
					"google_pay",
					"link"
				]
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet": {
				"properties": {
					"apple_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet.ApplePay"
					},
					"google_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet.GooglePay"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet.Type",
						"description": "The type of the card wallet, one of `apple_pay`, `google_pay`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card": {
				"properties": {
					"brand": {
						"type": "string",
						"nullable": true,
						"description": "Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."
					},
					"checks": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Checks"
							}
						],
						"nullable": true,
						"description": "Check results by Card networks on Card address and CVC at the time of authorization"
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)"
					},
					"exp_month": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Two-digit number representing the card's expiration month."
					},
					"exp_year": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Four-digit number representing the card's expiration year."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*"
					},
					"funding": {
						"type": "string",
						"nullable": true,
						"description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."
					},
					"iin": {
						"type": "string",
						"nullable": true,
						"description": "Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)"
					},
					"issuer": {
						"type": "string",
						"nullable": true,
						"description": "The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)"
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "The last four digits of the card."
					},
					"network": {
						"type": "string",
						"nullable": true,
						"description": "Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."
					},
					"three_d_secure": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure"
							}
						],
						"nullable": true,
						"description": "Populated if this authorization used 3D Secure authentication."
					},
					"wallet": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet"
							}
						],
						"nullable": true,
						"description": "If this Card is part of a card wallet, this contains the details of the card wallet."
					}
				},
				"required": [
					"brand",
					"checks",
					"country",
					"exp_month",
					"exp_year",
					"funding",
					"last4",
					"network",
					"three_d_secure",
					"wallet"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.CardPresent.Offline": {
				"properties": {
					"stored_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Time at which the payment was collected while offline"
					},
					"type": {
						"type": "string",
						"enum": [
							"deferred",
							null
						],
						"nullable": true,
						"description": "The method used to process this payment method offline. Only deferred is allowed."
					}
				},
				"required": [
					"stored_at",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.CardPresent": {
				"properties": {
					"generated_card": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"nullable": true,
						"description": "The ID of the Card PaymentMethod which was generated by this SetupAttempt."
					},
					"offline": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.CardPresent.Offline"
							}
						],
						"nullable": true,
						"description": "Details about payments collected offline."
					}
				},
				"required": [
					"generated_card",
					"offline"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Cashapp": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Ideal.Bank": {
				"type": "string",
				"enum": [
					"abn_amro",
					"asn_bank",
					"bunq",
					"handelsbanken",
					"ing",
					"knab",
					"moneyou",
					"n26",
					"nn",
					"rabobank",
					"regiobank",
					"revolut",
					"sns_bank",
					"triodos_bank",
					"van_lanschot",
					"yoursafe"
				]
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Ideal.Bic": {
				"type": "string",
				"enum": [
					"ABNANL2A",
					"ASNBNL21",
					"BITSNL2A",
					"BUNQNL2A",
					"FVLBNL22",
					"HANDNL2A",
					"INGBNL2A",
					"KNABNL2H",
					"MOYONL21",
					"NNBANL2G",
					"NTSBDEB1",
					"RABONL2U",
					"RBRBNL21",
					"REVOIE23",
					"REVOLT21",
					"SNSBNL2A",
					"TRIONL2U"
				]
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Ideal": {
				"properties": {
					"bank": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Ideal.Bank"
							}
						],
						"nullable": true,
						"description": "The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`."
					},
					"bic": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Ideal.Bic"
							}
						],
						"nullable": true,
						"description": "The Bank Identifier Code of the customer's bank."
					},
					"generated_sepa_debit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"nullable": true,
						"description": "The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt."
					},
					"generated_sepa_debit_mandate": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Mandate"
							}
						],
						"nullable": true,
						"description": "The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt."
					},
					"iban_last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four characters of the IBAN."
					},
					"verified_name": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified full name. Values are verified or provided by iDEAL directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
					}
				},
				"required": [
					"bank",
					"bic",
					"generated_sepa_debit",
					"generated_sepa_debit_mandate",
					"iban_last4",
					"verified_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Klarna": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Link": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Paypal": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.RevolutPay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.SepaDebit": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Sofort.PreferredLanguage": {
				"type": "string",
				"enum": [
					"de",
					"en",
					"fr",
					"nl"
				]
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.Sofort": {
				"properties": {
					"bank_code": {
						"type": "string",
						"nullable": true,
						"description": "Bank code of bank associated with the bank account."
					},
					"bank_name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the bank associated with the bank account."
					},
					"bic": {
						"type": "string",
						"nullable": true,
						"description": "Bank Identifier Code of the bank associated with the bank account."
					},
					"generated_sepa_debit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"nullable": true,
						"description": "The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt."
					},
					"generated_sepa_debit_mandate": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Mandate"
							}
						],
						"nullable": true,
						"description": "The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt."
					},
					"iban_last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four characters of the IBAN."
					},
					"preferred_language": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Sofort.PreferredLanguage"
							}
						],
						"nullable": true,
						"description": "Preferred language of the Sofort authorization page that the customer is redirected to.\nCan be one of `en`, `de`, `fr`, or `nl`"
					},
					"verified_name": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified full name. Values are verified or provided by Sofort directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
					}
				},
				"required": [
					"bank_code",
					"bank_name",
					"bic",
					"generated_sepa_debit",
					"generated_sepa_debit_mandate",
					"iban_last4",
					"preferred_language",
					"verified_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails.UsBankAccount": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.PaymentMethodDetails": {
				"properties": {
					"acss_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.AcssDebit"
					},
					"amazon_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.AmazonPay"
					},
					"au_becs_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.AuBecsDebit"
					},
					"bacs_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.BacsDebit"
					},
					"bancontact": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Bancontact"
					},
					"boleto": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Boleto"
					},
					"card": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card"
					},
					"card_present": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.CardPresent"
					},
					"cashapp": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Cashapp"
					},
					"ideal": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Ideal"
					},
					"klarna": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Klarna"
					},
					"link": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Link"
					},
					"paypal": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Paypal"
					},
					"revolut_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.RevolutPay"
					},
					"sepa_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.SepaDebit"
					},
					"sofort": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.Sofort"
					},
					"type": {
						"type": "string",
						"description": "The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method."
					},
					"us_bank_account": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails.UsBankAccount"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.SetupError.Code": {
				"type": "string",
				"enum": [
					"account_closed",
					"account_country_invalid_address",
					"account_error_country_change_requires_additional_steps",
					"account_information_mismatch",
					"account_invalid",
					"account_number_invalid",
					"acss_debit_session_incomplete",
					"alipay_upgrade_required",
					"amount_too_large",
					"amount_too_small",
					"api_key_expired",
					"application_fees_not_allowed",
					"authentication_required",
					"balance_insufficient",
					"balance_invalid_parameter",
					"bank_account_bad_routing_numbers",
					"bank_account_declined",
					"bank_account_exists",
					"bank_account_restricted",
					"bank_account_unusable",
					"bank_account_unverified",
					"bank_account_verification_failed",
					"billing_invalid_mandate",
					"bitcoin_upgrade_required",
					"capture_charge_authorization_expired",
					"capture_unauthorized_payment",
					"card_decline_rate_limit_exceeded",
					"card_declined",
					"cardholder_phone_number_required",
					"charge_already_captured",
					"charge_already_refunded",
					"charge_disputed",
					"charge_exceeds_source_limit",
					"charge_exceeds_transaction_limit",
					"charge_expired_for_capture",
					"charge_invalid_parameter",
					"charge_not_refundable",
					"clearing_code_unsupported",
					"country_code_invalid",
					"country_unsupported",
					"coupon_expired",
					"customer_max_payment_methods",
					"customer_max_subscriptions",
					"customer_tax_location_invalid",
					"debit_not_authorized",
					"email_invalid",
					"expired_card",
					"financial_connections_account_inactive",
					"financial_connections_no_successful_transaction_refresh",
					"forwarding_api_inactive",
					"forwarding_api_invalid_parameter",
					"forwarding_api_upstream_connection_error",
					"forwarding_api_upstream_connection_timeout",
					"idempotency_key_in_use",
					"incorrect_address",
					"incorrect_cvc",
					"incorrect_number",
					"incorrect_zip",
					"instant_payouts_config_disabled",
					"instant_payouts_currency_disabled",
					"instant_payouts_limit_exceeded",
					"instant_payouts_unsupported",
					"insufficient_funds",
					"intent_invalid_state",
					"intent_verification_method_missing",
					"invalid_card_type",
					"invalid_characters",
					"invalid_charge_amount",
					"invalid_cvc",
					"invalid_expiry_month",
					"invalid_expiry_year",
					"invalid_mandate_reference_prefix_format",
					"invalid_number",
					"invalid_source_usage",
					"invalid_tax_location",
					"invoice_no_customer_line_items",
					"invoice_no_payment_method_types",
					"invoice_no_subscription_line_items",
					"invoice_not_editable",
					"invoice_on_behalf_of_not_editable",
					"invoice_payment_intent_requires_action",
					"invoice_upcoming_none",
					"livemode_mismatch",
					"lock_timeout",
					"missing",
					"no_account",
					"not_allowed_on_standard_account",
					"out_of_inventory",
					"ownership_declaration_not_allowed",
					"parameter_invalid_empty",
					"parameter_invalid_integer",
					"parameter_invalid_string_blank",
					"parameter_invalid_string_empty",
					"parameter_missing",
					"parameter_unknown",
					"parameters_exclusive",
					"payment_intent_action_required",
					"payment_intent_authentication_failure",
					"payment_intent_incompatible_payment_method",
					"payment_intent_invalid_parameter",
					"payment_intent_konbini_rejected_confirmation_number",
					"payment_intent_mandate_invalid",
					"payment_intent_payment_attempt_expired",
					"payment_intent_payment_attempt_failed",
					"payment_intent_unexpected_state",
					"payment_method_bank_account_already_verified",
					"payment_method_bank_account_blocked",
					"payment_method_billing_details_address_missing",
					"payment_method_configuration_failures",
					"payment_method_currency_mismatch",
					"payment_method_customer_decline",
					"payment_method_invalid_parameter",
					"payment_method_invalid_parameter_testmode",
					"payment_method_microdeposit_failed",
					"payment_method_microdeposit_verification_amounts_invalid",
					"payment_method_microdeposit_verification_amounts_mismatch",
					"payment_method_microdeposit_verification_attempts_exceeded",
					"payment_method_microdeposit_verification_descriptor_code_mismatch",
					"payment_method_microdeposit_verification_timeout",
					"payment_method_not_available",
					"payment_method_provider_decline",
					"payment_method_provider_timeout",
					"payment_method_unactivated",
					"payment_method_unexpected_state",
					"payment_method_unsupported_type",
					"payout_reconciliation_not_ready",
					"payouts_limit_exceeded",
					"payouts_not_allowed",
					"platform_account_required",
					"platform_api_key_expired",
					"postal_code_invalid",
					"processing_error",
					"product_inactive",
					"progressive_onboarding_limit_exceeded",
					"rate_limit",
					"refer_to_customer",
					"refund_disputed_payment",
					"resource_already_exists",
					"resource_missing",
					"return_intent_already_processed",
					"routing_number_invalid",
					"secret_key_required",
					"sepa_unsupported_account",
					"setup_attempt_failed",
					"setup_intent_authentication_failure",
					"setup_intent_invalid_parameter",
					"setup_intent_mandate_invalid",
					"setup_intent_setup_attempt_expired",
					"setup_intent_unexpected_state",
					"shipping_address_invalid",
					"shipping_calculation_failed",
					"sku_inactive",
					"state_unsupported",
					"status_transition_invalid",
					"stripe_tax_inactive",
					"tax_id_invalid",
					"taxes_calculation_failed",
					"terminal_location_country_unsupported",
					"terminal_reader_busy",
					"terminal_reader_hardware_fault",
					"terminal_reader_invalid_location_for_activation",
					"terminal_reader_invalid_location_for_payment",
					"terminal_reader_offline",
					"terminal_reader_timeout",
					"testmode_charges_only",
					"tls_version_unsupported",
					"token_already_used",
					"token_card_network_invalid",
					"token_in_use",
					"transfer_source_balance_parameters_mismatch",
					"transfers_not_allowed",
					"url_invalid"
				]
			},
			"stripe.Stripe.PaymentIntent.AmountDetails.Tip": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Portion of the amount that corresponds to a tip."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.AmountDetails": {
				"properties": {
					"tip": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.AmountDetails.Tip"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.AutomaticPaymentMethods.AllowRedirects": {
				"type": "string",
				"enum": [
					"always",
					"never"
				]
			},
			"stripe.Stripe.PaymentIntent.AutomaticPaymentMethods": {
				"properties": {
					"allow_redirects": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.AutomaticPaymentMethods.AllowRedirects",
						"description": "Controls whether this PaymentIntent will accept redirect-based payment methods.\n\nRedirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the payment."
					},
					"enabled": {
						"type": "boolean",
						"description": "Automatically calculates compatible payment methods"
					}
				},
				"required": [
					"enabled"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.CancellationReason": {
				"type": "string",
				"enum": [
					"abandoned",
					"automatic",
					"duplicate",
					"failed_invoice",
					"fraudulent",
					"requested_by_customer",
					"void_invoice"
				]
			},
			"stripe.Stripe.PaymentIntent.CaptureMethod": {
				"type": "string",
				"enum": [
					"automatic",
					"automatic_async",
					"manual"
				]
			},
			"stripe.Stripe.PaymentIntent.ConfirmationMethod": {
				"type": "string",
				"enum": [
					"automatic",
					"manual"
				]
			},
			"stripe.Stripe.TaxId.Owner.Type": {
				"type": "string",
				"enum": [
					"account",
					"application",
					"customer",
					"self"
				]
			},
			"stripe.Stripe.TaxId.Owner": {
				"properties": {
					"account": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The account being referenced when `type` is `account`."
					},
					"application": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Application"
							}
						],
						"description": "The Connect Application being referenced when `type` is `application`."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							}
						],
						"description": "The customer being referenced when `type` is `customer`."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.TaxId.Owner.Type",
						"description": "Type of owner referenced."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.TaxId.Type": {
				"type": "string",
				"enum": [
					"ad_nrt",
					"ae_trn",
					"ar_cuit",
					"au_abn",
					"au_arn",
					"bg_uic",
					"bh_vat",
					"bo_tin",
					"br_cnpj",
					"br_cpf",
					"ca_bn",
					"ca_gst_hst",
					"ca_pst_bc",
					"ca_pst_mb",
					"ca_pst_sk",
					"ca_qst",
					"ch_uid",
					"ch_vat",
					"cl_tin",
					"cn_tin",
					"co_nit",
					"cr_tin",
					"de_stn",
					"do_rcn",
					"ec_ruc",
					"eg_tin",
					"es_cif",
					"eu_oss_vat",
					"eu_vat",
					"gb_vat",
					"ge_vat",
					"hk_br",
					"hr_oib",
					"hu_tin",
					"id_npwp",
					"il_vat",
					"in_gst",
					"is_vat",
					"jp_cn",
					"jp_rn",
					"jp_trn",
					"ke_pin",
					"kr_brn",
					"kz_bin",
					"li_uid",
					"mx_rfc",
					"my_frp",
					"my_itn",
					"my_sst",
					"ng_tin",
					"no_vat",
					"no_voec",
					"nz_gst",
					"om_vat",
					"pe_ruc",
					"ph_tin",
					"ro_tin",
					"rs_pib",
					"ru_inn",
					"ru_kpp",
					"sa_vat",
					"sg_gst",
					"sg_uen",
					"si_tin",
					"sv_nit",
					"th_vat",
					"tr_tin",
					"tw_vat",
					"ua_vat",
					"unknown",
					"us_ein",
					"uy_ruc",
					"ve_rif",
					"vn_tin",
					"za_vat"
				]
			},
			"stripe.Stripe.TaxId.Verification.Status": {
				"type": "string",
				"enum": [
					"pending",
					"unavailable",
					"unverified",
					"verified"
				]
			},
			"stripe.Stripe.TaxId.Verification": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.TaxId.Verification.Status",
						"description": "Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`."
					},
					"verified_address": {
						"type": "string",
						"nullable": true,
						"description": "Verified address."
					},
					"verified_name": {
						"type": "string",
						"nullable": true,
						"description": "Verified name."
					}
				},
				"required": [
					"status",
					"verified_address",
					"verified_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.TaxId": {
				"description": "You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers) or account.\nCustomer and account tax IDs get displayed on related invoices and credit notes.\n\nRelated guides: [Customer tax identification numbers](https://stripe.com/docs/billing/taxes/tax-ids), [Account tax IDs](https://stripe.com/docs/invoicing/connect#account-tax-ids)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"tax_id"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country of the tax ID."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							}
						],
						"nullable": true,
						"description": "ID of the customer."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"owner": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.TaxId.Owner"
							}
						],
						"nullable": true,
						"description": "The account or customer the tax ID belongs to."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.TaxId.Type",
						"description": "Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hr_oib`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`. Note that some legacy tax IDs have type `unknown`"
					},
					"value": {
						"type": "string",
						"description": "Value of the tax ID."
					},
					"verification": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.TaxId.Verification"
							}
						],
						"nullable": true,
						"description": "Tax ID verification information."
					}
				},
				"required": [
					"id",
					"object",
					"country",
					"created",
					"customer",
					"livemode",
					"owner",
					"type",
					"value",
					"verification"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.DeletedTaxId": {
				"description": "The DeletedTaxId object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"tax_id"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"deleted": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false,
						"description": "Always true for a deleted object"
					}
				},
				"required": [
					"id",
					"object",
					"deleted"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.AutomaticTax.Liability.Type": {
				"type": "string",
				"enum": [
					"account",
					"self"
				]
			},
			"stripe.Stripe.Invoice.AutomaticTax.Liability": {
				"properties": {
					"account": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The connected account being referenced when `type` is `account`."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.AutomaticTax.Liability.Type",
						"description": "Type of the account referenced."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.AutomaticTax.Status": {
				"type": "string",
				"enum": [
					"complete",
					"failed",
					"requires_location_inputs"
				]
			},
			"stripe.Stripe.Invoice.AutomaticTax": {
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "Whether Stripe automatically computes tax on this invoice. Note that incompatible invoice items (invoice items with manually specified [tax rates](https://stripe.com/docs/api/tax_rates), negative amounts, or `tax_behavior=unspecified`) cannot be added to automatic tax invoices."
					},
					"liability": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.AutomaticTax.Liability"
							}
						],
						"nullable": true,
						"description": "The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account."
					},
					"status": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.AutomaticTax.Status"
							}
						],
						"nullable": true,
						"description": "The status of the most recent automated tax calculation for this invoice."
					}
				},
				"required": [
					"enabled",
					"liability",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.BillingReason": {
				"type": "string",
				"enum": [
					"automatic_pending_invoice_item_invoice",
					"manual",
					"quote_accept",
					"subscription",
					"subscription_create",
					"subscription_cycle",
					"subscription_threshold",
					"subscription_update",
					"upcoming"
				]
			},
			"stripe.Stripe.BalanceTransaction.FeeDetail": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount of the fee, in cents."
					},
					"application": {
						"type": "string",
						"nullable": true,
						"description": "ID of the Connect application that earned the fee."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "An arbitrary string attached to the object. Often useful for displaying to users."
					},
					"type": {
						"type": "string",
						"description": "Type of the fee, one of: `application_fee`, `payment_method_passthrough_fee`, `stripe_fee` or `tax`."
					}
				},
				"required": [
					"amount",
					"application",
					"currency",
					"description",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ApplicationFee": {
				"description": "The ApplicationFee object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"application_fee"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"account": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "ID of the Stripe account this fee was taken from."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount earned, in cents (or local equivalent)."
					},
					"amount_refunded": {
						"type": "number",
						"format": "double",
						"description": "Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the fee if a partial refund was issued)"
					},
					"application": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Application"
							}
						],
						"description": "ID of the Connect application that earned the fee."
					},
					"balance_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
							}
						],
						"nullable": true,
						"description": "Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds)."
					},
					"charge": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge"
							}
						],
						"description": "ID of the charge that the application fee was taken from."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"fee_source": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.ApplicationFee.FeeSource"
							}
						],
						"nullable": true,
						"description": "Polymorphic source of the application fee. Includes the ID of the object the application fee was created from."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"originating_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge"
							}
						],
						"nullable": true,
						"description": "ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter."
					},
					"refunded": {
						"type": "boolean",
						"description": "Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false."
					},
					"refunds": {
						"$ref": "#/components/schemas/stripe.Stripe.ApiList_stripe.Stripe.FeeRefund_",
						"description": "A list of refunds that have been applied to the fee."
					}
				},
				"required": [
					"id",
					"object",
					"account",
					"amount",
					"amount_refunded",
					"application",
					"balance_transaction",
					"charge",
					"created",
					"currency",
					"fee_source",
					"livemode",
					"originating_transaction",
					"refunded",
					"refunds"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge": {
				"description": "The `Charge` object represents a single attempt to move money into your Stripe account.\nPaymentIntent confirmation is the most common way to create Charges, but transferring\nmoney to a different Stripe account through Connect also creates Charges.\nSome legacy payment flows create Charges directly, which is not recommended for new integrations.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"charge"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99)."
					},
					"amount_captured": {
						"type": "number",
						"format": "double",
						"description": "Amount in cents (or local equivalent) captured (can be less than the amount attribute on the charge if a partial capture was made)."
					},
					"amount_refunded": {
						"type": "number",
						"format": "double",
						"description": "Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the charge if a partial refund was issued)."
					},
					"application": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Application"
							}
						],
						"nullable": true,
						"description": "ID of the Connect application that created the charge."
					},
					"application_fee": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.ApplicationFee"
							}
						],
						"nullable": true,
						"description": "The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details."
					},
					"application_fee_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details."
					},
					"authorization_code": {
						"type": "string",
						"description": "Authorization code on the charge."
					},
					"balance_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
							}
						],
						"nullable": true,
						"description": "ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes)."
					},
					"billing_details": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.BillingDetails"
					},
					"calculated_statement_descriptor": {
						"type": "string",
						"nullable": true,
						"description": "The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. This value only exists for card payments."
					},
					"captured": {
						"type": "boolean",
						"description": "If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomer"
							}
						],
						"nullable": true,
						"description": "ID of the customer this charge is for if one exists."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "An arbitrary string attached to the object. Often useful for displaying to users."
					},
					"disputed": {
						"type": "boolean",
						"description": "Whether the charge has been disputed."
					},
					"failure_balance_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
							}
						],
						"nullable": true,
						"description": "ID of the balance transaction that describes the reversal of the balance on your account due to payment failure."
					},
					"failure_code": {
						"type": "string",
						"nullable": true,
						"description": "Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/error-codes) for a list of codes)."
					},
					"failure_message": {
						"type": "string",
						"nullable": true,
						"description": "Message to user further explaining reason for charge failure if available."
					},
					"fraud_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.FraudDetails"
							}
						],
						"nullable": true,
						"description": "Information on fraud assessments for the charge."
					},
					"invoice": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice"
							}
						],
						"nullable": true,
						"description": "ID of the invoice this charge is for if one exists."
					},
					"level3": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.Level3"
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"on_behalf_of": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"nullable": true,
						"description": "The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers) for details."
					},
					"outcome": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.Outcome"
							}
						],
						"nullable": true,
						"description": "Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details."
					},
					"paid": {
						"type": "boolean",
						"description": "`true` if the charge succeeded, or was successfully authorized for later capture."
					},
					"payment_intent": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent"
							}
						],
						"nullable": true,
						"description": "ID of the PaymentIntent associated with this charge, if one exists."
					},
					"payment_method": {
						"type": "string",
						"nullable": true,
						"description": "ID of the payment method used in this charge."
					},
					"payment_method_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails"
							}
						],
						"nullable": true,
						"description": "Details about the payment method at the time of the transaction."
					},
					"radar_options": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.RadarOptions",
						"description": "Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information."
					},
					"receipt_email": {
						"type": "string",
						"nullable": true,
						"description": "This is the email address that the receipt for this charge was sent to."
					},
					"receipt_number": {
						"type": "string",
						"nullable": true,
						"description": "This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent."
					},
					"receipt_url": {
						"type": "string",
						"nullable": true,
						"description": "This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt."
					},
					"refunded": {
						"type": "boolean",
						"description": "Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false."
					},
					"refunds": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.ApiList_stripe.Stripe.Refund_"
							}
						],
						"nullable": true,
						"description": "A list of refunds that have been applied to the charge."
					},
					"review": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Review"
							}
						],
						"nullable": true,
						"description": "ID of the review associated with this charge if one exists."
					},
					"shipping": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.Shipping"
							}
						],
						"nullable": true,
						"description": "Shipping information for the charge."
					},
					"source": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.CustomerSource"
							}
						],
						"nullable": true,
						"description": "This is a legacy field that will be removed in the future. It contains the Source, Card, or BankAccount object used for the charge. For details about the payment method used for this charge, refer to `payment_method` or `payment_method_details` instead."
					},
					"source_transfer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Transfer"
							}
						],
						"nullable": true,
						"description": "The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://docs.stripe.com/connect/destination-charges) for details."
					},
					"statement_descriptor": {
						"type": "string",
						"nullable": true,
						"description": "For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).\n\nFor a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix."
					},
					"statement_descriptor_suffix": {
						"type": "string",
						"nullable": true,
						"description": "Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.Status",
						"description": "The status of the payment is either `succeeded`, `pending`, or `failed`."
					},
					"transfer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Transfer"
							}
						],
						"description": "ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter)."
					},
					"transfer_data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.TransferData"
							}
						],
						"nullable": true,
						"description": "An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details."
					},
					"transfer_group": {
						"type": "string",
						"nullable": true,
						"description": "A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"amount_captured",
					"amount_refunded",
					"application",
					"application_fee",
					"application_fee_amount",
					"balance_transaction",
					"billing_details",
					"calculated_statement_descriptor",
					"captured",
					"created",
					"currency",
					"customer",
					"description",
					"disputed",
					"failure_balance_transaction",
					"failure_code",
					"failure_message",
					"fraud_details",
					"invoice",
					"livemode",
					"metadata",
					"on_behalf_of",
					"outcome",
					"paid",
					"payment_intent",
					"payment_method",
					"payment_method_details",
					"receipt_email",
					"receipt_number",
					"receipt_url",
					"refunded",
					"review",
					"shipping",
					"source",
					"source_transfer",
					"statement_descriptor",
					"statement_descriptor_suffix",
					"status",
					"transfer_data",
					"transfer_group"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ConnectCollectionTransfer": {
				"description": "The ConnectCollectionTransfer object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"connect_collection_transfer"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount transferred, in cents (or local equivalent)."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"destination": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "ID of the account that funds are being collected for."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"currency",
					"destination",
					"livemode"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.BalanceTransaction": {
				"description": "Balance transactions represent funds moving through your Stripe account.\nStripe creates them for every type of transaction that enters or leaves your Stripe account balance.\n\nRelated guide: [Balance transaction types](https://stripe.com/docs/reports/balance-transaction-types)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"balance_transaction"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Gross amount of this transaction (in cents (or local equivalent)). A positive value represents funds charged to another party, and a negative value represents funds sent to another party."
					},
					"available_on": {
						"type": "number",
						"format": "double",
						"description": "The date that the transaction's net funds become available in the Stripe balance."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "An arbitrary string attached to the object. Often useful for displaying to users."
					},
					"exchange_rate": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "If applicable, this transaction uses an exchange rate. If money converts from currency A to currency B, then the `amount` in currency A, multipled by the `exchange_rate`, equals the `amount` in currency B. For example, if you charge a customer 10.00 EUR, the PaymentIntent's `amount` is `1000` and `currency` is `eur`. If this converts to 12.34 USD in your Stripe account, the BalanceTransaction's `amount` is `1234`, its `currency` is `usd`, and the `exchange_rate` is `1.234`."
					},
					"fee": {
						"type": "number",
						"format": "double",
						"description": "Fees (in cents (or local equivalent)) paid for this transaction. Represented as a positive integer when assessed."
					},
					"fee_details": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction.FeeDetail"
						},
						"type": "array",
						"description": "Detailed breakdown of fees (in cents (or local equivalent)) paid for this transaction."
					},
					"net": {
						"type": "number",
						"format": "double",
						"description": "Net impact to a Stripe balance (in cents (or local equivalent)). A positive value represents incrementing a Stripe balance, and a negative value decrementing a Stripe balance. You can calculate the net impact of a transaction on a balance by `amount` - `fee`"
					},
					"reporting_category": {
						"type": "string",
						"description": "Learn more about how [reporting categories](https://stripe.com/docs/reports/reporting-categories) can help you understand balance transactions from an accounting perspective."
					},
					"source": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.BalanceTransactionSource"
							}
						],
						"nullable": true,
						"description": "This transaction relates to the Stripe object."
					},
					"status": {
						"type": "string",
						"description": "The transaction's net funds status in the Stripe balance, which are either `available` or `pending`."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction.Type",
						"description": "Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. Learn more about [balance transaction types and what they represent](https://stripe.com/docs/reports/balance-transaction-types). To classify transactions for accounting purposes, consider `reporting_category` instead."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"available_on",
					"created",
					"currency",
					"description",
					"exchange_rate",
					"fee",
					"fee_details",
					"net",
					"reporting_category",
					"source",
					"status",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.CustomerCashBalanceTransaction": {
				"description": "Customers with certain payments enabled have a cash balance, representing funds that were paid\nby the customer to a merchant, but have not yet been allocated to a payment. Cash Balance Transactions\nrepresent when funds are moved into or out of this balance. This includes funding by the customer, allocation\nto payments, and refunds to the customer.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"customer_cash_balance_transaction"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"adjusted_for_overdraft": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction.AdjustedForOverdraft"
					},
					"applied_to_payment": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction.AppliedToPayment"
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							}
						],
						"description": "The customer whose available cash balance changed as a result of this transaction."
					},
					"ending_balance": {
						"type": "number",
						"format": "double",
						"description": "The total available cash balance for the specified currency after this transaction was applied. Represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."
					},
					"funded": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction.Funded"
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"net_amount": {
						"type": "number",
						"format": "double",
						"description": "The amount by which the cash balance changed, represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). A positive value represents funds being added to the cash balance, a negative value represents funds being removed from the cash balance."
					},
					"refunded_from_payment": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction.RefundedFromPayment"
					},
					"transferred_to_balance": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction.TransferredToBalance"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction.Type",
						"description": "The type of the cash balance transaction. New types may be added in future. See [Customer Balance](https://stripe.com/docs/payments/customer-balance#types) to learn more about these types."
					},
					"unapplied_from_payment": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction.UnappliedFromPayment"
					}
				},
				"required": [
					"id",
					"object",
					"created",
					"currency",
					"customer",
					"ending_balance",
					"livemode",
					"net_amount",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.CustomerCashBalanceTransaction.AdjustedForOverdraft": {
				"properties": {
					"balance_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
							}
						],
						"description": "The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds taken out of your Stripe balance."
					},
					"linked_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction"
							}
						],
						"description": "The [Cash Balance Transaction](https://stripe.com/docs/api/cash_balance_transactions/object) that brought the customer balance negative, triggering the clawback of funds."
					}
				},
				"required": [
					"balance_transaction",
					"linked_transaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent": {
				"description": "A PaymentIntent guides you through the process of collecting a payment from your customer.\nWe recommend that you create exactly one PaymentIntent for each order or\ncustomer session in your system. You can reference the PaymentIntent later to\nsee the history of payment attempts for a particular session.\n\nA PaymentIntent transitions through\n[multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)\nthroughout its lifetime as it interfaces with Stripe.js to perform\nauthentication flows and ultimately creates at most one successful charge.\n\nRelated guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"payment_intent"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99)."
					},
					"amount_capturable": {
						"type": "number",
						"format": "double",
						"description": "Amount that can be captured from this PaymentIntent."
					},
					"amount_details": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.AmountDetails"
					},
					"amount_received": {
						"type": "number",
						"format": "double",
						"description": "Amount that this PaymentIntent collects."
					},
					"application": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Application"
							}
						],
						"nullable": true,
						"description": "ID of the Connect application that created the PaymentIntent."
					},
					"application_fee_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts)."
					},
					"automatic_payment_methods": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.AutomaticPaymentMethods"
							}
						],
						"nullable": true,
						"description": "Settings to configure compatible payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods)"
					},
					"canceled_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch."
					},
					"cancellation_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.CancellationReason"
							}
						],
						"nullable": true,
						"description": "Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`)."
					},
					"capture_method": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.CaptureMethod",
						"description": "Controls when the funds will be captured from the customer's account."
					},
					"client_secret": {
						"type": "string",
						"nullable": true,
						"description": "The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.\n\nThe client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.\n\nRefer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled."
					},
					"confirmation_method": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.ConfirmationMethod",
						"description": "Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomer"
							}
						],
						"nullable": true,
						"description": "ID of the Customer this PaymentIntent belongs to, if one exists.\n\nPayment methods attached to other Customers cannot be used with this PaymentIntent.\n\nIf [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "An arbitrary string attached to the object. Often useful for displaying to users."
					},
					"invoice": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice"
							}
						],
						"nullable": true,
						"description": "ID of the invoice that created this PaymentIntent, if it exists."
					},
					"last_payment_error": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.LastPaymentError"
							}
						],
						"nullable": true,
						"description": "The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason."
					},
					"latest_charge": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge"
							}
						],
						"nullable": true,
						"description": "ID of the latest [Charge object](https://stripe.com/docs/api/charges) created by this PaymentIntent. This property is `null` until PaymentIntent confirmation is attempted."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata)."
					},
					"next_action": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction"
							}
						],
						"nullable": true,
						"description": "If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source."
					},
					"on_behalf_of": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"nullable": true,
						"description": "The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details."
					},
					"payment_method": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"nullable": true,
						"description": "ID of the payment method used in this PaymentIntent."
					},
					"payment_method_configuration_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodConfigurationDetails"
							}
						],
						"nullable": true,
						"description": "Information about the payment method configuration used for this PaymentIntent."
					},
					"payment_method_options": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions"
							}
						],
						"nullable": true,
						"description": "Payment-method-specific configuration for this PaymentIntent."
					},
					"payment_method_types": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The list of payment method types (e.g. card) that this PaymentIntent is allowed to use."
					},
					"processing": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.Processing"
							}
						],
						"nullable": true,
						"description": "If present, this property tells you about the processing state of the payment."
					},
					"receipt_email": {
						"type": "string",
						"nullable": true,
						"description": "Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails)."
					},
					"review": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Review"
							}
						],
						"nullable": true,
						"description": "ID of the review associated with this PaymentIntent, if any."
					},
					"setup_future_usage": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.SetupFutureUsage"
							}
						],
						"nullable": true,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					},
					"shipping": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.Shipping"
							}
						],
						"nullable": true,
						"description": "Shipping information for this PaymentIntent."
					},
					"source": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.CustomerSource"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomerSource"
							}
						],
						"nullable": true,
						"description": "This is a legacy field that will be removed in the future. It is the ID of the Source object that is associated with this PaymentIntent, if one was supplied."
					},
					"statement_descriptor": {
						"type": "string",
						"nullable": true,
						"description": "Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).\n\nSetting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead."
					},
					"statement_descriptor_suffix": {
						"type": "string",
						"nullable": true,
						"description": "Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.Status",
						"description": "Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses)."
					},
					"transfer_data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.TransferData"
							}
						],
						"nullable": true,
						"description": "The data that automatically creates a Transfer after the payment finalizes. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts)."
					},
					"transfer_group": {
						"type": "string",
						"nullable": true,
						"description": "A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers)."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"amount_capturable",
					"amount_received",
					"application",
					"application_fee_amount",
					"automatic_payment_methods",
					"canceled_at",
					"cancellation_reason",
					"capture_method",
					"client_secret",
					"confirmation_method",
					"created",
					"currency",
					"customer",
					"description",
					"invoice",
					"last_payment_error",
					"latest_charge",
					"livemode",
					"metadata",
					"next_action",
					"on_behalf_of",
					"payment_method",
					"payment_method_configuration_details",
					"payment_method_options",
					"payment_method_types",
					"processing",
					"receipt_email",
					"review",
					"setup_future_usage",
					"shipping",
					"source",
					"statement_descriptor",
					"statement_descriptor_suffix",
					"status",
					"transfer_data",
					"transfer_group"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.CustomerCashBalanceTransaction.AppliedToPayment": {
				"properties": {
					"payment_intent": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent"
							}
						],
						"description": "The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were applied to."
					}
				},
				"required": [
					"payment_intent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.EuBankTransfer": {
				"properties": {
					"bic": {
						"type": "string",
						"nullable": true,
						"description": "The BIC of the bank of the sender of the funding."
					},
					"iban_last4": {
						"type": "string",
						"nullable": true,
						"description": "The last 4 digits of the IBAN of the sender of the funding."
					},
					"sender_name": {
						"type": "string",
						"nullable": true,
						"description": "The full name of the sender, as supplied by the sending bank."
					}
				},
				"required": [
					"bic",
					"iban_last4",
					"sender_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.GbBankTransfer": {
				"properties": {
					"account_number_last4": {
						"type": "string",
						"nullable": true,
						"description": "The last 4 digits of the account number of the sender of the funding."
					},
					"sender_name": {
						"type": "string",
						"nullable": true,
						"description": "The full name of the sender, as supplied by the sending bank."
					},
					"sort_code": {
						"type": "string",
						"nullable": true,
						"description": "The sort code of the bank of the sender of the funding"
					}
				},
				"required": [
					"account_number_last4",
					"sender_name",
					"sort_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.JpBankTransfer": {
				"properties": {
					"sender_bank": {
						"type": "string",
						"nullable": true,
						"description": "The name of the bank of the sender of the funding."
					},
					"sender_branch": {
						"type": "string",
						"nullable": true,
						"description": "The name of the bank branch of the sender of the funding."
					},
					"sender_name": {
						"type": "string",
						"nullable": true,
						"description": "The full name of the sender, as supplied by the sending bank."
					}
				},
				"required": [
					"sender_bank",
					"sender_branch",
					"sender_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.Type": {
				"type": "string",
				"enum": [
					"eu_bank_transfer",
					"gb_bank_transfer",
					"jp_bank_transfer",
					"mx_bank_transfer",
					"us_bank_transfer"
				]
			},
			"stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.UsBankTransfer.Network": {
				"type": "string",
				"enum": [
					"ach",
					"domestic_wire_us",
					"swift"
				]
			},
			"stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.UsBankTransfer": {
				"properties": {
					"network": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.UsBankTransfer.Network",
						"description": "The banking network used for this funding."
					},
					"sender_name": {
						"type": "string",
						"nullable": true,
						"description": "The full name of the sender, as supplied by the sending bank."
					}
				},
				"required": [
					"sender_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer": {
				"properties": {
					"eu_bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.EuBankTransfer"
					},
					"gb_bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.GbBankTransfer"
					},
					"jp_bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.JpBankTransfer"
					},
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "The user-supplied reference field on the bank transfer."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.Type",
						"description": "The funding method type used to fund the customer balance. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`."
					},
					"us_bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.UsBankTransfer"
					}
				},
				"required": [
					"reference",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.CustomerCashBalanceTransaction.Funded": {
				"properties": {
					"bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer"
					}
				},
				"required": [
					"bank_transfer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Affirm": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.AfterpayClearpay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Alipay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.AmazonPay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.AuBankTransfer": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Blik": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "The reference assigned to the refund."
					},
					"reference_status": {
						"type": "string",
						"nullable": true,
						"description": "Status of the reference on the refund. This can be `pending`, `available` or `unavailable`."
					}
				},
				"required": [
					"reference",
					"reference_status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.BrBankTransfer": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "The reference assigned to the refund."
					},
					"reference_status": {
						"type": "string",
						"nullable": true,
						"description": "Status of the reference on the refund. This can be `pending`, `available` or `unavailable`."
					}
				},
				"required": [
					"reference",
					"reference_status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Card.Type": {
				"type": "string",
				"enum": [
					"pending",
					"refund",
					"reversal"
				]
			},
			"stripe.Stripe.Refund.DestinationDetails.Card": {
				"properties": {
					"reference": {
						"type": "string",
						"description": "Value of the reference number assigned to the refund."
					},
					"reference_status": {
						"type": "string",
						"description": "Status of the reference number on the refund. This can be `pending`, `available` or `unavailable`."
					},
					"reference_type": {
						"type": "string",
						"description": "Type of the reference number assigned to the refund."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Card.Type",
						"description": "The type of refund. This can be `refund`, `reversal`, or `pending`."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Cashapp": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.CustomerCashBalance": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Eps": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.EuBankTransfer": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "The reference assigned to the refund."
					},
					"reference_status": {
						"type": "string",
						"nullable": true,
						"description": "Status of the reference on the refund. This can be `pending`, `available` or `unavailable`."
					}
				},
				"required": [
					"reference",
					"reference_status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.GbBankTransfer": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "The reference assigned to the refund."
					},
					"reference_status": {
						"type": "string",
						"nullable": true,
						"description": "Status of the reference on the refund. This can be `pending`, `available` or `unavailable`."
					}
				},
				"required": [
					"reference",
					"reference_status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Giropay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Grabpay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.JpBankTransfer": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "The reference assigned to the refund."
					},
					"reference_status": {
						"type": "string",
						"nullable": true,
						"description": "Status of the reference on the refund. This can be `pending`, `available` or `unavailable`."
					}
				},
				"required": [
					"reference",
					"reference_status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Klarna": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Multibanco": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "The reference assigned to the refund."
					},
					"reference_status": {
						"type": "string",
						"nullable": true,
						"description": "Status of the reference on the refund. This can be `pending`, `available` or `unavailable`."
					}
				},
				"required": [
					"reference",
					"reference_status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.MxBankTransfer": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "The reference assigned to the refund."
					},
					"reference_status": {
						"type": "string",
						"nullable": true,
						"description": "Status of the reference on the refund. This can be `pending`, `available` or `unavailable`."
					}
				},
				"required": [
					"reference",
					"reference_status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.P24": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "The reference assigned to the refund."
					},
					"reference_status": {
						"type": "string",
						"nullable": true,
						"description": "Status of the reference on the refund. This can be `pending`, `available` or `unavailable`."
					}
				},
				"required": [
					"reference",
					"reference_status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Paynow": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Paypal": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Pix": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Revolut": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Sofort": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Swish": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "The reference assigned to the refund."
					},
					"reference_status": {
						"type": "string",
						"nullable": true,
						"description": "Status of the reference on the refund. This can be `pending`, `available` or `unavailable`."
					}
				},
				"required": [
					"reference",
					"reference_status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.ThBankTransfer": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "The reference assigned to the refund."
					},
					"reference_status": {
						"type": "string",
						"nullable": true,
						"description": "Status of the reference on the refund. This can be `pending`, `available` or `unavailable`."
					}
				},
				"required": [
					"reference",
					"reference_status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.UsBankTransfer": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "The reference assigned to the refund."
					},
					"reference_status": {
						"type": "string",
						"nullable": true,
						"description": "Status of the reference on the refund. This can be `pending`, `available` or `unavailable`."
					}
				},
				"required": [
					"reference",
					"reference_status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.WechatPay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails.Zip": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.DestinationDetails": {
				"properties": {
					"affirm": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Affirm"
					},
					"afterpay_clearpay": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.AfterpayClearpay"
					},
					"alipay": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Alipay"
					},
					"amazon_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.AmazonPay"
					},
					"au_bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.AuBankTransfer"
					},
					"blik": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Blik"
					},
					"br_bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.BrBankTransfer"
					},
					"card": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Card"
					},
					"cashapp": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Cashapp"
					},
					"customer_cash_balance": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.CustomerCashBalance"
					},
					"eps": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Eps"
					},
					"eu_bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.EuBankTransfer"
					},
					"gb_bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.GbBankTransfer"
					},
					"giropay": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Giropay"
					},
					"grabpay": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Grabpay"
					},
					"jp_bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.JpBankTransfer"
					},
					"klarna": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Klarna"
					},
					"multibanco": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Multibanco"
					},
					"mx_bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.MxBankTransfer"
					},
					"p24": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.P24"
					},
					"paynow": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Paynow"
					},
					"paypal": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Paypal"
					},
					"pix": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Pix"
					},
					"revolut": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Revolut"
					},
					"sofort": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Sofort"
					},
					"swish": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Swish"
					},
					"th_bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.ThBankTransfer"
					},
					"type": {
						"type": "string",
						"description": "The type of transaction-specific details of the payment method used in the refund (e.g., `card`). An additional hash is included on `destination_details` with a name matching this value. It contains information specific to the refund transaction."
					},
					"us_bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.UsBankTransfer"
					},
					"wechat_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.WechatPay"
					},
					"zip": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails.Zip"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.NextAction.DisplayDetails.EmailSent": {
				"properties": {
					"email_sent_at": {
						"type": "number",
						"format": "double",
						"description": "The timestamp when the email was sent."
					},
					"email_sent_to": {
						"type": "string",
						"description": "The recipient's email address."
					}
				},
				"required": [
					"email_sent_at",
					"email_sent_to"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.NextAction.DisplayDetails": {
				"properties": {
					"email_sent": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.NextAction.DisplayDetails.EmailSent"
					},
					"expires_at": {
						"type": "number",
						"format": "double",
						"description": "The expiry timestamp."
					}
				},
				"required": [
					"email_sent",
					"expires_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.NextAction": {
				"properties": {
					"display_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Refund.NextAction.DisplayDetails"
							}
						],
						"nullable": true,
						"description": "Contains the refund details."
					},
					"type": {
						"type": "string",
						"description": "Type of the next action to perform."
					}
				},
				"required": [
					"display_details",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Refund.Reason": {
				"type": "string",
				"enum": [
					"duplicate",
					"expired_uncaptured_charge",
					"fraudulent",
					"requested_by_customer"
				]
			},
			"stripe.Stripe.Refund": {
				"description": "Refund objects allow you to refund a previously created charge that isn't\nrefunded yet. Funds are refunded to the credit or debit card that's\ninitially charged.\n\nRelated guide: [Refunds](https://stripe.com/docs/refunds)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"refund"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount, in cents (or local equivalent)."
					},
					"balance_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
							}
						],
						"nullable": true,
						"description": "Balance transaction that describes the impact on your account balance."
					},
					"charge": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge"
							}
						],
						"nullable": true,
						"description": "ID of the charge that's refunded."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"description": {
						"type": "string",
						"description": "An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only)."
					},
					"destination_details": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.DestinationDetails"
					},
					"failure_balance_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
							}
						],
						"description": "After the refund fails, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction."
					},
					"failure_reason": {
						"type": "string",
						"description": "Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`."
					},
					"instructions_email": {
						"type": "string",
						"description": "For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"next_action": {
						"$ref": "#/components/schemas/stripe.Stripe.Refund.NextAction"
					},
					"payment_intent": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent"
							}
						],
						"nullable": true,
						"description": "ID of the PaymentIntent that's refunded."
					},
					"reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Refund.Reason"
							}
						],
						"nullable": true,
						"description": "Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`)."
					},
					"receipt_number": {
						"type": "string",
						"nullable": true,
						"description": "This is the transaction number that appears on email receipts sent for this refund."
					},
					"source_transfer_reversal": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.TransferReversal"
							}
						],
						"nullable": true,
						"description": "The transfer reversal that's associated with the refund. Only present if the charge came from another Stripe account."
					},
					"status": {
						"type": "string",
						"nullable": true,
						"description": "Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds)."
					},
					"transfer_reversal": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.TransferReversal"
							}
						],
						"nullable": true,
						"description": "This refers to the transfer reversal object if the accompanying transfer reverses. This is only applicable if the charge was created using the destination parameter."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"balance_transaction",
					"charge",
					"created",
					"currency",
					"metadata",
					"payment_intent",
					"reason",
					"receipt_number",
					"source_transfer_reversal",
					"status",
					"transfer_reversal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.TransferReversal": {
				"description": "[Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a\nconnected account, either entirely or partially, and can also specify whether\nto refund any related application fees. Transfer reversals add to the\nplatform's balance and subtract from the destination account's balance.\n\nReversing a transfer that was made for a [destination\ncharge](https://stripe.com/docs/connect/destination-charges) is allowed only up to the amount of\nthe charge. It is possible to reverse a\n[transfer_group](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options)\ntransfer only if the destination account has enough balance to cover the\nreversal.\n\nRelated guide: [Reverse transfers](https://stripe.com/docs/connect/separate-charges-and-transfers#reverse-transfers)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"transfer_reversal"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount, in cents (or local equivalent)."
					},
					"balance_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
							}
						],
						"nullable": true,
						"description": "Balance transaction that describes the impact on your account balance."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"destination_payment_refund": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Refund"
							}
						],
						"nullable": true,
						"description": "Linked payment refund for the transfer reversal."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"source_refund": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Refund"
							}
						],
						"nullable": true,
						"description": "ID of the refund responsible for the transfer reversal."
					},
					"transfer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Transfer"
							}
						],
						"description": "ID of the transfer that was reversed."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"balance_transaction",
					"created",
					"currency",
					"destination_payment_refund",
					"metadata",
					"source_refund",
					"transfer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ApiList_stripe.Stripe.TransferReversal_": {
				"description": "A container for paginated lists of objects.\nThe array of objects is on the `.data` property,\nand `.has_more` indicates whether there are additional objects beyond the end of this list.\n\nLearn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)\nor, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.",
				"properties": {
					"object": {
						"type": "string",
						"enum": [
							"list"
						],
						"nullable": false
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.TransferReversal"
						},
						"type": "array"
					},
					"has_more": {
						"type": "boolean",
						"description": "True if this list has another page of items after this one that can be fetched."
					},
					"url": {
						"type": "string",
						"description": "The URL where this list can be accessed."
					}
				},
				"required": [
					"object",
					"data",
					"has_more",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Transfer": {
				"description": "A `Transfer` object is created when you move funds between Stripe accounts as\npart of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a\nStripe account to a card or bank account. This behavior has since been split\nout into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more\ninformation, read about the\n[transfer/payout split](https://stripe.com/docs/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://stripe.com/docs/connect/separate-charges-and-transfers)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"transfer"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount in cents (or local equivalent) to be transferred."
					},
					"amount_reversed": {
						"type": "number",
						"format": "double",
						"description": "Amount in cents (or local equivalent) reversed (can be less than the amount attribute on the transfer if a partial reversal was issued)."
					},
					"balance_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
							}
						],
						"nullable": true,
						"description": "Balance transaction that describes the impact of this transfer on your account balance."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time that this record of the transfer was first created."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "An arbitrary string attached to the object. Often useful for displaying to users."
					},
					"destination": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"nullable": true,
						"description": "ID of the Stripe account the transfer was sent to."
					},
					"destination_payment": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge"
							}
						],
						"description": "If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"reversals": {
						"$ref": "#/components/schemas/stripe.Stripe.ApiList_stripe.Stripe.TransferReversal_",
						"description": "A list of reversals that have been applied to the transfer."
					},
					"reversed": {
						"type": "boolean",
						"description": "Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false."
					},
					"source_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge"
							}
						],
						"nullable": true,
						"description": "ID of the charge that was used to fund the transfer. If null, the transfer was funded from the available balance."
					},
					"source_type": {
						"type": "string",
						"description": "The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`."
					},
					"transfer_group": {
						"type": "string",
						"nullable": true,
						"description": "A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"amount_reversed",
					"balance_transaction",
					"created",
					"currency",
					"description",
					"destination",
					"livemode",
					"metadata",
					"reversals",
					"reversed",
					"source_transaction",
					"transfer_group"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.CustomerCashBalanceTransaction.RefundedFromPayment": {
				"properties": {
					"refund": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Refund"
							}
						],
						"description": "The [Refund](https://stripe.com/docs/api/refunds/object) that moved these funds into the customer's cash balance."
					}
				},
				"required": [
					"refund"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.CustomerCashBalanceTransaction.TransferredToBalance": {
				"properties": {
					"balance_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
							}
						],
						"description": "The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds transferred to your Stripe balance."
					}
				},
				"required": [
					"balance_transaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.CustomerCashBalanceTransaction.Type": {
				"type": "string",
				"enum": [
					"adjusted_for_overdraft",
					"applied_to_payment",
					"funded",
					"funding_reversed",
					"refunded_from_payment",
					"return_canceled",
					"return_initiated",
					"transferred_to_balance",
					"unapplied_from_payment"
				]
			},
			"stripe.Stripe.CustomerCashBalanceTransaction.UnappliedFromPayment": {
				"properties": {
					"payment_intent": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent"
							}
						],
						"description": "The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were unapplied from."
					}
				},
				"required": [
					"payment_intent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Dispute.Evidence": {
				"properties": {
					"access_activity_log": {
						"type": "string",
						"nullable": true,
						"description": "Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity."
					},
					"billing_address": {
						"type": "string",
						"nullable": true,
						"description": "The billing address provided by the customer."
					},
					"cancellation_policy": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer."
					},
					"cancellation_policy_disclosure": {
						"type": "string",
						"nullable": true,
						"description": "An explanation of how and when the customer was shown your refund policy prior to purchase."
					},
					"cancellation_rebuttal": {
						"type": "string",
						"nullable": true,
						"description": "A justification for why the customer's subscription was not canceled."
					},
					"customer_communication": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service."
					},
					"customer_email_address": {
						"type": "string",
						"nullable": true,
						"description": "The email address of the customer."
					},
					"customer_name": {
						"type": "string",
						"nullable": true,
						"description": "The name of the customer."
					},
					"customer_purchase_ip": {
						"type": "string",
						"nullable": true,
						"description": "The IP address that the customer used when making the purchase."
					},
					"customer_signature": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature."
					},
					"duplicate_charge_documentation": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate."
					},
					"duplicate_charge_explanation": {
						"type": "string",
						"nullable": true,
						"description": "An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate."
					},
					"duplicate_charge_id": {
						"type": "string",
						"nullable": true,
						"description": "The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge."
					},
					"product_description": {
						"type": "string",
						"nullable": true,
						"description": "A description of the product or service that was sold."
					},
					"receipt": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge."
					},
					"refund_policy": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer."
					},
					"refund_policy_disclosure": {
						"type": "string",
						"nullable": true,
						"description": "Documentation demonstrating that the customer was shown your refund policy prior to purchase."
					},
					"refund_refusal_explanation": {
						"type": "string",
						"nullable": true,
						"description": "A justification for why the customer is not entitled to a refund."
					},
					"service_date": {
						"type": "string",
						"nullable": true,
						"description": "The date on which the customer received or began receiving the purchased service, in a clear human-readable format."
					},
					"service_documentation": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement."
					},
					"shipping_address": {
						"type": "string",
						"nullable": true,
						"description": "The address to which a physical product was shipped. You should try to include as complete address information as possible."
					},
					"shipping_carrier": {
						"type": "string",
						"nullable": true,
						"description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas."
					},
					"shipping_date": {
						"type": "string",
						"nullable": true,
						"description": "The date on which a physical product began its route to the shipping address, in a clear human-readable format."
					},
					"shipping_documentation": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible."
					},
					"shipping_tracking_number": {
						"type": "string",
						"nullable": true,
						"description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas."
					},
					"uncategorized_file": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements."
					},
					"uncategorized_text": {
						"type": "string",
						"nullable": true,
						"description": "Any additional evidence or statements."
					}
				},
				"required": [
					"access_activity_log",
					"billing_address",
					"cancellation_policy",
					"cancellation_policy_disclosure",
					"cancellation_rebuttal",
					"customer_communication",
					"customer_email_address",
					"customer_name",
					"customer_purchase_ip",
					"customer_signature",
					"duplicate_charge_documentation",
					"duplicate_charge_explanation",
					"duplicate_charge_id",
					"product_description",
					"receipt",
					"refund_policy",
					"refund_policy_disclosure",
					"refund_refusal_explanation",
					"service_date",
					"service_documentation",
					"shipping_address",
					"shipping_carrier",
					"shipping_date",
					"shipping_documentation",
					"shipping_tracking_number",
					"uncategorized_file",
					"uncategorized_text"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Dispute.EvidenceDetails": {
				"properties": {
					"due_by": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Date by which evidence must be submitted in order to successfully challenge dispute. Will be 0 if the customer's bank or credit card company doesn't allow a response for this particular dispute."
					},
					"has_evidence": {
						"type": "boolean",
						"description": "Whether evidence has been staged for this dispute."
					},
					"past_due": {
						"type": "boolean",
						"description": "Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed."
					},
					"submission_count": {
						"type": "number",
						"format": "double",
						"description": "The number of times evidence has been submitted. Typically, you may only submit evidence once."
					}
				},
				"required": [
					"due_by",
					"has_evidence",
					"past_due",
					"submission_count"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Dispute.PaymentMethodDetails.AmazonPay.DisputeType": {
				"type": "string",
				"enum": [
					"chargeback",
					"claim"
				]
			},
			"stripe.Stripe.Dispute.PaymentMethodDetails.AmazonPay": {
				"properties": {
					"dispute_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Dispute.PaymentMethodDetails.AmazonPay.DisputeType"
							}
						],
						"nullable": true,
						"description": "The AmazonPay dispute type, chargeback or claim"
					}
				},
				"required": [
					"dispute_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Dispute.PaymentMethodDetails.Card.CaseType": {
				"type": "string",
				"enum": [
					"chargeback",
					"inquiry"
				]
			},
			"stripe.Stripe.Dispute.PaymentMethodDetails.Card": {
				"properties": {
					"brand": {
						"type": "string",
						"description": "Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."
					},
					"case_type": {
						"$ref": "#/components/schemas/stripe.Stripe.Dispute.PaymentMethodDetails.Card.CaseType",
						"description": "The type of dispute opened. Different case types may have varying fees and financial impact."
					},
					"network_reason_code": {
						"type": "string",
						"nullable": true,
						"description": "The card network's specific dispute reason code, which maps to one of Stripe's primary dispute categories to simplify response guidance. The [Network code map](https://stripe.com/docs/disputes/categories#network-code-map) lists all available dispute reason codes by network."
					}
				},
				"required": [
					"brand",
					"case_type",
					"network_reason_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Dispute.PaymentMethodDetails.Klarna": {
				"properties": {
					"reason_code": {
						"type": "string",
						"nullable": true,
						"description": "The reason for the dispute as defined by Klarna"
					}
				},
				"required": [
					"reason_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Dispute.PaymentMethodDetails.Paypal": {
				"properties": {
					"case_id": {
						"type": "string",
						"nullable": true,
						"description": "The ID of the dispute in PayPal."
					},
					"reason_code": {
						"type": "string",
						"nullable": true,
						"description": "The reason for the dispute as defined by PayPal"
					}
				},
				"required": [
					"case_id",
					"reason_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Dispute.PaymentMethodDetails.Type": {
				"type": "string",
				"enum": [
					"amazon_pay",
					"card",
					"klarna",
					"paypal"
				]
			},
			"stripe.Stripe.Dispute.PaymentMethodDetails": {
				"properties": {
					"amazon_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.Dispute.PaymentMethodDetails.AmazonPay"
					},
					"card": {
						"$ref": "#/components/schemas/stripe.Stripe.Dispute.PaymentMethodDetails.Card"
					},
					"klarna": {
						"$ref": "#/components/schemas/stripe.Stripe.Dispute.PaymentMethodDetails.Klarna"
					},
					"paypal": {
						"$ref": "#/components/schemas/stripe.Stripe.Dispute.PaymentMethodDetails.Paypal"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Dispute.PaymentMethodDetails.Type",
						"description": "Payment method type."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Dispute.Status": {
				"type": "string",
				"enum": [
					"lost",
					"needs_response",
					"under_review",
					"warning_closed",
					"warning_needs_response",
					"warning_under_review",
					"won"
				]
			},
			"stripe.Stripe.Dispute": {
				"description": "A dispute occurs when a customer questions your charge with their card issuer.\nWhen this happens, you have the opportunity to respond to the dispute with\nevidence that shows that the charge is legitimate.\n\nRelated guide: [Disputes and fraud](https://stripe.com/docs/disputes)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"dispute"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Disputed amount. Usually the amount of the charge, but it can differ (usually because of currency fluctuation or because only part of the order is disputed)."
					},
					"balance_transactions": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
						},
						"type": "array",
						"description": "List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute."
					},
					"charge": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge"
							}
						],
						"description": "ID of the charge that's disputed."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"evidence": {
						"$ref": "#/components/schemas/stripe.Stripe.Dispute.Evidence"
					},
					"evidence_details": {
						"$ref": "#/components/schemas/stripe.Stripe.Dispute.EvidenceDetails"
					},
					"is_charge_refundable": {
						"type": "boolean",
						"description": "If true, it's still possible to refund the disputed payment. After the payment has been fully refunded, no further funds are withdrawn from your Stripe account as a result of this dispute."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"network_reason_code": {
						"type": "string",
						"nullable": true,
						"description": "Network-dependent reason code for the dispute."
					},
					"payment_intent": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent"
							}
						],
						"nullable": true,
						"description": "ID of the PaymentIntent that's disputed."
					},
					"payment_method_details": {
						"$ref": "#/components/schemas/stripe.Stripe.Dispute.PaymentMethodDetails"
					},
					"reason": {
						"type": "string",
						"description": "Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Learn more about [dispute reasons](https://stripe.com/docs/disputes/categories)."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Dispute.Status",
						"description": "Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, or `lost`."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"balance_transactions",
					"charge",
					"created",
					"currency",
					"evidence",
					"evidence_details",
					"is_charge_refundable",
					"livemode",
					"metadata",
					"payment_intent",
					"reason",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.FeeRefund": {
				"description": "`Application Fee Refund` objects allow you to refund an application fee that\nhas previously been created but not yet refunded. Funds will be refunded to\nthe Stripe account from which the fee was originally collected.\n\nRelated guide: [Refunding application fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"fee_refund"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount, in cents (or local equivalent)."
					},
					"balance_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
							}
						],
						"nullable": true,
						"description": "Balance transaction that describes the impact on your account balance."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"fee": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.ApplicationFee"
							}
						],
						"description": "ID of the application fee that was refunded."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"balance_transaction",
					"created",
					"currency",
					"fee",
					"metadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.AmountDetails": {
				"properties": {
					"atm_fee": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The fee charged by the ATM for the cash withdrawal."
					},
					"cashback_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount of cash requested by the cardholder."
					}
				},
				"required": [
					"atm_fee",
					"cashback_amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.AuthorizationMethod": {
				"type": "string",
				"enum": [
					"chip",
					"contactless",
					"keyed_in",
					"online",
					"swipe"
				]
			},
			"stripe.Stripe.Issuing.Card.CancellationReason": {
				"type": "string",
				"enum": [
					"design_rejected",
					"lost",
					"stolen"
				]
			},
			"stripe.Stripe.Issuing.Cardholder.Billing": {
				"properties": {
					"address": {
						"$ref": "#/components/schemas/stripe.Stripe.Address"
					}
				},
				"required": [
					"address"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Cardholder.Company": {
				"properties": {
					"tax_id_provided": {
						"type": "boolean",
						"description": "Whether the company's business ID number was provided."
					}
				},
				"required": [
					"tax_id_provided"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Cardholder.Individual.CardIssuing.UserTermsAcceptance": {
				"properties": {
					"date": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The Unix timestamp marking when the cardholder accepted the Authorized User Terms."
					},
					"ip": {
						"type": "string",
						"nullable": true,
						"description": "The IP address from which the cardholder accepted the Authorized User Terms."
					},
					"user_agent": {
						"type": "string",
						"nullable": true,
						"description": "The user agent of the browser from which the cardholder accepted the Authorized User Terms."
					}
				},
				"required": [
					"date",
					"ip",
					"user_agent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Cardholder.Individual.CardIssuing": {
				"properties": {
					"user_terms_acceptance": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.Individual.CardIssuing.UserTermsAcceptance"
							}
						],
						"nullable": true,
						"description": "Information about cardholder acceptance of Celtic [Authorized User Terms](https://stripe.com/docs/issuing/cards#accept-authorized-user-terms). Required for cards backed by a Celtic program."
					}
				},
				"required": [
					"user_terms_acceptance"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Cardholder.Individual.Dob": {
				"properties": {
					"day": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The day of birth, between 1 and 31."
					},
					"month": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The month of birth, between 1 and 12."
					},
					"year": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The four-digit year of birth."
					}
				},
				"required": [
					"day",
					"month",
					"year"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Cardholder.Individual.Verification.Document": {
				"properties": {
					"back": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`."
					},
					"front": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`."
					}
				},
				"required": [
					"back",
					"front"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Cardholder.Individual.Verification": {
				"properties": {
					"document": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.Individual.Verification.Document"
							}
						],
						"nullable": true,
						"description": "An identifying document, either a passport or local ID card."
					}
				},
				"required": [
					"document"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Cardholder.Individual": {
				"properties": {
					"card_issuing": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.Individual.CardIssuing"
							}
						],
						"nullable": true,
						"description": "Information related to the card_issuing program for this cardholder."
					},
					"dob": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.Individual.Dob"
							}
						],
						"nullable": true,
						"description": "The date of birth of this cardholder."
					},
					"first_name": {
						"type": "string",
						"nullable": true,
						"description": "The first name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters."
					},
					"last_name": {
						"type": "string",
						"nullable": true,
						"description": "The last name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters."
					},
					"verification": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.Individual.Verification"
							}
						],
						"nullable": true,
						"description": "Government-issued ID document for this cardholder."
					}
				},
				"required": [
					"dob",
					"first_name",
					"last_name",
					"verification"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Cardholder.PreferredLocale": {
				"type": "string",
				"enum": [
					"de",
					"en",
					"es",
					"fr",
					"it"
				]
			},
			"stripe.Stripe.Issuing.Cardholder.Requirements.DisabledReason": {
				"type": "string",
				"enum": [
					"listed",
					"rejected.listed",
					"requirements.past_due",
					"under_review"
				]
			},
			"stripe.Stripe.Issuing.Cardholder.Requirements.PastDue": {
				"type": "string",
				"enum": [
					"company.tax_id",
					"individual.card_issuing.user_terms_acceptance.date",
					"individual.card_issuing.user_terms_acceptance.ip",
					"individual.dob.day",
					"individual.dob.month",
					"individual.dob.year",
					"individual.first_name",
					"individual.last_name",
					"individual.verification.document"
				]
			},
			"stripe.Stripe.Issuing.Cardholder.Requirements": {
				"properties": {
					"disabled_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.Requirements.DisabledReason"
							}
						],
						"nullable": true,
						"description": "If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason."
					},
					"past_due": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.Requirements.PastDue"
						},
						"type": "array",
						"nullable": true,
						"description": "Array of fields that need to be collected in order to verify and re-enable the cardholder."
					}
				},
				"required": [
					"disabled_reason",
					"past_due"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Cardholder.SpendingControls.AllowedCategory": {
				"type": "string",
				"enum": [
					"ac_refrigeration_repair",
					"accounting_bookkeeping_services",
					"advertising_services",
					"agricultural_cooperative",
					"airlines_air_carriers",
					"airports_flying_fields",
					"ambulance_services",
					"amusement_parks_carnivals",
					"antique_reproductions",
					"antique_shops",
					"aquariums",
					"architectural_surveying_services",
					"art_dealers_and_galleries",
					"artists_supply_and_craft_shops",
					"auto_and_home_supply_stores",
					"auto_body_repair_shops",
					"auto_paint_shops",
					"auto_service_shops",
					"automated_cash_disburse",
					"automated_fuel_dispensers",
					"automobile_associations",
					"automotive_parts_and_accessories_stores",
					"automotive_tire_stores",
					"bail_and_bond_payments",
					"bakeries",
					"bands_orchestras",
					"barber_and_beauty_shops",
					"betting_casino_gambling",
					"bicycle_shops",
					"billiard_pool_establishments",
					"boat_dealers",
					"boat_rentals_and_leases",
					"book_stores",
					"books_periodicals_and_newspapers",
					"bowling_alleys",
					"bus_lines",
					"business_secretarial_schools",
					"buying_shopping_services",
					"cable_satellite_and_other_pay_television_and_radio",
					"camera_and_photographic_supply_stores",
					"candy_nut_and_confectionery_stores",
					"car_and_truck_dealers_new_used",
					"car_and_truck_dealers_used_only",
					"car_rental_agencies",
					"car_washes",
					"carpentry_services",
					"carpet_upholstery_cleaning",
					"caterers",
					"charitable_and_social_service_organizations_fundraising",
					"chemicals_and_allied_products",
					"child_care_services",
					"childrens_and_infants_wear_stores",
					"chiropodists_podiatrists",
					"chiropractors",
					"cigar_stores_and_stands",
					"civic_social_fraternal_associations",
					"cleaning_and_maintenance",
					"clothing_rental",
					"colleges_universities",
					"commercial_equipment",
					"commercial_footwear",
					"commercial_photography_art_and_graphics",
					"commuter_transport_and_ferries",
					"computer_network_services",
					"computer_programming",
					"computer_repair",
					"computer_software_stores",
					"computers_peripherals_and_software",
					"concrete_work_services",
					"construction_materials",
					"consulting_public_relations",
					"correspondence_schools",
					"cosmetic_stores",
					"counseling_services",
					"country_clubs",
					"courier_services",
					"court_costs",
					"credit_reporting_agencies",
					"cruise_lines",
					"dairy_products_stores",
					"dance_hall_studios_schools",
					"dating_escort_services",
					"dentists_orthodontists",
					"department_stores",
					"detective_agencies",
					"digital_goods_applications",
					"digital_goods_games",
					"digital_goods_large_volume",
					"digital_goods_media",
					"direct_marketing_catalog_merchant",
					"direct_marketing_combination_catalog_and_retail_merchant",
					"direct_marketing_inbound_telemarketing",
					"direct_marketing_insurance_services",
					"direct_marketing_other",
					"direct_marketing_outbound_telemarketing",
					"direct_marketing_subscription",
					"direct_marketing_travel",
					"discount_stores",
					"doctors",
					"door_to_door_sales",
					"drapery_window_covering_and_upholstery_stores",
					"drinking_places",
					"drug_stores_and_pharmacies",
					"drugs_drug_proprietaries_and_druggist_sundries",
					"dry_cleaners",
					"durable_goods",
					"duty_free_stores",
					"eating_places_restaurants",
					"educational_services",
					"electric_razor_stores",
					"electric_vehicle_charging",
					"electrical_parts_and_equipment",
					"electrical_services",
					"electronics_repair_shops",
					"electronics_stores",
					"elementary_secondary_schools",
					"emergency_services_gcas_visa_use_only",
					"employment_temp_agencies",
					"equipment_rental",
					"exterminating_services",
					"family_clothing_stores",
					"fast_food_restaurants",
					"financial_institutions",
					"fines_government_administrative_entities",
					"fireplace_fireplace_screens_and_accessories_stores",
					"floor_covering_stores",
					"florists",
					"florists_supplies_nursery_stock_and_flowers",
					"freezer_and_locker_meat_provisioners",
					"fuel_dealers_non_automotive",
					"funeral_services_crematories",
					"furniture_home_furnishings_and_equipment_stores_except_appliances",
					"furniture_repair_refinishing",
					"furriers_and_fur_shops",
					"general_services",
					"gift_card_novelty_and_souvenir_shops",
					"glass_paint_and_wallpaper_stores",
					"glassware_crystal_stores",
					"golf_courses_public",
					"government_licensed_horse_dog_racing_us_region_only",
					"government_licensed_online_casions_online_gambling_us_region_only",
					"government_owned_lotteries_non_us_region",
					"government_owned_lotteries_us_region_only",
					"government_services",
					"grocery_stores_supermarkets",
					"hardware_equipment_and_supplies",
					"hardware_stores",
					"health_and_beauty_spas",
					"hearing_aids_sales_and_supplies",
					"heating_plumbing_a_c",
					"hobby_toy_and_game_shops",
					"home_supply_warehouse_stores",
					"hospitals",
					"hotels_motels_and_resorts",
					"household_appliance_stores",
					"industrial_supplies",
					"information_retrieval_services",
					"insurance_default",
					"insurance_underwriting_premiums",
					"intra_company_purchases",
					"jewelry_stores_watches_clocks_and_silverware_stores",
					"landscaping_services",
					"laundries",
					"laundry_cleaning_services",
					"legal_services_attorneys",
					"luggage_and_leather_goods_stores",
					"lumber_building_materials_stores",
					"manual_cash_disburse",
					"marinas_service_and_supplies",
					"marketplaces",
					"masonry_stonework_and_plaster",
					"massage_parlors",
					"medical_and_dental_labs",
					"medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
					"medical_services",
					"membership_organizations",
					"mens_and_boys_clothing_and_accessories_stores",
					"mens_womens_clothing_stores",
					"metal_service_centers",
					"miscellaneous",
					"miscellaneous_apparel_and_accessory_shops",
					"miscellaneous_auto_dealers",
					"miscellaneous_business_services",
					"miscellaneous_food_stores",
					"miscellaneous_general_merchandise",
					"miscellaneous_general_services",
					"miscellaneous_home_furnishing_specialty_stores",
					"miscellaneous_publishing_and_printing",
					"miscellaneous_recreation_services",
					"miscellaneous_repair_shops",
					"miscellaneous_specialty_retail",
					"mobile_home_dealers",
					"motion_picture_theaters",
					"motor_freight_carriers_and_trucking",
					"motor_homes_dealers",
					"motor_vehicle_supplies_and_new_parts",
					"motorcycle_shops_and_dealers",
					"motorcycle_shops_dealers",
					"music_stores_musical_instruments_pianos_and_sheet_music",
					"news_dealers_and_newsstands",
					"non_fi_money_orders",
					"non_fi_stored_value_card_purchase_load",
					"nondurable_goods",
					"nurseries_lawn_and_garden_supply_stores",
					"nursing_personal_care",
					"office_and_commercial_furniture",
					"opticians_eyeglasses",
					"optometrists_ophthalmologist",
					"orthopedic_goods_prosthetic_devices",
					"osteopaths",
					"package_stores_beer_wine_and_liquor",
					"paints_varnishes_and_supplies",
					"parking_lots_garages",
					"passenger_railways",
					"pawn_shops",
					"pet_shops_pet_food_and_supplies",
					"petroleum_and_petroleum_products",
					"photo_developing",
					"photographic_photocopy_microfilm_equipment_and_supplies",
					"photographic_studios",
					"picture_video_production",
					"piece_goods_notions_and_other_dry_goods",
					"plumbing_heating_equipment_and_supplies",
					"political_organizations",
					"postal_services_government_only",
					"precious_stones_and_metals_watches_and_jewelry",
					"professional_services",
					"public_warehousing_and_storage",
					"quick_copy_repro_and_blueprint",
					"railroads",
					"real_estate_agents_and_managers_rentals",
					"record_stores",
					"recreational_vehicle_rentals",
					"religious_goods_stores",
					"religious_organizations",
					"roofing_siding_sheet_metal",
					"secretarial_support_services",
					"security_brokers_dealers",
					"service_stations",
					"sewing_needlework_fabric_and_piece_goods_stores",
					"shoe_repair_hat_cleaning",
					"shoe_stores",
					"small_appliance_repair",
					"snowmobile_dealers",
					"special_trade_services",
					"specialty_cleaning",
					"sporting_goods_stores",
					"sporting_recreation_camps",
					"sports_and_riding_apparel_stores",
					"sports_clubs_fields",
					"stamp_and_coin_stores",
					"stationary_office_supplies_printing_and_writing_paper",
					"stationery_stores_office_and_school_supply_stores",
					"swimming_pools_sales",
					"t_ui_travel_germany",
					"tailors_alterations",
					"tax_payments_government_agencies",
					"tax_preparation_services",
					"taxicabs_limousines",
					"telecommunication_equipment_and_telephone_sales",
					"telecommunication_services",
					"telegraph_services",
					"tent_and_awning_shops",
					"testing_laboratories",
					"theatrical_ticket_agencies",
					"timeshares",
					"tire_retreading_and_repair",
					"tolls_bridge_fees",
					"tourist_attractions_and_exhibits",
					"towing_services",
					"trailer_parks_campgrounds",
					"transportation_services",
					"travel_agencies_tour_operators",
					"truck_stop_iteration",
					"truck_utility_trailer_rentals",
					"typesetting_plate_making_and_related_services",
					"typewriter_stores",
					"u_s_federal_government_agencies_or_departments",
					"uniforms_commercial_clothing",
					"used_merchandise_and_secondhand_stores",
					"utilities",
					"variety_stores",
					"veterinary_services",
					"video_amusement_game_supplies",
					"video_game_arcades",
					"video_tape_rental_stores",
					"vocational_trade_schools",
					"watch_jewelry_repair",
					"welding_repair",
					"wholesale_clubs",
					"wig_and_toupee_stores",
					"wires_money_orders",
					"womens_accessory_and_specialty_shops",
					"womens_ready_to_wear_stores",
					"wrecking_and_salvage_yards"
				]
			},
			"stripe.Stripe.Issuing.Cardholder.SpendingControls.BlockedCategory": {
				"type": "string",
				"enum": [
					"ac_refrigeration_repair",
					"accounting_bookkeeping_services",
					"advertising_services",
					"agricultural_cooperative",
					"airlines_air_carriers",
					"airports_flying_fields",
					"ambulance_services",
					"amusement_parks_carnivals",
					"antique_reproductions",
					"antique_shops",
					"aquariums",
					"architectural_surveying_services",
					"art_dealers_and_galleries",
					"artists_supply_and_craft_shops",
					"auto_and_home_supply_stores",
					"auto_body_repair_shops",
					"auto_paint_shops",
					"auto_service_shops",
					"automated_cash_disburse",
					"automated_fuel_dispensers",
					"automobile_associations",
					"automotive_parts_and_accessories_stores",
					"automotive_tire_stores",
					"bail_and_bond_payments",
					"bakeries",
					"bands_orchestras",
					"barber_and_beauty_shops",
					"betting_casino_gambling",
					"bicycle_shops",
					"billiard_pool_establishments",
					"boat_dealers",
					"boat_rentals_and_leases",
					"book_stores",
					"books_periodicals_and_newspapers",
					"bowling_alleys",
					"bus_lines",
					"business_secretarial_schools",
					"buying_shopping_services",
					"cable_satellite_and_other_pay_television_and_radio",
					"camera_and_photographic_supply_stores",
					"candy_nut_and_confectionery_stores",
					"car_and_truck_dealers_new_used",
					"car_and_truck_dealers_used_only",
					"car_rental_agencies",
					"car_washes",
					"carpentry_services",
					"carpet_upholstery_cleaning",
					"caterers",
					"charitable_and_social_service_organizations_fundraising",
					"chemicals_and_allied_products",
					"child_care_services",
					"childrens_and_infants_wear_stores",
					"chiropodists_podiatrists",
					"chiropractors",
					"cigar_stores_and_stands",
					"civic_social_fraternal_associations",
					"cleaning_and_maintenance",
					"clothing_rental",
					"colleges_universities",
					"commercial_equipment",
					"commercial_footwear",
					"commercial_photography_art_and_graphics",
					"commuter_transport_and_ferries",
					"computer_network_services",
					"computer_programming",
					"computer_repair",
					"computer_software_stores",
					"computers_peripherals_and_software",
					"concrete_work_services",
					"construction_materials",
					"consulting_public_relations",
					"correspondence_schools",
					"cosmetic_stores",
					"counseling_services",
					"country_clubs",
					"courier_services",
					"court_costs",
					"credit_reporting_agencies",
					"cruise_lines",
					"dairy_products_stores",
					"dance_hall_studios_schools",
					"dating_escort_services",
					"dentists_orthodontists",
					"department_stores",
					"detective_agencies",
					"digital_goods_applications",
					"digital_goods_games",
					"digital_goods_large_volume",
					"digital_goods_media",
					"direct_marketing_catalog_merchant",
					"direct_marketing_combination_catalog_and_retail_merchant",
					"direct_marketing_inbound_telemarketing",
					"direct_marketing_insurance_services",
					"direct_marketing_other",
					"direct_marketing_outbound_telemarketing",
					"direct_marketing_subscription",
					"direct_marketing_travel",
					"discount_stores",
					"doctors",
					"door_to_door_sales",
					"drapery_window_covering_and_upholstery_stores",
					"drinking_places",
					"drug_stores_and_pharmacies",
					"drugs_drug_proprietaries_and_druggist_sundries",
					"dry_cleaners",
					"durable_goods",
					"duty_free_stores",
					"eating_places_restaurants",
					"educational_services",
					"electric_razor_stores",
					"electric_vehicle_charging",
					"electrical_parts_and_equipment",
					"electrical_services",
					"electronics_repair_shops",
					"electronics_stores",
					"elementary_secondary_schools",
					"emergency_services_gcas_visa_use_only",
					"employment_temp_agencies",
					"equipment_rental",
					"exterminating_services",
					"family_clothing_stores",
					"fast_food_restaurants",
					"financial_institutions",
					"fines_government_administrative_entities",
					"fireplace_fireplace_screens_and_accessories_stores",
					"floor_covering_stores",
					"florists",
					"florists_supplies_nursery_stock_and_flowers",
					"freezer_and_locker_meat_provisioners",
					"fuel_dealers_non_automotive",
					"funeral_services_crematories",
					"furniture_home_furnishings_and_equipment_stores_except_appliances",
					"furniture_repair_refinishing",
					"furriers_and_fur_shops",
					"general_services",
					"gift_card_novelty_and_souvenir_shops",
					"glass_paint_and_wallpaper_stores",
					"glassware_crystal_stores",
					"golf_courses_public",
					"government_licensed_horse_dog_racing_us_region_only",
					"government_licensed_online_casions_online_gambling_us_region_only",
					"government_owned_lotteries_non_us_region",
					"government_owned_lotteries_us_region_only",
					"government_services",
					"grocery_stores_supermarkets",
					"hardware_equipment_and_supplies",
					"hardware_stores",
					"health_and_beauty_spas",
					"hearing_aids_sales_and_supplies",
					"heating_plumbing_a_c",
					"hobby_toy_and_game_shops",
					"home_supply_warehouse_stores",
					"hospitals",
					"hotels_motels_and_resorts",
					"household_appliance_stores",
					"industrial_supplies",
					"information_retrieval_services",
					"insurance_default",
					"insurance_underwriting_premiums",
					"intra_company_purchases",
					"jewelry_stores_watches_clocks_and_silverware_stores",
					"landscaping_services",
					"laundries",
					"laundry_cleaning_services",
					"legal_services_attorneys",
					"luggage_and_leather_goods_stores",
					"lumber_building_materials_stores",
					"manual_cash_disburse",
					"marinas_service_and_supplies",
					"marketplaces",
					"masonry_stonework_and_plaster",
					"massage_parlors",
					"medical_and_dental_labs",
					"medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
					"medical_services",
					"membership_organizations",
					"mens_and_boys_clothing_and_accessories_stores",
					"mens_womens_clothing_stores",
					"metal_service_centers",
					"miscellaneous",
					"miscellaneous_apparel_and_accessory_shops",
					"miscellaneous_auto_dealers",
					"miscellaneous_business_services",
					"miscellaneous_food_stores",
					"miscellaneous_general_merchandise",
					"miscellaneous_general_services",
					"miscellaneous_home_furnishing_specialty_stores",
					"miscellaneous_publishing_and_printing",
					"miscellaneous_recreation_services",
					"miscellaneous_repair_shops",
					"miscellaneous_specialty_retail",
					"mobile_home_dealers",
					"motion_picture_theaters",
					"motor_freight_carriers_and_trucking",
					"motor_homes_dealers",
					"motor_vehicle_supplies_and_new_parts",
					"motorcycle_shops_and_dealers",
					"motorcycle_shops_dealers",
					"music_stores_musical_instruments_pianos_and_sheet_music",
					"news_dealers_and_newsstands",
					"non_fi_money_orders",
					"non_fi_stored_value_card_purchase_load",
					"nondurable_goods",
					"nurseries_lawn_and_garden_supply_stores",
					"nursing_personal_care",
					"office_and_commercial_furniture",
					"opticians_eyeglasses",
					"optometrists_ophthalmologist",
					"orthopedic_goods_prosthetic_devices",
					"osteopaths",
					"package_stores_beer_wine_and_liquor",
					"paints_varnishes_and_supplies",
					"parking_lots_garages",
					"passenger_railways",
					"pawn_shops",
					"pet_shops_pet_food_and_supplies",
					"petroleum_and_petroleum_products",
					"photo_developing",
					"photographic_photocopy_microfilm_equipment_and_supplies",
					"photographic_studios",
					"picture_video_production",
					"piece_goods_notions_and_other_dry_goods",
					"plumbing_heating_equipment_and_supplies",
					"political_organizations",
					"postal_services_government_only",
					"precious_stones_and_metals_watches_and_jewelry",
					"professional_services",
					"public_warehousing_and_storage",
					"quick_copy_repro_and_blueprint",
					"railroads",
					"real_estate_agents_and_managers_rentals",
					"record_stores",
					"recreational_vehicle_rentals",
					"religious_goods_stores",
					"religious_organizations",
					"roofing_siding_sheet_metal",
					"secretarial_support_services",
					"security_brokers_dealers",
					"service_stations",
					"sewing_needlework_fabric_and_piece_goods_stores",
					"shoe_repair_hat_cleaning",
					"shoe_stores",
					"small_appliance_repair",
					"snowmobile_dealers",
					"special_trade_services",
					"specialty_cleaning",
					"sporting_goods_stores",
					"sporting_recreation_camps",
					"sports_and_riding_apparel_stores",
					"sports_clubs_fields",
					"stamp_and_coin_stores",
					"stationary_office_supplies_printing_and_writing_paper",
					"stationery_stores_office_and_school_supply_stores",
					"swimming_pools_sales",
					"t_ui_travel_germany",
					"tailors_alterations",
					"tax_payments_government_agencies",
					"tax_preparation_services",
					"taxicabs_limousines",
					"telecommunication_equipment_and_telephone_sales",
					"telecommunication_services",
					"telegraph_services",
					"tent_and_awning_shops",
					"testing_laboratories",
					"theatrical_ticket_agencies",
					"timeshares",
					"tire_retreading_and_repair",
					"tolls_bridge_fees",
					"tourist_attractions_and_exhibits",
					"towing_services",
					"trailer_parks_campgrounds",
					"transportation_services",
					"travel_agencies_tour_operators",
					"truck_stop_iteration",
					"truck_utility_trailer_rentals",
					"typesetting_plate_making_and_related_services",
					"typewriter_stores",
					"u_s_federal_government_agencies_or_departments",
					"uniforms_commercial_clothing",
					"used_merchandise_and_secondhand_stores",
					"utilities",
					"variety_stores",
					"veterinary_services",
					"video_amusement_game_supplies",
					"video_game_arcades",
					"video_tape_rental_stores",
					"vocational_trade_schools",
					"watch_jewelry_repair",
					"welding_repair",
					"wholesale_clubs",
					"wig_and_toupee_stores",
					"wires_money_orders",
					"womens_accessory_and_specialty_shops",
					"womens_ready_to_wear_stores",
					"wrecking_and_salvage_yards"
				]
			},
			"stripe.Stripe.Issuing.Cardholder.SpendingControls.SpendingLimit.Category": {
				"type": "string",
				"enum": [
					"ac_refrigeration_repair",
					"accounting_bookkeeping_services",
					"advertising_services",
					"agricultural_cooperative",
					"airlines_air_carriers",
					"airports_flying_fields",
					"ambulance_services",
					"amusement_parks_carnivals",
					"antique_reproductions",
					"antique_shops",
					"aquariums",
					"architectural_surveying_services",
					"art_dealers_and_galleries",
					"artists_supply_and_craft_shops",
					"auto_and_home_supply_stores",
					"auto_body_repair_shops",
					"auto_paint_shops",
					"auto_service_shops",
					"automated_cash_disburse",
					"automated_fuel_dispensers",
					"automobile_associations",
					"automotive_parts_and_accessories_stores",
					"automotive_tire_stores",
					"bail_and_bond_payments",
					"bakeries",
					"bands_orchestras",
					"barber_and_beauty_shops",
					"betting_casino_gambling",
					"bicycle_shops",
					"billiard_pool_establishments",
					"boat_dealers",
					"boat_rentals_and_leases",
					"book_stores",
					"books_periodicals_and_newspapers",
					"bowling_alleys",
					"bus_lines",
					"business_secretarial_schools",
					"buying_shopping_services",
					"cable_satellite_and_other_pay_television_and_radio",
					"camera_and_photographic_supply_stores",
					"candy_nut_and_confectionery_stores",
					"car_and_truck_dealers_new_used",
					"car_and_truck_dealers_used_only",
					"car_rental_agencies",
					"car_washes",
					"carpentry_services",
					"carpet_upholstery_cleaning",
					"caterers",
					"charitable_and_social_service_organizations_fundraising",
					"chemicals_and_allied_products",
					"child_care_services",
					"childrens_and_infants_wear_stores",
					"chiropodists_podiatrists",
					"chiropractors",
					"cigar_stores_and_stands",
					"civic_social_fraternal_associations",
					"cleaning_and_maintenance",
					"clothing_rental",
					"colleges_universities",
					"commercial_equipment",
					"commercial_footwear",
					"commercial_photography_art_and_graphics",
					"commuter_transport_and_ferries",
					"computer_network_services",
					"computer_programming",
					"computer_repair",
					"computer_software_stores",
					"computers_peripherals_and_software",
					"concrete_work_services",
					"construction_materials",
					"consulting_public_relations",
					"correspondence_schools",
					"cosmetic_stores",
					"counseling_services",
					"country_clubs",
					"courier_services",
					"court_costs",
					"credit_reporting_agencies",
					"cruise_lines",
					"dairy_products_stores",
					"dance_hall_studios_schools",
					"dating_escort_services",
					"dentists_orthodontists",
					"department_stores",
					"detective_agencies",
					"digital_goods_applications",
					"digital_goods_games",
					"digital_goods_large_volume",
					"digital_goods_media",
					"direct_marketing_catalog_merchant",
					"direct_marketing_combination_catalog_and_retail_merchant",
					"direct_marketing_inbound_telemarketing",
					"direct_marketing_insurance_services",
					"direct_marketing_other",
					"direct_marketing_outbound_telemarketing",
					"direct_marketing_subscription",
					"direct_marketing_travel",
					"discount_stores",
					"doctors",
					"door_to_door_sales",
					"drapery_window_covering_and_upholstery_stores",
					"drinking_places",
					"drug_stores_and_pharmacies",
					"drugs_drug_proprietaries_and_druggist_sundries",
					"dry_cleaners",
					"durable_goods",
					"duty_free_stores",
					"eating_places_restaurants",
					"educational_services",
					"electric_razor_stores",
					"electric_vehicle_charging",
					"electrical_parts_and_equipment",
					"electrical_services",
					"electronics_repair_shops",
					"electronics_stores",
					"elementary_secondary_schools",
					"emergency_services_gcas_visa_use_only",
					"employment_temp_agencies",
					"equipment_rental",
					"exterminating_services",
					"family_clothing_stores",
					"fast_food_restaurants",
					"financial_institutions",
					"fines_government_administrative_entities",
					"fireplace_fireplace_screens_and_accessories_stores",
					"floor_covering_stores",
					"florists",
					"florists_supplies_nursery_stock_and_flowers",
					"freezer_and_locker_meat_provisioners",
					"fuel_dealers_non_automotive",
					"funeral_services_crematories",
					"furniture_home_furnishings_and_equipment_stores_except_appliances",
					"furniture_repair_refinishing",
					"furriers_and_fur_shops",
					"general_services",
					"gift_card_novelty_and_souvenir_shops",
					"glass_paint_and_wallpaper_stores",
					"glassware_crystal_stores",
					"golf_courses_public",
					"government_licensed_horse_dog_racing_us_region_only",
					"government_licensed_online_casions_online_gambling_us_region_only",
					"government_owned_lotteries_non_us_region",
					"government_owned_lotteries_us_region_only",
					"government_services",
					"grocery_stores_supermarkets",
					"hardware_equipment_and_supplies",
					"hardware_stores",
					"health_and_beauty_spas",
					"hearing_aids_sales_and_supplies",
					"heating_plumbing_a_c",
					"hobby_toy_and_game_shops",
					"home_supply_warehouse_stores",
					"hospitals",
					"hotels_motels_and_resorts",
					"household_appliance_stores",
					"industrial_supplies",
					"information_retrieval_services",
					"insurance_default",
					"insurance_underwriting_premiums",
					"intra_company_purchases",
					"jewelry_stores_watches_clocks_and_silverware_stores",
					"landscaping_services",
					"laundries",
					"laundry_cleaning_services",
					"legal_services_attorneys",
					"luggage_and_leather_goods_stores",
					"lumber_building_materials_stores",
					"manual_cash_disburse",
					"marinas_service_and_supplies",
					"marketplaces",
					"masonry_stonework_and_plaster",
					"massage_parlors",
					"medical_and_dental_labs",
					"medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
					"medical_services",
					"membership_organizations",
					"mens_and_boys_clothing_and_accessories_stores",
					"mens_womens_clothing_stores",
					"metal_service_centers",
					"miscellaneous",
					"miscellaneous_apparel_and_accessory_shops",
					"miscellaneous_auto_dealers",
					"miscellaneous_business_services",
					"miscellaneous_food_stores",
					"miscellaneous_general_merchandise",
					"miscellaneous_general_services",
					"miscellaneous_home_furnishing_specialty_stores",
					"miscellaneous_publishing_and_printing",
					"miscellaneous_recreation_services",
					"miscellaneous_repair_shops",
					"miscellaneous_specialty_retail",
					"mobile_home_dealers",
					"motion_picture_theaters",
					"motor_freight_carriers_and_trucking",
					"motor_homes_dealers",
					"motor_vehicle_supplies_and_new_parts",
					"motorcycle_shops_and_dealers",
					"motorcycle_shops_dealers",
					"music_stores_musical_instruments_pianos_and_sheet_music",
					"news_dealers_and_newsstands",
					"non_fi_money_orders",
					"non_fi_stored_value_card_purchase_load",
					"nondurable_goods",
					"nurseries_lawn_and_garden_supply_stores",
					"nursing_personal_care",
					"office_and_commercial_furniture",
					"opticians_eyeglasses",
					"optometrists_ophthalmologist",
					"orthopedic_goods_prosthetic_devices",
					"osteopaths",
					"package_stores_beer_wine_and_liquor",
					"paints_varnishes_and_supplies",
					"parking_lots_garages",
					"passenger_railways",
					"pawn_shops",
					"pet_shops_pet_food_and_supplies",
					"petroleum_and_petroleum_products",
					"photo_developing",
					"photographic_photocopy_microfilm_equipment_and_supplies",
					"photographic_studios",
					"picture_video_production",
					"piece_goods_notions_and_other_dry_goods",
					"plumbing_heating_equipment_and_supplies",
					"political_organizations",
					"postal_services_government_only",
					"precious_stones_and_metals_watches_and_jewelry",
					"professional_services",
					"public_warehousing_and_storage",
					"quick_copy_repro_and_blueprint",
					"railroads",
					"real_estate_agents_and_managers_rentals",
					"record_stores",
					"recreational_vehicle_rentals",
					"religious_goods_stores",
					"religious_organizations",
					"roofing_siding_sheet_metal",
					"secretarial_support_services",
					"security_brokers_dealers",
					"service_stations",
					"sewing_needlework_fabric_and_piece_goods_stores",
					"shoe_repair_hat_cleaning",
					"shoe_stores",
					"small_appliance_repair",
					"snowmobile_dealers",
					"special_trade_services",
					"specialty_cleaning",
					"sporting_goods_stores",
					"sporting_recreation_camps",
					"sports_and_riding_apparel_stores",
					"sports_clubs_fields",
					"stamp_and_coin_stores",
					"stationary_office_supplies_printing_and_writing_paper",
					"stationery_stores_office_and_school_supply_stores",
					"swimming_pools_sales",
					"t_ui_travel_germany",
					"tailors_alterations",
					"tax_payments_government_agencies",
					"tax_preparation_services",
					"taxicabs_limousines",
					"telecommunication_equipment_and_telephone_sales",
					"telecommunication_services",
					"telegraph_services",
					"tent_and_awning_shops",
					"testing_laboratories",
					"theatrical_ticket_agencies",
					"timeshares",
					"tire_retreading_and_repair",
					"tolls_bridge_fees",
					"tourist_attractions_and_exhibits",
					"towing_services",
					"trailer_parks_campgrounds",
					"transportation_services",
					"travel_agencies_tour_operators",
					"truck_stop_iteration",
					"truck_utility_trailer_rentals",
					"typesetting_plate_making_and_related_services",
					"typewriter_stores",
					"u_s_federal_government_agencies_or_departments",
					"uniforms_commercial_clothing",
					"used_merchandise_and_secondhand_stores",
					"utilities",
					"variety_stores",
					"veterinary_services",
					"video_amusement_game_supplies",
					"video_game_arcades",
					"video_tape_rental_stores",
					"vocational_trade_schools",
					"watch_jewelry_repair",
					"welding_repair",
					"wholesale_clubs",
					"wig_and_toupee_stores",
					"wires_money_orders",
					"womens_accessory_and_specialty_shops",
					"womens_ready_to_wear_stores",
					"wrecking_and_salvage_yards"
				]
			},
			"stripe.Stripe.Issuing.Cardholder.SpendingControls.SpendingLimit.Interval": {
				"type": "string",
				"enum": [
					"all_time",
					"daily",
					"monthly",
					"per_authorization",
					"weekly",
					"yearly"
				]
			},
			"stripe.Stripe.Issuing.Cardholder.SpendingControls.SpendingLimit": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."
					},
					"categories": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.SpendingControls.SpendingLimit.Category"
						},
						"type": "array",
						"nullable": true,
						"description": "Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories."
					},
					"interval": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.SpendingControls.SpendingLimit.Interval",
						"description": "Interval (or event) to which the amount applies."
					}
				},
				"required": [
					"amount",
					"categories",
					"interval"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Cardholder.SpendingControls": {
				"properties": {
					"allowed_categories": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.SpendingControls.AllowedCategory"
						},
						"type": "array",
						"nullable": true,
						"description": "Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`."
					},
					"allowed_merchant_countries": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Array of strings containing representing countries from which authorizations will be allowed. Authorizations from merchants in all other countries will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `blocked_merchant_countries`. Provide an empty value to unset this control."
					},
					"blocked_categories": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.SpendingControls.BlockedCategory"
						},
						"type": "array",
						"nullable": true,
						"description": "Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`."
					},
					"blocked_merchant_countries": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Array of strings containing representing countries from which authorizations will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `allowed_merchant_countries`. Provide an empty value to unset this control."
					},
					"spending_limits": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.SpendingControls.SpendingLimit"
						},
						"type": "array",
						"nullable": true,
						"description": "Limit spending with amount-based rules that apply across this cardholder's cards."
					},
					"spending_limits_currency": {
						"type": "string",
						"nullable": true,
						"description": "Currency of the amounts within `spending_limits`."
					}
				},
				"required": [
					"allowed_categories",
					"allowed_merchant_countries",
					"blocked_categories",
					"blocked_merchant_countries",
					"spending_limits",
					"spending_limits_currency"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Cardholder.Status": {
				"type": "string",
				"enum": [
					"active",
					"blocked",
					"inactive"
				]
			},
			"stripe.Stripe.Issuing.Cardholder.Type": {
				"type": "string",
				"enum": [
					"company",
					"individual"
				]
			},
			"stripe.Stripe.Issuing.Cardholder": {
				"description": "An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.\n\nRelated guide: [How to create a cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"issuing.cardholder"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"billing": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.Billing"
					},
					"company": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.Company"
							}
						],
						"nullable": true,
						"description": "Additional information about a `company` cardholder."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"email": {
						"type": "string",
						"nullable": true,
						"description": "The cardholder's email address."
					},
					"individual": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.Individual"
							}
						],
						"nullable": true,
						"description": "Additional information about an `individual` cardholder."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"name": {
						"type": "string",
						"description": "The cardholder's name. This will be printed on cards issued to them."
					},
					"phone_number": {
						"type": "string",
						"nullable": true,
						"description": "The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details."
					},
					"preferred_locales": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.PreferredLocale"
						},
						"type": "array",
						"nullable": true,
						"description": "The cardholder's preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.\n This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder."
					},
					"requirements": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.Requirements"
					},
					"spending_controls": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.SpendingControls"
							}
						],
						"nullable": true,
						"description": "Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.Status",
						"description": "Specifies whether to permit authorizations on this cardholder's cards."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder.Type",
						"description": "One of `individual` or `company`. See [Choose a cardholder type](https://stripe.com/docs/issuing/other/choose-cardholder) for more details."
					}
				},
				"required": [
					"id",
					"object",
					"billing",
					"company",
					"created",
					"email",
					"individual",
					"livemode",
					"metadata",
					"name",
					"phone_number",
					"preferred_locales",
					"requirements",
					"spending_controls",
					"status",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.PersonalizationDesign.CarrierText": {
				"properties": {
					"footer_body": {
						"type": "string",
						"nullable": true,
						"description": "The footer body text of the carrier letter."
					},
					"footer_title": {
						"type": "string",
						"nullable": true,
						"description": "The footer title text of the carrier letter."
					},
					"header_body": {
						"type": "string",
						"nullable": true,
						"description": "The header body text of the carrier letter."
					},
					"header_title": {
						"type": "string",
						"nullable": true,
						"description": "The header title text of the carrier letter."
					}
				},
				"required": [
					"footer_body",
					"footer_title",
					"header_body",
					"header_title"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.PhysicalBundle.Features.CardLogo": {
				"type": "string",
				"enum": [
					"optional",
					"required",
					"unsupported"
				]
			},
			"stripe.Stripe.Issuing.PhysicalBundle.Features.CarrierText": {
				"type": "string",
				"enum": [
					"optional",
					"required",
					"unsupported"
				]
			},
			"stripe.Stripe.Issuing.PhysicalBundle.Features.SecondLine": {
				"type": "string",
				"enum": [
					"optional",
					"required",
					"unsupported"
				]
			},
			"stripe.Stripe.Issuing.PhysicalBundle.Features": {
				"properties": {
					"card_logo": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.PhysicalBundle.Features.CardLogo",
						"description": "The policy for how to use card logo images in a card design with this physical bundle."
					},
					"carrier_text": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.PhysicalBundle.Features.CarrierText",
						"description": "The policy for how to use carrier letter text in a card design with this physical bundle."
					},
					"second_line": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.PhysicalBundle.Features.SecondLine",
						"description": "The policy for how to use a second line on a card with this physical bundle."
					}
				},
				"required": [
					"card_logo",
					"carrier_text",
					"second_line"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.PhysicalBundle.Status": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"review"
				]
			},
			"stripe.Stripe.Issuing.PhysicalBundle.Type": {
				"type": "string",
				"enum": [
					"custom",
					"standard"
				]
			},
			"stripe.Stripe.Issuing.PhysicalBundle": {
				"description": "A Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"issuing.physical_bundle"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"features": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.PhysicalBundle.Features"
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"name": {
						"type": "string",
						"description": "Friendly display name."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.PhysicalBundle.Status",
						"description": "Whether this physical bundle can be used to create cards."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.PhysicalBundle.Type",
						"description": "Whether this physical bundle is a standard Stripe offering or custom-made for you."
					}
				},
				"required": [
					"id",
					"object",
					"features",
					"livemode",
					"name",
					"status",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.PersonalizationDesign.Preferences": {
				"properties": {
					"is_default": {
						"type": "boolean",
						"description": "Whether we use this personalization design to create cards when one isn't specified. A connected account uses the Connect platform's default design if no personalization design is set as the default design."
					},
					"is_platform_default": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether this personalization design is used to create cards when one is not specified and a default for this connected account does not exist."
					}
				},
				"required": [
					"is_default",
					"is_platform_default"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.PersonalizationDesign.RejectionReasons.CardLogo": {
				"type": "string",
				"enum": [
					"geographic_location",
					"inappropriate",
					"network_name",
					"non_binary_image",
					"non_fiat_currency",
					"other",
					"other_entity",
					"promotional_material"
				]
			},
			"stripe.Stripe.Issuing.PersonalizationDesign.RejectionReasons.CarrierText": {
				"type": "string",
				"enum": [
					"geographic_location",
					"inappropriate",
					"network_name",
					"non_fiat_currency",
					"other",
					"other_entity",
					"promotional_material"
				]
			},
			"stripe.Stripe.Issuing.PersonalizationDesign.RejectionReasons": {
				"properties": {
					"card_logo": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.PersonalizationDesign.RejectionReasons.CardLogo"
						},
						"type": "array",
						"nullable": true,
						"description": "The reason(s) the card logo was rejected."
					},
					"carrier_text": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.PersonalizationDesign.RejectionReasons.CarrierText"
						},
						"type": "array",
						"nullable": true,
						"description": "The reason(s) the carrier text was rejected."
					}
				},
				"required": [
					"card_logo",
					"carrier_text"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.PersonalizationDesign.Status": {
				"type": "string",
				"enum": [
					"active",
					"inactive",
					"rejected",
					"review"
				]
			},
			"stripe.Stripe.Issuing.PersonalizationDesign": {
				"description": "A Personalization Design is a logical grouping of a Physical Bundle, card logo, and carrier text that represents a product line.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"issuing.personalization_design"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"card_logo": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "The file for the card logo to use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`."
					},
					"carrier_text": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.PersonalizationDesign.CarrierText"
							}
						],
						"nullable": true,
						"description": "Hash containing carrier text, for use with physical bundles that support carrier text."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"lookup_key": {
						"type": "string",
						"nullable": true,
						"description": "A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "Friendly display name."
					},
					"physical_bundle": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.PhysicalBundle"
							}
						],
						"description": "The physical bundle object belonging to this personalization design."
					},
					"preferences": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.PersonalizationDesign.Preferences"
					},
					"rejection_reasons": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.PersonalizationDesign.RejectionReasons"
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.PersonalizationDesign.Status",
						"description": "Whether this personalization design can be used to create cards."
					}
				},
				"required": [
					"id",
					"object",
					"card_logo",
					"carrier_text",
					"created",
					"livemode",
					"lookup_key",
					"metadata",
					"name",
					"physical_bundle",
					"preferences",
					"rejection_reasons",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Card": {
				"description": "You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"issuing.card"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"brand": {
						"type": "string",
						"description": "The brand of the card."
					},
					"cancellation_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.CancellationReason"
							}
						],
						"nullable": true,
						"description": "The reason why the card was canceled."
					},
					"cardholder": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder",
						"description": "An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.\n\nRelated guide: [How to create a cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)"
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK."
					},
					"cvc": {
						"type": "string",
						"description": "The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the [\"Retrieve a card\" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via \"List all cards\" or any other endpoint."
					},
					"exp_month": {
						"type": "number",
						"format": "double",
						"description": "The expiration month of the card."
					},
					"exp_year": {
						"type": "number",
						"format": "double",
						"description": "The expiration year of the card."
					},
					"financial_account": {
						"type": "string",
						"nullable": true,
						"description": "The financial account this card is attached to."
					},
					"last4": {
						"type": "string",
						"description": "The last 4 digits of the card number."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"number": {
						"type": "string",
						"description": "The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the [\"Retrieve a card\" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via \"List all cards\" or any other endpoint."
					},
					"personalization_design": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.PersonalizationDesign"
							}
						],
						"nullable": true,
						"description": "The personalization design object belonging to this card."
					},
					"replaced_by": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card"
							}
						],
						"nullable": true,
						"description": "The latest card that replaces this card, if any."
					},
					"replacement_for": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card"
							}
						],
						"nullable": true,
						"description": "The card this card replaces, if any."
					},
					"replacement_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.ReplacementReason"
							}
						],
						"nullable": true,
						"description": "The reason why the previous card needed to be replaced."
					},
					"shipping": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Shipping"
							}
						],
						"nullable": true,
						"description": "Where and how the card will be shipped."
					},
					"spending_controls": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.SpendingControls"
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Status",
						"description": "Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Type",
						"description": "The type of the card."
					},
					"wallets": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Wallets"
							}
						],
						"nullable": true,
						"description": "Information relating to digital wallets (like Apple Pay and Google Pay)."
					}
				},
				"required": [
					"id",
					"object",
					"brand",
					"cancellation_reason",
					"cardholder",
					"created",
					"currency",
					"exp_month",
					"exp_year",
					"last4",
					"livemode",
					"metadata",
					"personalization_design",
					"replaced_by",
					"replacement_for",
					"replacement_reason",
					"shipping",
					"spending_controls",
					"status",
					"type",
					"wallets"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Card.ReplacementReason": {
				"type": "string",
				"enum": [
					"damaged",
					"expired",
					"lost",
					"stolen"
				]
			},
			"stripe.Stripe.Issuing.Card.Shipping.AddressValidation.Mode": {
				"type": "string",
				"enum": [
					"disabled",
					"normalization_only",
					"validation_and_normalization"
				]
			},
			"stripe.Stripe.Issuing.Card.Shipping.AddressValidation.Result": {
				"type": "string",
				"enum": [
					"indeterminate",
					"likely_deliverable",
					"likely_undeliverable"
				]
			},
			"stripe.Stripe.Issuing.Card.Shipping.AddressValidation": {
				"properties": {
					"mode": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Shipping.AddressValidation.Mode",
						"description": "The address validation capabilities to use."
					},
					"normalized_address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "The normalized shipping address."
					},
					"result": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Shipping.AddressValidation.Result"
							}
						],
						"nullable": true,
						"description": "The validation result for the shipping address."
					}
				},
				"required": [
					"mode",
					"normalized_address",
					"result"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Card.Shipping.Carrier": {
				"type": "string",
				"enum": [
					"dhl",
					"fedex",
					"royal_mail",
					"usps"
				]
			},
			"stripe.Stripe.Issuing.Card.Shipping.Customs": {
				"properties": {
					"eori_number": {
						"type": "string",
						"nullable": true,
						"description": "A registration number used for customs in Europe. See [https://www.gov.uk/eori](https://www.gov.uk/eori) for the UK and [https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en](https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en) for the EU."
					}
				},
				"required": [
					"eori_number"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Card.Shipping.Service": {
				"type": "string",
				"enum": [
					"express",
					"priority",
					"standard"
				]
			},
			"stripe.Stripe.Issuing.Card.Shipping.Status": {
				"type": "string",
				"enum": [
					"canceled",
					"delivered",
					"failure",
					"pending",
					"returned",
					"shipped",
					"submitted"
				]
			},
			"stripe.Stripe.Issuing.Card.Shipping.Type": {
				"type": "string",
				"enum": [
					"bulk",
					"individual"
				]
			},
			"stripe.Stripe.Issuing.Card.Shipping": {
				"properties": {
					"address": {
						"$ref": "#/components/schemas/stripe.Stripe.Address"
					},
					"address_validation": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Shipping.AddressValidation"
							}
						],
						"nullable": true,
						"description": "Address validation details for the shipment."
					},
					"carrier": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Shipping.Carrier"
							}
						],
						"nullable": true,
						"description": "The delivery company that shipped a card."
					},
					"customs": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Shipping.Customs"
							}
						],
						"nullable": true,
						"description": "Additional information that may be required for clearing customs."
					},
					"eta": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "A unix timestamp representing a best estimate of when the card will be delivered."
					},
					"name": {
						"type": "string",
						"description": "Recipient name."
					},
					"phone_number": {
						"type": "string",
						"nullable": true,
						"description": "The phone number of the receiver of the shipment. Our courier partners will use this number to contact you in the event of card delivery issues. For individual shipments to the EU/UK, if this field is empty, we will provide them with the phone number provided when the cardholder was initially created."
					},
					"require_signature": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether a signature is required for card delivery. This feature is only supported for US users. Standard shipping service does not support signature on delivery. The default value for standard shipping service is false and for express and priority services is true."
					},
					"service": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Shipping.Service",
						"description": "Shipment service, such as `standard` or `express`."
					},
					"status": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Shipping.Status"
							}
						],
						"nullable": true,
						"description": "The delivery status of the card."
					},
					"tracking_number": {
						"type": "string",
						"nullable": true,
						"description": "A tracking number for a card shipment."
					},
					"tracking_url": {
						"type": "string",
						"nullable": true,
						"description": "A link to the shipping carrier's site where you can view detailed information about a card shipment."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Shipping.Type",
						"description": "Packaging options."
					}
				},
				"required": [
					"address",
					"address_validation",
					"carrier",
					"customs",
					"eta",
					"name",
					"phone_number",
					"require_signature",
					"service",
					"status",
					"tracking_number",
					"tracking_url",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Card.SpendingControls.AllowedCategory": {
				"type": "string",
				"enum": [
					"ac_refrigeration_repair",
					"accounting_bookkeeping_services",
					"advertising_services",
					"agricultural_cooperative",
					"airlines_air_carriers",
					"airports_flying_fields",
					"ambulance_services",
					"amusement_parks_carnivals",
					"antique_reproductions",
					"antique_shops",
					"aquariums",
					"architectural_surveying_services",
					"art_dealers_and_galleries",
					"artists_supply_and_craft_shops",
					"auto_and_home_supply_stores",
					"auto_body_repair_shops",
					"auto_paint_shops",
					"auto_service_shops",
					"automated_cash_disburse",
					"automated_fuel_dispensers",
					"automobile_associations",
					"automotive_parts_and_accessories_stores",
					"automotive_tire_stores",
					"bail_and_bond_payments",
					"bakeries",
					"bands_orchestras",
					"barber_and_beauty_shops",
					"betting_casino_gambling",
					"bicycle_shops",
					"billiard_pool_establishments",
					"boat_dealers",
					"boat_rentals_and_leases",
					"book_stores",
					"books_periodicals_and_newspapers",
					"bowling_alleys",
					"bus_lines",
					"business_secretarial_schools",
					"buying_shopping_services",
					"cable_satellite_and_other_pay_television_and_radio",
					"camera_and_photographic_supply_stores",
					"candy_nut_and_confectionery_stores",
					"car_and_truck_dealers_new_used",
					"car_and_truck_dealers_used_only",
					"car_rental_agencies",
					"car_washes",
					"carpentry_services",
					"carpet_upholstery_cleaning",
					"caterers",
					"charitable_and_social_service_organizations_fundraising",
					"chemicals_and_allied_products",
					"child_care_services",
					"childrens_and_infants_wear_stores",
					"chiropodists_podiatrists",
					"chiropractors",
					"cigar_stores_and_stands",
					"civic_social_fraternal_associations",
					"cleaning_and_maintenance",
					"clothing_rental",
					"colleges_universities",
					"commercial_equipment",
					"commercial_footwear",
					"commercial_photography_art_and_graphics",
					"commuter_transport_and_ferries",
					"computer_network_services",
					"computer_programming",
					"computer_repair",
					"computer_software_stores",
					"computers_peripherals_and_software",
					"concrete_work_services",
					"construction_materials",
					"consulting_public_relations",
					"correspondence_schools",
					"cosmetic_stores",
					"counseling_services",
					"country_clubs",
					"courier_services",
					"court_costs",
					"credit_reporting_agencies",
					"cruise_lines",
					"dairy_products_stores",
					"dance_hall_studios_schools",
					"dating_escort_services",
					"dentists_orthodontists",
					"department_stores",
					"detective_agencies",
					"digital_goods_applications",
					"digital_goods_games",
					"digital_goods_large_volume",
					"digital_goods_media",
					"direct_marketing_catalog_merchant",
					"direct_marketing_combination_catalog_and_retail_merchant",
					"direct_marketing_inbound_telemarketing",
					"direct_marketing_insurance_services",
					"direct_marketing_other",
					"direct_marketing_outbound_telemarketing",
					"direct_marketing_subscription",
					"direct_marketing_travel",
					"discount_stores",
					"doctors",
					"door_to_door_sales",
					"drapery_window_covering_and_upholstery_stores",
					"drinking_places",
					"drug_stores_and_pharmacies",
					"drugs_drug_proprietaries_and_druggist_sundries",
					"dry_cleaners",
					"durable_goods",
					"duty_free_stores",
					"eating_places_restaurants",
					"educational_services",
					"electric_razor_stores",
					"electric_vehicle_charging",
					"electrical_parts_and_equipment",
					"electrical_services",
					"electronics_repair_shops",
					"electronics_stores",
					"elementary_secondary_schools",
					"emergency_services_gcas_visa_use_only",
					"employment_temp_agencies",
					"equipment_rental",
					"exterminating_services",
					"family_clothing_stores",
					"fast_food_restaurants",
					"financial_institutions",
					"fines_government_administrative_entities",
					"fireplace_fireplace_screens_and_accessories_stores",
					"floor_covering_stores",
					"florists",
					"florists_supplies_nursery_stock_and_flowers",
					"freezer_and_locker_meat_provisioners",
					"fuel_dealers_non_automotive",
					"funeral_services_crematories",
					"furniture_home_furnishings_and_equipment_stores_except_appliances",
					"furniture_repair_refinishing",
					"furriers_and_fur_shops",
					"general_services",
					"gift_card_novelty_and_souvenir_shops",
					"glass_paint_and_wallpaper_stores",
					"glassware_crystal_stores",
					"golf_courses_public",
					"government_licensed_horse_dog_racing_us_region_only",
					"government_licensed_online_casions_online_gambling_us_region_only",
					"government_owned_lotteries_non_us_region",
					"government_owned_lotteries_us_region_only",
					"government_services",
					"grocery_stores_supermarkets",
					"hardware_equipment_and_supplies",
					"hardware_stores",
					"health_and_beauty_spas",
					"hearing_aids_sales_and_supplies",
					"heating_plumbing_a_c",
					"hobby_toy_and_game_shops",
					"home_supply_warehouse_stores",
					"hospitals",
					"hotels_motels_and_resorts",
					"household_appliance_stores",
					"industrial_supplies",
					"information_retrieval_services",
					"insurance_default",
					"insurance_underwriting_premiums",
					"intra_company_purchases",
					"jewelry_stores_watches_clocks_and_silverware_stores",
					"landscaping_services",
					"laundries",
					"laundry_cleaning_services",
					"legal_services_attorneys",
					"luggage_and_leather_goods_stores",
					"lumber_building_materials_stores",
					"manual_cash_disburse",
					"marinas_service_and_supplies",
					"marketplaces",
					"masonry_stonework_and_plaster",
					"massage_parlors",
					"medical_and_dental_labs",
					"medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
					"medical_services",
					"membership_organizations",
					"mens_and_boys_clothing_and_accessories_stores",
					"mens_womens_clothing_stores",
					"metal_service_centers",
					"miscellaneous",
					"miscellaneous_apparel_and_accessory_shops",
					"miscellaneous_auto_dealers",
					"miscellaneous_business_services",
					"miscellaneous_food_stores",
					"miscellaneous_general_merchandise",
					"miscellaneous_general_services",
					"miscellaneous_home_furnishing_specialty_stores",
					"miscellaneous_publishing_and_printing",
					"miscellaneous_recreation_services",
					"miscellaneous_repair_shops",
					"miscellaneous_specialty_retail",
					"mobile_home_dealers",
					"motion_picture_theaters",
					"motor_freight_carriers_and_trucking",
					"motor_homes_dealers",
					"motor_vehicle_supplies_and_new_parts",
					"motorcycle_shops_and_dealers",
					"motorcycle_shops_dealers",
					"music_stores_musical_instruments_pianos_and_sheet_music",
					"news_dealers_and_newsstands",
					"non_fi_money_orders",
					"non_fi_stored_value_card_purchase_load",
					"nondurable_goods",
					"nurseries_lawn_and_garden_supply_stores",
					"nursing_personal_care",
					"office_and_commercial_furniture",
					"opticians_eyeglasses",
					"optometrists_ophthalmologist",
					"orthopedic_goods_prosthetic_devices",
					"osteopaths",
					"package_stores_beer_wine_and_liquor",
					"paints_varnishes_and_supplies",
					"parking_lots_garages",
					"passenger_railways",
					"pawn_shops",
					"pet_shops_pet_food_and_supplies",
					"petroleum_and_petroleum_products",
					"photo_developing",
					"photographic_photocopy_microfilm_equipment_and_supplies",
					"photographic_studios",
					"picture_video_production",
					"piece_goods_notions_and_other_dry_goods",
					"plumbing_heating_equipment_and_supplies",
					"political_organizations",
					"postal_services_government_only",
					"precious_stones_and_metals_watches_and_jewelry",
					"professional_services",
					"public_warehousing_and_storage",
					"quick_copy_repro_and_blueprint",
					"railroads",
					"real_estate_agents_and_managers_rentals",
					"record_stores",
					"recreational_vehicle_rentals",
					"religious_goods_stores",
					"religious_organizations",
					"roofing_siding_sheet_metal",
					"secretarial_support_services",
					"security_brokers_dealers",
					"service_stations",
					"sewing_needlework_fabric_and_piece_goods_stores",
					"shoe_repair_hat_cleaning",
					"shoe_stores",
					"small_appliance_repair",
					"snowmobile_dealers",
					"special_trade_services",
					"specialty_cleaning",
					"sporting_goods_stores",
					"sporting_recreation_camps",
					"sports_and_riding_apparel_stores",
					"sports_clubs_fields",
					"stamp_and_coin_stores",
					"stationary_office_supplies_printing_and_writing_paper",
					"stationery_stores_office_and_school_supply_stores",
					"swimming_pools_sales",
					"t_ui_travel_germany",
					"tailors_alterations",
					"tax_payments_government_agencies",
					"tax_preparation_services",
					"taxicabs_limousines",
					"telecommunication_equipment_and_telephone_sales",
					"telecommunication_services",
					"telegraph_services",
					"tent_and_awning_shops",
					"testing_laboratories",
					"theatrical_ticket_agencies",
					"timeshares",
					"tire_retreading_and_repair",
					"tolls_bridge_fees",
					"tourist_attractions_and_exhibits",
					"towing_services",
					"trailer_parks_campgrounds",
					"transportation_services",
					"travel_agencies_tour_operators",
					"truck_stop_iteration",
					"truck_utility_trailer_rentals",
					"typesetting_plate_making_and_related_services",
					"typewriter_stores",
					"u_s_federal_government_agencies_or_departments",
					"uniforms_commercial_clothing",
					"used_merchandise_and_secondhand_stores",
					"utilities",
					"variety_stores",
					"veterinary_services",
					"video_amusement_game_supplies",
					"video_game_arcades",
					"video_tape_rental_stores",
					"vocational_trade_schools",
					"watch_jewelry_repair",
					"welding_repair",
					"wholesale_clubs",
					"wig_and_toupee_stores",
					"wires_money_orders",
					"womens_accessory_and_specialty_shops",
					"womens_ready_to_wear_stores",
					"wrecking_and_salvage_yards"
				]
			},
			"stripe.Stripe.Issuing.Card.SpendingControls.BlockedCategory": {
				"type": "string",
				"enum": [
					"ac_refrigeration_repair",
					"accounting_bookkeeping_services",
					"advertising_services",
					"agricultural_cooperative",
					"airlines_air_carriers",
					"airports_flying_fields",
					"ambulance_services",
					"amusement_parks_carnivals",
					"antique_reproductions",
					"antique_shops",
					"aquariums",
					"architectural_surveying_services",
					"art_dealers_and_galleries",
					"artists_supply_and_craft_shops",
					"auto_and_home_supply_stores",
					"auto_body_repair_shops",
					"auto_paint_shops",
					"auto_service_shops",
					"automated_cash_disburse",
					"automated_fuel_dispensers",
					"automobile_associations",
					"automotive_parts_and_accessories_stores",
					"automotive_tire_stores",
					"bail_and_bond_payments",
					"bakeries",
					"bands_orchestras",
					"barber_and_beauty_shops",
					"betting_casino_gambling",
					"bicycle_shops",
					"billiard_pool_establishments",
					"boat_dealers",
					"boat_rentals_and_leases",
					"book_stores",
					"books_periodicals_and_newspapers",
					"bowling_alleys",
					"bus_lines",
					"business_secretarial_schools",
					"buying_shopping_services",
					"cable_satellite_and_other_pay_television_and_radio",
					"camera_and_photographic_supply_stores",
					"candy_nut_and_confectionery_stores",
					"car_and_truck_dealers_new_used",
					"car_and_truck_dealers_used_only",
					"car_rental_agencies",
					"car_washes",
					"carpentry_services",
					"carpet_upholstery_cleaning",
					"caterers",
					"charitable_and_social_service_organizations_fundraising",
					"chemicals_and_allied_products",
					"child_care_services",
					"childrens_and_infants_wear_stores",
					"chiropodists_podiatrists",
					"chiropractors",
					"cigar_stores_and_stands",
					"civic_social_fraternal_associations",
					"cleaning_and_maintenance",
					"clothing_rental",
					"colleges_universities",
					"commercial_equipment",
					"commercial_footwear",
					"commercial_photography_art_and_graphics",
					"commuter_transport_and_ferries",
					"computer_network_services",
					"computer_programming",
					"computer_repair",
					"computer_software_stores",
					"computers_peripherals_and_software",
					"concrete_work_services",
					"construction_materials",
					"consulting_public_relations",
					"correspondence_schools",
					"cosmetic_stores",
					"counseling_services",
					"country_clubs",
					"courier_services",
					"court_costs",
					"credit_reporting_agencies",
					"cruise_lines",
					"dairy_products_stores",
					"dance_hall_studios_schools",
					"dating_escort_services",
					"dentists_orthodontists",
					"department_stores",
					"detective_agencies",
					"digital_goods_applications",
					"digital_goods_games",
					"digital_goods_large_volume",
					"digital_goods_media",
					"direct_marketing_catalog_merchant",
					"direct_marketing_combination_catalog_and_retail_merchant",
					"direct_marketing_inbound_telemarketing",
					"direct_marketing_insurance_services",
					"direct_marketing_other",
					"direct_marketing_outbound_telemarketing",
					"direct_marketing_subscription",
					"direct_marketing_travel",
					"discount_stores",
					"doctors",
					"door_to_door_sales",
					"drapery_window_covering_and_upholstery_stores",
					"drinking_places",
					"drug_stores_and_pharmacies",
					"drugs_drug_proprietaries_and_druggist_sundries",
					"dry_cleaners",
					"durable_goods",
					"duty_free_stores",
					"eating_places_restaurants",
					"educational_services",
					"electric_razor_stores",
					"electric_vehicle_charging",
					"electrical_parts_and_equipment",
					"electrical_services",
					"electronics_repair_shops",
					"electronics_stores",
					"elementary_secondary_schools",
					"emergency_services_gcas_visa_use_only",
					"employment_temp_agencies",
					"equipment_rental",
					"exterminating_services",
					"family_clothing_stores",
					"fast_food_restaurants",
					"financial_institutions",
					"fines_government_administrative_entities",
					"fireplace_fireplace_screens_and_accessories_stores",
					"floor_covering_stores",
					"florists",
					"florists_supplies_nursery_stock_and_flowers",
					"freezer_and_locker_meat_provisioners",
					"fuel_dealers_non_automotive",
					"funeral_services_crematories",
					"furniture_home_furnishings_and_equipment_stores_except_appliances",
					"furniture_repair_refinishing",
					"furriers_and_fur_shops",
					"general_services",
					"gift_card_novelty_and_souvenir_shops",
					"glass_paint_and_wallpaper_stores",
					"glassware_crystal_stores",
					"golf_courses_public",
					"government_licensed_horse_dog_racing_us_region_only",
					"government_licensed_online_casions_online_gambling_us_region_only",
					"government_owned_lotteries_non_us_region",
					"government_owned_lotteries_us_region_only",
					"government_services",
					"grocery_stores_supermarkets",
					"hardware_equipment_and_supplies",
					"hardware_stores",
					"health_and_beauty_spas",
					"hearing_aids_sales_and_supplies",
					"heating_plumbing_a_c",
					"hobby_toy_and_game_shops",
					"home_supply_warehouse_stores",
					"hospitals",
					"hotels_motels_and_resorts",
					"household_appliance_stores",
					"industrial_supplies",
					"information_retrieval_services",
					"insurance_default",
					"insurance_underwriting_premiums",
					"intra_company_purchases",
					"jewelry_stores_watches_clocks_and_silverware_stores",
					"landscaping_services",
					"laundries",
					"laundry_cleaning_services",
					"legal_services_attorneys",
					"luggage_and_leather_goods_stores",
					"lumber_building_materials_stores",
					"manual_cash_disburse",
					"marinas_service_and_supplies",
					"marketplaces",
					"masonry_stonework_and_plaster",
					"massage_parlors",
					"medical_and_dental_labs",
					"medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
					"medical_services",
					"membership_organizations",
					"mens_and_boys_clothing_and_accessories_stores",
					"mens_womens_clothing_stores",
					"metal_service_centers",
					"miscellaneous",
					"miscellaneous_apparel_and_accessory_shops",
					"miscellaneous_auto_dealers",
					"miscellaneous_business_services",
					"miscellaneous_food_stores",
					"miscellaneous_general_merchandise",
					"miscellaneous_general_services",
					"miscellaneous_home_furnishing_specialty_stores",
					"miscellaneous_publishing_and_printing",
					"miscellaneous_recreation_services",
					"miscellaneous_repair_shops",
					"miscellaneous_specialty_retail",
					"mobile_home_dealers",
					"motion_picture_theaters",
					"motor_freight_carriers_and_trucking",
					"motor_homes_dealers",
					"motor_vehicle_supplies_and_new_parts",
					"motorcycle_shops_and_dealers",
					"motorcycle_shops_dealers",
					"music_stores_musical_instruments_pianos_and_sheet_music",
					"news_dealers_and_newsstands",
					"non_fi_money_orders",
					"non_fi_stored_value_card_purchase_load",
					"nondurable_goods",
					"nurseries_lawn_and_garden_supply_stores",
					"nursing_personal_care",
					"office_and_commercial_furniture",
					"opticians_eyeglasses",
					"optometrists_ophthalmologist",
					"orthopedic_goods_prosthetic_devices",
					"osteopaths",
					"package_stores_beer_wine_and_liquor",
					"paints_varnishes_and_supplies",
					"parking_lots_garages",
					"passenger_railways",
					"pawn_shops",
					"pet_shops_pet_food_and_supplies",
					"petroleum_and_petroleum_products",
					"photo_developing",
					"photographic_photocopy_microfilm_equipment_and_supplies",
					"photographic_studios",
					"picture_video_production",
					"piece_goods_notions_and_other_dry_goods",
					"plumbing_heating_equipment_and_supplies",
					"political_organizations",
					"postal_services_government_only",
					"precious_stones_and_metals_watches_and_jewelry",
					"professional_services",
					"public_warehousing_and_storage",
					"quick_copy_repro_and_blueprint",
					"railroads",
					"real_estate_agents_and_managers_rentals",
					"record_stores",
					"recreational_vehicle_rentals",
					"religious_goods_stores",
					"religious_organizations",
					"roofing_siding_sheet_metal",
					"secretarial_support_services",
					"security_brokers_dealers",
					"service_stations",
					"sewing_needlework_fabric_and_piece_goods_stores",
					"shoe_repair_hat_cleaning",
					"shoe_stores",
					"small_appliance_repair",
					"snowmobile_dealers",
					"special_trade_services",
					"specialty_cleaning",
					"sporting_goods_stores",
					"sporting_recreation_camps",
					"sports_and_riding_apparel_stores",
					"sports_clubs_fields",
					"stamp_and_coin_stores",
					"stationary_office_supplies_printing_and_writing_paper",
					"stationery_stores_office_and_school_supply_stores",
					"swimming_pools_sales",
					"t_ui_travel_germany",
					"tailors_alterations",
					"tax_payments_government_agencies",
					"tax_preparation_services",
					"taxicabs_limousines",
					"telecommunication_equipment_and_telephone_sales",
					"telecommunication_services",
					"telegraph_services",
					"tent_and_awning_shops",
					"testing_laboratories",
					"theatrical_ticket_agencies",
					"timeshares",
					"tire_retreading_and_repair",
					"tolls_bridge_fees",
					"tourist_attractions_and_exhibits",
					"towing_services",
					"trailer_parks_campgrounds",
					"transportation_services",
					"travel_agencies_tour_operators",
					"truck_stop_iteration",
					"truck_utility_trailer_rentals",
					"typesetting_plate_making_and_related_services",
					"typewriter_stores",
					"u_s_federal_government_agencies_or_departments",
					"uniforms_commercial_clothing",
					"used_merchandise_and_secondhand_stores",
					"utilities",
					"variety_stores",
					"veterinary_services",
					"video_amusement_game_supplies",
					"video_game_arcades",
					"video_tape_rental_stores",
					"vocational_trade_schools",
					"watch_jewelry_repair",
					"welding_repair",
					"wholesale_clubs",
					"wig_and_toupee_stores",
					"wires_money_orders",
					"womens_accessory_and_specialty_shops",
					"womens_ready_to_wear_stores",
					"wrecking_and_salvage_yards"
				]
			},
			"stripe.Stripe.Issuing.Card.SpendingControls.SpendingLimit.Category": {
				"type": "string",
				"enum": [
					"ac_refrigeration_repair",
					"accounting_bookkeeping_services",
					"advertising_services",
					"agricultural_cooperative",
					"airlines_air_carriers",
					"airports_flying_fields",
					"ambulance_services",
					"amusement_parks_carnivals",
					"antique_reproductions",
					"antique_shops",
					"aquariums",
					"architectural_surveying_services",
					"art_dealers_and_galleries",
					"artists_supply_and_craft_shops",
					"auto_and_home_supply_stores",
					"auto_body_repair_shops",
					"auto_paint_shops",
					"auto_service_shops",
					"automated_cash_disburse",
					"automated_fuel_dispensers",
					"automobile_associations",
					"automotive_parts_and_accessories_stores",
					"automotive_tire_stores",
					"bail_and_bond_payments",
					"bakeries",
					"bands_orchestras",
					"barber_and_beauty_shops",
					"betting_casino_gambling",
					"bicycle_shops",
					"billiard_pool_establishments",
					"boat_dealers",
					"boat_rentals_and_leases",
					"book_stores",
					"books_periodicals_and_newspapers",
					"bowling_alleys",
					"bus_lines",
					"business_secretarial_schools",
					"buying_shopping_services",
					"cable_satellite_and_other_pay_television_and_radio",
					"camera_and_photographic_supply_stores",
					"candy_nut_and_confectionery_stores",
					"car_and_truck_dealers_new_used",
					"car_and_truck_dealers_used_only",
					"car_rental_agencies",
					"car_washes",
					"carpentry_services",
					"carpet_upholstery_cleaning",
					"caterers",
					"charitable_and_social_service_organizations_fundraising",
					"chemicals_and_allied_products",
					"child_care_services",
					"childrens_and_infants_wear_stores",
					"chiropodists_podiatrists",
					"chiropractors",
					"cigar_stores_and_stands",
					"civic_social_fraternal_associations",
					"cleaning_and_maintenance",
					"clothing_rental",
					"colleges_universities",
					"commercial_equipment",
					"commercial_footwear",
					"commercial_photography_art_and_graphics",
					"commuter_transport_and_ferries",
					"computer_network_services",
					"computer_programming",
					"computer_repair",
					"computer_software_stores",
					"computers_peripherals_and_software",
					"concrete_work_services",
					"construction_materials",
					"consulting_public_relations",
					"correspondence_schools",
					"cosmetic_stores",
					"counseling_services",
					"country_clubs",
					"courier_services",
					"court_costs",
					"credit_reporting_agencies",
					"cruise_lines",
					"dairy_products_stores",
					"dance_hall_studios_schools",
					"dating_escort_services",
					"dentists_orthodontists",
					"department_stores",
					"detective_agencies",
					"digital_goods_applications",
					"digital_goods_games",
					"digital_goods_large_volume",
					"digital_goods_media",
					"direct_marketing_catalog_merchant",
					"direct_marketing_combination_catalog_and_retail_merchant",
					"direct_marketing_inbound_telemarketing",
					"direct_marketing_insurance_services",
					"direct_marketing_other",
					"direct_marketing_outbound_telemarketing",
					"direct_marketing_subscription",
					"direct_marketing_travel",
					"discount_stores",
					"doctors",
					"door_to_door_sales",
					"drapery_window_covering_and_upholstery_stores",
					"drinking_places",
					"drug_stores_and_pharmacies",
					"drugs_drug_proprietaries_and_druggist_sundries",
					"dry_cleaners",
					"durable_goods",
					"duty_free_stores",
					"eating_places_restaurants",
					"educational_services",
					"electric_razor_stores",
					"electric_vehicle_charging",
					"electrical_parts_and_equipment",
					"electrical_services",
					"electronics_repair_shops",
					"electronics_stores",
					"elementary_secondary_schools",
					"emergency_services_gcas_visa_use_only",
					"employment_temp_agencies",
					"equipment_rental",
					"exterminating_services",
					"family_clothing_stores",
					"fast_food_restaurants",
					"financial_institutions",
					"fines_government_administrative_entities",
					"fireplace_fireplace_screens_and_accessories_stores",
					"floor_covering_stores",
					"florists",
					"florists_supplies_nursery_stock_and_flowers",
					"freezer_and_locker_meat_provisioners",
					"fuel_dealers_non_automotive",
					"funeral_services_crematories",
					"furniture_home_furnishings_and_equipment_stores_except_appliances",
					"furniture_repair_refinishing",
					"furriers_and_fur_shops",
					"general_services",
					"gift_card_novelty_and_souvenir_shops",
					"glass_paint_and_wallpaper_stores",
					"glassware_crystal_stores",
					"golf_courses_public",
					"government_licensed_horse_dog_racing_us_region_only",
					"government_licensed_online_casions_online_gambling_us_region_only",
					"government_owned_lotteries_non_us_region",
					"government_owned_lotteries_us_region_only",
					"government_services",
					"grocery_stores_supermarkets",
					"hardware_equipment_and_supplies",
					"hardware_stores",
					"health_and_beauty_spas",
					"hearing_aids_sales_and_supplies",
					"heating_plumbing_a_c",
					"hobby_toy_and_game_shops",
					"home_supply_warehouse_stores",
					"hospitals",
					"hotels_motels_and_resorts",
					"household_appliance_stores",
					"industrial_supplies",
					"information_retrieval_services",
					"insurance_default",
					"insurance_underwriting_premiums",
					"intra_company_purchases",
					"jewelry_stores_watches_clocks_and_silverware_stores",
					"landscaping_services",
					"laundries",
					"laundry_cleaning_services",
					"legal_services_attorneys",
					"luggage_and_leather_goods_stores",
					"lumber_building_materials_stores",
					"manual_cash_disburse",
					"marinas_service_and_supplies",
					"marketplaces",
					"masonry_stonework_and_plaster",
					"massage_parlors",
					"medical_and_dental_labs",
					"medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
					"medical_services",
					"membership_organizations",
					"mens_and_boys_clothing_and_accessories_stores",
					"mens_womens_clothing_stores",
					"metal_service_centers",
					"miscellaneous",
					"miscellaneous_apparel_and_accessory_shops",
					"miscellaneous_auto_dealers",
					"miscellaneous_business_services",
					"miscellaneous_food_stores",
					"miscellaneous_general_merchandise",
					"miscellaneous_general_services",
					"miscellaneous_home_furnishing_specialty_stores",
					"miscellaneous_publishing_and_printing",
					"miscellaneous_recreation_services",
					"miscellaneous_repair_shops",
					"miscellaneous_specialty_retail",
					"mobile_home_dealers",
					"motion_picture_theaters",
					"motor_freight_carriers_and_trucking",
					"motor_homes_dealers",
					"motor_vehicle_supplies_and_new_parts",
					"motorcycle_shops_and_dealers",
					"motorcycle_shops_dealers",
					"music_stores_musical_instruments_pianos_and_sheet_music",
					"news_dealers_and_newsstands",
					"non_fi_money_orders",
					"non_fi_stored_value_card_purchase_load",
					"nondurable_goods",
					"nurseries_lawn_and_garden_supply_stores",
					"nursing_personal_care",
					"office_and_commercial_furniture",
					"opticians_eyeglasses",
					"optometrists_ophthalmologist",
					"orthopedic_goods_prosthetic_devices",
					"osteopaths",
					"package_stores_beer_wine_and_liquor",
					"paints_varnishes_and_supplies",
					"parking_lots_garages",
					"passenger_railways",
					"pawn_shops",
					"pet_shops_pet_food_and_supplies",
					"petroleum_and_petroleum_products",
					"photo_developing",
					"photographic_photocopy_microfilm_equipment_and_supplies",
					"photographic_studios",
					"picture_video_production",
					"piece_goods_notions_and_other_dry_goods",
					"plumbing_heating_equipment_and_supplies",
					"political_organizations",
					"postal_services_government_only",
					"precious_stones_and_metals_watches_and_jewelry",
					"professional_services",
					"public_warehousing_and_storage",
					"quick_copy_repro_and_blueprint",
					"railroads",
					"real_estate_agents_and_managers_rentals",
					"record_stores",
					"recreational_vehicle_rentals",
					"religious_goods_stores",
					"religious_organizations",
					"roofing_siding_sheet_metal",
					"secretarial_support_services",
					"security_brokers_dealers",
					"service_stations",
					"sewing_needlework_fabric_and_piece_goods_stores",
					"shoe_repair_hat_cleaning",
					"shoe_stores",
					"small_appliance_repair",
					"snowmobile_dealers",
					"special_trade_services",
					"specialty_cleaning",
					"sporting_goods_stores",
					"sporting_recreation_camps",
					"sports_and_riding_apparel_stores",
					"sports_clubs_fields",
					"stamp_and_coin_stores",
					"stationary_office_supplies_printing_and_writing_paper",
					"stationery_stores_office_and_school_supply_stores",
					"swimming_pools_sales",
					"t_ui_travel_germany",
					"tailors_alterations",
					"tax_payments_government_agencies",
					"tax_preparation_services",
					"taxicabs_limousines",
					"telecommunication_equipment_and_telephone_sales",
					"telecommunication_services",
					"telegraph_services",
					"tent_and_awning_shops",
					"testing_laboratories",
					"theatrical_ticket_agencies",
					"timeshares",
					"tire_retreading_and_repair",
					"tolls_bridge_fees",
					"tourist_attractions_and_exhibits",
					"towing_services",
					"trailer_parks_campgrounds",
					"transportation_services",
					"travel_agencies_tour_operators",
					"truck_stop_iteration",
					"truck_utility_trailer_rentals",
					"typesetting_plate_making_and_related_services",
					"typewriter_stores",
					"u_s_federal_government_agencies_or_departments",
					"uniforms_commercial_clothing",
					"used_merchandise_and_secondhand_stores",
					"utilities",
					"variety_stores",
					"veterinary_services",
					"video_amusement_game_supplies",
					"video_game_arcades",
					"video_tape_rental_stores",
					"vocational_trade_schools",
					"watch_jewelry_repair",
					"welding_repair",
					"wholesale_clubs",
					"wig_and_toupee_stores",
					"wires_money_orders",
					"womens_accessory_and_specialty_shops",
					"womens_ready_to_wear_stores",
					"wrecking_and_salvage_yards"
				]
			},
			"stripe.Stripe.Issuing.Card.SpendingControls.SpendingLimit.Interval": {
				"type": "string",
				"enum": [
					"all_time",
					"daily",
					"monthly",
					"per_authorization",
					"weekly",
					"yearly"
				]
			},
			"stripe.Stripe.Issuing.Card.SpendingControls.SpendingLimit": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."
					},
					"categories": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.SpendingControls.SpendingLimit.Category"
						},
						"type": "array",
						"nullable": true,
						"description": "Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories."
					},
					"interval": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.SpendingControls.SpendingLimit.Interval",
						"description": "Interval (or event) to which the amount applies."
					}
				},
				"required": [
					"amount",
					"categories",
					"interval"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Card.SpendingControls": {
				"properties": {
					"allowed_categories": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.SpendingControls.AllowedCategory"
						},
						"type": "array",
						"nullable": true,
						"description": "Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`."
					},
					"allowed_merchant_countries": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Array of strings containing representing countries from which authorizations will be allowed. Authorizations from merchants in all other countries will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `blocked_merchant_countries`. Provide an empty value to unset this control."
					},
					"blocked_categories": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.SpendingControls.BlockedCategory"
						},
						"type": "array",
						"nullable": true,
						"description": "Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`."
					},
					"blocked_merchant_countries": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Array of strings containing representing countries from which authorizations will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `allowed_merchant_countries`. Provide an empty value to unset this control."
					},
					"spending_limits": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.SpendingControls.SpendingLimit"
						},
						"type": "array",
						"nullable": true,
						"description": "Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain)."
					},
					"spending_limits_currency": {
						"type": "string",
						"nullable": true,
						"description": "Currency of the amounts within `spending_limits`. Always the same as the currency of the card."
					}
				},
				"required": [
					"allowed_categories",
					"allowed_merchant_countries",
					"blocked_categories",
					"blocked_merchant_countries",
					"spending_limits",
					"spending_limits_currency"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Card.Status": {
				"type": "string",
				"enum": [
					"active",
					"canceled",
					"inactive"
				]
			},
			"stripe.Stripe.Issuing.Card.Type": {
				"type": "string",
				"enum": [
					"physical",
					"virtual"
				]
			},
			"stripe.Stripe.Issuing.Card.Wallets.ApplePay.IneligibleReason": {
				"type": "string",
				"enum": [
					"missing_agreement",
					"missing_cardholder_contact",
					"unsupported_region"
				]
			},
			"stripe.Stripe.Issuing.Card.Wallets.ApplePay": {
				"properties": {
					"eligible": {
						"type": "boolean",
						"description": "Apple Pay Eligibility"
					},
					"ineligible_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Wallets.ApplePay.IneligibleReason"
							}
						],
						"nullable": true,
						"description": "Reason the card is ineligible for Apple Pay"
					}
				},
				"required": [
					"eligible",
					"ineligible_reason"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Card.Wallets.GooglePay.IneligibleReason": {
				"type": "string",
				"enum": [
					"missing_agreement",
					"missing_cardholder_contact",
					"unsupported_region"
				]
			},
			"stripe.Stripe.Issuing.Card.Wallets.GooglePay": {
				"properties": {
					"eligible": {
						"type": "boolean",
						"description": "Google Pay Eligibility"
					},
					"ineligible_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Wallets.GooglePay.IneligibleReason"
							}
						],
						"nullable": true,
						"description": "Reason the card is ineligible for Google Pay"
					}
				},
				"required": [
					"eligible",
					"ineligible_reason"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Card.Wallets": {
				"properties": {
					"apple_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Wallets.ApplePay"
					},
					"google_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card.Wallets.GooglePay"
					},
					"primary_account_identifier": {
						"type": "string",
						"nullable": true,
						"description": "Unique identifier for a card used with digital wallets"
					}
				},
				"required": [
					"apple_pay",
					"google_pay",
					"primary_account_identifier"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.Fleet.CardholderPromptData": {
				"properties": {
					"alphanumeric_id": {
						"type": "string",
						"nullable": true,
						"description": "[Deprecated] An alphanumeric ID, though typical point of sales only support numeric entry. The card program can be configured to prompt for a vehicle ID, driver ID, or generic ID.",
						"deprecated": true
					},
					"driver_id": {
						"type": "string",
						"nullable": true,
						"description": "Driver ID."
					},
					"odometer": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Odometer reading."
					},
					"unspecified_id": {
						"type": "string",
						"nullable": true,
						"description": "An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type."
					},
					"user_id": {
						"type": "string",
						"nullable": true,
						"description": "User ID."
					},
					"vehicle_number": {
						"type": "string",
						"nullable": true,
						"description": "Vehicle number."
					}
				},
				"required": [
					"alphanumeric_id",
					"driver_id",
					"odometer",
					"unspecified_id",
					"user_id",
					"vehicle_number"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.Fleet.PurchaseType": {
				"type": "string",
				"enum": [
					"fuel_and_non_fuel_purchase",
					"fuel_purchase",
					"non_fuel_purchase"
				]
			},
			"stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown.Fuel": {
				"properties": {
					"gross_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "Gross fuel amount that should equal Fuel Quantity multiplied by Fuel Unit Cost, inclusive of taxes."
					}
				},
				"required": [
					"gross_amount_decimal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown.NonFuel": {
				"properties": {
					"gross_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes."
					}
				},
				"required": [
					"gross_amount_decimal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown.Tax": {
				"properties": {
					"local_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "Amount of state or provincial Sales Tax included in the transaction amount. `null` if not reported by merchant or not subject to tax."
					},
					"national_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "Amount of national Sales Tax or VAT included in the transaction amount. `null` if not reported by merchant or not subject to tax."
					}
				},
				"required": [
					"local_amount_decimal",
					"national_amount_decimal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown": {
				"properties": {
					"fuel": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown.Fuel"
							}
						],
						"nullable": true,
						"description": "Breakdown of fuel portion of the purchase."
					},
					"non_fuel": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown.NonFuel"
							}
						],
						"nullable": true,
						"description": "Breakdown of non-fuel portion of the purchase."
					},
					"tax": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown.Tax"
							}
						],
						"nullable": true,
						"description": "Information about tax included in this transaction."
					}
				},
				"required": [
					"fuel",
					"non_fuel",
					"tax"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.Fleet.ServiceType": {
				"type": "string",
				"enum": [
					"full_service",
					"non_fuel_transaction",
					"self_service"
				]
			},
			"stripe.Stripe.Issuing.Authorization.Fleet": {
				"properties": {
					"cardholder_prompt_data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.Fleet.CardholderPromptData"
							}
						],
						"nullable": true,
						"description": "Answers to prompts presented to the cardholder at the point of sale. Prompted fields vary depending on the configuration of your physical fleet cards. Typical points of sale support only numeric entry."
					},
					"purchase_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.Fleet.PurchaseType"
							}
						],
						"nullable": true,
						"description": "The type of purchase."
					},
					"reported_breakdown": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown"
							}
						],
						"nullable": true,
						"description": "More information about the total amount. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed. This information is not guaranteed to be accurate as some merchants may provide unreliable data."
					},
					"service_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.Fleet.ServiceType"
							}
						],
						"nullable": true,
						"description": "The type of fuel service."
					}
				},
				"required": [
					"cardholder_prompt_data",
					"purchase_type",
					"reported_breakdown",
					"service_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.Fuel.Type": {
				"type": "string",
				"enum": [
					"diesel",
					"other",
					"unleaded_plus",
					"unleaded_regular",
					"unleaded_super"
				]
			},
			"stripe.Stripe.Issuing.Authorization.Fuel.Unit": {
				"type": "string",
				"enum": [
					"charging_minute",
					"imperial_gallon",
					"kilogram",
					"kilowatt_hour",
					"liter",
					"other",
					"pound",
					"us_gallon"
				]
			},
			"stripe.Stripe.Issuing.Authorization.Fuel": {
				"properties": {
					"industry_product_code": {
						"type": "string",
						"nullable": true,
						"description": "[Conexxus Payment System Product Code](https://www.conexxus.org/conexxus-payment-system-product-codes) identifying the primary fuel product purchased."
					},
					"quantity_decimal": {
						"type": "string",
						"nullable": true,
						"description": "The quantity of `unit`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places."
					},
					"type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.Fuel.Type"
							}
						],
						"nullable": true,
						"description": "The type of fuel that was purchased."
					},
					"unit": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.Fuel.Unit"
							}
						],
						"nullable": true,
						"description": "The units for `quantity_decimal`."
					},
					"unit_cost_decimal": {
						"type": "string",
						"nullable": true,
						"description": "The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places."
					}
				},
				"required": [
					"industry_product_code",
					"quantity_decimal",
					"type",
					"unit",
					"unit_cost_decimal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.MerchantData": {
				"properties": {
					"category": {
						"type": "string",
						"description": "A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values."
					},
					"category_code": {
						"type": "string",
						"description": "The merchant category code for the seller's business"
					},
					"city": {
						"type": "string",
						"nullable": true,
						"description": "City where the seller is located"
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Country where the seller is located"
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the seller"
					},
					"network_id": {
						"type": "string",
						"description": "Identifier assigned to the seller by the card network. Different card networks may assign different network_id fields to the same merchant."
					},
					"postal_code": {
						"type": "string",
						"nullable": true,
						"description": "Postal code where the seller is located"
					},
					"state": {
						"type": "string",
						"nullable": true,
						"description": "State where the seller is located"
					},
					"terminal_id": {
						"type": "string",
						"nullable": true,
						"description": "An ID assigned by the seller to the location of the sale."
					},
					"url": {
						"type": "string",
						"nullable": true,
						"description": "URL provided by the merchant on a 3DS request"
					}
				},
				"required": [
					"category",
					"category_code",
					"city",
					"country",
					"name",
					"network_id",
					"postal_code",
					"state",
					"terminal_id",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.NetworkData": {
				"properties": {
					"acquiring_institution_id": {
						"type": "string",
						"nullable": true,
						"description": "Identifier assigned to the acquirer by the card network. Sometimes this value is not provided by the network; in this case, the value will be `null`."
					},
					"system_trace_audit_number": {
						"type": "string",
						"nullable": true,
						"description": "The System Trace Audit Number (STAN) is a 6-digit identifier assigned by the acquirer. Prefer `network_data.transaction_id` if present, unless you have special requirements."
					},
					"transaction_id": {
						"type": "string",
						"nullable": true,
						"description": "Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions."
					}
				},
				"required": [
					"acquiring_institution_id",
					"system_trace_audit_number",
					"transaction_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.PendingRequest.AmountDetails": {
				"properties": {
					"atm_fee": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The fee charged by the ATM for the cash withdrawal."
					},
					"cashback_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount of cash requested by the cardholder."
					}
				},
				"required": [
					"atm_fee",
					"cashback_amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.PendingRequest": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."
					},
					"amount_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.PendingRequest.AmountDetails"
							}
						],
						"nullable": true,
						"description": "Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"is_amount_controllable": {
						"type": "boolean",
						"description": "If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization."
					},
					"merchant_amount": {
						"type": "number",
						"format": "double",
						"description": "The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."
					},
					"merchant_currency": {
						"type": "string",
						"description": "The local currency the merchant is requesting to authorize."
					},
					"network_risk_score": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99."
					}
				},
				"required": [
					"amount",
					"amount_details",
					"currency",
					"is_amount_controllable",
					"merchant_amount",
					"merchant_currency",
					"network_risk_score"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.RequestHistory.AmountDetails": {
				"properties": {
					"atm_fee": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The fee charged by the ATM for the cash withdrawal."
					},
					"cashback_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount of cash requested by the cardholder."
					}
				},
				"required": [
					"atm_fee",
					"cashback_amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.RequestHistory.Reason": {
				"type": "string",
				"enum": [
					"account_disabled",
					"card_active",
					"card_canceled",
					"card_expired",
					"card_inactive",
					"cardholder_blocked",
					"cardholder_inactive",
					"cardholder_verification_required",
					"insecure_authorization_method",
					"insufficient_funds",
					"not_allowed",
					"pin_blocked",
					"spending_controls",
					"suspected_fraud",
					"verification_failed",
					"webhook_approved",
					"webhook_declined",
					"webhook_error",
					"webhook_timeout"
				]
			},
			"stripe.Stripe.Issuing.Authorization.RequestHistory": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved."
					},
					"amount_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.RequestHistory.AmountDetails"
							}
						],
						"nullable": true,
						"description": "Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether this request was approved."
					},
					"authorization_code": {
						"type": "string",
						"nullable": true,
						"description": "A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter \"S\", followed by a six-digit number. For example, \"S498162\". Please note that the code is not guaranteed to be unique across authorizations."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"merchant_amount": {
						"type": "number",
						"format": "double",
						"description": "The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."
					},
					"merchant_currency": {
						"type": "string",
						"description": "The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"network_risk_score": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99."
					},
					"reason": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.RequestHistory.Reason",
						"description": "When an authorization is approved or declined by you or by Stripe, this field provides additional detail on the reason for the outcome."
					},
					"reason_message": {
						"type": "string",
						"nullable": true,
						"description": "If the `request_history.reason` is `webhook_error` because the direct webhook response is invalid (for example, parsing errors or missing parameters), we surface a more detailed error message via this field."
					},
					"requested_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Time when the card network received an authorization request from the acquirer in UTC. Referred to by networks as transmission time."
					}
				},
				"required": [
					"amount",
					"amount_details",
					"approved",
					"authorization_code",
					"created",
					"currency",
					"merchant_amount",
					"merchant_currency",
					"network_risk_score",
					"reason",
					"reason_message",
					"requested_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.Status": {
				"type": "string",
				"enum": [
					"closed",
					"pending",
					"reversed"
				]
			},
			"stripe.Stripe.Issuing.Token.Network": {
				"type": "string",
				"enum": [
					"mastercard",
					"visa"
				]
			},
			"stripe.Stripe.Issuing.Token.NetworkData.Device.Type": {
				"type": "string",
				"enum": [
					"other",
					"phone",
					"watch"
				]
			},
			"stripe.Stripe.Issuing.Token.NetworkData.Device": {
				"properties": {
					"device_fingerprint": {
						"type": "string",
						"description": "An obfuscated ID derived from the device ID."
					},
					"ip_address": {
						"type": "string",
						"description": "The IP address of the device at provisioning time."
					},
					"location": {
						"type": "string",
						"description": "The geographic latitude/longitude coordinates of the device at provisioning time. The format is [+-]decimal/[+-]decimal."
					},
					"name": {
						"type": "string",
						"description": "The name of the device used for tokenization."
					},
					"phone_number": {
						"type": "string",
						"description": "The phone number of the device used for tokenization."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token.NetworkData.Device.Type",
						"description": "The type of device used for tokenization."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Token.NetworkData.Mastercard": {
				"properties": {
					"card_reference_id": {
						"type": "string",
						"description": "A unique reference ID from MasterCard to represent the card account number."
					},
					"token_reference_id": {
						"type": "string",
						"description": "The network-unique identifier for the token."
					},
					"token_requestor_id": {
						"type": "string",
						"description": "The ID of the entity requesting tokenization, specific to MasterCard."
					},
					"token_requestor_name": {
						"type": "string",
						"description": "The name of the entity requesting tokenization, if known. This is directly provided from MasterCard."
					}
				},
				"required": [
					"token_reference_id",
					"token_requestor_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Token.NetworkData.Type": {
				"type": "string",
				"enum": [
					"mastercard",
					"visa"
				]
			},
			"stripe.Stripe.Issuing.Token.NetworkData.Visa": {
				"properties": {
					"card_reference_id": {
						"type": "string",
						"description": "A unique reference ID from Visa to represent the card account number."
					},
					"token_reference_id": {
						"type": "string",
						"description": "The network-unique identifier for the token."
					},
					"token_requestor_id": {
						"type": "string",
						"description": "The ID of the entity requesting tokenization, specific to Visa."
					},
					"token_risk_score": {
						"type": "string",
						"description": "Degree of risk associated with the token between `01` and `99`, with higher number indicating higher risk. A `00` value indicates the token was not scored by Visa."
					}
				},
				"required": [
					"card_reference_id",
					"token_reference_id",
					"token_requestor_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.CardNumberSource": {
				"type": "string",
				"enum": [
					"app",
					"manual",
					"on_file",
					"other"
				]
			},
			"stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.CardholderAddress": {
				"properties": {
					"line1": {
						"type": "string",
						"description": "The street address of the cardholder tokenizing the card."
					},
					"postal_code": {
						"type": "string",
						"description": "The postal code of the cardholder tokenizing the card."
					}
				},
				"required": [
					"line1",
					"postal_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.ReasonCode": {
				"type": "string",
				"enum": [
					"account_card_too_new",
					"account_recently_changed",
					"account_too_new",
					"account_too_new_since_launch",
					"additional_device",
					"data_expired",
					"defer_id_v_decision",
					"device_recently_lost",
					"good_activity_history",
					"has_suspended_tokens",
					"high_risk",
					"inactive_account",
					"long_account_tenure",
					"low_account_score",
					"low_device_score",
					"low_phone_number_score",
					"network_service_error",
					"outside_home_territory",
					"provisioning_cardholder_mismatch",
					"provisioning_device_and_cardholder_mismatch",
					"provisioning_device_mismatch",
					"same_device_no_prior_authentication",
					"same_device_successful_prior_authentication",
					"software_update",
					"suspicious_activity",
					"too_many_different_cardholders",
					"too_many_recent_attempts",
					"too_many_recent_tokens"
				]
			},
			"stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.SuggestedDecision": {
				"type": "string",
				"enum": [
					"approve",
					"decline",
					"require_auth"
				]
			},
			"stripe.Stripe.Issuing.Token.NetworkData.WalletProvider": {
				"properties": {
					"account_id": {
						"type": "string",
						"description": "The wallet provider-given account ID of the digital wallet the token belongs to."
					},
					"account_trust_score": {
						"type": "number",
						"format": "double",
						"description": "An evaluation on the trustworthiness of the wallet account between 1 and 5. A higher score indicates more trustworthy."
					},
					"card_number_source": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.CardNumberSource",
						"description": "The method used for tokenizing a card."
					},
					"cardholder_address": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.CardholderAddress"
					},
					"cardholder_name": {
						"type": "string",
						"description": "The name of the cardholder tokenizing the card."
					},
					"device_trust_score": {
						"type": "number",
						"format": "double",
						"description": "An evaluation on the trustworthiness of the device. A higher score indicates more trustworthy."
					},
					"hashed_account_email_address": {
						"type": "string",
						"description": "The hashed email address of the cardholder's account with the wallet provider."
					},
					"reason_codes": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.ReasonCode"
						},
						"type": "array",
						"description": "The reasons for suggested tokenization given by the card network."
					},
					"suggested_decision": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.SuggestedDecision",
						"description": "The recommendation on responding to the tokenization request."
					},
					"suggested_decision_version": {
						"type": "string",
						"description": "The version of the standard for mapping reason codes followed by the wallet provider."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Token.NetworkData": {
				"properties": {
					"device": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token.NetworkData.Device"
					},
					"mastercard": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token.NetworkData.Mastercard"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token.NetworkData.Type",
						"description": "The network that the token is associated with. An additional hash is included with a name matching this value, containing tokenization data specific to the card network."
					},
					"visa": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token.NetworkData.Visa"
					},
					"wallet_provider": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token.NetworkData.WalletProvider"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Token.Status": {
				"type": "string",
				"enum": [
					"active",
					"deleted",
					"requested",
					"suspended"
				]
			},
			"stripe.Stripe.Issuing.Token.WalletProvider": {
				"type": "string",
				"enum": [
					"apple_pay",
					"google_pay",
					"samsung_pay"
				]
			},
			"stripe.Stripe.Issuing.Token": {
				"description": "An issuing token object is created when an issued card is added to a digital wallet. As a [card issuer](https://stripe.com/docs/issuing), you can [view and manage these tokens](https://stripe.com/docs/issuing/controls/token-management) through Stripe.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"issuing.token"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"card": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card"
							}
						],
						"description": "Card associated with this token."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"device_fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "The hashed ID derived from the device ID from the card network associated with the token."
					},
					"last4": {
						"type": "string",
						"description": "The last four digits of the token."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"network": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token.Network",
						"description": "The token service provider / card network associated with the token."
					},
					"network_data": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token.NetworkData"
					},
					"network_updated_at": {
						"type": "number",
						"format": "double",
						"description": "Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token.Status",
						"description": "The usage state of the token."
					},
					"wallet_provider": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token.WalletProvider",
						"description": "The digital wallet for this token, if one was used."
					}
				},
				"required": [
					"id",
					"object",
					"card",
					"created",
					"device_fingerprint",
					"livemode",
					"network",
					"network_updated_at",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.AmountDetails": {
				"properties": {
					"atm_fee": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The fee charged by the ATM for the cash withdrawal."
					},
					"cashback_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount of cash requested by the cardholder."
					}
				},
				"required": [
					"atm_fee",
					"cashback_amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization": {
				"description": "When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`\nobject is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the\npurchase to be completed successfully.\n\nRelated guide: [Issued card authorizations](https://stripe.com/docs/issuing/purchases/authorizations)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"issuing.authorization"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The total amount that was authorized or rejected. This amount is in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `amount` should be the same as `merchant_amount`, unless `currency` and `merchant_currency` are different."
					},
					"amount_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.AmountDetails"
							}
						],
						"nullable": true,
						"description": "Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."
					},
					"approved": {
						"type": "boolean",
						"description": "Whether the authorization has been approved."
					},
					"authorization_method": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.AuthorizationMethod",
						"description": "How the card details were provided."
					},
					"balance_transactions": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
						},
						"type": "array",
						"description": "List of balance transactions associated with this authorization."
					},
					"card": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card",
						"description": "You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders."
					},
					"cardholder": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder"
							}
						],
						"nullable": true,
						"description": "The cardholder to whom this authorization belongs."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "The currency of the cardholder. This currency can be different from the currency presented at authorization and the `merchant_currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"fleet": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.Fleet"
							}
						],
						"nullable": true,
						"description": "Fleet-specific information for authorizations using Fleet cards."
					},
					"fuel": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.Fuel"
							}
						],
						"nullable": true,
						"description": "Information about fuel that was purchased with this transaction. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"merchant_amount": {
						"type": "number",
						"format": "double",
						"description": "The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `merchant_amount` should be the same as `amount`, unless `merchant_currency` and `currency` are different."
					},
					"merchant_currency": {
						"type": "string",
						"description": "The local currency that was presented to the cardholder for the authorization. This currency can be different from the cardholder currency and the `currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"merchant_data": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.MerchantData"
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"network_data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.NetworkData"
							}
						],
						"nullable": true,
						"description": "Details about the authorization, such as identifiers, set by the card network."
					},
					"pending_request": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.PendingRequest"
							}
						],
						"nullable": true,
						"description": "The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook."
					},
					"request_history": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.RequestHistory"
						},
						"type": "array",
						"description": "History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.Status",
						"description": "The current status of the authorization in its lifecycle."
					},
					"token": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token"
							}
						],
						"nullable": true,
						"description": "[Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this authorization. If a network token was not used for this authorization, this field will be null."
					},
					"transactions": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction"
						},
						"type": "array",
						"description": "List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization."
					},
					"treasury": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.Treasury"
							}
						],
						"nullable": true,
						"description": "[Treasury](https://stripe.com/docs/api/treasury) details related to this authorization if it was created on a [FinancialAccount](https://stripe.com/docs/api/treasury/financial_accounts)."
					},
					"verification_data": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.VerificationData"
					},
					"wallet": {
						"type": "string",
						"nullable": true,
						"description": "The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"amount_details",
					"approved",
					"authorization_method",
					"balance_transactions",
					"card",
					"cardholder",
					"created",
					"currency",
					"fleet",
					"fuel",
					"livemode",
					"merchant_amount",
					"merchant_currency",
					"merchant_data",
					"metadata",
					"network_data",
					"pending_request",
					"request_history",
					"status",
					"transactions",
					"verification_data",
					"wallet"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Dispute.Evidence.Canceled.ProductType": {
				"type": "string",
				"enum": [
					"merchandise",
					"service"
				]
			},
			"stripe.Stripe.Issuing.Dispute.Evidence.Canceled.ReturnStatus": {
				"type": "string",
				"enum": [
					"merchant_rejected",
					"successful"
				]
			},
			"stripe.Stripe.Issuing.Dispute.Evidence.Canceled": {
				"properties": {
					"additional_documentation": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute."
					},
					"canceled_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Date when order was canceled."
					},
					"cancellation_policy_provided": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether the cardholder was provided with a cancellation policy."
					},
					"cancellation_reason": {
						"type": "string",
						"nullable": true,
						"description": "Reason for canceling the order."
					},
					"expected_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Date when the cardholder expected to receive the product."
					},
					"explanation": {
						"type": "string",
						"nullable": true,
						"description": "Explanation of why the cardholder is disputing this transaction."
					},
					"product_description": {
						"type": "string",
						"nullable": true,
						"description": "Description of the merchandise or service that was purchased."
					},
					"product_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Evidence.Canceled.ProductType"
							}
						],
						"nullable": true,
						"description": "Whether the product was a merchandise or service."
					},
					"return_status": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Evidence.Canceled.ReturnStatus"
							}
						],
						"nullable": true,
						"description": "Result of cardholder's attempt to return the product."
					},
					"returned_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Date when the product was returned or attempted to be returned."
					}
				},
				"required": [
					"additional_documentation",
					"canceled_at",
					"cancellation_policy_provided",
					"cancellation_reason",
					"expected_at",
					"explanation",
					"product_description",
					"product_type",
					"return_status",
					"returned_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Dispute.Evidence.Duplicate": {
				"properties": {
					"additional_documentation": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute."
					},
					"card_statement": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for."
					},
					"cash_receipt": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash."
					},
					"check_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product."
					},
					"explanation": {
						"type": "string",
						"nullable": true,
						"description": "Explanation of why the cardholder is disputing this transaction."
					},
					"original_transaction": {
						"type": "string",
						"nullable": true,
						"description": "Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one."
					}
				},
				"required": [
					"additional_documentation",
					"card_statement",
					"cash_receipt",
					"check_image",
					"explanation",
					"original_transaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Dispute.Evidence.Fraudulent": {
				"properties": {
					"additional_documentation": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute."
					},
					"explanation": {
						"type": "string",
						"nullable": true,
						"description": "Explanation of why the cardholder is disputing this transaction."
					}
				},
				"required": [
					"additional_documentation",
					"explanation"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Dispute.Evidence.MerchandiseNotAsDescribed.ReturnStatus": {
				"type": "string",
				"enum": [
					"merchant_rejected",
					"successful"
				]
			},
			"stripe.Stripe.Issuing.Dispute.Evidence.MerchandiseNotAsDescribed": {
				"properties": {
					"additional_documentation": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute."
					},
					"explanation": {
						"type": "string",
						"nullable": true,
						"description": "Explanation of why the cardholder is disputing this transaction."
					},
					"received_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Date when the product was received."
					},
					"return_description": {
						"type": "string",
						"nullable": true,
						"description": "Description of the cardholder's attempt to return the product."
					},
					"return_status": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Evidence.MerchandiseNotAsDescribed.ReturnStatus"
							}
						],
						"nullable": true,
						"description": "Result of cardholder's attempt to return the product."
					},
					"returned_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Date when the product was returned or attempted to be returned."
					}
				},
				"required": [
					"additional_documentation",
					"explanation",
					"received_at",
					"return_description",
					"return_status",
					"returned_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Dispute.Evidence.NoValidAuthorization": {
				"properties": {
					"additional_documentation": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute."
					},
					"explanation": {
						"type": "string",
						"nullable": true,
						"description": "Explanation of why the cardholder is disputing this transaction."
					}
				},
				"required": [
					"additional_documentation",
					"explanation"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Dispute.Evidence.NotReceived.ProductType": {
				"type": "string",
				"enum": [
					"merchandise",
					"service"
				]
			},
			"stripe.Stripe.Issuing.Dispute.Evidence.NotReceived": {
				"properties": {
					"additional_documentation": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute."
					},
					"expected_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Date when the cardholder expected to receive the product."
					},
					"explanation": {
						"type": "string",
						"nullable": true,
						"description": "Explanation of why the cardholder is disputing this transaction."
					},
					"product_description": {
						"type": "string",
						"nullable": true,
						"description": "Description of the merchandise or service that was purchased."
					},
					"product_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Evidence.NotReceived.ProductType"
							}
						],
						"nullable": true,
						"description": "Whether the product was a merchandise or service."
					}
				},
				"required": [
					"additional_documentation",
					"expected_at",
					"explanation",
					"product_description",
					"product_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Dispute.Evidence.Other.ProductType": {
				"type": "string",
				"enum": [
					"merchandise",
					"service"
				]
			},
			"stripe.Stripe.Issuing.Dispute.Evidence.Other": {
				"properties": {
					"additional_documentation": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute."
					},
					"explanation": {
						"type": "string",
						"nullable": true,
						"description": "Explanation of why the cardholder is disputing this transaction."
					},
					"product_description": {
						"type": "string",
						"nullable": true,
						"description": "Description of the merchandise or service that was purchased."
					},
					"product_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Evidence.Other.ProductType"
							}
						],
						"nullable": true,
						"description": "Whether the product was a merchandise or service."
					}
				},
				"required": [
					"additional_documentation",
					"explanation",
					"product_description",
					"product_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Dispute.Evidence.Reason": {
				"type": "string",
				"enum": [
					"canceled",
					"duplicate",
					"fraudulent",
					"merchandise_not_as_described",
					"no_valid_authorization",
					"not_received",
					"other",
					"service_not_as_described"
				]
			},
			"stripe.Stripe.Issuing.Dispute.Evidence.ServiceNotAsDescribed": {
				"properties": {
					"additional_documentation": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute."
					},
					"canceled_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Date when order was canceled."
					},
					"cancellation_reason": {
						"type": "string",
						"nullable": true,
						"description": "Reason for canceling the order."
					},
					"explanation": {
						"type": "string",
						"nullable": true,
						"description": "Explanation of why the cardholder is disputing this transaction."
					},
					"received_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Date when the product was received."
					}
				},
				"required": [
					"additional_documentation",
					"canceled_at",
					"cancellation_reason",
					"explanation",
					"received_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Dispute.Evidence": {
				"properties": {
					"canceled": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Evidence.Canceled"
					},
					"duplicate": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Evidence.Duplicate"
					},
					"fraudulent": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Evidence.Fraudulent"
					},
					"merchandise_not_as_described": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Evidence.MerchandiseNotAsDescribed"
					},
					"no_valid_authorization": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Evidence.NoValidAuthorization"
					},
					"not_received": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Evidence.NotReceived"
					},
					"other": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Evidence.Other"
					},
					"reason": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Evidence.Reason",
						"description": "The reason for filing the dispute. Its value will match the field containing the evidence."
					},
					"service_not_as_described": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Evidence.ServiceNotAsDescribed"
					}
				},
				"required": [
					"reason"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Dispute.LossReason": {
				"type": "string",
				"enum": [
					"cardholder_authentication_issuer_liability",
					"eci5_token_transaction_with_tavv",
					"excess_disputes_in_timeframe",
					"has_not_met_the_minimum_dispute_amount_requirements",
					"invalid_duplicate_dispute",
					"invalid_incorrect_amount_dispute",
					"invalid_no_authorization",
					"invalid_use_of_disputes",
					"merchandise_delivered_or_shipped",
					"merchandise_or_service_as_described",
					"not_cancelled",
					"other",
					"refund_issued",
					"submitted_beyond_allowable_time_limit",
					"transaction_3ds_required",
					"transaction_approved_after_prior_fraud_dispute",
					"transaction_authorized",
					"transaction_electronically_read",
					"transaction_qualifies_for_visa_easy_payment_service",
					"transaction_unattended"
				]
			},
			"stripe.Stripe.Issuing.Dispute.Status": {
				"type": "string",
				"enum": [
					"expired",
					"lost",
					"submitted",
					"unsubmitted",
					"won"
				]
			},
			"stripe.Stripe.Issuing.Transaction": {
				"description": "Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving\nyour Stripe account, such as a completed purchase or refund, is represented by an Issuing\n`Transaction` object.\n\nRelated guide: [Issued card transactions](https://stripe.com/docs/issuing/purchases/transactions)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"issuing.transaction"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."
					},
					"amount_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.AmountDetails"
							}
						],
						"nullable": true,
						"description": "Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."
					},
					"authorization": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization"
							}
						],
						"nullable": true,
						"description": "The `Authorization` object that led to this transaction."
					},
					"balance_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
							}
						],
						"nullable": true,
						"description": "ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction."
					},
					"card": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Card"
							}
						],
						"description": "The card used to make this transaction."
					},
					"cardholder": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Cardholder"
							}
						],
						"nullable": true,
						"description": "The cardholder to whom this transaction belongs."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"dispute": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute"
							}
						],
						"nullable": true,
						"description": "If you've disputed the transaction, the ID of the dispute."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"merchant_amount": {
						"type": "number",
						"format": "double",
						"description": "The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency."
					},
					"merchant_currency": {
						"type": "string",
						"description": "The currency with which the merchant is taking payment."
					},
					"merchant_data": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.MerchantData"
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"network_data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.NetworkData"
							}
						],
						"nullable": true,
						"description": "Details about the transaction, such as processing dates, set by the card network."
					},
					"purchase_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.PurchaseDetails"
							}
						],
						"nullable": true,
						"description": "Additional purchase information that is optionally provided by the merchant."
					},
					"token": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Token"
							}
						],
						"nullable": true,
						"description": "[Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this transaction. If a network token was not used for this transaction, this field will be null."
					},
					"treasury": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.Treasury"
							}
						],
						"nullable": true,
						"description": "[Treasury](https://stripe.com/docs/api/treasury) details related to this transaction if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.Type",
						"description": "The nature of the transaction."
					},
					"wallet": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.Wallet"
							}
						],
						"nullable": true,
						"description": "The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"amount_details",
					"authorization",
					"balance_transaction",
					"card",
					"cardholder",
					"created",
					"currency",
					"dispute",
					"livemode",
					"merchant_amount",
					"merchant_currency",
					"merchant_data",
					"metadata",
					"network_data",
					"type",
					"wallet"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Dispute.Treasury": {
				"properties": {
					"debit_reversal": {
						"type": "string",
						"nullable": true,
						"description": "The Treasury [DebitReversal](https://stripe.com/docs/api/treasury/debit_reversals) representing this Issuing dispute"
					},
					"received_debit": {
						"type": "string",
						"description": "The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) that is being disputed."
					}
				},
				"required": [
					"debit_reversal",
					"received_debit"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Dispute": {
				"description": "As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.\n\nRelated guide: [Issuing disputes](https://stripe.com/docs/issuing/purchases/disputes)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"issuing.dispute"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Disputed amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation)."
					},
					"balance_transactions": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
						},
						"type": "array",
						"nullable": true,
						"description": "List of balance transactions associated with the dispute."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "The currency the `transaction` was made in."
					},
					"evidence": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Evidence"
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"loss_reason": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.LossReason",
						"description": "The enum that describes the dispute loss outcome. If the dispute is not lost, this field will be absent. New enum values may be added in the future, so be sure to handle unknown values."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Status",
						"description": "Current status of the dispute."
					},
					"transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction"
							}
						],
						"description": "The transaction being disputed."
					},
					"treasury": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute.Treasury"
							}
						],
						"nullable": true,
						"description": "[Treasury](https://stripe.com/docs/api/treasury) details related to this dispute if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts"
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"created",
					"currency",
					"evidence",
					"livemode",
					"metadata",
					"status",
					"transaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.MerchantData": {
				"properties": {
					"category": {
						"type": "string",
						"description": "A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values."
					},
					"category_code": {
						"type": "string",
						"description": "The merchant category code for the seller's business"
					},
					"city": {
						"type": "string",
						"nullable": true,
						"description": "City where the seller is located"
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Country where the seller is located"
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the seller"
					},
					"network_id": {
						"type": "string",
						"description": "Identifier assigned to the seller by the card network. Different card networks may assign different network_id fields to the same merchant."
					},
					"postal_code": {
						"type": "string",
						"nullable": true,
						"description": "Postal code where the seller is located"
					},
					"state": {
						"type": "string",
						"nullable": true,
						"description": "State where the seller is located"
					},
					"terminal_id": {
						"type": "string",
						"nullable": true,
						"description": "An ID assigned by the seller to the location of the sale."
					},
					"url": {
						"type": "string",
						"nullable": true,
						"description": "URL provided by the merchant on a 3DS request"
					}
				},
				"required": [
					"category",
					"category_code",
					"city",
					"country",
					"name",
					"network_id",
					"postal_code",
					"state",
					"terminal_id",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.NetworkData": {
				"properties": {
					"authorization_code": {
						"type": "string",
						"nullable": true,
						"description": "A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter \"S\", followed by a six-digit number. For example, \"S498162\". Please note that the code is not guaranteed to be unique across authorizations."
					},
					"processing_date": {
						"type": "string",
						"nullable": true,
						"description": "The date the transaction was processed by the card network. This can be different from the date the seller recorded the transaction depending on when the acquirer submits the transaction to the network."
					},
					"transaction_id": {
						"type": "string",
						"nullable": true,
						"description": "Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions."
					}
				},
				"required": [
					"authorization_code",
					"processing_date",
					"transaction_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.CardholderPromptData": {
				"properties": {
					"driver_id": {
						"type": "string",
						"nullable": true,
						"description": "Driver ID."
					},
					"odometer": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Odometer reading."
					},
					"unspecified_id": {
						"type": "string",
						"nullable": true,
						"description": "An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type."
					},
					"user_id": {
						"type": "string",
						"nullable": true,
						"description": "User ID."
					},
					"vehicle_number": {
						"type": "string",
						"nullable": true,
						"description": "Vehicle number."
					}
				},
				"required": [
					"driver_id",
					"odometer",
					"unspecified_id",
					"user_id",
					"vehicle_number"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown.Fuel": {
				"properties": {
					"gross_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "Gross fuel amount that should equal Fuel Volume multipled by Fuel Unit Cost, inclusive of taxes."
					}
				},
				"required": [
					"gross_amount_decimal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown.NonFuel": {
				"properties": {
					"gross_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes."
					}
				},
				"required": [
					"gross_amount_decimal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown.Tax": {
				"properties": {
					"local_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "Amount of state or provincial Sales Tax included in the transaction amount. Null if not reported by merchant or not subject to tax."
					},
					"national_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "Amount of national Sales Tax or VAT included in the transaction amount. Null if not reported by merchant or not subject to tax."
					}
				},
				"required": [
					"local_amount_decimal",
					"national_amount_decimal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown": {
				"properties": {
					"fuel": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown.Fuel"
							}
						],
						"nullable": true,
						"description": "Breakdown of fuel portion of the purchase."
					},
					"non_fuel": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown.NonFuel"
							}
						],
						"nullable": true,
						"description": "Breakdown of non-fuel portion of the purchase."
					},
					"tax": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown.Tax"
							}
						],
						"nullable": true,
						"description": "Information about tax included in this transaction."
					}
				},
				"required": [
					"fuel",
					"non_fuel",
					"tax"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet": {
				"properties": {
					"cardholder_prompt_data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.CardholderPromptData"
							}
						],
						"nullable": true,
						"description": "Answers to prompts presented to cardholder at point of sale."
					},
					"purchase_type": {
						"type": "string",
						"nullable": true,
						"description": "The type of purchase. One of `fuel_purchase`, `non_fuel_purchase`, or `fuel_and_non_fuel_purchase`."
					},
					"reported_breakdown": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown"
							}
						],
						"nullable": true,
						"description": "More information about the total amount. This information is not guaranteed to be accurate as some merchants may provide unreliable data."
					},
					"service_type": {
						"type": "string",
						"nullable": true,
						"description": "The type of fuel service. One of `non_fuel_transaction`, `full_service`, or `self_service`."
					}
				},
				"required": [
					"cardholder_prompt_data",
					"purchase_type",
					"reported_breakdown",
					"service_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.PurchaseDetails.Flight.Segment": {
				"properties": {
					"arrival_airport_code": {
						"type": "string",
						"nullable": true,
						"description": "The three-letter IATA airport code of the flight's destination."
					},
					"carrier": {
						"type": "string",
						"nullable": true,
						"description": "The airline carrier code."
					},
					"departure_airport_code": {
						"type": "string",
						"nullable": true,
						"description": "The three-letter IATA airport code that the flight departed from."
					},
					"flight_number": {
						"type": "string",
						"nullable": true,
						"description": "The flight number."
					},
					"service_class": {
						"type": "string",
						"nullable": true,
						"description": "The flight's service class."
					},
					"stopover_allowed": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether a stopover is allowed on this flight."
					}
				},
				"required": [
					"arrival_airport_code",
					"carrier",
					"departure_airport_code",
					"flight_number",
					"service_class",
					"stopover_allowed"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.PurchaseDetails.Flight": {
				"properties": {
					"departure_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The time that the flight departed."
					},
					"passenger_name": {
						"type": "string",
						"nullable": true,
						"description": "The name of the passenger."
					},
					"refundable": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether the ticket is refundable."
					},
					"segments": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.PurchaseDetails.Flight.Segment"
						},
						"type": "array",
						"nullable": true,
						"description": "The legs of the trip."
					},
					"travel_agency": {
						"type": "string",
						"nullable": true,
						"description": "The travel agency that issued the ticket."
					}
				},
				"required": [
					"departure_at",
					"passenger_name",
					"refundable",
					"segments",
					"travel_agency"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fuel": {
				"properties": {
					"industry_product_code": {
						"type": "string",
						"nullable": true,
						"description": "[Conexxus Payment System Product Code](https://www.conexxus.org/conexxus-payment-system-product-codes) identifying the primary fuel product purchased."
					},
					"quantity_decimal": {
						"type": "string",
						"nullable": true,
						"description": "The quantity of `unit`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places."
					},
					"type": {
						"type": "string",
						"description": "The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`."
					},
					"unit": {
						"type": "string",
						"description": "The units for `quantity_decimal`. One of `charging_minute`, `imperial_gallon`, `kilogram`, `kilowatt_hour`, `liter`, `pound`, `us_gallon`, or `other`."
					},
					"unit_cost_decimal": {
						"type": "string",
						"description": "The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places."
					}
				},
				"required": [
					"industry_product_code",
					"quantity_decimal",
					"type",
					"unit",
					"unit_cost_decimal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.PurchaseDetails.Lodging": {
				"properties": {
					"check_in_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The time of checking into the lodging."
					},
					"nights": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The number of nights stayed at the lodging."
					}
				},
				"required": [
					"check_in_at",
					"nights"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.PurchaseDetails.Receipt": {
				"properties": {
					"description": {
						"type": "string",
						"nullable": true,
						"description": "The description of the item. The maximum length of this field is 26 characters."
					},
					"quantity": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The quantity of the item."
					},
					"total": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The total for this line item in cents."
					},
					"unit_cost": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The unit cost of the item in cents."
					}
				},
				"required": [
					"description",
					"quantity",
					"total",
					"unit_cost"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.PurchaseDetails": {
				"properties": {
					"fleet": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet"
							}
						],
						"nullable": true,
						"description": "Fleet-specific information for transactions using Fleet cards."
					},
					"flight": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.PurchaseDetails.Flight"
							}
						],
						"nullable": true,
						"description": "Information about the flight that was purchased with this transaction."
					},
					"fuel": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fuel"
							}
						],
						"nullable": true,
						"description": "Information about fuel that was purchased with this transaction."
					},
					"lodging": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.PurchaseDetails.Lodging"
							}
						],
						"nullable": true,
						"description": "Information about lodging that was purchased with this transaction."
					},
					"receipt": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction.PurchaseDetails.Receipt"
						},
						"type": "array",
						"nullable": true,
						"description": "The line items in the purchase."
					},
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "A merchant-specific order number."
					}
				},
				"required": [
					"fleet",
					"flight",
					"fuel",
					"lodging",
					"receipt",
					"reference"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.Treasury": {
				"properties": {
					"received_credit": {
						"type": "string",
						"nullable": true,
						"description": "The Treasury [ReceivedCredit](https://stripe.com/docs/api/treasury/received_credits) representing this Issuing transaction if it is a refund"
					},
					"received_debit": {
						"type": "string",
						"nullable": true,
						"description": "The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) representing this Issuing transaction if it is a capture"
					}
				},
				"required": [
					"received_credit",
					"received_debit"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Transaction.Type": {
				"type": "string",
				"enum": [
					"capture",
					"refund"
				]
			},
			"stripe.Stripe.Issuing.Transaction.Wallet": {
				"type": "string",
				"enum": [
					"apple_pay",
					"google_pay",
					"samsung_pay"
				]
			},
			"stripe.Stripe.Issuing.Authorization.Treasury": {
				"properties": {
					"received_credits": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The array of [ReceivedCredits](https://stripe.com/docs/api/treasury/received_credits) associated with this authorization"
					},
					"received_debits": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The array of [ReceivedDebits](https://stripe.com/docs/api/treasury/received_debits) associated with this authorization"
					},
					"transaction": {
						"type": "string",
						"nullable": true,
						"description": "The Treasury [Transaction](https://stripe.com/docs/api/treasury/transactions) associated with this authorization"
					}
				},
				"required": [
					"received_credits",
					"received_debits",
					"transaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.VerificationData.AddressLine1Check": {
				"type": "string",
				"enum": [
					"match",
					"mismatch",
					"not_provided"
				]
			},
			"stripe.Stripe.Issuing.Authorization.VerificationData.AddressPostalCodeCheck": {
				"type": "string",
				"enum": [
					"match",
					"mismatch",
					"not_provided"
				]
			},
			"stripe.Stripe.Issuing.Authorization.VerificationData.AuthenticationExemption.ClaimedBy": {
				"type": "string",
				"enum": [
					"acquirer",
					"issuer"
				]
			},
			"stripe.Stripe.Issuing.Authorization.VerificationData.AuthenticationExemption.Type": {
				"type": "string",
				"enum": [
					"low_value_transaction",
					"transaction_risk_analysis",
					"unknown"
				]
			},
			"stripe.Stripe.Issuing.Authorization.VerificationData.AuthenticationExemption": {
				"properties": {
					"claimed_by": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.VerificationData.AuthenticationExemption.ClaimedBy",
						"description": "The entity that requested the exemption, either the acquiring merchant or the Issuing user."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.VerificationData.AuthenticationExemption.Type",
						"description": "The specific exemption claimed for this authorization."
					}
				},
				"required": [
					"claimed_by",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.VerificationData.CvcCheck": {
				"type": "string",
				"enum": [
					"match",
					"mismatch",
					"not_provided"
				]
			},
			"stripe.Stripe.Issuing.Authorization.VerificationData.ExpiryCheck": {
				"type": "string",
				"enum": [
					"match",
					"mismatch",
					"not_provided"
				]
			},
			"stripe.Stripe.Issuing.Authorization.VerificationData.ThreeDSecure.Result": {
				"type": "string",
				"enum": [
					"attempt_acknowledged",
					"authenticated",
					"failed",
					"required"
				]
			},
			"stripe.Stripe.Issuing.Authorization.VerificationData.ThreeDSecure": {
				"properties": {
					"result": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.VerificationData.ThreeDSecure.Result",
						"description": "The outcome of the 3D Secure authentication request."
					}
				},
				"required": [
					"result"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Issuing.Authorization.VerificationData": {
				"properties": {
					"address_line1_check": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.VerificationData.AddressLine1Check",
						"description": "Whether the cardholder provided an address first line and if it matched the cardholder's `billing.address.line1`."
					},
					"address_postal_code_check": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.VerificationData.AddressPostalCodeCheck",
						"description": "Whether the cardholder provided a postal code and if it matched the cardholder's `billing.address.postal_code`."
					},
					"authentication_exemption": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.VerificationData.AuthenticationExemption"
							}
						],
						"nullable": true,
						"description": "The exemption applied to this authorization."
					},
					"cvc_check": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.VerificationData.CvcCheck",
						"description": "Whether the cardholder provided a CVC and if it matched Stripe's record."
					},
					"expiry_check": {
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.VerificationData.ExpiryCheck",
						"description": "Whether the cardholder provided an expiry date and if it matched Stripe's record."
					},
					"postal_code": {
						"type": "string",
						"nullable": true,
						"description": "The postal code submitted as part of the authorization used for postal code verification."
					},
					"three_d_secure": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization.VerificationData.ThreeDSecure"
							}
						],
						"nullable": true,
						"description": "3D Secure details."
					}
				},
				"required": [
					"address_line1_check",
					"address_postal_code_check",
					"authentication_exemption",
					"cvc_check",
					"expiry_check",
					"postal_code",
					"three_d_secure"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ExternalAccount": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/stripe.Stripe.BankAccount"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.Card"
					}
				]
			},
			"stripe.Stripe.DeletedBankAccount": {
				"description": "The DeletedBankAccount object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"bank_account"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"currency": {
						"type": "string",
						"nullable": true,
						"description": "Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account."
					},
					"deleted": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false,
						"description": "Always true for a deleted object"
					}
				},
				"required": [
					"id",
					"object",
					"deleted"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.DeletedCard": {
				"description": "The DeletedCard object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"card"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"currency": {
						"type": "string",
						"nullable": true,
						"description": "Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account."
					},
					"deleted": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false,
						"description": "Always true for a deleted object"
					}
				},
				"required": [
					"id",
					"object",
					"deleted"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.DeletedExternalAccount": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/stripe.Stripe.DeletedBankAccount"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.DeletedCard"
					}
				]
			},
			"stripe.Stripe.Payout": {
				"description": "A `Payout` object is created when you receive funds from Stripe, or when you\ninitiate a payout to either a bank account or debit card of a [connected\nStripe account](https://stripe.com/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,\nand list all payouts. Payouts are made on [varying\nschedules](https://stripe.com/docs/connect/manage-payout-schedule), depending on your country and\nindustry.\n\nRelated guide: [Receiving payouts](https://stripe.com/docs/payouts)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"payout"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The amount (in cents (or local equivalent)) that transfers to your bank account or debit card."
					},
					"application_fee": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.ApplicationFee"
							}
						],
						"nullable": true,
						"description": "The application fee (if any) for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details."
					},
					"application_fee_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount of the application fee (if any) requested for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details."
					},
					"arrival_date": {
						"type": "number",
						"format": "double",
						"description": "Date that you can expect the payout to arrive in the bank. This factors in delays to account for weekends or bank holidays."
					},
					"automatic": {
						"type": "boolean",
						"description": "Returns `true` if the payout is created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule) and `false` if it's [requested manually](https://stripe.com/docs/payouts#manual-payouts)."
					},
					"balance_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
							}
						],
						"nullable": true,
						"description": "ID of the balance transaction that describes the impact of this payout on your account balance."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "An arbitrary string attached to the object. Often useful for displaying to users."
					},
					"destination": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.ExternalAccount"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedExternalAccount"
							}
						],
						"nullable": true,
						"description": "ID of the bank account or card the payout is sent to."
					},
					"failure_balance_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
							}
						],
						"nullable": true,
						"description": "If the payout fails or cancels, this is the ID of the balance transaction that reverses the initial balance transaction and returns the funds from the failed payout back in your balance."
					},
					"failure_code": {
						"type": "string",
						"nullable": true,
						"description": "Error code that provides a reason for a payout failure, if available. View our [list of failure codes](https://stripe.com/docs/api#payout_failures)."
					},
					"failure_message": {
						"type": "string",
						"nullable": true,
						"description": "Message that provides the reason for a payout failure, if available."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"method": {
						"type": "string",
						"description": "The method used to send this payout, which can be `standard` or `instant`. `instant` is supported for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks)."
					},
					"original_payout": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Payout"
							}
						],
						"nullable": true,
						"description": "If the payout reverses another, this is the ID of the original payout."
					},
					"reconciliation_status": {
						"$ref": "#/components/schemas/stripe.Stripe.Payout.ReconciliationStatus",
						"description": "If `completed`, you can use the [Balance Transactions API](https://stripe.com/docs/api/balance_transactions/list#balance_transaction_list-payout) to list all balance transactions that are paid out in this payout."
					},
					"reversed_by": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Payout"
							}
						],
						"nullable": true,
						"description": "If the payout reverses, this is the ID of the payout that reverses this payout."
					},
					"source_type": {
						"type": "string",
						"description": "The source balance this payout came from, which can be one of the following: `card`, `fpx`, or `bank_account`."
					},
					"statement_descriptor": {
						"type": "string",
						"nullable": true,
						"description": "Extra information about a payout that displays on the user's bank statement."
					},
					"status": {
						"type": "string",
						"description": "Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it's submitted to the bank, when it becomes `in_transit`. The status changes to `paid` if the transaction succeeds, or to `failed` or `canceled` (within 5 business days). Some payouts that fail might initially show as `paid`, then change to `failed`."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Payout.Type",
						"description": "Can be `bank_account` or `card`."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"application_fee",
					"application_fee_amount",
					"arrival_date",
					"automatic",
					"balance_transaction",
					"created",
					"currency",
					"description",
					"destination",
					"failure_balance_transaction",
					"failure_code",
					"failure_message",
					"livemode",
					"metadata",
					"method",
					"original_payout",
					"reconciliation_status",
					"reversed_by",
					"source_type",
					"statement_descriptor",
					"status",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Payout.ReconciliationStatus": {
				"type": "string",
				"enum": [
					"completed",
					"in_progress",
					"not_applicable"
				]
			},
			"stripe.Stripe.Payout.Type": {
				"type": "string",
				"enum": [
					"bank_account",
					"card"
				]
			},
			"stripe.Stripe.ReserveTransaction": {
				"description": "The ReserveTransaction object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"reserve_transaction"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double"
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "An arbitrary string attached to the object. Often useful for displaying to users."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"currency",
					"description"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.TaxDeductedAtSource": {
				"description": "The TaxDeductedAtSource object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"tax_deducted_at_source"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"period_end": {
						"type": "number",
						"format": "double",
						"description": "The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period."
					},
					"period_start": {
						"type": "number",
						"format": "double",
						"description": "The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period."
					},
					"tax_deduction_account_number": {
						"type": "string",
						"description": "The TAN that was supplied to Stripe when TDS was assessed"
					}
				},
				"required": [
					"id",
					"object",
					"period_end",
					"period_start",
					"tax_deduction_account_number"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Topup.Status": {
				"type": "string",
				"enum": [
					"canceled",
					"failed",
					"pending",
					"reversed",
					"succeeded"
				]
			},
			"stripe.Stripe.Topup": {
				"description": "To top up your Stripe balance, you create a top-up object. You can retrieve\nindividual top-ups, as well as list all top-ups. Top-ups are identified by a\nunique, random ID.\n\nRelated guide: [Topping up your platform account](https://stripe.com/docs/connect/top-ups)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"topup"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount transferred."
					},
					"balance_transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.BalanceTransaction"
							}
						],
						"nullable": true,
						"description": "ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "An arbitrary string attached to the object. Often useful for displaying to users."
					},
					"expected_availability_date": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up."
					},
					"failure_code": {
						"type": "string",
						"nullable": true,
						"description": "Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes)."
					},
					"failure_message": {
						"type": "string",
						"nullable": true,
						"description": "Message to user further explaining reason for top-up failure if available."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"source": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Source"
							}
						],
						"nullable": true,
						"description": "The source field is deprecated. It might not always be present in the API response."
					},
					"statement_descriptor": {
						"type": "string",
						"nullable": true,
						"description": "Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Topup.Status",
						"description": "The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`."
					},
					"transfer_group": {
						"type": "string",
						"nullable": true,
						"description": "A string that identifies this top-up as part of a group."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"balance_transaction",
					"created",
					"currency",
					"description",
					"expected_availability_date",
					"failure_code",
					"failure_message",
					"livemode",
					"metadata",
					"source",
					"statement_descriptor",
					"status",
					"transfer_group"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.BalanceTransactionSource": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/stripe.Stripe.ApplicationFee"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.Charge"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.ConnectCollectionTransfer"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.CustomerCashBalanceTransaction"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.Dispute"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.FeeRefund"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Authorization"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Dispute"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.Issuing.Transaction"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.Payout"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.Refund"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.ReserveTransaction"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.TaxDeductedAtSource"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.Topup"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.Transfer"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.TransferReversal"
					}
				]
			},
			"stripe.Stripe.BalanceTransaction.Type": {
				"type": "string",
				"enum": [
					"adjustment",
					"advance",
					"advance_funding",
					"anticipation_repayment",
					"application_fee",
					"application_fee_refund",
					"charge",
					"climate_order_purchase",
					"climate_order_refund",
					"connect_collection_transfer",
					"contribution",
					"issuing_authorization_hold",
					"issuing_authorization_release",
					"issuing_dispute",
					"issuing_transaction",
					"obligation_outbound",
					"obligation_reversal_inbound",
					"payment",
					"payment_failure_refund",
					"payment_network_reserve_hold",
					"payment_network_reserve_release",
					"payment_refund",
					"payment_reversal",
					"payment_unreconciled",
					"payout",
					"payout_cancel",
					"payout_failure",
					"refund",
					"refund_failure",
					"reserve_transaction",
					"reserved_funds",
					"stripe_fee",
					"stripe_fx_fee",
					"tax_fee",
					"topup",
					"topup_reversal",
					"transfer",
					"transfer_cancel",
					"transfer_failure",
					"transfer_refund"
				]
			},
			"stripe.Stripe.ApplicationFee.FeeSource.Type": {
				"type": "string",
				"enum": [
					"charge",
					"payout"
				]
			},
			"stripe.Stripe.ApplicationFee.FeeSource": {
				"properties": {
					"charge": {
						"type": "string",
						"description": "Charge ID that created this application fee."
					},
					"payout": {
						"type": "string",
						"description": "Payout ID that created this application fee."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.ApplicationFee.FeeSource.Type",
						"description": "Type of object that created the application fee, either `charge` or `payout`."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ApiList_stripe.Stripe.FeeRefund_": {
				"description": "A container for paginated lists of objects.\nThe array of objects is on the `.data` property,\nand `.has_more` indicates whether there are additional objects beyond the end of this list.\n\nLearn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)\nor, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.",
				"properties": {
					"object": {
						"type": "string",
						"enum": [
							"list"
						],
						"nullable": false
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.FeeRefund"
						},
						"type": "array"
					},
					"has_more": {
						"type": "boolean",
						"description": "True if this list has another page of items after this one that can be fetched."
					},
					"url": {
						"type": "string",
						"description": "The URL where this list can be accessed."
					}
				},
				"required": [
					"object",
					"data",
					"has_more",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.BillingDetails": {
				"properties": {
					"address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "Billing address."
					},
					"email": {
						"type": "string",
						"nullable": true,
						"description": "Email address."
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "Full name."
					},
					"phone": {
						"type": "string",
						"nullable": true,
						"description": "Billing phone number (including extension)."
					}
				},
				"required": [
					"address",
					"email",
					"name",
					"phone"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.FraudDetails": {
				"properties": {
					"stripe_report": {
						"type": "string",
						"description": "Assessments from Stripe. If set, the value is `fraudulent`."
					},
					"user_report": {
						"type": "string",
						"description": "Assessments reported by you. If set, possible values of are `safe` and `fraudulent`."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice": {
				"description": "Invoices are statements of amounts owed by a customer, and are either\ngenerated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments\nthat may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges,\nStripe automatically finalizes your invoice and attempts payment. Note\nthat finalizing the invoice,\n[when automatic](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection), does\nnot happen immediately as the invoice is created. Stripe waits\nuntil one hour after the last webhook was successfully sent (or the last\nwebhook timed out after failing). If you (and the platforms you may have\nconnected to) have no webhooks configured, Stripe waits one hour after\ncreation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your\n[email settings](https://dashboard.stripe.com/account/billing/automatic),\nStripe will email the invoice to your customer and await payment. These\nemails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the\namount due for the invoice (i.e., the amount that will be actually\ncharged). If the amount due for the invoice is less than Stripe's [minimum allowed charge\nper currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts), the\ninvoice is automatically marked paid, and we add the amount due to the\ncustomer's credit balance which is applied to the next invoice.\n\nMore details on the customer's credit balance are\n[here](https://stripe.com/docs/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://stripe.com/docs/billing/invoices/sending)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object. This property is always present unless the invoice is an upcoming invoice. See [Retrieve an upcoming invoice](https://stripe.com/docs/api/invoices/upcoming) for more details."
					},
					"object": {
						"type": "string",
						"enum": [
							"invoice"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"account_country": {
						"type": "string",
						"nullable": true,
						"description": "The country of the business associated with this invoice, most often the business creating the invoice."
					},
					"account_name": {
						"type": "string",
						"nullable": true,
						"description": "The public name of the business associated with this invoice, most often the business creating the invoice."
					},
					"account_tax_ids": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.TaxId"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.DeletedTaxId"
								}
							]
						},
						"type": "array",
						"nullable": true,
						"description": "The account tax IDs associated with the invoice. Only editable when the invoice is a draft."
					},
					"amount_due": {
						"type": "number",
						"format": "double",
						"description": "Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`."
					},
					"amount_paid": {
						"type": "number",
						"format": "double",
						"description": "The amount, in cents (or local equivalent), that was paid."
					},
					"amount_remaining": {
						"type": "number",
						"format": "double",
						"description": "The difference between amount_due and amount_paid, in cents (or local equivalent)."
					},
					"amount_shipping": {
						"type": "number",
						"format": "double",
						"description": "This is the sum of all the shipping amounts."
					},
					"application": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Application"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedApplication"
							}
						],
						"nullable": true,
						"description": "ID of the Connect Application that created the invoice."
					},
					"application_fee_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid."
					},
					"attempt_count": {
						"type": "number",
						"format": "double",
						"description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. If a failure is returned with a non-retryable return code, the invoice can no longer be retried unless a new payment method is obtained. Retries will continue to be scheduled, and attempt_count will continue to increment, but retries will only be executed if a new payment method is obtained."
					},
					"attempted": {
						"type": "boolean",
						"description": "Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users."
					},
					"auto_advance": {
						"type": "boolean",
						"description": "Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action."
					},
					"automatic_tax": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.AutomaticTax"
					},
					"automatically_finalizes_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The time when this invoice is currently scheduled to be automatically finalized. The field will be `null` if the invoice is not scheduled to finalize in the future. If the invoice is not in the draft state, this field will always be `null` - see `finalized_at` for the time when an already-finalized invoice was finalized."
					},
					"billing_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.BillingReason"
							}
						],
						"nullable": true,
						"description": "Indicates the reason why the invoice was created.\n\n* `manual`: Unrelated to a subscription, for example, created via the invoice editor.\n* `subscription`: No longer in use. Applies to subscriptions from before May 2018 where no distinction was made between updates, cycles, and thresholds.\n* `subscription_create`: A new subscription was created.\n* `subscription_cycle`: A subscription advanced into a new period.\n* `subscription_threshold`: A subscription reached a billing threshold.\n* `subscription_update`: A subscription was updated.\n* `upcoming`: Reserved for simulated invoices, per the upcoming invoice endpoint."
					},
					"charge": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge"
							}
						],
						"nullable": true,
						"description": "ID of the latest charge generated for this invoice, if any."
					},
					"collection_method": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.CollectionMethod",
						"description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"custom_fields": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Invoice.CustomField"
						},
						"type": "array",
						"nullable": true,
						"description": "Custom fields displayed on the invoice."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomer"
							}
						],
						"nullable": true,
						"description": "The ID of the customer who will be billed."
					},
					"customer_address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated."
					},
					"customer_email": {
						"type": "string",
						"nullable": true,
						"description": "The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated."
					},
					"customer_name": {
						"type": "string",
						"nullable": true,
						"description": "The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated."
					},
					"customer_phone": {
						"type": "string",
						"nullable": true,
						"description": "The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated."
					},
					"customer_shipping": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.CustomerShipping"
							}
						],
						"nullable": true,
						"description": "The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated."
					},
					"customer_tax_exempt": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.CustomerTaxExempt"
							}
						],
						"nullable": true,
						"description": "The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated."
					},
					"customer_tax_ids": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Invoice.CustomerTaxId"
						},
						"type": "array",
						"nullable": true,
						"description": "The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated."
					},
					"default_payment_method": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"nullable": true,
						"description": "ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings."
					},
					"default_source": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.CustomerSource"
							}
						],
						"nullable": true,
						"description": "ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source."
					},
					"default_tax_rates": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.TaxRate"
						},
						"type": "array",
						"description": "The tax rates applied to this invoice, if any."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard."
					},
					"discount": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Discount"
							}
						],
						"nullable": true,
						"description": "Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts."
					},
					"discounts": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.Discount"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.DeletedDiscount"
								}
							]
						},
						"type": "array",
						"description": "The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount."
					},
					"due_date": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`."
					},
					"effective_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt."
					},
					"ending_balance": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null."
					},
					"footer": {
						"type": "string",
						"nullable": true,
						"description": "Footer displayed on the invoice."
					},
					"from_invoice": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.FromInvoice"
							}
						],
						"nullable": true,
						"description": "Details of the invoice that was cloned. See the [revision documentation](https://stripe.com/docs/invoicing/invoice-revisions) for more details."
					},
					"hosted_invoice_url": {
						"type": "string",
						"nullable": true,
						"description": "The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null."
					},
					"invoice_pdf": {
						"type": "string",
						"nullable": true,
						"description": "The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null."
					},
					"issuer": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.Issuer"
					},
					"last_finalization_error": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.LastFinalizationError"
							}
						],
						"nullable": true,
						"description": "The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized."
					},
					"latest_revision": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice"
							}
						],
						"nullable": true,
						"description": "The ID of the most recent non-draft revision of this invoice"
					},
					"lines": {
						"$ref": "#/components/schemas/stripe.Stripe.ApiList_stripe.Stripe.InvoiceLineItem_",
						"description": "The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"next_payment_attempt": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`."
					},
					"number": {
						"type": "string",
						"nullable": true,
						"description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified."
					},
					"on_behalf_of": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"nullable": true,
						"description": "The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details."
					},
					"paid": {
						"type": "boolean",
						"description": "Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance."
					},
					"paid_out_of_band": {
						"type": "boolean",
						"description": "Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe."
					},
					"payment_intent": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent"
							}
						],
						"nullable": true,
						"description": "The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent."
					},
					"payment_settings": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings"
					},
					"period_end": {
						"type": "number",
						"format": "double",
						"description": "End of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price."
					},
					"period_start": {
						"type": "number",
						"format": "double",
						"description": "Start of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price."
					},
					"post_payment_credit_notes_amount": {
						"type": "number",
						"format": "double",
						"description": "Total amount of all post-payment credit notes issued for this invoice."
					},
					"pre_payment_credit_notes_amount": {
						"type": "number",
						"format": "double",
						"description": "Total amount of all pre-payment credit notes issued for this invoice."
					},
					"quote": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Quote"
							}
						],
						"nullable": true,
						"description": "The quote this invoice was generated from."
					},
					"receipt_number": {
						"type": "string",
						"nullable": true,
						"description": "This is the transaction number that appears on email receipts sent for this invoice."
					},
					"rendering": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.Rendering"
							}
						],
						"nullable": true,
						"description": "The rendering-related settings that control how the invoice is displayed on customer-facing surfaces such as PDF and Hosted Invoice Page."
					},
					"shipping_cost": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.ShippingCost"
							}
						],
						"nullable": true,
						"description": "The details of the cost of shipping, including the ShippingRate applied on the invoice."
					},
					"shipping_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.ShippingDetails"
							}
						],
						"nullable": true,
						"description": "Shipping details for the invoice. The Invoice PDF will use the `shipping_details` value if it is set, otherwise the PDF will render the shipping address from the customer."
					},
					"starting_balance": {
						"type": "number",
						"format": "double",
						"description": "Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. For revision invoices, this also includes any customer balance that was applied to the original invoice."
					},
					"statement_descriptor": {
						"type": "string",
						"nullable": true,
						"description": "Extra information about an invoice for the customer's credit card statement."
					},
					"status": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.Status"
							}
						],
						"nullable": true,
						"description": "The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)"
					},
					"status_transitions": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.StatusTransitions"
					},
					"subscription": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription"
							}
						],
						"nullable": true,
						"description": "The subscription that this invoice was prepared for, if any."
					},
					"subscription_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.SubscriptionDetails"
							}
						],
						"nullable": true,
						"description": "Details about the subscription that created this invoice."
					},
					"subscription_proration_date": {
						"type": "number",
						"format": "double",
						"description": "Only set for upcoming invoices that preview prorations. The time used to calculate prorations."
					},
					"subtotal": {
						"type": "number",
						"format": "double",
						"description": "Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or exclusive tax is applied. Item discounts are already incorporated"
					},
					"subtotal_excluding_tax": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The integer amount in cents (or local equivalent) representing the subtotal of the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated"
					},
					"tax": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice."
					},
					"test_clock": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.TestHelpers.TestClock"
							}
						],
						"nullable": true,
						"description": "ID of the test clock this invoice belongs to."
					},
					"threshold_reason": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.ThresholdReason"
					},
					"total": {
						"type": "number",
						"format": "double",
						"description": "Total after discounts and taxes."
					},
					"total_discount_amounts": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Invoice.TotalDiscountAmount"
						},
						"type": "array",
						"nullable": true,
						"description": "The aggregate amounts calculated per discount across all line items."
					},
					"total_excluding_tax": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The integer amount in cents (or local equivalent) representing the total amount of the invoice including all discounts but excluding all tax."
					},
					"total_tax_amounts": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Invoice.TotalTaxAmount"
						},
						"type": "array",
						"description": "The aggregate amounts calculated per tax rate for all line items."
					},
					"transfer_data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.TransferData"
							}
						],
						"nullable": true,
						"description": "The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice."
					},
					"webhooks_delivered_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created."
					}
				},
				"required": [
					"id",
					"object",
					"account_country",
					"account_name",
					"account_tax_ids",
					"amount_due",
					"amount_paid",
					"amount_remaining",
					"amount_shipping",
					"application",
					"application_fee_amount",
					"attempt_count",
					"attempted",
					"automatic_tax",
					"automatically_finalizes_at",
					"billing_reason",
					"charge",
					"collection_method",
					"created",
					"currency",
					"custom_fields",
					"customer",
					"customer_address",
					"customer_email",
					"customer_name",
					"customer_phone",
					"customer_shipping",
					"customer_tax_exempt",
					"default_payment_method",
					"default_source",
					"default_tax_rates",
					"description",
					"discount",
					"discounts",
					"due_date",
					"effective_at",
					"ending_balance",
					"footer",
					"from_invoice",
					"issuer",
					"last_finalization_error",
					"latest_revision",
					"lines",
					"livemode",
					"metadata",
					"next_payment_attempt",
					"number",
					"on_behalf_of",
					"paid",
					"paid_out_of_band",
					"payment_intent",
					"payment_settings",
					"period_end",
					"period_start",
					"post_payment_credit_notes_amount",
					"pre_payment_credit_notes_amount",
					"quote",
					"receipt_number",
					"rendering",
					"shipping_cost",
					"shipping_details",
					"starting_balance",
					"statement_descriptor",
					"status",
					"status_transitions",
					"subscription",
					"subscription_details",
					"subtotal",
					"subtotal_excluding_tax",
					"tax",
					"test_clock",
					"total",
					"total_discount_amounts",
					"total_excluding_tax",
					"total_tax_amounts",
					"transfer_data",
					"webhooks_delivered_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.Level3.LineItem": {
				"properties": {
					"discount_amount": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"product_code": {
						"type": "string"
					},
					"product_description": {
						"type": "string"
					},
					"quantity": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"tax_amount": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"unit_cost": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"required": [
					"discount_amount",
					"product_code",
					"product_description",
					"quantity",
					"tax_amount",
					"unit_cost"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.Level3": {
				"properties": {
					"customer_reference": {
						"type": "string"
					},
					"line_items": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Charge.Level3.LineItem"
						},
						"type": "array"
					},
					"merchant_reference": {
						"type": "string"
					},
					"shipping_address_zip": {
						"type": "string"
					},
					"shipping_amount": {
						"type": "number",
						"format": "double"
					},
					"shipping_from_zip": {
						"type": "string"
					}
				},
				"required": [
					"line_items",
					"merchant_reference"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.Outcome.Rule": {
				"properties": {
					"action": {
						"type": "string",
						"description": "The action taken on the payment."
					},
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"predicate": {
						"type": "string",
						"description": "The predicate to evaluate the payment against."
					}
				},
				"required": [
					"action",
					"id",
					"predicate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.Outcome": {
				"properties": {
					"network_status": {
						"type": "string",
						"nullable": true,
						"description": "Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as \"pending\" on a cardholder's statement."
					},
					"reason": {
						"type": "string",
						"nullable": true,
						"description": "An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details."
					},
					"risk_level": {
						"type": "string",
						"description": "Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar."
					},
					"risk_score": {
						"type": "number",
						"format": "double",
						"description": "Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams."
					},
					"rule": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.Outcome.Rule"
							}
						],
						"description": "The ID of the Radar rule that matched the payment, if applicable."
					},
					"seller_message": {
						"type": "string",
						"nullable": true,
						"description": "A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer."
					},
					"type": {
						"type": "string",
						"description": "Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details."
					}
				},
				"required": [
					"network_status",
					"reason",
					"seller_message",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.AchCreditTransfer": {
				"properties": {
					"account_number": {
						"type": "string",
						"nullable": true,
						"description": "Account number to transfer funds to."
					},
					"bank_name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the bank associated with the routing number."
					},
					"routing_number": {
						"type": "string",
						"nullable": true,
						"description": "Routing transit number for the bank account to transfer funds to."
					},
					"swift_code": {
						"type": "string",
						"nullable": true,
						"description": "SWIFT code of the bank associated with the routing number."
					}
				},
				"required": [
					"account_number",
					"bank_name",
					"routing_number",
					"swift_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.AchDebit.AccountHolderType": {
				"type": "string",
				"enum": [
					"company",
					"individual"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.AchDebit": {
				"properties": {
					"account_holder_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.AchDebit.AccountHolderType"
							}
						],
						"nullable": true,
						"description": "Type of entity that holds the account. This can be either `individual` or `company`."
					},
					"bank_name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the bank associated with the bank account."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country the bank account is located in."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four digits of the bank account number."
					},
					"routing_number": {
						"type": "string",
						"nullable": true,
						"description": "Routing transit number of the bank account."
					}
				},
				"required": [
					"account_holder_type",
					"bank_name",
					"country",
					"fingerprint",
					"last4",
					"routing_number"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.AcssDebit": {
				"properties": {
					"bank_name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the bank associated with the bank account."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."
					},
					"institution_number": {
						"type": "string",
						"nullable": true,
						"description": "Institution number of the bank account"
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four digits of the bank account number."
					},
					"mandate": {
						"type": "string",
						"description": "ID of the mandate used to make this payment."
					},
					"transit_number": {
						"type": "string",
						"nullable": true,
						"description": "Transit number of the bank account."
					}
				},
				"required": [
					"bank_name",
					"fingerprint",
					"institution_number",
					"last4",
					"transit_number"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Affirm": {
				"properties": {
					"transaction_id": {
						"type": "string",
						"nullable": true,
						"description": "The Affirm transaction ID associated with this payment."
					}
				},
				"required": [
					"transaction_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.AfterpayClearpay": {
				"properties": {
					"order_id": {
						"type": "string",
						"nullable": true,
						"description": "The Afterpay order ID associated with this payment intent."
					},
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "Order identifier shown to the merchant in Afterpay's online portal."
					}
				},
				"required": [
					"order_id",
					"reference"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Alipay": {
				"properties": {
					"buyer_id": {
						"type": "string",
						"description": "Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same."
					},
					"transaction_id": {
						"type": "string",
						"nullable": true,
						"description": "Transaction ID of this particular Alipay transaction."
					}
				},
				"required": [
					"fingerprint",
					"transaction_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.AmazonPay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.AuBecsDebit": {
				"properties": {
					"bsb_number": {
						"type": "string",
						"nullable": true,
						"description": "Bank-State-Branch number of the bank account."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four digits of the bank account number."
					},
					"mandate": {
						"type": "string",
						"description": "ID of the mandate used to make this payment."
					}
				},
				"required": [
					"bsb_number",
					"fingerprint",
					"last4"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.BacsDebit": {
				"properties": {
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four digits of the bank account number."
					},
					"mandate": {
						"type": "string",
						"nullable": true,
						"description": "ID of the mandate used to make this payment."
					},
					"sort_code": {
						"type": "string",
						"nullable": true,
						"description": "Sort code of the bank account. (e.g., `10-20-30`)"
					}
				},
				"required": [
					"fingerprint",
					"last4",
					"mandate",
					"sort_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Bancontact.PreferredLanguage": {
				"type": "string",
				"enum": [
					"de",
					"en",
					"fr",
					"nl"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Bancontact": {
				"properties": {
					"bank_code": {
						"type": "string",
						"nullable": true,
						"description": "Bank code of bank associated with the bank account."
					},
					"bank_name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the bank associated with the bank account."
					},
					"bic": {
						"type": "string",
						"nullable": true,
						"description": "Bank Identifier Code of the bank associated with the bank account."
					},
					"generated_sepa_debit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"nullable": true,
						"description": "The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge."
					},
					"generated_sepa_debit_mandate": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Mandate"
							}
						],
						"nullable": true,
						"description": "The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge."
					},
					"iban_last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four characters of the IBAN."
					},
					"preferred_language": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Bancontact.PreferredLanguage"
							}
						],
						"nullable": true,
						"description": "Preferred language of the Bancontact authorization page that the customer is redirected to.\nCan be one of `en`, `de`, `fr`, or `nl`"
					},
					"verified_name": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified full name. Values are verified or provided by Bancontact directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
					}
				},
				"required": [
					"bank_code",
					"bank_name",
					"bic",
					"generated_sepa_debit",
					"generated_sepa_debit_mandate",
					"iban_last4",
					"preferred_language",
					"verified_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Blik": {
				"properties": {
					"buyer_id": {
						"type": "string",
						"nullable": true,
						"description": "A unique and immutable identifier assigned by BLIK to every buyer."
					}
				},
				"required": [
					"buyer_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Boleto": {
				"properties": {
					"tax_id": {
						"type": "string",
						"description": "The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers)"
					}
				},
				"required": [
					"tax_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Checks": {
				"properties": {
					"address_line1_check": {
						"type": "string",
						"nullable": true,
						"description": "If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."
					},
					"address_postal_code_check": {
						"type": "string",
						"nullable": true,
						"description": "If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."
					},
					"cvc_check": {
						"type": "string",
						"nullable": true,
						"description": "If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."
					}
				},
				"required": [
					"address_line1_check",
					"address_postal_code_check",
					"cvc_check"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.ExtendedAuthorization.Status": {
				"type": "string",
				"enum": [
					"disabled",
					"enabled"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.ExtendedAuthorization": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.ExtendedAuthorization.Status",
						"description": "Indicates whether or not the capture window is extended beyond the standard authorization."
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.IncrementalAuthorization.Status": {
				"type": "string",
				"enum": [
					"available",
					"unavailable"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.IncrementalAuthorization": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.IncrementalAuthorization.Status",
						"description": "Indicates whether or not the incremental authorization feature is supported."
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Installments.Plan": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card."
					},
					"interval": {
						"type": "string",
						"enum": [
							"month",
							null
						],
						"nullable": true,
						"description": "For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.\nOne of `month`."
					},
					"type": {
						"type": "string",
						"enum": [
							"fixed_count"
						],
						"nullable": false,
						"description": "Type of installment plan, one of `fixed_count`."
					}
				},
				"required": [
					"count",
					"interval",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Installments": {
				"properties": {
					"plan": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Installments.Plan"
							}
						],
						"nullable": true,
						"description": "Installment plan selected for the payment."
					}
				},
				"required": [
					"plan"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Multicapture.Status": {
				"type": "string",
				"enum": [
					"available",
					"unavailable"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Multicapture": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Multicapture.Status",
						"description": "Indicates whether or not multiple captures are supported."
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.NetworkToken": {
				"properties": {
					"used": {
						"type": "boolean",
						"description": "Indicates if Stripe used a network token, either user provided or Stripe managed when processing the transaction."
					}
				},
				"required": [
					"used"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Overcapture.Status": {
				"type": "string",
				"enum": [
					"available",
					"unavailable"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Overcapture": {
				"properties": {
					"maximum_amount_capturable": {
						"type": "number",
						"format": "double",
						"description": "The maximum amount that can be captured."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Overcapture.Status",
						"description": "Indicates whether or not the authorized amount can be over-captured."
					}
				},
				"required": [
					"maximum_amount_capturable",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.AuthenticationFlow": {
				"type": "string",
				"enum": [
					"challenge",
					"frictionless"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.ElectronicCommerceIndicator": {
				"type": "string",
				"enum": [
					"01",
					"02",
					"05",
					"06",
					"07"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.ExemptionIndicator": {
				"type": "string",
				"enum": [
					"low_risk",
					"none"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.Result": {
				"type": "string",
				"enum": [
					"attempt_acknowledged",
					"authenticated",
					"exempted",
					"failed",
					"not_supported",
					"processing_error"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.ResultReason": {
				"type": "string",
				"enum": [
					"abandoned",
					"bypassed",
					"canceled",
					"card_not_enrolled",
					"network_not_supported",
					"protocol_error",
					"rejected"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.Version": {
				"type": "string",
				"enum": [
					"1.0.2",
					"2.1.0",
					"2.2.0"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure": {
				"properties": {
					"authentication_flow": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.AuthenticationFlow"
							}
						],
						"nullable": true,
						"description": "For authenticated transactions: how the customer was authenticated by\nthe issuing bank."
					},
					"electronic_commerce_indicator": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.ElectronicCommerceIndicator"
							}
						],
						"nullable": true,
						"description": "The Electronic Commerce Indicator (ECI). A protocol-level field\nindicating what degree of authentication was performed."
					},
					"exemption_indicator": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.ExemptionIndicator"
							}
						],
						"nullable": true,
						"description": "The exemption requested via 3DS and accepted by the issuer at authentication time."
					},
					"exemption_indicator_applied": {
						"type": "boolean",
						"description": "Whether Stripe requested the value of `exemption_indicator` in the transaction. This will depend on\nthe outcome of Stripe's internal risk assessment."
					},
					"result": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.Result"
							}
						],
						"nullable": true,
						"description": "Indicates the outcome of 3D Secure authentication."
					},
					"result_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.ResultReason"
							}
						],
						"nullable": true,
						"description": "Additional information about why 3D Secure succeeded or failed based\non the `result`."
					},
					"transaction_id": {
						"type": "string",
						"nullable": true,
						"description": "The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID\n(dsTransId) for this payment."
					},
					"version": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.Version"
							}
						],
						"nullable": true,
						"description": "The version of 3D Secure that was used."
					}
				},
				"required": [
					"authentication_flow",
					"electronic_commerce_indicator",
					"exemption_indicator",
					"result",
					"result_reason",
					"transaction_id",
					"version"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.AmexExpressCheckout": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.ApplePay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.GooglePay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.Link": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.Masterpass": {
				"properties": {
					"billing_address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"email": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"shipping_address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					}
				},
				"required": [
					"billing_address",
					"email",
					"name",
					"shipping_address"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.SamsungPay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.Type": {
				"type": "string",
				"enum": [
					"amex_express_checkout",
					"apple_pay",
					"google_pay",
					"link",
					"masterpass",
					"samsung_pay",
					"visa_checkout"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.VisaCheckout": {
				"properties": {
					"billing_address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"email": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"shipping_address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					}
				},
				"required": [
					"billing_address",
					"email",
					"name",
					"shipping_address"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet": {
				"properties": {
					"amex_express_checkout": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.AmexExpressCheckout"
					},
					"apple_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.ApplePay"
					},
					"dynamic_last4": {
						"type": "string",
						"nullable": true,
						"description": "(For tokenized numbers only.) The last four digits of the device account number."
					},
					"google_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.GooglePay"
					},
					"link": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.Link"
					},
					"masterpass": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.Masterpass"
					},
					"samsung_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.SamsungPay"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.Type",
						"description": "The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type."
					},
					"visa_checkout": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.VisaCheckout"
					}
				},
				"required": [
					"dynamic_last4",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Card": {
				"properties": {
					"amount_authorized": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The authorized amount."
					},
					"authorization_code": {
						"type": "string",
						"nullable": true,
						"description": "Authorization code on the charge."
					},
					"brand": {
						"type": "string",
						"nullable": true,
						"description": "Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."
					},
					"capture_before": {
						"type": "number",
						"format": "double",
						"description": "When using manual capture, a future timestamp at which the charge will be automatically refunded if uncaptured."
					},
					"checks": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Checks"
							}
						],
						"nullable": true,
						"description": "Check results by Card networks on Card address and CVC at time of payment."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)"
					},
					"exp_month": {
						"type": "number",
						"format": "double",
						"description": "Two-digit number representing the card's expiration month."
					},
					"exp_year": {
						"type": "number",
						"format": "double",
						"description": "Four-digit number representing the card's expiration year."
					},
					"extended_authorization": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.ExtendedAuthorization"
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*"
					},
					"funding": {
						"type": "string",
						"nullable": true,
						"description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."
					},
					"iin": {
						"type": "string",
						"nullable": true,
						"description": "Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)"
					},
					"incremental_authorization": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.IncrementalAuthorization"
					},
					"installments": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Installments"
							}
						],
						"nullable": true,
						"description": "Installment details for this payment (Mexico only).\n\nFor more information, see the [installments integration guide](https://stripe.com/docs/payments/installments)."
					},
					"issuer": {
						"type": "string",
						"nullable": true,
						"description": "The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)"
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "The last four digits of the card."
					},
					"mandate": {
						"type": "string",
						"nullable": true,
						"description": "ID of the mandate used to make this payment or created by it."
					},
					"moto": {
						"type": "boolean",
						"nullable": true,
						"description": "True if this payment was marked as MOTO and out of scope for SCA."
					},
					"multicapture": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Multicapture"
					},
					"network": {
						"type": "string",
						"nullable": true,
						"description": "Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."
					},
					"network_token": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.NetworkToken"
							}
						],
						"nullable": true,
						"description": "If this card has network token credentials, this contains the details of the network token credentials."
					},
					"overcapture": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Overcapture"
					},
					"three_d_secure": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure"
							}
						],
						"nullable": true,
						"description": "Populated if this transaction used 3D Secure authentication."
					},
					"wallet": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet"
							}
						],
						"nullable": true,
						"description": "If this Card is part of a card wallet, this contains the details of the card wallet."
					}
				},
				"required": [
					"amount_authorized",
					"authorization_code",
					"brand",
					"checks",
					"country",
					"exp_month",
					"exp_year",
					"funding",
					"installments",
					"last4",
					"mandate",
					"network",
					"three_d_secure",
					"wallet"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Offline": {
				"properties": {
					"stored_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Time at which the payment was collected while offline"
					},
					"type": {
						"type": "string",
						"enum": [
							"deferred",
							null
						],
						"nullable": true,
						"description": "The method used to process this payment method offline. Only deferred is allowed."
					}
				},
				"required": [
					"stored_at",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.ReadMethod": {
				"type": "string",
				"enum": [
					"contact_emv",
					"contactless_emv",
					"contactless_magstripe_mode",
					"magnetic_stripe_fallback",
					"magnetic_stripe_track2"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Receipt.AccountType": {
				"type": "string",
				"enum": [
					"checking",
					"credit",
					"prepaid",
					"unknown"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Receipt": {
				"properties": {
					"account_type": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Receipt.AccountType",
						"description": "The type of account being debited or credited"
					},
					"application_cryptogram": {
						"type": "string",
						"nullable": true,
						"description": "EMV tag 9F26, cryptogram generated by the integrated circuit chip."
					},
					"application_preferred_name": {
						"type": "string",
						"nullable": true,
						"description": "Mnenomic of the Application Identifier."
					},
					"authorization_code": {
						"type": "string",
						"nullable": true,
						"description": "Identifier for this transaction."
					},
					"authorization_response_code": {
						"type": "string",
						"nullable": true,
						"description": "EMV tag 8A. A code returned by the card issuer."
					},
					"cardholder_verification_method": {
						"type": "string",
						"nullable": true,
						"description": "Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`."
					},
					"dedicated_file_name": {
						"type": "string",
						"nullable": true,
						"description": "EMV tag 84. Similar to the application identifier stored on the integrated circuit chip."
					},
					"terminal_verification_results": {
						"type": "string",
						"nullable": true,
						"description": "The outcome of a series of EMV functions performed by the card reader."
					},
					"transaction_status_information": {
						"type": "string",
						"nullable": true,
						"description": "An indication of various EMV functions performed during the transaction."
					}
				},
				"required": [
					"application_cryptogram",
					"application_preferred_name",
					"authorization_code",
					"authorization_response_code",
					"cardholder_verification_method",
					"dedicated_file_name",
					"terminal_verification_results",
					"transaction_status_information"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Wallet.Type": {
				"type": "string",
				"enum": [
					"apple_pay",
					"google_pay",
					"samsung_pay",
					"unknown"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Wallet": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Wallet.Type",
						"description": "The type of mobile wallet, one of `apple_pay`, `google_pay`, `samsung_pay`, or `unknown`."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.CardPresent": {
				"properties": {
					"amount_authorized": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The authorized amount"
					},
					"brand": {
						"type": "string",
						"nullable": true,
						"description": "Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."
					},
					"brand_product": {
						"type": "string",
						"nullable": true,
						"description": "The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card."
					},
					"capture_before": {
						"type": "number",
						"format": "double",
						"description": "When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured."
					},
					"cardholder_name": {
						"type": "string",
						"nullable": true,
						"description": "The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)"
					},
					"emv_auth_data": {
						"type": "string",
						"nullable": true,
						"description": "Authorization response cryptogram."
					},
					"exp_month": {
						"type": "number",
						"format": "double",
						"description": "Two-digit number representing the card's expiration month."
					},
					"exp_year": {
						"type": "number",
						"format": "double",
						"description": "Four-digit number representing the card's expiration year."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*"
					},
					"funding": {
						"type": "string",
						"nullable": true,
						"description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."
					},
					"generated_card": {
						"type": "string",
						"nullable": true,
						"description": "ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod."
					},
					"iin": {
						"type": "string",
						"nullable": true,
						"description": "Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)"
					},
					"incremental_authorization_supported": {
						"type": "boolean",
						"description": "Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support)."
					},
					"issuer": {
						"type": "string",
						"nullable": true,
						"description": "The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)"
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "The last four digits of the card."
					},
					"network": {
						"type": "string",
						"nullable": true,
						"description": "Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."
					},
					"network_transaction_id": {
						"type": "string",
						"nullable": true,
						"description": "This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. The first three digits of the Trace ID is the Financial Network Code, the next 6 digits is the Banknet Reference Number, and the last 4 digits represent the date (MM/DD). This field will be available for successful Visa, Mastercard, or American Express transactions and always null for other card brands."
					},
					"offline": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Offline"
							}
						],
						"nullable": true,
						"description": "Details about payments collected offline."
					},
					"overcapture_supported": {
						"type": "boolean",
						"description": "Defines whether the authorized amount can be over-captured or not"
					},
					"preferred_locales": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "EMV tag 5F2D. Preferred languages specified by the integrated circuit chip."
					},
					"read_method": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.ReadMethod"
							}
						],
						"nullable": true,
						"description": "How card details were read in this transaction."
					},
					"receipt": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Receipt"
							}
						],
						"nullable": true,
						"description": "A collection of fields required to be displayed on receipts. Only required for EMV transactions."
					},
					"wallet": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Wallet"
					}
				},
				"required": [
					"amount_authorized",
					"brand",
					"brand_product",
					"cardholder_name",
					"country",
					"emv_auth_data",
					"exp_month",
					"exp_year",
					"fingerprint",
					"funding",
					"generated_card",
					"incremental_authorization_supported",
					"last4",
					"network",
					"network_transaction_id",
					"offline",
					"overcapture_supported",
					"preferred_locales",
					"read_method",
					"receipt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Cashapp": {
				"properties": {
					"buyer_id": {
						"type": "string",
						"nullable": true,
						"description": "A unique and immutable identifier assigned by Cash App to every buyer."
					},
					"cashtag": {
						"type": "string",
						"nullable": true,
						"description": "A public identifier for buyers using Cash App."
					}
				},
				"required": [
					"buyer_id",
					"cashtag"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.CustomerBalance": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Eps.Bank": {
				"type": "string",
				"enum": [
					"arzte_und_apotheker_bank",
					"austrian_anadi_bank_ag",
					"bank_austria",
					"bankhaus_carl_spangler",
					"bankhaus_schelhammer_und_schattera_ag",
					"bawag_psk_ag",
					"bks_bank_ag",
					"brull_kallmus_bank_ag",
					"btv_vier_lander_bank",
					"capital_bank_grawe_gruppe_ag",
					"deutsche_bank_ag",
					"dolomitenbank",
					"easybank_ag",
					"erste_bank_und_sparkassen",
					"hypo_alpeadriabank_international_ag",
					"hypo_bank_burgenland_aktiengesellschaft",
					"hypo_noe_lb_fur_niederosterreich_u_wien",
					"hypo_oberosterreich_salzburg_steiermark",
					"hypo_tirol_bank_ag",
					"hypo_vorarlberg_bank_ag",
					"marchfelder_bank",
					"oberbank_ag",
					"raiffeisen_bankengruppe_osterreich",
					"schoellerbank_ag",
					"sparda_bank_wien",
					"volksbank_gruppe",
					"volkskreditbank_ag",
					"vr_bank_braunau"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Eps": {
				"properties": {
					"bank": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Eps.Bank"
							}
						],
						"nullable": true,
						"description": "The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`."
					},
					"verified_name": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified full name. Values are verified or provided by EPS directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated.\nEPS rarely provides this information so the attribute is usually empty."
					}
				},
				"required": [
					"bank",
					"verified_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Fpx.AccountHolderType": {
				"type": "string",
				"enum": [
					"company",
					"individual"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Fpx.Bank": {
				"type": "string",
				"enum": [
					"affin_bank",
					"agrobank",
					"alliance_bank",
					"ambank",
					"bank_islam",
					"bank_muamalat",
					"bank_of_china",
					"bank_rakyat",
					"bsn",
					"cimb",
					"deutsche_bank",
					"hong_leong_bank",
					"hsbc",
					"kfh",
					"maybank2e",
					"maybank2u",
					"ocbc",
					"pb_enterprise",
					"public_bank",
					"rhb",
					"standard_chartered",
					"uob"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Fpx": {
				"properties": {
					"account_holder_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Fpx.AccountHolderType"
							}
						],
						"nullable": true,
						"description": "Account holder type, if provided. Can be one of `individual` or `company`."
					},
					"bank": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Fpx.Bank",
						"description": "The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`."
					},
					"transaction_id": {
						"type": "string",
						"nullable": true,
						"description": "Unique transaction id generated by FPX for every request from the merchant"
					}
				},
				"required": [
					"account_holder_type",
					"bank",
					"transaction_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Giropay": {
				"properties": {
					"bank_code": {
						"type": "string",
						"nullable": true,
						"description": "Bank code of bank associated with the bank account."
					},
					"bank_name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the bank associated with the bank account."
					},
					"bic": {
						"type": "string",
						"nullable": true,
						"description": "Bank Identifier Code of the bank associated with the bank account."
					},
					"verified_name": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified full name. Values are verified or provided by Giropay directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated.\nGiropay rarely provides this information so the attribute is usually empty."
					}
				},
				"required": [
					"bank_code",
					"bank_name",
					"bic",
					"verified_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Grabpay": {
				"properties": {
					"transaction_id": {
						"type": "string",
						"nullable": true,
						"description": "Unique transaction id generated by GrabPay"
					}
				},
				"required": [
					"transaction_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Ideal.Bank": {
				"type": "string",
				"enum": [
					"abn_amro",
					"asn_bank",
					"bunq",
					"handelsbanken",
					"ing",
					"knab",
					"moneyou",
					"n26",
					"nn",
					"rabobank",
					"regiobank",
					"revolut",
					"sns_bank",
					"triodos_bank",
					"van_lanschot",
					"yoursafe"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Ideal.Bic": {
				"type": "string",
				"enum": [
					"ABNANL2A",
					"ASNBNL21",
					"BITSNL2A",
					"BUNQNL2A",
					"FVLBNL22",
					"HANDNL2A",
					"INGBNL2A",
					"KNABNL2H",
					"MOYONL21",
					"NNBANL2G",
					"NTSBDEB1",
					"RABONL2U",
					"RBRBNL21",
					"REVOIE23",
					"REVOLT21",
					"SNSBNL2A",
					"TRIONL2U"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Ideal": {
				"properties": {
					"bank": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Ideal.Bank"
							}
						],
						"nullable": true,
						"description": "The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`."
					},
					"bic": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Ideal.Bic"
							}
						],
						"nullable": true,
						"description": "The Bank Identifier Code of the customer's bank."
					},
					"generated_sepa_debit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"nullable": true,
						"description": "The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge."
					},
					"generated_sepa_debit_mandate": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Mandate"
							}
						],
						"nullable": true,
						"description": "The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge."
					},
					"iban_last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four characters of the IBAN."
					},
					"verified_name": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified full name. Values are verified or provided by iDEAL directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
					}
				},
				"required": [
					"bank",
					"bic",
					"generated_sepa_debit",
					"generated_sepa_debit_mandate",
					"iban_last4",
					"verified_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent.ReadMethod": {
				"type": "string",
				"enum": [
					"contact_emv",
					"contactless_emv",
					"contactless_magstripe_mode",
					"magnetic_stripe_fallback",
					"magnetic_stripe_track2"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent.Receipt.AccountType": {
				"type": "string",
				"enum": [
					"checking",
					"savings",
					"unknown"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent.Receipt": {
				"properties": {
					"account_type": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent.Receipt.AccountType",
						"description": "The type of account being debited or credited"
					},
					"application_cryptogram": {
						"type": "string",
						"nullable": true,
						"description": "EMV tag 9F26, cryptogram generated by the integrated circuit chip."
					},
					"application_preferred_name": {
						"type": "string",
						"nullable": true,
						"description": "Mnenomic of the Application Identifier."
					},
					"authorization_code": {
						"type": "string",
						"nullable": true,
						"description": "Identifier for this transaction."
					},
					"authorization_response_code": {
						"type": "string",
						"nullable": true,
						"description": "EMV tag 8A. A code returned by the card issuer."
					},
					"cardholder_verification_method": {
						"type": "string",
						"nullable": true,
						"description": "Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`."
					},
					"dedicated_file_name": {
						"type": "string",
						"nullable": true,
						"description": "EMV tag 84. Similar to the application identifier stored on the integrated circuit chip."
					},
					"terminal_verification_results": {
						"type": "string",
						"nullable": true,
						"description": "The outcome of a series of EMV functions performed by the card reader."
					},
					"transaction_status_information": {
						"type": "string",
						"nullable": true,
						"description": "An indication of various EMV functions performed during the transaction."
					}
				},
				"required": [
					"application_cryptogram",
					"application_preferred_name",
					"authorization_code",
					"authorization_response_code",
					"cardholder_verification_method",
					"dedicated_file_name",
					"terminal_verification_results",
					"transaction_status_information"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent": {
				"properties": {
					"brand": {
						"type": "string",
						"nullable": true,
						"description": "Card brand. Can be `interac`, `mastercard` or `visa`."
					},
					"cardholder_name": {
						"type": "string",
						"nullable": true,
						"description": "The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)"
					},
					"emv_auth_data": {
						"type": "string",
						"nullable": true,
						"description": "Authorization response cryptogram."
					},
					"exp_month": {
						"type": "number",
						"format": "double",
						"description": "Two-digit number representing the card's expiration month."
					},
					"exp_year": {
						"type": "number",
						"format": "double",
						"description": "Four-digit number representing the card's expiration year."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*"
					},
					"funding": {
						"type": "string",
						"nullable": true,
						"description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."
					},
					"generated_card": {
						"type": "string",
						"nullable": true,
						"description": "ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod."
					},
					"iin": {
						"type": "string",
						"nullable": true,
						"description": "Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)"
					},
					"issuer": {
						"type": "string",
						"nullable": true,
						"description": "The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)"
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "The last four digits of the card."
					},
					"network": {
						"type": "string",
						"nullable": true,
						"description": "Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."
					},
					"network_transaction_id": {
						"type": "string",
						"nullable": true,
						"description": "This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. The first three digits of the Trace ID is the Financial Network Code, the next 6 digits is the Banknet Reference Number, and the last 4 digits represent the date (MM/DD). This field will be available for successful Visa, Mastercard, or American Express transactions and always null for other card brands."
					},
					"preferred_locales": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "EMV tag 5F2D. Preferred languages specified by the integrated circuit chip."
					},
					"read_method": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent.ReadMethod"
							}
						],
						"nullable": true,
						"description": "How card details were read in this transaction."
					},
					"receipt": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent.Receipt"
							}
						],
						"nullable": true,
						"description": "A collection of fields required to be displayed on receipts. Only required for EMV transactions."
					}
				},
				"required": [
					"brand",
					"cardholder_name",
					"country",
					"emv_auth_data",
					"exp_month",
					"exp_year",
					"fingerprint",
					"funding",
					"generated_card",
					"last4",
					"network",
					"network_transaction_id",
					"preferred_locales",
					"read_method",
					"receipt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Klarna.PayerDetails.Address": {
				"properties": {
					"country": {
						"type": "string",
						"nullable": true,
						"description": "The payer address country"
					}
				},
				"required": [
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Klarna.PayerDetails": {
				"properties": {
					"address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Klarna.PayerDetails.Address"
							}
						],
						"nullable": true,
						"description": "The payer's address"
					}
				},
				"required": [
					"address"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Klarna": {
				"properties": {
					"payer_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Klarna.PayerDetails"
							}
						],
						"nullable": true,
						"description": "The payer details for this transaction."
					},
					"payment_method_category": {
						"type": "string",
						"nullable": true,
						"description": "The Klarna payment method used for this transaction.\nCan be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`"
					},
					"preferred_locale": {
						"type": "string",
						"nullable": true,
						"description": "Preferred language of the Klarna authorization page that the customer is redirected to.\nCan be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, `en-FR`, `cs-CZ`, `en-CZ`, `ro-RO`, `en-RO`, `el-GR`, `en-GR`, `en-AU`, `en-NZ`, `en-CA`, `fr-CA`, `pl-PL`, `en-PL`, `pt-PT`, `en-PT`, `de-CH`, `fr-CH`, `it-CH`, or `en-CH`"
					}
				},
				"required": [
					"payer_details",
					"payment_method_category",
					"preferred_locale"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Konbini.Store.Chain": {
				"type": "string",
				"enum": [
					"familymart",
					"lawson",
					"ministop",
					"seicomart"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Konbini.Store": {
				"properties": {
					"chain": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Konbini.Store.Chain"
							}
						],
						"nullable": true,
						"description": "The name of the convenience store chain where the payment was completed."
					}
				},
				"required": [
					"chain"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Konbini": {
				"properties": {
					"store": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Konbini.Store"
							}
						],
						"nullable": true,
						"description": "If the payment succeeded, this contains the details of the convenience store where the payment was completed."
					}
				},
				"required": [
					"store"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Link": {
				"properties": {
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the funding source country beneath the Link payment.\nYou could use this attribute to get a sense of international fees."
					}
				},
				"required": [
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Mobilepay.Card": {
				"properties": {
					"brand": {
						"type": "string",
						"nullable": true,
						"description": "Brand of the card used in the transaction"
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country of the card"
					},
					"exp_month": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Two digit number representing the card's expiration month"
					},
					"exp_year": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Two digit number representing the card's expiration year"
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "The last 4 digits of the card"
					}
				},
				"required": [
					"brand",
					"country",
					"exp_month",
					"exp_year",
					"last4"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Mobilepay": {
				"properties": {
					"card": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Mobilepay.Card"
							}
						],
						"nullable": true,
						"description": "Internal card details"
					}
				},
				"required": [
					"card"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Multibanco": {
				"properties": {
					"entity": {
						"type": "string",
						"nullable": true,
						"description": "Entity number associated with this Multibanco payment."
					},
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "Reference number associated with this Multibanco payment."
					}
				},
				"required": [
					"entity",
					"reference"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Oxxo": {
				"properties": {
					"number": {
						"type": "string",
						"nullable": true,
						"description": "OXXO reference number"
					}
				},
				"required": [
					"number"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.P24.Bank": {
				"type": "string",
				"enum": [
					"alior_bank",
					"bank_millennium",
					"bank_nowy_bfg_sa",
					"bank_pekao_sa",
					"banki_spbdzielcze",
					"blik",
					"bnp_paribas",
					"boz",
					"citi_handlowy",
					"credit_agricole",
					"envelobank",
					"etransfer_pocztowy24",
					"getin_bank",
					"ideabank",
					"ing",
					"inteligo",
					"mbank_mtransfer",
					"nest_przelew",
					"noble_pay",
					"pbac_z_ipko",
					"plus_bank",
					"santander_przelew24",
					"tmobile_usbugi_bankowe",
					"toyota_bank",
					"velobank",
					"volkswagen_bank"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.P24": {
				"properties": {
					"bank": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.P24.Bank"
							}
						],
						"nullable": true,
						"description": "The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `velobank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`."
					},
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "Unique reference for this Przelewy24 payment."
					},
					"verified_name": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified full name. Values are verified or provided by Przelewy24 directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated.\nPrzelewy24 rarely provides this information so the attribute is usually empty."
					}
				},
				"required": [
					"bank",
					"reference",
					"verified_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Paynow": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "Reference number associated with this PayNow payment"
					}
				},
				"required": [
					"reference"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Paypal.SellerProtection.DisputeCategory": {
				"type": "string",
				"enum": [
					"fraudulent",
					"product_not_received"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Paypal.SellerProtection.Status": {
				"type": "string",
				"enum": [
					"eligible",
					"not_eligible",
					"partially_eligible"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Paypal.SellerProtection": {
				"properties": {
					"dispute_categories": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Paypal.SellerProtection.DisputeCategory"
						},
						"type": "array",
						"nullable": true,
						"description": "An array of conditions that are covered for the transaction, if applicable."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Paypal.SellerProtection.Status",
						"description": "Indicates whether the transaction is eligible for PayPal's seller protection."
					}
				},
				"required": [
					"dispute_categories",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Paypal": {
				"properties": {
					"payer_email": {
						"type": "string",
						"nullable": true,
						"description": "Owner's email. Values are provided by PayPal directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"payer_id": {
						"type": "string",
						"nullable": true,
						"description": "PayPal account PayerID. This identifier uniquely identifies the PayPal customer."
					},
					"payer_name": {
						"type": "string",
						"nullable": true,
						"description": "Owner's full name. Values provided by PayPal directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"seller_protection": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Paypal.SellerProtection"
							}
						],
						"nullable": true,
						"description": "The level of protection offered as defined by PayPal Seller Protection for Merchants, for this transaction."
					},
					"transaction_id": {
						"type": "string",
						"nullable": true,
						"description": "A unique ID generated by PayPal for this transaction."
					}
				},
				"required": [
					"payer_email",
					"payer_id",
					"payer_name",
					"seller_protection",
					"transaction_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Pix": {
				"properties": {
					"bank_transaction_id": {
						"type": "string",
						"nullable": true,
						"description": "Unique transaction id generated by BCB"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Promptpay": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "Bill reference generated by PromptPay"
					}
				},
				"required": [
					"reference"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.RevolutPay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.SepaCreditTransfer": {
				"properties": {
					"bank_name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the bank associated with the bank account."
					},
					"bic": {
						"type": "string",
						"nullable": true,
						"description": "Bank Identifier Code of the bank associated with the bank account."
					},
					"iban": {
						"type": "string",
						"nullable": true,
						"description": "IBAN of the bank account to transfer funds to."
					}
				},
				"required": [
					"bank_name",
					"bic",
					"iban"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.SepaDebit": {
				"properties": {
					"bank_code": {
						"type": "string",
						"nullable": true,
						"description": "Bank code of bank associated with the bank account."
					},
					"branch_code": {
						"type": "string",
						"nullable": true,
						"description": "Branch code of bank associated with the bank account."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country the bank account is located in."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four characters of the IBAN."
					},
					"mandate": {
						"type": "string",
						"nullable": true,
						"description": "Find the ID of the mandate used for this payment under the [payment_method_details.sepa_debit.mandate](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-sepa_debit-mandate) property on the Charge. Use this mandate ID to [retrieve the Mandate](https://stripe.com/docs/api/mandates/retrieve)."
					}
				},
				"required": [
					"bank_code",
					"branch_code",
					"country",
					"fingerprint",
					"last4",
					"mandate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Sofort.PreferredLanguage": {
				"type": "string",
				"enum": [
					"de",
					"en",
					"es",
					"fr",
					"it",
					"nl",
					"pl"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Sofort": {
				"properties": {
					"bank_code": {
						"type": "string",
						"nullable": true,
						"description": "Bank code of bank associated with the bank account."
					},
					"bank_name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the bank associated with the bank account."
					},
					"bic": {
						"type": "string",
						"nullable": true,
						"description": "Bank Identifier Code of the bank associated with the bank account."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country the bank account is located in."
					},
					"generated_sepa_debit": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"nullable": true,
						"description": "The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge."
					},
					"generated_sepa_debit_mandate": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Mandate"
							}
						],
						"nullable": true,
						"description": "The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge."
					},
					"iban_last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four characters of the IBAN."
					},
					"preferred_language": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Sofort.PreferredLanguage"
							}
						],
						"nullable": true,
						"description": "Preferred language of the SOFORT authorization page that the customer is redirected to.\nCan be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`"
					},
					"verified_name": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified full name. Values are verified or provided by SOFORT directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
					}
				},
				"required": [
					"bank_code",
					"bank_name",
					"bic",
					"country",
					"generated_sepa_debit",
					"generated_sepa_debit_mandate",
					"iban_last4",
					"preferred_language",
					"verified_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.StripeAccount": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Swish": {
				"properties": {
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies the payer's Swish account. You can use this attribute to check whether two Swish transactions were paid for by the same payer"
					},
					"payment_reference": {
						"type": "string",
						"nullable": true,
						"description": "Payer bank reference number for the payment"
					},
					"verified_phone_last4": {
						"type": "string",
						"nullable": true,
						"description": "The last four digits of the Swish account phone number"
					}
				},
				"required": [
					"fingerprint",
					"payment_reference",
					"verified_phone_last4"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Twint": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.UsBankAccount.AccountHolderType": {
				"type": "string",
				"enum": [
					"company",
					"individual"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.UsBankAccount.AccountType": {
				"type": "string",
				"enum": [
					"checking",
					"savings"
				]
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.UsBankAccount": {
				"properties": {
					"account_holder_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.UsBankAccount.AccountHolderType"
							}
						],
						"nullable": true,
						"description": "Account holder type: individual or company."
					},
					"account_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.UsBankAccount.AccountType"
							}
						],
						"nullable": true,
						"description": "Account type: checkings or savings. Defaults to checking if omitted."
					},
					"bank_name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the bank associated with the bank account."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four digits of the bank account number."
					},
					"mandate": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Mandate"
							}
						],
						"description": "ID of the mandate used to make this payment."
					},
					"payment_reference": {
						"type": "string",
						"nullable": true,
						"description": "Reference number to locate ACH payments with customer's bank."
					},
					"routing_number": {
						"type": "string",
						"nullable": true,
						"description": "Routing number of the bank account."
					}
				},
				"required": [
					"account_holder_type",
					"account_type",
					"bank_name",
					"fingerprint",
					"last4",
					"payment_reference",
					"routing_number"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Wechat": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.WechatPay": {
				"properties": {
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same."
					},
					"transaction_id": {
						"type": "string",
						"nullable": true,
						"description": "Transaction ID of this particular WeChat Pay transaction."
					}
				},
				"required": [
					"fingerprint",
					"transaction_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails.Zip": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.PaymentMethodDetails": {
				"properties": {
					"ach_credit_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.AchCreditTransfer"
					},
					"ach_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.AchDebit"
					},
					"acss_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.AcssDebit"
					},
					"affirm": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Affirm"
					},
					"afterpay_clearpay": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.AfterpayClearpay"
					},
					"alipay": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Alipay"
					},
					"amazon_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.AmazonPay"
					},
					"au_becs_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.AuBecsDebit"
					},
					"bacs_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.BacsDebit"
					},
					"bancontact": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Bancontact"
					},
					"blik": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Blik"
					},
					"boleto": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Boleto"
					},
					"card": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Card"
					},
					"card_present": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.CardPresent"
					},
					"cashapp": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Cashapp"
					},
					"customer_balance": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.CustomerBalance"
					},
					"eps": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Eps"
					},
					"fpx": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Fpx"
					},
					"giropay": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Giropay"
					},
					"grabpay": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Grabpay"
					},
					"ideal": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Ideal"
					},
					"interac_present": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent"
					},
					"klarna": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Klarna"
					},
					"konbini": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Konbini"
					},
					"link": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Link"
					},
					"mobilepay": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Mobilepay"
					},
					"multibanco": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Multibanco"
					},
					"oxxo": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Oxxo"
					},
					"p24": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.P24"
					},
					"paynow": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Paynow"
					},
					"paypal": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Paypal"
					},
					"pix": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Pix"
					},
					"promptpay": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Promptpay"
					},
					"revolut_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.RevolutPay"
					},
					"sepa_credit_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.SepaCreditTransfer"
					},
					"sepa_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.SepaDebit"
					},
					"sofort": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Sofort"
					},
					"stripe_account": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.StripeAccount"
					},
					"swish": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Swish"
					},
					"twint": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Twint"
					},
					"type": {
						"type": "string",
						"description": "The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.\nAn additional hash is included on `payment_method_details` with a name matching this value.\nIt contains information specific to the payment method."
					},
					"us_bank_account": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.UsBankAccount"
					},
					"wechat": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Wechat"
					},
					"wechat_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.WechatPay"
					},
					"zip": {
						"$ref": "#/components/schemas/stripe.Stripe.Charge.PaymentMethodDetails.Zip"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.RadarOptions": {
				"properties": {
					"session": {
						"type": "string",
						"description": "A [Radar Session](https://stripe.com/docs/radar/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ApiList_stripe.Stripe.Refund_": {
				"description": "A container for paginated lists of objects.\nThe array of objects is on the `.data` property,\nand `.has_more` indicates whether there are additional objects beyond the end of this list.\n\nLearn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)\nor, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.",
				"properties": {
					"object": {
						"type": "string",
						"enum": [
							"list"
						],
						"nullable": false
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Refund"
						},
						"type": "array"
					},
					"has_more": {
						"type": "boolean",
						"description": "True if this list has another page of items after this one that can be fetched."
					},
					"url": {
						"type": "string",
						"description": "The URL where this list can be accessed."
					}
				},
				"required": [
					"object",
					"data",
					"has_more",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Review.ClosedReason": {
				"type": "string",
				"enum": [
					"approved",
					"disputed",
					"redacted",
					"refunded",
					"refunded_as_fraud"
				]
			},
			"stripe.Stripe.Review.IpAddressLocation": {
				"properties": {
					"city": {
						"type": "string",
						"nullable": true,
						"description": "The city where the payment originated."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country where the payment originated."
					},
					"latitude": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The geographic latitude where the payment originated."
					},
					"longitude": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The geographic longitude where the payment originated."
					},
					"region": {
						"type": "string",
						"nullable": true,
						"description": "The state/county/province/region where the payment originated."
					}
				},
				"required": [
					"city",
					"country",
					"latitude",
					"longitude",
					"region"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Review.OpenedReason": {
				"type": "string",
				"enum": [
					"manual",
					"rule"
				]
			},
			"stripe.Stripe.Review.Session": {
				"properties": {
					"browser": {
						"type": "string",
						"nullable": true,
						"description": "The browser used in this browser session (e.g., `Chrome`)."
					},
					"device": {
						"type": "string",
						"nullable": true,
						"description": "Information about the device used for the browser session (e.g., `Samsung SM-G930T`)."
					},
					"platform": {
						"type": "string",
						"nullable": true,
						"description": "The platform for the browser session (e.g., `Macintosh`)."
					},
					"version": {
						"type": "string",
						"nullable": true,
						"description": "The version for the browser session (e.g., `61.0.3163.100`)."
					}
				},
				"required": [
					"browser",
					"device",
					"platform",
					"version"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Review": {
				"description": "Reviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://stripe.com/radar) and reviewing payments\n[here](https://stripe.com/docs/radar/reviews).",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"review"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"billing_zip": {
						"type": "string",
						"nullable": true,
						"description": "The ZIP or postal code of the card used, if applicable."
					},
					"charge": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge"
							}
						],
						"nullable": true,
						"description": "The charge associated with this review."
					},
					"closed_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Review.ClosedReason"
							}
						],
						"nullable": true,
						"description": "The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"ip_address": {
						"type": "string",
						"nullable": true,
						"description": "The IP address where the payment originated."
					},
					"ip_address_location": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Review.IpAddressLocation"
							}
						],
						"nullable": true,
						"description": "Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"open": {
						"type": "boolean",
						"description": "If `true`, the review needs action."
					},
					"opened_reason": {
						"$ref": "#/components/schemas/stripe.Stripe.Review.OpenedReason",
						"description": "The reason the review was opened. One of `rule` or `manual`."
					},
					"payment_intent": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent"
							}
						],
						"description": "The PaymentIntent ID associated with this review, if one exists."
					},
					"reason": {
						"type": "string",
						"description": "The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`."
					},
					"session": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Review.Session"
							}
						],
						"nullable": true,
						"description": "Information related to the browsing session of the user who initiated the payment."
					}
				},
				"required": [
					"id",
					"object",
					"billing_zip",
					"charge",
					"closed_reason",
					"created",
					"ip_address",
					"ip_address_location",
					"livemode",
					"open",
					"opened_reason",
					"reason",
					"session"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.Shipping": {
				"properties": {
					"address": {
						"$ref": "#/components/schemas/stripe.Stripe.Address"
					},
					"carrier": {
						"type": "string",
						"nullable": true,
						"description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc."
					},
					"name": {
						"type": "string",
						"description": "Recipient name."
					},
					"phone": {
						"type": "string",
						"nullable": true,
						"description": "Recipient phone (including extension)."
					},
					"tracking_number": {
						"type": "string",
						"nullable": true,
						"description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Charge.Status": {
				"type": "string",
				"enum": [
					"failed",
					"pending",
					"succeeded"
				]
			},
			"stripe.Stripe.Charge.TransferData": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account."
					},
					"destination": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request."
					}
				},
				"required": [
					"amount",
					"destination"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.CollectionMethod": {
				"type": "string",
				"enum": [
					"charge_automatically",
					"send_invoice"
				]
			},
			"stripe.Stripe.Invoice.CustomField": {
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the custom field."
					},
					"value": {
						"type": "string",
						"description": "The value of the custom field."
					}
				},
				"required": [
					"name",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.CustomerShipping": {
				"properties": {
					"address": {
						"$ref": "#/components/schemas/stripe.Stripe.Address"
					},
					"carrier": {
						"type": "string",
						"nullable": true,
						"description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc."
					},
					"name": {
						"type": "string",
						"description": "Recipient name."
					},
					"phone": {
						"type": "string",
						"nullable": true,
						"description": "Recipient phone (including extension)."
					},
					"tracking_number": {
						"type": "string",
						"nullable": true,
						"description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.CustomerTaxExempt": {
				"type": "string",
				"enum": [
					"exempt",
					"none",
					"reverse"
				]
			},
			"stripe.Stripe.Invoice.CustomerTaxId.Type": {
				"type": "string",
				"enum": [
					"ad_nrt",
					"ae_trn",
					"ar_cuit",
					"au_abn",
					"au_arn",
					"bg_uic",
					"bh_vat",
					"bo_tin",
					"br_cnpj",
					"br_cpf",
					"ca_bn",
					"ca_gst_hst",
					"ca_pst_bc",
					"ca_pst_mb",
					"ca_pst_sk",
					"ca_qst",
					"ch_uid",
					"ch_vat",
					"cl_tin",
					"cn_tin",
					"co_nit",
					"cr_tin",
					"de_stn",
					"do_rcn",
					"ec_ruc",
					"eg_tin",
					"es_cif",
					"eu_oss_vat",
					"eu_vat",
					"gb_vat",
					"ge_vat",
					"hk_br",
					"hr_oib",
					"hu_tin",
					"id_npwp",
					"il_vat",
					"in_gst",
					"is_vat",
					"jp_cn",
					"jp_rn",
					"jp_trn",
					"ke_pin",
					"kr_brn",
					"kz_bin",
					"li_uid",
					"mx_rfc",
					"my_frp",
					"my_itn",
					"my_sst",
					"ng_tin",
					"no_vat",
					"no_voec",
					"nz_gst",
					"om_vat",
					"pe_ruc",
					"ph_tin",
					"ro_tin",
					"rs_pib",
					"ru_inn",
					"ru_kpp",
					"sa_vat",
					"sg_gst",
					"sg_uen",
					"si_tin",
					"sv_nit",
					"th_vat",
					"tr_tin",
					"tw_vat",
					"ua_vat",
					"unknown",
					"us_ein",
					"uy_ruc",
					"ve_rif",
					"vn_tin",
					"za_vat"
				]
			},
			"stripe.Stripe.Invoice.CustomerTaxId": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.CustomerTaxId.Type",
						"description": "The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, or `unknown`"
					},
					"value": {
						"type": "string",
						"nullable": true,
						"description": "The value of the tax ID."
					}
				},
				"required": [
					"type",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.TaxRate.JurisdictionLevel": {
				"type": "string",
				"enum": [
					"city",
					"country",
					"county",
					"district",
					"multiple",
					"state"
				]
			},
			"stripe.Stripe.TaxRate.TaxType": {
				"type": "string",
				"enum": [
					"amusement_tax",
					"communications_tax",
					"gst",
					"hst",
					"igst",
					"jct",
					"lease_tax",
					"pst",
					"qst",
					"rst",
					"sales_tax",
					"vat"
				]
			},
			"stripe.Stripe.TaxRate": {
				"description": "Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.\n\nRelated guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"tax_rate"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"active": {
						"type": "boolean",
						"description": "Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers."
					},
					"display_name": {
						"type": "string",
						"description": "The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page."
					},
					"effective_percentage": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Actual/effective tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true,\nthis percentage reflects the rate actually used to calculate tax based on the product's taxability\nand whether the user is registered to collect taxes in the corresponding jurisdiction."
					},
					"inclusive": {
						"type": "boolean",
						"description": "This specifies if the tax rate is inclusive or exclusive."
					},
					"jurisdiction": {
						"type": "string",
						"nullable": true,
						"description": "The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer's invoice."
					},
					"jurisdiction_level": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.TaxRate.JurisdictionLevel"
							}
						],
						"nullable": true,
						"description": "The level of the jurisdiction that imposes this tax rate. Will be `null` for manually defined tax rates."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"percentage": {
						"type": "number",
						"format": "double",
						"description": "Tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true, this percentage includes the statutory tax rate of non-taxable jurisdictions."
					},
					"state": {
						"type": "string",
						"nullable": true,
						"description": "[ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, \"NY\" for New York, United States."
					},
					"tax_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.TaxRate.TaxType"
							}
						],
						"nullable": true,
						"description": "The high-level tax type, such as `vat` or `sales_tax`."
					}
				},
				"required": [
					"id",
					"object",
					"active",
					"country",
					"created",
					"description",
					"display_name",
					"effective_percentage",
					"inclusive",
					"jurisdiction",
					"jurisdiction_level",
					"livemode",
					"metadata",
					"percentage",
					"state",
					"tax_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.DeletedDiscount": {
				"description": "The DeletedDiscount object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array."
					},
					"object": {
						"type": "string",
						"enum": [
							"discount"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"checkout_session": {
						"type": "string",
						"nullable": true,
						"description": "The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode."
					},
					"coupon": {
						"$ref": "#/components/schemas/stripe.Stripe.Coupon",
						"description": "A coupon contains information about a percent-off or amount-off discount you\nmight want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),\n[checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents)."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomer"
							}
						],
						"nullable": true,
						"description": "The ID of the customer associated with this discount."
					},
					"deleted": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false,
						"description": "Always true for a deleted object"
					},
					"invoice": {
						"type": "string",
						"nullable": true,
						"description": "The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice."
					},
					"invoice_item": {
						"type": "string",
						"nullable": true,
						"description": "The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item."
					},
					"promotion_code": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PromotionCode"
							}
						],
						"nullable": true,
						"description": "The promotion code applied to create this discount."
					},
					"start": {
						"type": "number",
						"format": "double",
						"description": "Date that the coupon was applied."
					},
					"subscription": {
						"type": "string",
						"nullable": true,
						"description": "The subscription that this coupon is applied to, if it is applied to a particular subscription."
					},
					"subscription_item": {
						"type": "string",
						"nullable": true,
						"description": "The subscription item that this coupon is applied to, if it is applied to a particular subscription item."
					}
				},
				"required": [
					"id",
					"object",
					"checkout_session",
					"coupon",
					"customer",
					"deleted",
					"invoice",
					"invoice_item",
					"promotion_code",
					"start",
					"subscription",
					"subscription_item"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.FromInvoice": {
				"properties": {
					"action": {
						"type": "string",
						"description": "The relation between this invoice and the cloned invoice"
					},
					"invoice": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice"
							}
						],
						"description": "The invoice that was cloned."
					}
				},
				"required": [
					"action",
					"invoice"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.Issuer.Type": {
				"type": "string",
				"enum": [
					"account",
					"self"
				]
			},
			"stripe.Stripe.Invoice.Issuer": {
				"properties": {
					"account": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The connected account being referenced when `type` is `account`."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.Issuer.Type",
						"description": "Type of the account referenced."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.LastFinalizationError.Code": {
				"type": "string",
				"enum": [
					"account_closed",
					"account_country_invalid_address",
					"account_error_country_change_requires_additional_steps",
					"account_information_mismatch",
					"account_invalid",
					"account_number_invalid",
					"acss_debit_session_incomplete",
					"alipay_upgrade_required",
					"amount_too_large",
					"amount_too_small",
					"api_key_expired",
					"application_fees_not_allowed",
					"authentication_required",
					"balance_insufficient",
					"balance_invalid_parameter",
					"bank_account_bad_routing_numbers",
					"bank_account_declined",
					"bank_account_exists",
					"bank_account_restricted",
					"bank_account_unusable",
					"bank_account_unverified",
					"bank_account_verification_failed",
					"billing_invalid_mandate",
					"bitcoin_upgrade_required",
					"capture_charge_authorization_expired",
					"capture_unauthorized_payment",
					"card_decline_rate_limit_exceeded",
					"card_declined",
					"cardholder_phone_number_required",
					"charge_already_captured",
					"charge_already_refunded",
					"charge_disputed",
					"charge_exceeds_source_limit",
					"charge_exceeds_transaction_limit",
					"charge_expired_for_capture",
					"charge_invalid_parameter",
					"charge_not_refundable",
					"clearing_code_unsupported",
					"country_code_invalid",
					"country_unsupported",
					"coupon_expired",
					"customer_max_payment_methods",
					"customer_max_subscriptions",
					"customer_tax_location_invalid",
					"debit_not_authorized",
					"email_invalid",
					"expired_card",
					"financial_connections_account_inactive",
					"financial_connections_no_successful_transaction_refresh",
					"forwarding_api_inactive",
					"forwarding_api_invalid_parameter",
					"forwarding_api_upstream_connection_error",
					"forwarding_api_upstream_connection_timeout",
					"idempotency_key_in_use",
					"incorrect_address",
					"incorrect_cvc",
					"incorrect_number",
					"incorrect_zip",
					"instant_payouts_config_disabled",
					"instant_payouts_currency_disabled",
					"instant_payouts_limit_exceeded",
					"instant_payouts_unsupported",
					"insufficient_funds",
					"intent_invalid_state",
					"intent_verification_method_missing",
					"invalid_card_type",
					"invalid_characters",
					"invalid_charge_amount",
					"invalid_cvc",
					"invalid_expiry_month",
					"invalid_expiry_year",
					"invalid_mandate_reference_prefix_format",
					"invalid_number",
					"invalid_source_usage",
					"invalid_tax_location",
					"invoice_no_customer_line_items",
					"invoice_no_payment_method_types",
					"invoice_no_subscription_line_items",
					"invoice_not_editable",
					"invoice_on_behalf_of_not_editable",
					"invoice_payment_intent_requires_action",
					"invoice_upcoming_none",
					"livemode_mismatch",
					"lock_timeout",
					"missing",
					"no_account",
					"not_allowed_on_standard_account",
					"out_of_inventory",
					"ownership_declaration_not_allowed",
					"parameter_invalid_empty",
					"parameter_invalid_integer",
					"parameter_invalid_string_blank",
					"parameter_invalid_string_empty",
					"parameter_missing",
					"parameter_unknown",
					"parameters_exclusive",
					"payment_intent_action_required",
					"payment_intent_authentication_failure",
					"payment_intent_incompatible_payment_method",
					"payment_intent_invalid_parameter",
					"payment_intent_konbini_rejected_confirmation_number",
					"payment_intent_mandate_invalid",
					"payment_intent_payment_attempt_expired",
					"payment_intent_payment_attempt_failed",
					"payment_intent_unexpected_state",
					"payment_method_bank_account_already_verified",
					"payment_method_bank_account_blocked",
					"payment_method_billing_details_address_missing",
					"payment_method_configuration_failures",
					"payment_method_currency_mismatch",
					"payment_method_customer_decline",
					"payment_method_invalid_parameter",
					"payment_method_invalid_parameter_testmode",
					"payment_method_microdeposit_failed",
					"payment_method_microdeposit_verification_amounts_invalid",
					"payment_method_microdeposit_verification_amounts_mismatch",
					"payment_method_microdeposit_verification_attempts_exceeded",
					"payment_method_microdeposit_verification_descriptor_code_mismatch",
					"payment_method_microdeposit_verification_timeout",
					"payment_method_not_available",
					"payment_method_provider_decline",
					"payment_method_provider_timeout",
					"payment_method_unactivated",
					"payment_method_unexpected_state",
					"payment_method_unsupported_type",
					"payout_reconciliation_not_ready",
					"payouts_limit_exceeded",
					"payouts_not_allowed",
					"platform_account_required",
					"platform_api_key_expired",
					"postal_code_invalid",
					"processing_error",
					"product_inactive",
					"progressive_onboarding_limit_exceeded",
					"rate_limit",
					"refer_to_customer",
					"refund_disputed_payment",
					"resource_already_exists",
					"resource_missing",
					"return_intent_already_processed",
					"routing_number_invalid",
					"secret_key_required",
					"sepa_unsupported_account",
					"setup_attempt_failed",
					"setup_intent_authentication_failure",
					"setup_intent_invalid_parameter",
					"setup_intent_mandate_invalid",
					"setup_intent_setup_attempt_expired",
					"setup_intent_unexpected_state",
					"shipping_address_invalid",
					"shipping_calculation_failed",
					"sku_inactive",
					"state_unsupported",
					"status_transition_invalid",
					"stripe_tax_inactive",
					"tax_id_invalid",
					"taxes_calculation_failed",
					"terminal_location_country_unsupported",
					"terminal_reader_busy",
					"terminal_reader_hardware_fault",
					"terminal_reader_invalid_location_for_activation",
					"terminal_reader_invalid_location_for_payment",
					"terminal_reader_offline",
					"terminal_reader_timeout",
					"testmode_charges_only",
					"tls_version_unsupported",
					"token_already_used",
					"token_card_network_invalid",
					"token_in_use",
					"transfer_source_balance_parameters_mismatch",
					"transfers_not_allowed",
					"url_invalid"
				]
			},
			"stripe.Stripe.SetupIntent.AutomaticPaymentMethods.AllowRedirects": {
				"type": "string",
				"enum": [
					"always",
					"never"
				]
			},
			"stripe.Stripe.SetupIntent.AutomaticPaymentMethods": {
				"properties": {
					"allow_redirects": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.AutomaticPaymentMethods.AllowRedirects",
						"description": "Controls whether this SetupIntent will accept redirect-based payment methods.\n\nRedirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/setup_intents/confirm) this SetupIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the setup."
					},
					"enabled": {
						"type": "boolean",
						"nullable": true,
						"description": "Automatically calculates compatible payment methods"
					}
				},
				"required": [
					"enabled"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.CancellationReason": {
				"type": "string",
				"enum": [
					"abandoned",
					"duplicate",
					"requested_by_customer"
				]
			},
			"stripe.Stripe.SetupIntent.FlowDirection": {
				"type": "string",
				"enum": [
					"inbound",
					"outbound"
				]
			},
			"stripe.Stripe.SetupIntent.LastSetupError.Code": {
				"type": "string",
				"enum": [
					"account_closed",
					"account_country_invalid_address",
					"account_error_country_change_requires_additional_steps",
					"account_information_mismatch",
					"account_invalid",
					"account_number_invalid",
					"acss_debit_session_incomplete",
					"alipay_upgrade_required",
					"amount_too_large",
					"amount_too_small",
					"api_key_expired",
					"application_fees_not_allowed",
					"authentication_required",
					"balance_insufficient",
					"balance_invalid_parameter",
					"bank_account_bad_routing_numbers",
					"bank_account_declined",
					"bank_account_exists",
					"bank_account_restricted",
					"bank_account_unusable",
					"bank_account_unverified",
					"bank_account_verification_failed",
					"billing_invalid_mandate",
					"bitcoin_upgrade_required",
					"capture_charge_authorization_expired",
					"capture_unauthorized_payment",
					"card_decline_rate_limit_exceeded",
					"card_declined",
					"cardholder_phone_number_required",
					"charge_already_captured",
					"charge_already_refunded",
					"charge_disputed",
					"charge_exceeds_source_limit",
					"charge_exceeds_transaction_limit",
					"charge_expired_for_capture",
					"charge_invalid_parameter",
					"charge_not_refundable",
					"clearing_code_unsupported",
					"country_code_invalid",
					"country_unsupported",
					"coupon_expired",
					"customer_max_payment_methods",
					"customer_max_subscriptions",
					"customer_tax_location_invalid",
					"debit_not_authorized",
					"email_invalid",
					"expired_card",
					"financial_connections_account_inactive",
					"financial_connections_no_successful_transaction_refresh",
					"forwarding_api_inactive",
					"forwarding_api_invalid_parameter",
					"forwarding_api_upstream_connection_error",
					"forwarding_api_upstream_connection_timeout",
					"idempotency_key_in_use",
					"incorrect_address",
					"incorrect_cvc",
					"incorrect_number",
					"incorrect_zip",
					"instant_payouts_config_disabled",
					"instant_payouts_currency_disabled",
					"instant_payouts_limit_exceeded",
					"instant_payouts_unsupported",
					"insufficient_funds",
					"intent_invalid_state",
					"intent_verification_method_missing",
					"invalid_card_type",
					"invalid_characters",
					"invalid_charge_amount",
					"invalid_cvc",
					"invalid_expiry_month",
					"invalid_expiry_year",
					"invalid_mandate_reference_prefix_format",
					"invalid_number",
					"invalid_source_usage",
					"invalid_tax_location",
					"invoice_no_customer_line_items",
					"invoice_no_payment_method_types",
					"invoice_no_subscription_line_items",
					"invoice_not_editable",
					"invoice_on_behalf_of_not_editable",
					"invoice_payment_intent_requires_action",
					"invoice_upcoming_none",
					"livemode_mismatch",
					"lock_timeout",
					"missing",
					"no_account",
					"not_allowed_on_standard_account",
					"out_of_inventory",
					"ownership_declaration_not_allowed",
					"parameter_invalid_empty",
					"parameter_invalid_integer",
					"parameter_invalid_string_blank",
					"parameter_invalid_string_empty",
					"parameter_missing",
					"parameter_unknown",
					"parameters_exclusive",
					"payment_intent_action_required",
					"payment_intent_authentication_failure",
					"payment_intent_incompatible_payment_method",
					"payment_intent_invalid_parameter",
					"payment_intent_konbini_rejected_confirmation_number",
					"payment_intent_mandate_invalid",
					"payment_intent_payment_attempt_expired",
					"payment_intent_payment_attempt_failed",
					"payment_intent_unexpected_state",
					"payment_method_bank_account_already_verified",
					"payment_method_bank_account_blocked",
					"payment_method_billing_details_address_missing",
					"payment_method_configuration_failures",
					"payment_method_currency_mismatch",
					"payment_method_customer_decline",
					"payment_method_invalid_parameter",
					"payment_method_invalid_parameter_testmode",
					"payment_method_microdeposit_failed",
					"payment_method_microdeposit_verification_amounts_invalid",
					"payment_method_microdeposit_verification_amounts_mismatch",
					"payment_method_microdeposit_verification_attempts_exceeded",
					"payment_method_microdeposit_verification_descriptor_code_mismatch",
					"payment_method_microdeposit_verification_timeout",
					"payment_method_not_available",
					"payment_method_provider_decline",
					"payment_method_provider_timeout",
					"payment_method_unactivated",
					"payment_method_unexpected_state",
					"payment_method_unsupported_type",
					"payout_reconciliation_not_ready",
					"payouts_limit_exceeded",
					"payouts_not_allowed",
					"platform_account_required",
					"platform_api_key_expired",
					"postal_code_invalid",
					"processing_error",
					"product_inactive",
					"progressive_onboarding_limit_exceeded",
					"rate_limit",
					"refer_to_customer",
					"refund_disputed_payment",
					"resource_already_exists",
					"resource_missing",
					"return_intent_already_processed",
					"routing_number_invalid",
					"secret_key_required",
					"sepa_unsupported_account",
					"setup_attempt_failed",
					"setup_intent_authentication_failure",
					"setup_intent_invalid_parameter",
					"setup_intent_mandate_invalid",
					"setup_intent_setup_attempt_expired",
					"setup_intent_unexpected_state",
					"shipping_address_invalid",
					"shipping_calculation_failed",
					"sku_inactive",
					"state_unsupported",
					"status_transition_invalid",
					"stripe_tax_inactive",
					"tax_id_invalid",
					"taxes_calculation_failed",
					"terminal_location_country_unsupported",
					"terminal_reader_busy",
					"terminal_reader_hardware_fault",
					"terminal_reader_invalid_location_for_activation",
					"terminal_reader_invalid_location_for_payment",
					"terminal_reader_offline",
					"terminal_reader_timeout",
					"testmode_charges_only",
					"tls_version_unsupported",
					"token_already_used",
					"token_card_network_invalid",
					"token_in_use",
					"transfer_source_balance_parameters_mismatch",
					"transfers_not_allowed",
					"url_invalid"
				]
			},
			"stripe.Stripe.SetupIntent": {
				"description": "A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.\nFor example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.\nLater, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.\n\nCreate a SetupIntent when you're ready to collect your customer's payment credentials.\nDon't maintain long-lived, unconfirmed SetupIntents because they might not be valid.\nThe SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides\nyou through the setup process.\n\nSuccessful SetupIntents result in payment credentials that are optimized for future payments.\nFor example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through\n[Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection\nto streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).\nIf you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),\nit automatically attaches the resulting payment method to that Customer after successful setup.\nWe recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on\nPaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.\n\nBy using SetupIntents, you can reduce friction for your customers, even as regulations change over time.\n\nRelated guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"setup_intent"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"application": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Application"
							}
						],
						"nullable": true,
						"description": "ID of the Connect application that created the SetupIntent."
					},
					"attach_to_self": {
						"type": "boolean",
						"description": "If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.\n\nIt can only be used for this Stripe Account's own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer."
					},
					"automatic_payment_methods": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.AutomaticPaymentMethods"
							}
						],
						"nullable": true,
						"description": "Settings for dynamic payment methods compatible with this Setup Intent"
					},
					"cancellation_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.CancellationReason"
							}
						],
						"nullable": true,
						"description": "Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`."
					},
					"client_secret": {
						"type": "string",
						"nullable": true,
						"description": "The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.\n\nThe client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomer"
							}
						],
						"nullable": true,
						"description": "ID of the Customer this SetupIntent belongs to, if one exists.\n\nIf present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "An arbitrary string attached to the object. Often useful for displaying to users."
					},
					"flow_directions": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.FlowDirection"
						},
						"type": "array",
						"nullable": true,
						"description": "Indicates the directions of money movement for which this payment method is intended to be used.\n\nInclude `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes."
					},
					"last_setup_error": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.LastSetupError"
							}
						],
						"nullable": true,
						"description": "The error encountered in the previous SetupIntent confirmation."
					},
					"latest_attempt": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt"
							}
						],
						"nullable": true,
						"description": "The most recent SetupAttempt for this SetupIntent."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"mandate": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Mandate"
							}
						],
						"nullable": true,
						"description": "ID of the multi use Mandate generated by the SetupIntent."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"next_action": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.NextAction"
							}
						],
						"nullable": true,
						"description": "If present, this property tells you what actions you need to take in order for your customer to continue payment setup."
					},
					"on_behalf_of": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"nullable": true,
						"description": "The account (if any) for which the setup is intended."
					},
					"payment_method": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"nullable": true,
						"description": "ID of the payment method used with this SetupIntent. If the payment method is `card_present` and isn't a digital wallet, then the [generated_card](https://docs.stripe.com/api/setup_attempts/object#setup_attempt_object-payment_method_details-card_present-generated_card) associated with the `latest_attempt` is attached to the Customer instead."
					},
					"payment_method_configuration_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodConfigurationDetails"
							}
						],
						"nullable": true,
						"description": "Information about the payment method configuration used for this Setup Intent."
					},
					"payment_method_options": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions"
							}
						],
						"nullable": true,
						"description": "Payment method-specific configuration for this SetupIntent."
					},
					"payment_method_types": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The list of payment method types (e.g. card) that this SetupIntent is allowed to set up."
					},
					"single_use_mandate": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Mandate"
							}
						],
						"nullable": true,
						"description": "ID of the single_use Mandate generated by the SetupIntent."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.Status",
						"description": "[Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`."
					},
					"usage": {
						"type": "string",
						"description": "Indicates how the payment method is intended to be used in the future.\n\nUse `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`."
					}
				},
				"required": [
					"id",
					"object",
					"application",
					"automatic_payment_methods",
					"cancellation_reason",
					"client_secret",
					"created",
					"customer",
					"description",
					"flow_directions",
					"last_setup_error",
					"latest_attempt",
					"livemode",
					"mandate",
					"metadata",
					"next_action",
					"on_behalf_of",
					"payment_method",
					"payment_method_configuration_details",
					"payment_method_options",
					"payment_method_types",
					"single_use_mandate",
					"status",
					"usage"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.LastSetupError.Type": {
				"type": "string",
				"enum": [
					"api_error",
					"card_error",
					"idempotency_error",
					"invalid_request_error"
				]
			},
			"stripe.Stripe.SetupIntent.LastSetupError": {
				"properties": {
					"charge": {
						"type": "string",
						"description": "For card errors, the ID of the failed charge."
					},
					"code": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.LastSetupError.Code",
						"description": "For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported."
					},
					"decline_code": {
						"type": "string",
						"description": "For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one."
					},
					"doc_url": {
						"type": "string",
						"description": "A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported."
					},
					"message": {
						"type": "string",
						"description": "A human-readable message providing more details about the error. For card errors, these messages can be shown to your users."
					},
					"param": {
						"type": "string",
						"description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field."
					},
					"payment_intent": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent",
						"description": "A PaymentIntent guides you through the process of collecting a payment from your customer.\nWe recommend that you create exactly one PaymentIntent for each order or\ncustomer session in your system. You can reference the PaymentIntent later to\nsee the history of payment attempts for a particular session.\n\nA PaymentIntent transitions through\n[multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)\nthroughout its lifetime as it interfaces with Stripe.js to perform\nauthentication flows and ultimately creates at most one successful charge.\n\nRelated guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)"
					},
					"payment_method": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod",
						"description": "PaymentMethod objects represent your customer's payment instruments.\nYou can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to\nCustomer objects to store instrument details for future payments.\n\nRelated guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios)."
					},
					"payment_method_type": {
						"type": "string",
						"description": "If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors."
					},
					"request_log_url": {
						"type": "string",
						"description": "A URL to the request log entry in your dashboard."
					},
					"setup_intent": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent",
						"description": "A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.\nFor example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.\nLater, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.\n\nCreate a SetupIntent when you're ready to collect your customer's payment credentials.\nDon't maintain long-lived, unconfirmed SetupIntents because they might not be valid.\nThe SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides\nyou through the setup process.\n\nSuccessful SetupIntents result in payment credentials that are optimized for future payments.\nFor example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through\n[Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection\nto streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).\nIf you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),\nit automatically attaches the resulting payment method to that Customer after successful setup.\nWe recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on\nPaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.\n\nBy using SetupIntents, you can reduce friction for your customers, even as regulations change over time.\n\nRelated guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)"
					},
					"source": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerSource"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.LastSetupError.Type",
						"description": "The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt": {
				"description": "A SetupAttempt describes one attempted confirmation of a SetupIntent,\nwhether that confirmation is successful or unsuccessful. You can use\nSetupAttempts to inspect details of a specific attempt at setting up a\npayment method using a SetupIntent.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"setup_attempt"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"application": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Application"
							}
						],
						"nullable": true,
						"description": "The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation."
					},
					"attach_to_self": {
						"type": "boolean",
						"description": "If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.\n\nIt can only be used for this Stripe Account's own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomer"
							}
						],
						"nullable": true,
						"description": "The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation."
					},
					"flow_directions": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.FlowDirection"
						},
						"type": "array",
						"nullable": true,
						"description": "Indicates the directions of money movement for which this payment method is intended to be used.\n\nInclude `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"on_behalf_of": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"nullable": true,
						"description": "The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation."
					},
					"payment_method": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"description": "ID of the payment method used with this SetupAttempt."
					},
					"payment_method_details": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.PaymentMethodDetails"
					},
					"setup_error": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.SetupError"
							}
						],
						"nullable": true,
						"description": "The error encountered during this attempt to confirm the SetupIntent, if any."
					},
					"setup_intent": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupIntent"
							}
						],
						"description": "ID of the SetupIntent that this attempt belongs to."
					},
					"status": {
						"type": "string",
						"description": "Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`."
					},
					"usage": {
						"type": "string",
						"description": "The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`."
					}
				},
				"required": [
					"id",
					"object",
					"application",
					"created",
					"customer",
					"flow_directions",
					"livemode",
					"on_behalf_of",
					"payment_method",
					"payment_method_details",
					"setup_error",
					"setup_intent",
					"status",
					"usage"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.NextAction.CashappHandleRedirectOrDisplayQrCode.QrCode": {
				"properties": {
					"expires_at": {
						"type": "number",
						"format": "double",
						"description": "The date (unix timestamp) when the QR code expires."
					},
					"image_url_png": {
						"type": "string",
						"description": "The image_url_png string used to render QR code"
					},
					"image_url_svg": {
						"type": "string",
						"description": "The image_url_svg string used to render QR code"
					}
				},
				"required": [
					"expires_at",
					"image_url_png",
					"image_url_svg"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.NextAction.CashappHandleRedirectOrDisplayQrCode": {
				"properties": {
					"hosted_instructions_url": {
						"type": "string",
						"description": "The URL to the hosted Cash App Pay instructions page, which allows customers to view the QR code, and supports QR code refreshing on expiration."
					},
					"mobile_auth_url": {
						"type": "string",
						"description": "The url for mobile redirect based auth"
					},
					"qr_code": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.NextAction.CashappHandleRedirectOrDisplayQrCode.QrCode"
					}
				},
				"required": [
					"hosted_instructions_url",
					"mobile_auth_url",
					"qr_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.NextAction.RedirectToUrl": {
				"properties": {
					"return_url": {
						"type": "string",
						"nullable": true,
						"description": "If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion."
					},
					"url": {
						"type": "string",
						"nullable": true,
						"description": "The URL you must redirect your customer to in order to authenticate."
					}
				},
				"required": [
					"return_url",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.NextAction.UseStripeSdk": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.NextAction.VerifyWithMicrodeposits.MicrodepositType": {
				"type": "string",
				"enum": [
					"amounts",
					"descriptor_code"
				]
			},
			"stripe.Stripe.SetupIntent.NextAction.VerifyWithMicrodeposits": {
				"properties": {
					"arrival_date": {
						"type": "number",
						"format": "double",
						"description": "The timestamp when the microdeposits are expected to land."
					},
					"hosted_verification_url": {
						"type": "string",
						"description": "The URL for the hosted verification page, which allows customers to verify their bank account."
					},
					"microdeposit_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.NextAction.VerifyWithMicrodeposits.MicrodepositType"
							}
						],
						"nullable": true,
						"description": "The type of the microdeposit sent to the customer. Used to distinguish between different verification methods."
					}
				},
				"required": [
					"arrival_date",
					"hosted_verification_url",
					"microdeposit_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.NextAction": {
				"properties": {
					"cashapp_handle_redirect_or_display_qr_code": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.NextAction.CashappHandleRedirectOrDisplayQrCode"
					},
					"redirect_to_url": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.NextAction.RedirectToUrl"
					},
					"type": {
						"type": "string",
						"description": "Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`."
					},
					"use_stripe_sdk": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.NextAction.UseStripeSdk",
						"description": "When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js."
					},
					"verify_with_microdeposits": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.NextAction.VerifyWithMicrodeposits"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodConfigurationDetails": {
				"properties": {
					"id": {
						"type": "string",
						"description": "ID of the payment method configuration used."
					},
					"parent": {
						"type": "string",
						"nullable": true,
						"description": "ID of the parent payment method configuration used."
					}
				},
				"required": [
					"id",
					"parent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.Currency": {
				"type": "string",
				"enum": [
					"cad",
					"usd"
				]
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions.DefaultFor": {
				"type": "string",
				"enum": [
					"invoice",
					"subscription"
				]
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions.PaymentSchedule": {
				"type": "string",
				"enum": [
					"combined",
					"interval",
					"sporadic"
				]
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType": {
				"type": "string",
				"enum": [
					"business",
					"personal"
				]
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions": {
				"properties": {
					"custom_mandate_url": {
						"type": "string",
						"description": "A URL for custom mandate text"
					},
					"default_for": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions.DefaultFor"
						},
						"type": "array",
						"description": "List of Stripe products where this mandate can be selected automatically."
					},
					"interval_description": {
						"type": "string",
						"nullable": true,
						"description": "Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'."
					},
					"payment_schedule": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions.PaymentSchedule"
							}
						],
						"nullable": true,
						"description": "Payment schedule for the mandate."
					},
					"transaction_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType"
							}
						],
						"nullable": true,
						"description": "Transaction type of the mandate."
					}
				},
				"required": [
					"interval_description",
					"payment_schedule",
					"transaction_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.VerificationMethod": {
				"type": "string",
				"enum": [
					"automatic",
					"instant",
					"microdeposits"
				]
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit": {
				"properties": {
					"currency": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.Currency"
							}
						],
						"nullable": true,
						"description": "Currency supported by the bank account"
					},
					"mandate_options": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions"
					},
					"verification_method": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.VerificationMethod",
						"description": "Bank account verification method."
					}
				},
				"required": [
					"currency"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.AmazonPay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.BacsDebit.MandateOptions": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.BacsDebit": {
				"properties": {
					"mandate_options": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.BacsDebit.MandateOptions"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.MandateOptions.AmountType": {
				"type": "string",
				"enum": [
					"fixed",
					"maximum"
				]
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.MandateOptions.Interval": {
				"type": "string",
				"enum": [
					"day",
					"month",
					"sporadic",
					"week",
					"year"
				]
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.MandateOptions": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount to be charged for future payments."
					},
					"amount_type": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.MandateOptions.AmountType",
						"description": "One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "A description of the mandate or subscription that is meant to be displayed to the customer."
					},
					"end_date": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date."
					},
					"interval": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.MandateOptions.Interval",
						"description": "Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`."
					},
					"interval_count": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`."
					},
					"reference": {
						"type": "string",
						"description": "Unique identifier for the mandate or subscription."
					},
					"start_date": {
						"type": "number",
						"format": "double",
						"description": "Start date of the mandate or subscription. Start date should not be lesser than yesterday."
					},
					"supported_types": {
						"items": {
							"type": "string",
							"enum": [
								"india"
							],
							"nullable": false
						},
						"type": "array",
						"nullable": true,
						"description": "Specifies the type of mandates supported. Possible values are `india`."
					}
				},
				"required": [
					"amount",
					"amount_type",
					"currency",
					"description",
					"end_date",
					"interval",
					"interval_count",
					"reference",
					"start_date",
					"supported_types"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.Network": {
				"type": "string",
				"enum": [
					"amex",
					"cartes_bancaires",
					"diners",
					"discover",
					"eftpos_au",
					"girocard",
					"interac",
					"jcb",
					"mastercard",
					"unionpay",
					"unknown",
					"visa"
				]
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.RequestThreeDSecure": {
				"type": "string",
				"enum": [
					"any",
					"automatic",
					"challenge"
				]
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.Card": {
				"properties": {
					"mandate_options": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.MandateOptions"
							}
						],
						"nullable": true,
						"description": "Configuration options for setting up an eMandate for cards issued in India."
					},
					"network": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.Network"
							}
						],
						"nullable": true,
						"description": "Selected network to process this SetupIntent on. Depends on the available networks of the card attached to the setup intent. Can be only set confirm-time."
					},
					"request_three_d_secure": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.RequestThreeDSecure"
							}
						],
						"nullable": true,
						"description": "We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine."
					}
				},
				"required": [
					"mandate_options",
					"network",
					"request_three_d_secure"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.CardPresent": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.Link": {
				"properties": {
					"persistent_token": {
						"type": "string",
						"nullable": true,
						"description": "[Deprecated] This is a legacy parameter that no longer has any function.",
						"deprecated": true
					}
				},
				"required": [
					"persistent_token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.Paypal": {
				"properties": {
					"billing_agreement_id": {
						"type": "string",
						"nullable": true,
						"description": "The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer."
					}
				},
				"required": [
					"billing_agreement_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.SepaDebit.MandateOptions": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.SepaDebit": {
				"properties": {
					"mandate_options": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.SepaDebit.MandateOptions"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory": {
				"type": "string",
				"enum": [
					"checking",
					"savings"
				]
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters": {
				"properties": {
					"account_subcategories": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory"
						},
						"type": "array",
						"description": "The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission": {
				"type": "string",
				"enum": [
					"balances",
					"ownership",
					"payment_method",
					"transactions"
				]
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch": {
				"type": "string",
				"enum": [
					"balances",
					"ownership",
					"transactions"
				]
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections": {
				"properties": {
					"filters": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters"
					},
					"permissions": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission"
						},
						"type": "array",
						"description": "The list of permissions to request. The `payment_method` permission must be included."
					},
					"prefetch": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch"
						},
						"type": "array",
						"nullable": true,
						"description": "Data features requested to be retrieved upon account creation."
					},
					"return_url": {
						"type": "string",
						"description": "For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app."
					}
				},
				"required": [
					"prefetch"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.MandateOptions": {
				"properties": {
					"collection_method": {
						"type": "string",
						"enum": [
							"paper"
						],
						"nullable": false,
						"description": "Mandate collection method"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.VerificationMethod": {
				"type": "string",
				"enum": [
					"automatic",
					"instant",
					"microdeposits"
				]
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount": {
				"properties": {
					"financial_connections": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections"
					},
					"mandate_options": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.MandateOptions"
					},
					"verification_method": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.VerificationMethod",
						"description": "Bank account verification method."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.PaymentMethodOptions": {
				"properties": {
					"acss_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit"
					},
					"amazon_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.AmazonPay"
					},
					"bacs_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.BacsDebit"
					},
					"card": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.Card"
					},
					"card_present": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.CardPresent"
					},
					"link": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.Link"
					},
					"paypal": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.Paypal"
					},
					"sepa_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.SepaDebit"
					},
					"us_bank_account": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupIntent.Status": {
				"type": "string",
				"enum": [
					"canceled",
					"processing",
					"requires_action",
					"requires_confirmation",
					"requires_payment_method",
					"succeeded"
				]
			},
			"stripe.Stripe.Invoice.LastFinalizationError.Type": {
				"type": "string",
				"enum": [
					"api_error",
					"card_error",
					"idempotency_error",
					"invalid_request_error"
				]
			},
			"stripe.Stripe.Invoice.LastFinalizationError": {
				"properties": {
					"charge": {
						"type": "string",
						"description": "For card errors, the ID of the failed charge."
					},
					"code": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.LastFinalizationError.Code",
						"description": "For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported."
					},
					"decline_code": {
						"type": "string",
						"description": "For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one."
					},
					"doc_url": {
						"type": "string",
						"description": "A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported."
					},
					"message": {
						"type": "string",
						"description": "A human-readable message providing more details about the error. For card errors, these messages can be shown to your users."
					},
					"param": {
						"type": "string",
						"description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field."
					},
					"payment_intent": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent",
						"description": "A PaymentIntent guides you through the process of collecting a payment from your customer.\nWe recommend that you create exactly one PaymentIntent for each order or\ncustomer session in your system. You can reference the PaymentIntent later to\nsee the history of payment attempts for a particular session.\n\nA PaymentIntent transitions through\n[multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)\nthroughout its lifetime as it interfaces with Stripe.js to perform\nauthentication flows and ultimately creates at most one successful charge.\n\nRelated guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)"
					},
					"payment_method": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod",
						"description": "PaymentMethod objects represent your customer's payment instruments.\nYou can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to\nCustomer objects to store instrument details for future payments.\n\nRelated guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios)."
					},
					"payment_method_type": {
						"type": "string",
						"description": "If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors."
					},
					"request_log_url": {
						"type": "string",
						"description": "A URL to the request log entry in your dashboard."
					},
					"setup_intent": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent",
						"description": "A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.\nFor example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.\nLater, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.\n\nCreate a SetupIntent when you're ready to collect your customer's payment credentials.\nDon't maintain long-lived, unconfirmed SetupIntents because they might not be valid.\nThe SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides\nyou through the setup process.\n\nSuccessful SetupIntents result in payment credentials that are optimized for future payments.\nFor example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through\n[Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection\nto streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).\nIf you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),\nit automatically attaches the resulting payment method to that Customer after successful setup.\nWe recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on\nPaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.\n\nBy using SetupIntents, you can reduce friction for your customers, even as regulations change over time.\n\nRelated guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)"
					},
					"source": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerSource"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.LastFinalizationError.Type",
						"description": "The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.InvoiceLineItem.DiscountAmount": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The amount, in cents (or local equivalent), of the discount."
					},
					"discount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Discount"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedDiscount"
							}
						],
						"description": "The discount that was applied to get this discount amount."
					}
				},
				"required": [
					"amount",
					"discount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.InvoiceItem.Period": {
				"properties": {
					"end": {
						"type": "number",
						"format": "double",
						"description": "The end of the period, which must be greater than or equal to the start. This value is inclusive."
					},
					"start": {
						"type": "number",
						"format": "double",
						"description": "The start of the period. This value is inclusive."
					}
				},
				"required": [
					"end",
					"start"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Plan.AggregateUsage": {
				"type": "string",
				"enum": [
					"last_during_period",
					"last_ever",
					"max",
					"sum"
				]
			},
			"stripe.Stripe.Plan.BillingScheme": {
				"type": "string",
				"enum": [
					"per_unit",
					"tiered"
				]
			},
			"stripe.Stripe.Plan.Interval": {
				"type": "string",
				"enum": [
					"day",
					"month",
					"week",
					"year"
				]
			},
			"stripe.Stripe.Price.BillingScheme": {
				"type": "string",
				"enum": [
					"per_unit",
					"tiered"
				]
			},
			"stripe.Stripe.Price.CurrencyOptions.CustomUnitAmount": {
				"properties": {
					"maximum": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The maximum unit amount the customer can specify for this item."
					},
					"minimum": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount."
					},
					"preset": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The starting unit amount which can be updated by the customer."
					}
				},
				"required": [
					"maximum",
					"minimum",
					"preset"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Price.CurrencyOptions.TaxBehavior": {
				"type": "string",
				"enum": [
					"exclusive",
					"inclusive",
					"unspecified"
				]
			},
			"stripe.Stripe.Price.CurrencyOptions.Tier": {
				"properties": {
					"flat_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Price for the entire tier."
					},
					"flat_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "Same as `flat_amount`, but contains a decimal value with at most 12 decimal places."
					},
					"unit_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Per unit price for units relevant to the tier."
					},
					"unit_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "Same as `unit_amount`, but contains a decimal value with at most 12 decimal places."
					},
					"up_to": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Up to and including to this quantity will be contained in the tier."
					}
				},
				"required": [
					"flat_amount",
					"flat_amount_decimal",
					"unit_amount",
					"unit_amount_decimal",
					"up_to"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Price.CurrencyOptions": {
				"properties": {
					"custom_unit_amount": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Price.CurrencyOptions.CustomUnitAmount"
							}
						],
						"nullable": true,
						"description": "When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links."
					},
					"tax_behavior": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Price.CurrencyOptions.TaxBehavior"
							}
						],
						"nullable": true,
						"description": "Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed."
					},
					"tiers": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Price.CurrencyOptions.Tier"
						},
						"type": "array",
						"description": "Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`."
					},
					"unit_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`."
					},
					"unit_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`."
					}
				},
				"required": [
					"custom_unit_amount",
					"tax_behavior",
					"unit_amount",
					"unit_amount_decimal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Price.CustomUnitAmount": {
				"properties": {
					"maximum": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The maximum unit amount the customer can specify for this item."
					},
					"minimum": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount."
					},
					"preset": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The starting unit amount which can be updated by the customer."
					}
				},
				"required": [
					"maximum",
					"minimum",
					"preset"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Product": {
				"description": "Products describe the specific goods or services you offer to your customers.\nFor example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.\nThey can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Payment Links, Checkout, and Subscriptions.\n\nRelated guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),\n[share a Payment Link](https://stripe.com/docs/payment-links),\n[accept payments with Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),\nand more about [Products and Prices](https://stripe.com/docs/products-prices/overview)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"product"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"active": {
						"type": "boolean",
						"description": "Whether the product is currently available for purchase."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"default_price": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Price"
							}
						],
						"nullable": true,
						"description": "The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes."
					},
					"images": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "A list of up to 8 URLs of images for this product, meant to be displayable to the customer."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"marketing_features": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Product.MarketingFeature"
						},
						"type": "array",
						"description": "A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table)."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"name": {
						"type": "string",
						"description": "The product's name, meant to be displayable to the customer."
					},
					"package_dimensions": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Product.PackageDimensions"
							}
						],
						"nullable": true,
						"description": "The dimensions of this product for shipping purposes."
					},
					"shippable": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether this product is shipped (i.e., physical goods)."
					},
					"statement_descriptor": {
						"type": "string",
						"nullable": true,
						"description": "Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. Only used for subscription payments."
					},
					"tax_code": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.TaxCode"
							}
						],
						"nullable": true,
						"description": "A [tax code](https://stripe.com/docs/tax/tax-categories) ID."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Product.Type",
						"description": "The type of the product. The product is either of type `good`, which is eligible for use with Orders and SKUs, or `service`, which is eligible for use with Subscriptions and Plans."
					},
					"unit_label": {
						"type": "string",
						"nullable": true,
						"description": "A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal."
					},
					"updated": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was last updated. Measured in seconds since the Unix epoch."
					},
					"url": {
						"type": "string",
						"nullable": true,
						"description": "A URL of a publicly-accessible webpage for this product."
					}
				},
				"required": [
					"id",
					"object",
					"active",
					"created",
					"description",
					"images",
					"livemode",
					"marketing_features",
					"metadata",
					"name",
					"package_dimensions",
					"shippable",
					"tax_code",
					"type",
					"updated",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.DeletedProduct": {
				"description": "The DeletedProduct object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"product"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"deleted": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false,
						"description": "Always true for a deleted object"
					}
				},
				"required": [
					"id",
					"object",
					"deleted"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Price.Recurring.AggregateUsage": {
				"type": "string",
				"enum": [
					"last_during_period",
					"last_ever",
					"max",
					"sum"
				]
			},
			"stripe.Stripe.Price.Recurring.Interval": {
				"type": "string",
				"enum": [
					"day",
					"month",
					"week",
					"year"
				]
			},
			"stripe.Stripe.Price.Recurring.UsageType": {
				"type": "string",
				"enum": [
					"licensed",
					"metered"
				]
			},
			"stripe.Stripe.Price.Recurring": {
				"properties": {
					"aggregate_usage": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Price.Recurring.AggregateUsage"
							}
						],
						"nullable": true,
						"description": "Specifies a usage aggregation strategy for prices of `usage_type=metered`. Defaults to `sum`."
					},
					"interval": {
						"$ref": "#/components/schemas/stripe.Stripe.Price.Recurring.Interval",
						"description": "The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`."
					},
					"interval_count": {
						"type": "number",
						"format": "double",
						"description": "The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months."
					},
					"meter": {
						"type": "string",
						"nullable": true,
						"description": "The meter tracking the usage of a metered price"
					},
					"trial_period_days": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Default number of trial days when subscribing a customer to this price using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan)."
					},
					"usage_type": {
						"$ref": "#/components/schemas/stripe.Stripe.Price.Recurring.UsageType",
						"description": "Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`."
					}
				},
				"required": [
					"aggregate_usage",
					"interval",
					"interval_count",
					"meter",
					"trial_period_days",
					"usage_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Price.TaxBehavior": {
				"type": "string",
				"enum": [
					"exclusive",
					"inclusive",
					"unspecified"
				]
			},
			"stripe.Stripe.Price.Tier": {
				"properties": {
					"flat_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Price for the entire tier."
					},
					"flat_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "Same as `flat_amount`, but contains a decimal value with at most 12 decimal places."
					},
					"unit_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Per unit price for units relevant to the tier."
					},
					"unit_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "Same as `unit_amount`, but contains a decimal value with at most 12 decimal places."
					},
					"up_to": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Up to and including to this quantity will be contained in the tier."
					}
				},
				"required": [
					"flat_amount",
					"flat_amount_decimal",
					"unit_amount",
					"unit_amount_decimal",
					"up_to"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Price.TiersMode": {
				"type": "string",
				"enum": [
					"graduated",
					"volume"
				]
			},
			"stripe.Stripe.Price.TransformQuantity.Round": {
				"type": "string",
				"enum": [
					"down",
					"up"
				]
			},
			"stripe.Stripe.Price.TransformQuantity": {
				"properties": {
					"divide_by": {
						"type": "number",
						"format": "double",
						"description": "Divide usage by this number."
					},
					"round": {
						"$ref": "#/components/schemas/stripe.Stripe.Price.TransformQuantity.Round",
						"description": "After division, either round the result `up` or `down`."
					}
				},
				"required": [
					"divide_by",
					"round"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Price.Type": {
				"type": "string",
				"enum": [
					"one_time",
					"recurring"
				]
			},
			"stripe.Stripe.Price": {
				"description": "Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.\n[Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single \"gold\" product that has prices for $10/month, $100/year, and €9 once.\n\nRelated guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"price"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"active": {
						"type": "boolean",
						"description": "Whether the price can be used for new purchases."
					},
					"billing_scheme": {
						"$ref": "#/components/schemas/stripe.Stripe.Price.BillingScheme",
						"description": "Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"currency_options": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/stripe.Stripe.Price.CurrencyOptions"
						},
						"type": "object",
						"description": "Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies)."
					},
					"custom_unit_amount": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Price.CustomUnitAmount"
							}
						],
						"nullable": true,
						"description": "When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"lookup_key": {
						"type": "string",
						"nullable": true,
						"description": "A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"nickname": {
						"type": "string",
						"nullable": true,
						"description": "A brief description of the price, hidden from customers."
					},
					"product": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Product"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedProduct"
							}
						],
						"description": "The ID of the product this price is associated with."
					},
					"recurring": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Price.Recurring"
							}
						],
						"nullable": true,
						"description": "The recurring components of a price such as `interval` and `usage_type`."
					},
					"tax_behavior": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Price.TaxBehavior"
							}
						],
						"nullable": true,
						"description": "Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed."
					},
					"tiers": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Price.Tier"
						},
						"type": "array",
						"description": "Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`."
					},
					"tiers_mode": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Price.TiersMode"
							}
						],
						"nullable": true,
						"description": "Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows."
					},
					"transform_quantity": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Price.TransformQuantity"
							}
						],
						"nullable": true,
						"description": "Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Price.Type",
						"description": "One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase."
					},
					"unit_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`."
					},
					"unit_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`."
					}
				},
				"required": [
					"id",
					"object",
					"active",
					"billing_scheme",
					"created",
					"currency",
					"custom_unit_amount",
					"livemode",
					"lookup_key",
					"metadata",
					"nickname",
					"product",
					"recurring",
					"tax_behavior",
					"tiers_mode",
					"transform_quantity",
					"type",
					"unit_amount",
					"unit_amount_decimal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Product.MarketingFeature": {
				"properties": {
					"name": {
						"type": "string",
						"description": "The marketing feature name. Up to 80 characters long."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Product.PackageDimensions": {
				"properties": {
					"height": {
						"type": "number",
						"format": "double",
						"description": "Height, in inches."
					},
					"length": {
						"type": "number",
						"format": "double",
						"description": "Length, in inches."
					},
					"weight": {
						"type": "number",
						"format": "double",
						"description": "Weight, in ounces."
					},
					"width": {
						"type": "number",
						"format": "double",
						"description": "Width, in inches."
					}
				},
				"required": [
					"height",
					"length",
					"weight",
					"width"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.TaxCode": {
				"description": "[Tax codes](https://stripe.com/docs/tax/tax-categories) classify goods and services for tax purposes.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"tax_code"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"description": {
						"type": "string",
						"description": "A detailed description of which types of products the tax code represents."
					},
					"name": {
						"type": "string",
						"description": "A short name for the tax code."
					}
				},
				"required": [
					"id",
					"object",
					"description",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Product.Type": {
				"type": "string",
				"enum": [
					"good",
					"service"
				]
			},
			"stripe.Stripe.Plan.Tier": {
				"properties": {
					"flat_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Price for the entire tier."
					},
					"flat_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "Same as `flat_amount`, but contains a decimal value with at most 12 decimal places."
					},
					"unit_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Per unit price for units relevant to the tier."
					},
					"unit_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "Same as `unit_amount`, but contains a decimal value with at most 12 decimal places."
					},
					"up_to": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Up to and including to this quantity will be contained in the tier."
					}
				},
				"required": [
					"flat_amount",
					"flat_amount_decimal",
					"unit_amount",
					"unit_amount_decimal",
					"up_to"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Plan.TiersMode": {
				"type": "string",
				"enum": [
					"graduated",
					"volume"
				]
			},
			"stripe.Stripe.Plan.TransformUsage.Round": {
				"type": "string",
				"enum": [
					"down",
					"up"
				]
			},
			"stripe.Stripe.Plan.TransformUsage": {
				"properties": {
					"divide_by": {
						"type": "number",
						"format": "double",
						"description": "Divide usage by this number."
					},
					"round": {
						"$ref": "#/components/schemas/stripe.Stripe.Plan.TransformUsage.Round",
						"description": "After division, either round the result `up` or `down`."
					}
				},
				"required": [
					"divide_by",
					"round"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Plan.UsageType": {
				"type": "string",
				"enum": [
					"licensed",
					"metered"
				]
			},
			"stripe.Stripe.Plan": {
				"description": "You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products.\n[Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single \"gold\" product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/products-prices/overview).",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"plan"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"active": {
						"type": "boolean",
						"description": "Whether the plan can be used for new purchases."
					},
					"aggregate_usage": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Plan.AggregateUsage"
							}
						],
						"nullable": true,
						"description": "Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`."
					},
					"amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`."
					},
					"billing_scheme": {
						"$ref": "#/components/schemas/stripe.Stripe.Plan.BillingScheme",
						"description": "Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"interval": {
						"$ref": "#/components/schemas/stripe.Stripe.Plan.Interval",
						"description": "The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`."
					},
					"interval_count": {
						"type": "number",
						"format": "double",
						"description": "The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"meter": {
						"type": "string",
						"nullable": true,
						"description": "The meter tracking the usage of a metered price"
					},
					"nickname": {
						"type": "string",
						"nullable": true,
						"description": "A brief description of the plan, hidden from customers."
					},
					"product": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Product"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedProduct"
							}
						],
						"nullable": true,
						"description": "The product whose pricing this plan determines."
					},
					"tiers": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Plan.Tier"
						},
						"type": "array",
						"description": "Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`."
					},
					"tiers_mode": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Plan.TiersMode"
							}
						],
						"nullable": true,
						"description": "Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows."
					},
					"transform_usage": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Plan.TransformUsage"
							}
						],
						"nullable": true,
						"description": "Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`."
					},
					"trial_period_days": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan)."
					},
					"usage_type": {
						"$ref": "#/components/schemas/stripe.Stripe.Plan.UsageType",
						"description": "Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`."
					}
				},
				"required": [
					"id",
					"object",
					"active",
					"aggregate_usage",
					"amount",
					"amount_decimal",
					"billing_scheme",
					"created",
					"currency",
					"interval",
					"interval_count",
					"livemode",
					"metadata",
					"meter",
					"nickname",
					"product",
					"tiers_mode",
					"transform_usage",
					"trial_period_days",
					"usage_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription": {
				"description": "Subscriptions allow you to charge a customer on a recurring basis.\n\nRelated guide: [Creating subscriptions](https://stripe.com/docs/billing/subscriptions/creating)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"subscription"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"application": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Application"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedApplication"
							}
						],
						"nullable": true,
						"description": "ID of the Connect Application that created the subscription."
					},
					"application_fee_percent": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account."
					},
					"automatic_tax": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.AutomaticTax"
					},
					"billing_cycle_anchor": {
						"type": "number",
						"format": "double",
						"description": "The reference point that aligns future [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle) dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals. The timestamp is in UTC format."
					},
					"billing_cycle_anchor_config": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.BillingCycleAnchorConfig"
							}
						],
						"nullable": true,
						"description": "The fixed values used to calculate the `billing_cycle_anchor`."
					},
					"billing_thresholds": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.BillingThresholds"
							}
						],
						"nullable": true,
						"description": "Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period"
					},
					"cancel_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "A date in the future at which the subscription will automatically get canceled"
					},
					"cancel_at_period_end": {
						"type": "boolean",
						"description": "Whether this subscription will (if `status=active`) or did (if `status=canceled`) cancel at the end of the current billing period."
					},
					"canceled_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state."
					},
					"cancellation_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.CancellationDetails"
							}
						],
						"nullable": true,
						"description": "Details about why this subscription was cancelled"
					},
					"collection_method": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.CollectionMethod",
						"description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"current_period_end": {
						"type": "number",
						"format": "double",
						"description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created."
					},
					"current_period_start": {
						"type": "number",
						"format": "double",
						"description": "Start of the current period that the subscription has been invoiced for."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomer"
							}
						],
						"description": "ID of the customer who owns the subscription."
					},
					"days_until_due": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`."
					},
					"default_payment_method": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"nullable": true,
						"description": "ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)."
					},
					"default_source": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.CustomerSource"
							}
						],
						"nullable": true,
						"description": "ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)."
					},
					"default_tax_rates": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.TaxRate"
						},
						"type": "array",
						"nullable": true,
						"description": "The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs."
					},
					"discount": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Discount"
							}
						],
						"nullable": true,
						"description": "Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis. This field has been deprecated and will be removed in a future API version. Use `discounts` instead."
					},
					"discounts": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.Discount"
								}
							]
						},
						"type": "array",
						"description": "The discounts applied to the subscription. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount."
					},
					"ended_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "If the subscription has ended, the date the subscription ended."
					},
					"invoice_settings": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.InvoiceSettings"
					},
					"items": {
						"$ref": "#/components/schemas/stripe.Stripe.ApiList_stripe.Stripe.SubscriptionItem_",
						"description": "List of subscription items, each with an attached price."
					},
					"latest_invoice": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice"
							}
						],
						"nullable": true,
						"description": "The most recent invoice this subscription has generated."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"next_pending_invoice_item_invoice": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`."
					},
					"on_behalf_of": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"nullable": true,
						"description": "The account (if any) the charge was made on behalf of for charges associated with this subscription. See the Connect documentation for details."
					},
					"pause_collection": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PauseCollection"
							}
						],
						"nullable": true,
						"description": "If specified, payment collection for this subscription will be paused. Note that the subscription status will be unchanged and will not be updated to `paused`. Learn more about [pausing collection](https://stripe.com/billing/subscriptions/pause-payment)."
					},
					"payment_settings": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings"
							}
						],
						"nullable": true,
						"description": "Payment settings passed on to invoices created by the subscription."
					},
					"pending_invoice_item_interval": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PendingInvoiceItemInterval"
							}
						],
						"nullable": true,
						"description": "Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval."
					},
					"pending_setup_intent": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupIntent"
							}
						],
						"nullable": true,
						"description": "You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2)."
					},
					"pending_update": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PendingUpdate"
							}
						],
						"nullable": true,
						"description": "If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid."
					},
					"schedule": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule"
							}
						],
						"nullable": true,
						"description": "The schedule attached to the subscription"
					},
					"start_date": {
						"type": "number",
						"format": "double",
						"description": "Date when the subscription was first created. The date might differ from the `created` date due to backdating."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.Status",
						"description": "Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, `unpaid`, or `paused`.\n\nFor `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated.\n\nA subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.\n\nA subscription can only enter a `paused` status [when a trial ends without a payment method](https://stripe.com/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn't generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](https://stripe.com/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription's status unchanged.\n\nIf subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings).\n\nIf subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices."
					},
					"test_clock": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.TestHelpers.TestClock"
							}
						],
						"nullable": true,
						"description": "ID of the test clock this subscription belongs to."
					},
					"transfer_data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.TransferData"
							}
						],
						"nullable": true,
						"description": "The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices."
					},
					"trial_end": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "If the subscription has a trial, the end of that trial."
					},
					"trial_settings": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.TrialSettings"
							}
						],
						"nullable": true,
						"description": "Settings related to subscription trials."
					},
					"trial_start": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "If the subscription has a trial, the beginning of that trial."
					}
				},
				"required": [
					"id",
					"object",
					"application",
					"application_fee_percent",
					"automatic_tax",
					"billing_cycle_anchor",
					"billing_cycle_anchor_config",
					"billing_thresholds",
					"cancel_at",
					"cancel_at_period_end",
					"canceled_at",
					"cancellation_details",
					"collection_method",
					"created",
					"currency",
					"current_period_end",
					"current_period_start",
					"customer",
					"days_until_due",
					"default_payment_method",
					"default_source",
					"description",
					"discount",
					"discounts",
					"ended_at",
					"invoice_settings",
					"items",
					"latest_invoice",
					"livemode",
					"metadata",
					"next_pending_invoice_item_invoice",
					"on_behalf_of",
					"pause_collection",
					"payment_settings",
					"pending_invoice_item_interval",
					"pending_setup_intent",
					"pending_update",
					"schedule",
					"start_date",
					"status",
					"test_clock",
					"transfer_data",
					"trial_end",
					"trial_settings",
					"trial_start"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.TestHelpers.TestClock.Status": {
				"type": "string",
				"enum": [
					"advancing",
					"internal_failure",
					"ready"
				]
			},
			"stripe.Stripe.TestHelpers.TestClock.StatusDetails.Advancing": {
				"properties": {
					"target_frozen_time": {
						"type": "number",
						"format": "double",
						"description": "The `frozen_time` that the Test Clock is advancing towards."
					}
				},
				"required": [
					"target_frozen_time"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.TestHelpers.TestClock.StatusDetails": {
				"properties": {
					"advancing": {
						"$ref": "#/components/schemas/stripe.Stripe.TestHelpers.TestClock.StatusDetails.Advancing"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.TestHelpers.TestClock": {
				"description": "A test clock enables deterministic control over objects in testmode. With a test clock, you can create\nobjects at a frozen time in the past or future, and advance to a specific future time to observe webhooks and state changes. After the clock advances,\nyou can either validate the current state of your scenario (and test your assumptions), change the current state of your scenario (and test more complex scenarios), or keep advancing forward in time.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"test_helpers.test_clock"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"deletes_after": {
						"type": "number",
						"format": "double",
						"description": "Time at which this clock is scheduled to auto delete."
					},
					"frozen_time": {
						"type": "number",
						"format": "double",
						"description": "Time at which all objects belonging to this clock are frozen."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "The custom name supplied at creation."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.TestHelpers.TestClock.Status",
						"description": "The status of the Test Clock."
					},
					"status_details": {
						"$ref": "#/components/schemas/stripe.Stripe.TestHelpers.TestClock.StatusDetails"
					}
				},
				"required": [
					"id",
					"object",
					"created",
					"deletes_after",
					"frozen_time",
					"livemode",
					"name",
					"status",
					"status_details"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.InvoiceItem": {
				"description": "Invoice Items represent the component lines of an [invoice](https://stripe.com/docs/api/invoices). An invoice item is added to an\ninvoice by creating or updating it with an `invoice` field, at which point it will be included as\n[an invoice line item](https://stripe.com/docs/api/invoices/line_item) within\n[invoice.lines](https://stripe.com/docs/api/invoices/object#invoice_object-lines).\n\nInvoice Items can be created before you are ready to actually send the invoice. This can be particularly useful when combined\nwith a [subscription](https://stripe.com/docs/api/subscriptions). Sometimes you want to add a charge or credit to a customer, but actually charge\nor credit the customer's card only at the end of a regular billing cycle. This is useful for combining several charges\n(to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.\n\nRelated guides: [Integrate with the Invoicing API](https://stripe.com/docs/invoicing/integration), [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"invoiceitem"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomer"
							}
						],
						"description": "The ID of the customer who will be billed when this invoice item is billed."
					},
					"date": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "An arbitrary string attached to the object. Often useful for displaying to users."
					},
					"discountable": {
						"type": "boolean",
						"description": "If true, discounts will apply to this invoice item. Always false for prorations."
					},
					"discounts": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.Discount"
								}
							]
						},
						"type": "array",
						"nullable": true,
						"description": "The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount."
					},
					"invoice": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice"
							}
						],
						"nullable": true,
						"description": "The ID of the invoice this invoice item belongs to."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"period": {
						"$ref": "#/components/schemas/stripe.Stripe.InvoiceItem.Period"
					},
					"plan": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Plan"
							}
						],
						"nullable": true,
						"description": "If the invoice item is a proration, the plan of the subscription that the proration was computed for."
					},
					"price": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Price"
							}
						],
						"nullable": true,
						"description": "The price of the invoice item."
					},
					"proration": {
						"type": "boolean",
						"description": "Whether the invoice item was created automatically as a proration adjustment when the customer switched plans."
					},
					"quantity": {
						"type": "number",
						"format": "double",
						"description": "Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for."
					},
					"subscription": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription"
							}
						],
						"nullable": true,
						"description": "The subscription that this invoice item has been created for, if any."
					},
					"subscription_item": {
						"type": "string",
						"description": "The subscription item that this invoice item has been created for, if any."
					},
					"tax_rates": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.TaxRate"
						},
						"type": "array",
						"nullable": true,
						"description": "The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item."
					},
					"test_clock": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.TestHelpers.TestClock"
							}
						],
						"nullable": true,
						"description": "ID of the test clock this invoice item belongs to."
					},
					"unit_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Unit amount (in the `currency` specified) of the invoice item."
					},
					"unit_amount_decimal": {
						"type": "string",
						"nullable": true,
						"description": "Same as `unit_amount`, but contains a decimal value with at most 12 decimal places."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"currency",
					"customer",
					"date",
					"description",
					"discountable",
					"discounts",
					"invoice",
					"livemode",
					"metadata",
					"period",
					"plan",
					"price",
					"proration",
					"quantity",
					"subscription",
					"tax_rates",
					"test_clock",
					"unit_amount",
					"unit_amount_decimal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.InvoiceLineItem.Period": {
				"properties": {
					"end": {
						"type": "number",
						"format": "double",
						"description": "The end of the period, which must be greater than or equal to the start. This value is inclusive."
					},
					"start": {
						"type": "number",
						"format": "double",
						"description": "The start of the period. This value is inclusive."
					}
				},
				"required": [
					"end",
					"start"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.InvoiceLineItem.ProrationDetails.CreditedItems": {
				"properties": {
					"invoice": {
						"type": "string",
						"description": "Invoice containing the credited invoice line items"
					},
					"invoice_line_items": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Credited invoice line items"
					}
				},
				"required": [
					"invoice",
					"invoice_line_items"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.InvoiceLineItem.ProrationDetails": {
				"properties": {
					"credited_items": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.InvoiceLineItem.ProrationDetails.CreditedItems"
							}
						],
						"nullable": true,
						"description": "For a credit proration `line_item`, the original debit line_items to which the credit proration applies."
					}
				},
				"required": [
					"credited_items"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionItem.BillingThresholds": {
				"properties": {
					"usage_gte": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Usage threshold that triggers the subscription to create an invoice"
					}
				},
				"required": [
					"usage_gte"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionItem": {
				"description": "Subscription items allow you to create customer subscriptions with more than\none plan, making it easy to represent complex billing relationships.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"subscription_item"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"billing_thresholds": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionItem.BillingThresholds"
							}
						],
						"nullable": true,
						"description": "Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period"
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"discounts": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.Discount"
								}
							]
						},
						"type": "array",
						"description": "The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"plan": {
						"$ref": "#/components/schemas/stripe.Stripe.Plan",
						"description": "You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products.\n[Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single \"gold\" product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/products-prices/overview)."
					},
					"price": {
						"$ref": "#/components/schemas/stripe.Stripe.Price",
						"description": "Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.\n[Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single \"gold\" product that has prices for $10/month, $100/year, and €9 once.\n\nRelated guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview)."
					},
					"quantity": {
						"type": "number",
						"format": "double",
						"description": "The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed."
					},
					"subscription": {
						"type": "string",
						"description": "The `subscription` this `subscription_item` belongs to."
					},
					"tax_rates": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.TaxRate"
						},
						"type": "array",
						"nullable": true,
						"description": "The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`."
					}
				},
				"required": [
					"id",
					"object",
					"billing_thresholds",
					"created",
					"discounts",
					"metadata",
					"plan",
					"price",
					"subscription",
					"tax_rates"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.InvoiceLineItem.TaxAmount.TaxabilityReason": {
				"type": "string",
				"enum": [
					"customer_exempt",
					"not_collecting",
					"not_subject_to_tax",
					"not_supported",
					"portion_product_exempt",
					"portion_reduced_rated",
					"portion_standard_rated",
					"product_exempt",
					"product_exempt_holiday",
					"proportionally_rated",
					"reduced_rated",
					"reverse_charge",
					"standard_rated",
					"taxable_basis_reduced",
					"zero_rated"
				]
			},
			"stripe.Stripe.InvoiceLineItem.TaxAmount": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The amount, in cents (or local equivalent), of the tax."
					},
					"inclusive": {
						"type": "boolean",
						"description": "Whether this tax amount is inclusive or exclusive."
					},
					"tax_rate": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.TaxRate"
							}
						],
						"description": "The tax rate that was applied to get this tax amount."
					},
					"taxability_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.InvoiceLineItem.TaxAmount.TaxabilityReason"
							}
						],
						"nullable": true,
						"description": "The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported."
					},
					"taxable_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount on which tax is calculated, in cents (or local equivalent)."
					}
				},
				"required": [
					"amount",
					"inclusive",
					"tax_rate",
					"taxability_reason",
					"taxable_amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.InvoiceLineItem.Type": {
				"type": "string",
				"enum": [
					"invoiceitem",
					"subscription"
				]
			},
			"stripe.Stripe.InvoiceLineItem": {
				"description": "Invoice Line Items represent the individual lines within an [invoice](https://stripe.com/docs/api/invoices) and only exist within the context of an invoice.\n\nEach line item is backed by either an [invoice item](https://stripe.com/docs/api/invoiceitems) or a [subscription item](https://stripe.com/docs/api/subscription_items).",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"line_item"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The amount, in cents (or local equivalent)."
					},
					"amount_excluding_tax": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The integer amount in cents (or local equivalent) representing the amount for this line item, excluding all tax and discounts."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "An arbitrary string attached to the object. Often useful for displaying to users."
					},
					"discount_amounts": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.InvoiceLineItem.DiscountAmount"
						},
						"type": "array",
						"nullable": true,
						"description": "The amount of discount calculated per discount for this line item."
					},
					"discountable": {
						"type": "boolean",
						"description": "If true, discounts will apply to this line item. Always false for prorations."
					},
					"discounts": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.Discount"
								}
							]
						},
						"type": "array",
						"description": "The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount."
					},
					"invoice": {
						"type": "string",
						"nullable": true,
						"description": "The ID of the invoice that contains this line item."
					},
					"invoice_item": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.InvoiceItem"
							}
						],
						"description": "The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription`, `metadata` reflects the current metadata from the subscription associated with the line item, unless the invoice line was directly updated with different metadata after creation."
					},
					"period": {
						"$ref": "#/components/schemas/stripe.Stripe.InvoiceLineItem.Period"
					},
					"plan": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Plan"
							}
						],
						"nullable": true,
						"description": "The plan of the subscription, if the line item is a subscription or a proration."
					},
					"price": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Price"
							}
						],
						"nullable": true,
						"description": "The price of the line item."
					},
					"proration": {
						"type": "boolean",
						"description": "Whether this is a proration."
					},
					"proration_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.InvoiceLineItem.ProrationDetails"
							}
						],
						"nullable": true,
						"description": "Additional details for proration line items"
					},
					"quantity": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The quantity of the subscription, if the line item is a subscription or a proration."
					},
					"subscription": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription"
							}
						],
						"nullable": true,
						"description": "The subscription that the invoice item pertains to, if any."
					},
					"subscription_item": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionItem"
							}
						],
						"description": "The subscription item that generated this line item. Left empty if the line item is not an explicit result of a subscription."
					},
					"tax_amounts": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.InvoiceLineItem.TaxAmount"
						},
						"type": "array",
						"description": "The amount of tax calculated per tax rate for this line item"
					},
					"tax_rates": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.TaxRate"
						},
						"type": "array",
						"description": "The tax rates which apply to the line item."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.InvoiceLineItem.Type",
						"description": "A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`."
					},
					"unit_amount_excluding_tax": {
						"type": "string",
						"nullable": true,
						"description": "The amount in cents (or local equivalent) representing the unit amount for this line item, excluding all tax and discounts."
					}
				},
				"required": [
					"id",
					"object",
					"amount",
					"amount_excluding_tax",
					"currency",
					"description",
					"discount_amounts",
					"discountable",
					"discounts",
					"invoice",
					"livemode",
					"metadata",
					"period",
					"plan",
					"price",
					"proration",
					"proration_details",
					"quantity",
					"subscription",
					"tax_amounts",
					"tax_rates",
					"type",
					"unit_amount_excluding_tax"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ApiList_stripe.Stripe.InvoiceLineItem_": {
				"description": "A container for paginated lists of objects.\nThe array of objects is on the `.data` property,\nand `.has_more` indicates whether there are additional objects beyond the end of this list.\n\nLearn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)\nor, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.",
				"properties": {
					"object": {
						"type": "string",
						"enum": [
							"list"
						],
						"nullable": false
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.InvoiceLineItem"
						},
						"type": "array"
					},
					"has_more": {
						"type": "boolean",
						"description": "True if this list has another page of items after this one that can be fetched."
					},
					"url": {
						"type": "string",
						"description": "The URL where this list can be accessed."
					}
				},
				"required": [
					"object",
					"data",
					"has_more",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType": {
				"type": "string",
				"enum": [
					"business",
					"personal"
				]
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions": {
				"properties": {
					"transaction_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType"
							}
						],
						"nullable": true,
						"description": "Transaction type of the mandate."
					}
				},
				"required": [
					"transaction_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit.VerificationMethod": {
				"type": "string",
				"enum": [
					"automatic",
					"instant",
					"microdeposits"
				]
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit": {
				"properties": {
					"mandate_options": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions"
					},
					"verification_method": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit.VerificationMethod",
						"description": "Bank account verification method."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Bancontact.PreferredLanguage": {
				"type": "string",
				"enum": [
					"de",
					"en",
					"fr",
					"nl"
				]
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Bancontact": {
				"properties": {
					"preferred_language": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Bancontact.PreferredLanguage",
						"description": "Preferred language of the Bancontact authorization page that the customer is redirected to."
					}
				},
				"required": [
					"preferred_language"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Card.Installments": {
				"properties": {
					"enabled": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether Installments are enabled for this Invoice."
					}
				},
				"required": [
					"enabled"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Card.RequestThreeDSecure": {
				"type": "string",
				"enum": [
					"any",
					"automatic",
					"challenge"
				]
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Card": {
				"properties": {
					"installments": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Card.Installments"
					},
					"request_three_d_secure": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Card.RequestThreeDSecure"
							}
						],
						"nullable": true,
						"description": "We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine."
					}
				},
				"required": [
					"request_three_d_secure"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer.Country": {
				"type": "string",
				"enum": [
					"BE",
					"DE",
					"ES",
					"FR",
					"IE",
					"NL"
				]
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer": {
				"properties": {
					"country": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer.Country",
						"description": "The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`."
					}
				},
				"required": [
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer": {
				"properties": {
					"eu_bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer"
					},
					"type": {
						"type": "string",
						"nullable": true,
						"description": "The bank transfer type that can be used for funding. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance": {
				"properties": {
					"bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer"
					},
					"funding_type": {
						"type": "string",
						"enum": [
							"bank_transfer",
							null
						],
						"nullable": true,
						"description": "The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`."
					}
				},
				"required": [
					"funding_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Konbini": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.SepaDebit": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory": {
				"type": "string",
				"enum": [
					"checking",
					"savings"
				]
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters": {
				"properties": {
					"account_subcategories": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory"
						},
						"type": "array",
						"description": "The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission": {
				"type": "string",
				"enum": [
					"balances",
					"ownership",
					"payment_method",
					"transactions"
				]
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch": {
				"type": "string",
				"enum": [
					"balances",
					"ownership",
					"transactions"
				]
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections": {
				"properties": {
					"filters": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters"
					},
					"permissions": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission"
						},
						"type": "array",
						"description": "The list of permissions to request. The `payment_method` permission must be included."
					},
					"prefetch": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch"
						},
						"type": "array",
						"nullable": true,
						"description": "Data features requested to be retrieved upon account creation."
					}
				},
				"required": [
					"prefetch"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.VerificationMethod": {
				"type": "string",
				"enum": [
					"automatic",
					"instant",
					"microdeposits"
				]
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount": {
				"properties": {
					"financial_connections": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections"
					},
					"verification_method": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.VerificationMethod",
						"description": "Bank account verification method."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions": {
				"properties": {
					"acss_debit": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit"
							}
						],
						"nullable": true,
						"description": "If paying by `acss_debit`, this sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoice's PaymentIntent."
					},
					"bancontact": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Bancontact"
							}
						],
						"nullable": true,
						"description": "If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice's PaymentIntent."
					},
					"card": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Card"
							}
						],
						"nullable": true,
						"description": "If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice's PaymentIntent."
					},
					"customer_balance": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance"
							}
						],
						"nullable": true,
						"description": "If paying by `customer_balance`, this sub-hash contains details about the Bank transfer payment method options to pass to the invoice's PaymentIntent."
					},
					"konbini": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Konbini"
							}
						],
						"nullable": true,
						"description": "If paying by `konbini`, this sub-hash contains details about the Konbini payment method options to pass to the invoice's PaymentIntent."
					},
					"sepa_debit": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.SepaDebit"
							}
						],
						"nullable": true,
						"description": "If paying by `sepa_debit`, this sub-hash contains details about the SEPA Direct Debit payment method options to pass to the invoice's PaymentIntent."
					},
					"us_bank_account": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount"
							}
						],
						"nullable": true,
						"description": "If paying by `us_bank_account`, this sub-hash contains details about the ACH direct debit payment method options to pass to the invoice's PaymentIntent."
					}
				},
				"required": [
					"acss_debit",
					"bancontact",
					"card",
					"customer_balance",
					"konbini",
					"sepa_debit",
					"us_bank_account"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.PaymentSettings.PaymentMethodType": {
				"type": "string",
				"enum": [
					"ach_credit_transfer",
					"ach_debit",
					"acss_debit",
					"amazon_pay",
					"au_becs_debit",
					"bacs_debit",
					"bancontact",
					"boleto",
					"card",
					"cashapp",
					"customer_balance",
					"eps",
					"fpx",
					"giropay",
					"grabpay",
					"ideal",
					"konbini",
					"link",
					"multibanco",
					"p24",
					"paynow",
					"paypal",
					"promptpay",
					"revolut_pay",
					"sepa_credit_transfer",
					"sepa_debit",
					"sofort",
					"swish",
					"us_bank_account",
					"wechat_pay"
				]
			},
			"stripe.Stripe.Invoice.PaymentSettings": {
				"properties": {
					"default_mandate": {
						"type": "string",
						"nullable": true,
						"description": "ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the invoice's default_payment_method or default_source, if set."
					},
					"payment_method_options": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions"
							}
						],
						"nullable": true,
						"description": "Payment-method-specific configuration to provide to the invoice's PaymentIntent."
					},
					"payment_method_types": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings.PaymentMethodType"
						},
						"type": "array",
						"nullable": true,
						"description": "The list of payment method types (e.g. card) to provide to the invoice's PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice's default payment method, the subscription's default payment method, the customer's default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice)."
					}
				},
				"required": [
					"default_mandate",
					"payment_method_options",
					"payment_method_types"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.AutomaticTax.Liability.Type": {
				"type": "string",
				"enum": [
					"account",
					"self"
				]
			},
			"stripe.Stripe.Quote.AutomaticTax.Liability": {
				"properties": {
					"account": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The connected account being referenced when `type` is `account`."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.AutomaticTax.Liability.Type",
						"description": "Type of the account referenced."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.AutomaticTax.Status": {
				"type": "string",
				"enum": [
					"complete",
					"failed",
					"requires_location_inputs"
				]
			},
			"stripe.Stripe.Quote.AutomaticTax": {
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "Automatically calculate taxes"
					},
					"liability": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Quote.AutomaticTax.Liability"
							}
						],
						"nullable": true,
						"description": "The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account."
					},
					"status": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Quote.AutomaticTax.Status"
							}
						],
						"nullable": true,
						"description": "The status of the most recent automated tax calculation for this quote."
					}
				},
				"required": [
					"enabled",
					"liability",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.CollectionMethod": {
				"type": "string",
				"enum": [
					"charge_automatically",
					"send_invoice"
				]
			},
			"stripe.Stripe.Quote.Computed.Recurring.Interval": {
				"type": "string",
				"enum": [
					"day",
					"month",
					"week",
					"year"
				]
			},
			"stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown.Discount": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The amount discounted."
					},
					"discount": {
						"$ref": "#/components/schemas/stripe.Stripe.Discount",
						"description": "A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).\nIt contains information about when the discount began, when it will end, and what it is applied to.\n\nRelated guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)"
					}
				},
				"required": [
					"amount",
					"discount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown.Tax.TaxabilityReason": {
				"type": "string",
				"enum": [
					"customer_exempt",
					"not_collecting",
					"not_subject_to_tax",
					"not_supported",
					"portion_product_exempt",
					"portion_reduced_rated",
					"portion_standard_rated",
					"product_exempt",
					"product_exempt_holiday",
					"proportionally_rated",
					"reduced_rated",
					"reverse_charge",
					"standard_rated",
					"taxable_basis_reduced",
					"zero_rated"
				]
			},
			"stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown.Tax": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount of tax applied for this rate."
					},
					"rate": {
						"$ref": "#/components/schemas/stripe.Stripe.TaxRate",
						"description": "Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.\n\nRelated guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)"
					},
					"taxability_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown.Tax.TaxabilityReason"
							}
						],
						"nullable": true,
						"description": "The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported."
					},
					"taxable_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount on which tax is calculated, in cents (or local equivalent)."
					}
				},
				"required": [
					"amount",
					"rate",
					"taxability_reason",
					"taxable_amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown": {
				"properties": {
					"discounts": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown.Discount"
						},
						"type": "array",
						"description": "The aggregated discounts."
					},
					"taxes": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown.Tax"
						},
						"type": "array",
						"description": "The aggregated tax amounts by rate."
					}
				},
				"required": [
					"discounts",
					"taxes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.Computed.Recurring.TotalDetails": {
				"properties": {
					"amount_discount": {
						"type": "number",
						"format": "double",
						"description": "This is the sum of all the discounts."
					},
					"amount_shipping": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "This is the sum of all the shipping amounts."
					},
					"amount_tax": {
						"type": "number",
						"format": "double",
						"description": "This is the sum of all the tax amounts."
					},
					"breakdown": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown"
					}
				},
				"required": [
					"amount_discount",
					"amount_shipping",
					"amount_tax"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.Computed.Recurring": {
				"properties": {
					"amount_subtotal": {
						"type": "number",
						"format": "double",
						"description": "Total before any discounts or taxes are applied."
					},
					"amount_total": {
						"type": "number",
						"format": "double",
						"description": "Total after discounts and taxes are applied."
					},
					"interval": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.Computed.Recurring.Interval",
						"description": "The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`."
					},
					"interval_count": {
						"type": "number",
						"format": "double",
						"description": "The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months."
					},
					"total_details": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.Computed.Recurring.TotalDetails"
					}
				},
				"required": [
					"amount_subtotal",
					"amount_total",
					"interval",
					"interval_count",
					"total_details"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.LineItem.Discount": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The amount discounted."
					},
					"discount": {
						"$ref": "#/components/schemas/stripe.Stripe.Discount",
						"description": "A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).\nIt contains information about when the discount began, when it will end, and what it is applied to.\n\nRelated guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)"
					}
				},
				"required": [
					"amount",
					"discount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.LineItem.Tax.TaxabilityReason": {
				"type": "string",
				"enum": [
					"customer_exempt",
					"not_collecting",
					"not_subject_to_tax",
					"not_supported",
					"portion_product_exempt",
					"portion_reduced_rated",
					"portion_standard_rated",
					"product_exempt",
					"product_exempt_holiday",
					"proportionally_rated",
					"reduced_rated",
					"reverse_charge",
					"standard_rated",
					"taxable_basis_reduced",
					"zero_rated"
				]
			},
			"stripe.Stripe.LineItem.Tax": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount of tax applied for this rate."
					},
					"rate": {
						"$ref": "#/components/schemas/stripe.Stripe.TaxRate",
						"description": "Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.\n\nRelated guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)"
					},
					"taxability_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.LineItem.Tax.TaxabilityReason"
							}
						],
						"nullable": true,
						"description": "The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported."
					},
					"taxable_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount on which tax is calculated, in cents (or local equivalent)."
					}
				},
				"required": [
					"amount",
					"rate",
					"taxability_reason",
					"taxable_amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.LineItem": {
				"description": "A line item.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"item"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount_discount": {
						"type": "number",
						"format": "double",
						"description": "Total discount amount applied. If no discounts were applied, defaults to 0."
					},
					"amount_subtotal": {
						"type": "number",
						"format": "double",
						"description": "Total before any discounts or taxes are applied."
					},
					"amount_tax": {
						"type": "number",
						"format": "double",
						"description": "Total tax amount applied. If no tax was applied, defaults to 0."
					},
					"amount_total": {
						"type": "number",
						"format": "double",
						"description": "Total after discounts and taxes."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"description": {
						"type": "string",
						"description": "An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name."
					},
					"discounts": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.LineItem.Discount"
						},
						"type": "array",
						"description": "The discounts applied to the line item."
					},
					"price": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Price"
							}
						],
						"nullable": true,
						"description": "The price used to generate the line item."
					},
					"quantity": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The quantity of products being purchased."
					},
					"taxes": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.LineItem.Tax"
						},
						"type": "array",
						"description": "The taxes applied to the line item."
					}
				},
				"required": [
					"id",
					"object",
					"amount_discount",
					"amount_subtotal",
					"amount_tax",
					"amount_total",
					"currency",
					"price",
					"quantity"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ApiList_stripe.Stripe.LineItem_": {
				"description": "A container for paginated lists of objects.\nThe array of objects is on the `.data` property,\nand `.has_more` indicates whether there are additional objects beyond the end of this list.\n\nLearn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)\nor, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.",
				"properties": {
					"object": {
						"type": "string",
						"enum": [
							"list"
						],
						"nullable": false
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.LineItem"
						},
						"type": "array"
					},
					"has_more": {
						"type": "boolean",
						"description": "True if this list has another page of items after this one that can be fetched."
					},
					"url": {
						"type": "string",
						"description": "The URL where this list can be accessed."
					}
				},
				"required": [
					"object",
					"data",
					"has_more",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown.Discount": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The amount discounted."
					},
					"discount": {
						"$ref": "#/components/schemas/stripe.Stripe.Discount",
						"description": "A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).\nIt contains information about when the discount began, when it will end, and what it is applied to.\n\nRelated guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)"
					}
				},
				"required": [
					"amount",
					"discount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown.Tax.TaxabilityReason": {
				"type": "string",
				"enum": [
					"customer_exempt",
					"not_collecting",
					"not_subject_to_tax",
					"not_supported",
					"portion_product_exempt",
					"portion_reduced_rated",
					"portion_standard_rated",
					"product_exempt",
					"product_exempt_holiday",
					"proportionally_rated",
					"reduced_rated",
					"reverse_charge",
					"standard_rated",
					"taxable_basis_reduced",
					"zero_rated"
				]
			},
			"stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown.Tax": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount of tax applied for this rate."
					},
					"rate": {
						"$ref": "#/components/schemas/stripe.Stripe.TaxRate",
						"description": "Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.\n\nRelated guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)"
					},
					"taxability_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown.Tax.TaxabilityReason"
							}
						],
						"nullable": true,
						"description": "The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported."
					},
					"taxable_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount on which tax is calculated, in cents (or local equivalent)."
					}
				},
				"required": [
					"amount",
					"rate",
					"taxability_reason",
					"taxable_amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown": {
				"properties": {
					"discounts": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown.Discount"
						},
						"type": "array",
						"description": "The aggregated discounts."
					},
					"taxes": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown.Tax"
						},
						"type": "array",
						"description": "The aggregated tax amounts by rate."
					}
				},
				"required": [
					"discounts",
					"taxes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.Computed.Upfront.TotalDetails": {
				"properties": {
					"amount_discount": {
						"type": "number",
						"format": "double",
						"description": "This is the sum of all the discounts."
					},
					"amount_shipping": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "This is the sum of all the shipping amounts."
					},
					"amount_tax": {
						"type": "number",
						"format": "double",
						"description": "This is the sum of all the tax amounts."
					},
					"breakdown": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown"
					}
				},
				"required": [
					"amount_discount",
					"amount_shipping",
					"amount_tax"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.Computed.Upfront": {
				"properties": {
					"amount_subtotal": {
						"type": "number",
						"format": "double",
						"description": "Total before any discounts or taxes are applied."
					},
					"amount_total": {
						"type": "number",
						"format": "double",
						"description": "Total after discounts and taxes are applied."
					},
					"line_items": {
						"$ref": "#/components/schemas/stripe.Stripe.ApiList_stripe.Stripe.LineItem_",
						"description": "The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice."
					},
					"total_details": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.Computed.Upfront.TotalDetails"
					}
				},
				"required": [
					"amount_subtotal",
					"amount_total",
					"total_details"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.Computed": {
				"properties": {
					"recurring": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Quote.Computed.Recurring"
							}
						],
						"nullable": true,
						"description": "The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices."
					},
					"upfront": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.Computed.Upfront"
					}
				},
				"required": [
					"recurring",
					"upfront"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote": {
				"description": "A Quote is a way to model prices that you'd like to provide to a customer.\nOnce accepted, it will automatically create an invoice, subscription or subscription schedule.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"quote"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"amount_subtotal": {
						"type": "number",
						"format": "double",
						"description": "Total before any discounts or taxes are applied."
					},
					"amount_total": {
						"type": "number",
						"format": "double",
						"description": "Total after discounts and taxes are applied."
					},
					"application": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Application"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedApplication"
							}
						],
						"nullable": true,
						"description": "ID of the Connect Application that created the quote."
					},
					"application_fee_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote."
					},
					"application_fee_percent": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote."
					},
					"automatic_tax": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.AutomaticTax"
					},
					"collection_method": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.CollectionMethod",
						"description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`."
					},
					"computed": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.Computed"
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"nullable": true,
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomer"
							}
						],
						"nullable": true,
						"description": "The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed."
					},
					"default_tax_rates": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.TaxRate"
								}
							]
						},
						"type": "array",
						"description": "The tax rates applied to this quote."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "A description that will be displayed on the quote PDF."
					},
					"discounts": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.Discount"
								}
							]
						},
						"type": "array",
						"description": "The discounts applied to this quote."
					},
					"expires_at": {
						"type": "number",
						"format": "double",
						"description": "The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch."
					},
					"footer": {
						"type": "string",
						"nullable": true,
						"description": "A footer that will be displayed on the quote PDF."
					},
					"from_quote": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Quote.FromQuote"
							}
						],
						"nullable": true,
						"description": "Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details."
					},
					"header": {
						"type": "string",
						"nullable": true,
						"description": "A header that will be displayed on the quote PDF."
					},
					"invoice": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedInvoice"
							}
						],
						"nullable": true,
						"description": "The invoice that was created from this quote."
					},
					"invoice_settings": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.InvoiceSettings"
					},
					"line_items": {
						"$ref": "#/components/schemas/stripe.Stripe.ApiList_stripe.Stripe.LineItem_",
						"description": "A list of items the customer is being quoted for."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"number": {
						"type": "string",
						"nullable": true,
						"description": "A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize)."
					},
					"on_behalf_of": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"nullable": true,
						"description": "The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.Status",
						"description": "The status of the quote."
					},
					"status_transitions": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.StatusTransitions"
					},
					"subscription": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription"
							}
						],
						"nullable": true,
						"description": "The subscription that was created or updated from this quote."
					},
					"subscription_data": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.SubscriptionData"
					},
					"subscription_schedule": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule"
							}
						],
						"nullable": true,
						"description": "The subscription schedule that was created or updated from this quote."
					},
					"test_clock": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.TestHelpers.TestClock"
							}
						],
						"nullable": true,
						"description": "ID of the test clock this quote belongs to."
					},
					"total_details": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.TotalDetails"
					},
					"transfer_data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Quote.TransferData"
							}
						],
						"nullable": true,
						"description": "The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices."
					}
				},
				"required": [
					"id",
					"object",
					"amount_subtotal",
					"amount_total",
					"application",
					"application_fee_amount",
					"application_fee_percent",
					"automatic_tax",
					"collection_method",
					"computed",
					"created",
					"currency",
					"customer",
					"description",
					"discounts",
					"expires_at",
					"footer",
					"from_quote",
					"header",
					"invoice",
					"invoice_settings",
					"livemode",
					"metadata",
					"number",
					"on_behalf_of",
					"status",
					"status_transitions",
					"subscription",
					"subscription_data",
					"subscription_schedule",
					"test_clock",
					"total_details",
					"transfer_data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.FromQuote": {
				"properties": {
					"is_revision": {
						"type": "boolean",
						"description": "Whether this quote is a revision of a different quote."
					},
					"quote": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Quote"
							}
						],
						"description": "The quote that was cloned."
					}
				},
				"required": [
					"is_revision",
					"quote"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.DeletedInvoice": {
				"description": "The DeletedInvoice object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"invoice"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"deleted": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false,
						"description": "Always true for a deleted object"
					}
				},
				"required": [
					"id",
					"object",
					"deleted"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.InvoiceSettings.Issuer.Type": {
				"type": "string",
				"enum": [
					"account",
					"self"
				]
			},
			"stripe.Stripe.Quote.InvoiceSettings.Issuer": {
				"properties": {
					"account": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The connected account being referenced when `type` is `account`."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.InvoiceSettings.Issuer.Type",
						"description": "Type of the account referenced."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.InvoiceSettings": {
				"properties": {
					"days_until_due": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`."
					},
					"issuer": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.InvoiceSettings.Issuer"
					}
				},
				"required": [
					"days_until_due",
					"issuer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.Status": {
				"type": "string",
				"enum": [
					"accepted",
					"canceled",
					"draft",
					"open"
				]
			},
			"stripe.Stripe.Quote.StatusTransitions": {
				"properties": {
					"accepted_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The time that the quote was accepted. Measured in seconds since Unix epoch."
					},
					"canceled_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The time that the quote was canceled. Measured in seconds since Unix epoch."
					},
					"finalized_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The time that the quote was finalized. Measured in seconds since Unix epoch."
					}
				},
				"required": [
					"accepted_at",
					"canceled_at",
					"finalized_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.SubscriptionData": {
				"properties": {
					"description": {
						"type": "string",
						"nullable": true,
						"description": "The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs."
					},
					"effective_date": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on the subscription or subscription schedule when the quote is accepted. If a recurring price is included in `line_items`, this field will be passed to the resulting subscription's `metadata` field. If `subscription_data.effective_date` is used, this field will be passed to the resulting subscription schedule's `phases.metadata` field. Unlike object-level metadata, this field is declarative. Updates will clear prior values."
					},
					"trial_period_days": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Integer representing the number of trial period days before the customer is charged for the first time."
					}
				},
				"required": [
					"description",
					"effective_date",
					"metadata",
					"trial_period_days"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.CurrentPhase": {
				"properties": {
					"end_date": {
						"type": "number",
						"format": "double",
						"description": "The end of this phase of the subscription schedule."
					},
					"start_date": {
						"type": "number",
						"format": "double",
						"description": "The start of this phase of the subscription schedule."
					}
				},
				"required": [
					"end_date",
					"start_date"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.DefaultSettings.AutomaticTax.Liability.Type": {
				"type": "string",
				"enum": [
					"account",
					"self"
				]
			},
			"stripe.Stripe.SubscriptionSchedule.DefaultSettings.AutomaticTax.Liability": {
				"properties": {
					"account": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The connected account being referenced when `type` is `account`."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.DefaultSettings.AutomaticTax.Liability.Type",
						"description": "Type of the account referenced."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.DefaultSettings.AutomaticTax": {
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "Whether Stripe automatically computes tax on invoices created during this phase."
					},
					"liability": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.DefaultSettings.AutomaticTax.Liability"
							}
						],
						"nullable": true,
						"description": "The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account."
					}
				},
				"required": [
					"enabled",
					"liability"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.DefaultSettings.BillingCycleAnchor": {
				"type": "string",
				"enum": [
					"automatic",
					"phase_start"
				]
			},
			"stripe.Stripe.SubscriptionSchedule.DefaultSettings.BillingThresholds": {
				"properties": {
					"amount_gte": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Monetary threshold that triggers the subscription to create an invoice"
					},
					"reset_billing_cycle_anchor": {
						"type": "boolean",
						"nullable": true,
						"description": "Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`."
					}
				},
				"required": [
					"amount_gte",
					"reset_billing_cycle_anchor"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.DefaultSettings.CollectionMethod": {
				"type": "string",
				"enum": [
					"charge_automatically",
					"send_invoice"
				]
			},
			"stripe.Stripe.SubscriptionSchedule.DefaultSettings.InvoiceSettings.Issuer.Type": {
				"type": "string",
				"enum": [
					"account",
					"self"
				]
			},
			"stripe.Stripe.SubscriptionSchedule.DefaultSettings.InvoiceSettings.Issuer": {
				"properties": {
					"account": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The connected account being referenced when `type` is `account`."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.DefaultSettings.InvoiceSettings.Issuer.Type",
						"description": "Type of the account referenced."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.DefaultSettings.InvoiceSettings": {
				"properties": {
					"account_tax_ids": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.TaxId"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.DeletedTaxId"
								}
							]
						},
						"type": "array",
						"nullable": true,
						"description": "The account tax IDs associated with the subscription schedule. Will be set on invoices generated by the subscription schedule."
					},
					"days_until_due": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`."
					},
					"issuer": {
						"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.DefaultSettings.InvoiceSettings.Issuer"
					}
				},
				"required": [
					"account_tax_ids",
					"days_until_due",
					"issuer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.DefaultSettings.TransferData": {
				"properties": {
					"amount_percent": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination."
					},
					"destination": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The account where funds from the payment will be transferred to upon payment success."
					}
				},
				"required": [
					"amount_percent",
					"destination"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.DefaultSettings": {
				"properties": {
					"application_fee_percent": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule."
					},
					"automatic_tax": {
						"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.DefaultSettings.AutomaticTax"
					},
					"billing_cycle_anchor": {
						"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.DefaultSettings.BillingCycleAnchor",
						"description": "Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle)."
					},
					"billing_thresholds": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.DefaultSettings.BillingThresholds"
							}
						],
						"nullable": true,
						"description": "Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period"
					},
					"collection_method": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.DefaultSettings.CollectionMethod"
							}
						],
						"nullable": true,
						"description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`."
					},
					"default_payment_method": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"nullable": true,
						"description": "ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs."
					},
					"invoice_settings": {
						"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.DefaultSettings.InvoiceSettings"
					},
					"on_behalf_of": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"nullable": true,
						"description": "The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details."
					},
					"transfer_data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.DefaultSettings.TransferData"
							}
						],
						"nullable": true,
						"description": "The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices."
					}
				},
				"required": [
					"application_fee_percent",
					"billing_cycle_anchor",
					"billing_thresholds",
					"collection_method",
					"default_payment_method",
					"description",
					"invoice_settings",
					"on_behalf_of",
					"transfer_data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.EndBehavior": {
				"type": "string",
				"enum": [
					"cancel",
					"none",
					"release",
					"renew"
				]
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.AddInvoiceItem.Discount": {
				"properties": {
					"coupon": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Coupon"
							}
						],
						"nullable": true,
						"description": "ID of the coupon to create a new discount for."
					},
					"discount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Discount"
							}
						],
						"nullable": true,
						"description": "ID of an existing discount on the object (or one of its ancestors) to reuse."
					},
					"promotion_code": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PromotionCode"
							}
						],
						"nullable": true,
						"description": "ID of the promotion code to create a new discount for."
					}
				},
				"required": [
					"coupon",
					"discount",
					"promotion_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.DeletedPrice": {
				"description": "The DeletedPrice object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"price"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"deleted": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false,
						"description": "Always true for a deleted object"
					}
				},
				"required": [
					"id",
					"object",
					"deleted"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.AddInvoiceItem": {
				"properties": {
					"discounts": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.AddInvoiceItem.Discount"
						},
						"type": "array",
						"description": "The stackable discounts that will be applied to the item."
					},
					"price": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Price"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedPrice"
							}
						],
						"description": "ID of the price used to generate the invoice item."
					},
					"quantity": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The quantity of the invoice item."
					},
					"tax_rates": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.TaxRate"
						},
						"type": "array",
						"nullable": true,
						"description": "The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item."
					}
				},
				"required": [
					"discounts",
					"price",
					"quantity"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.AutomaticTax.Liability.Type": {
				"type": "string",
				"enum": [
					"account",
					"self"
				]
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.AutomaticTax.Liability": {
				"properties": {
					"account": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The connected account being referenced when `type` is `account`."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.AutomaticTax.Liability.Type",
						"description": "Type of the account referenced."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.AutomaticTax": {
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "Whether Stripe automatically computes tax on invoices created during this phase."
					},
					"liability": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.AutomaticTax.Liability"
							}
						],
						"nullable": true,
						"description": "The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account."
					}
				},
				"required": [
					"enabled",
					"liability"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.BillingCycleAnchor": {
				"type": "string",
				"enum": [
					"automatic",
					"phase_start"
				]
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.BillingThresholds": {
				"properties": {
					"amount_gte": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Monetary threshold that triggers the subscription to create an invoice"
					},
					"reset_billing_cycle_anchor": {
						"type": "boolean",
						"nullable": true,
						"description": "Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`."
					}
				},
				"required": [
					"amount_gte",
					"reset_billing_cycle_anchor"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.CollectionMethod": {
				"type": "string",
				"enum": [
					"charge_automatically",
					"send_invoice"
				]
			},
			"stripe.Stripe.DeletedCoupon": {
				"description": "The DeletedCoupon object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"coupon"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"deleted": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false,
						"description": "Always true for a deleted object"
					}
				},
				"required": [
					"id",
					"object",
					"deleted"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.Discount": {
				"properties": {
					"coupon": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Coupon"
							}
						],
						"nullable": true,
						"description": "ID of the coupon to create a new discount for."
					},
					"discount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Discount"
							}
						],
						"nullable": true,
						"description": "ID of an existing discount on the object (or one of its ancestors) to reuse."
					},
					"promotion_code": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PromotionCode"
							}
						],
						"nullable": true,
						"description": "ID of the promotion code to create a new discount for."
					}
				},
				"required": [
					"coupon",
					"discount",
					"promotion_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.InvoiceSettings.Issuer.Type": {
				"type": "string",
				"enum": [
					"account",
					"self"
				]
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.InvoiceSettings.Issuer": {
				"properties": {
					"account": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The connected account being referenced when `type` is `account`."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.InvoiceSettings.Issuer.Type",
						"description": "Type of the account referenced."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.InvoiceSettings": {
				"properties": {
					"account_tax_ids": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.TaxId"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.DeletedTaxId"
								}
							]
						},
						"type": "array",
						"nullable": true,
						"description": "The account tax IDs associated with this phase of the subscription schedule. Will be set on invoices generated by this phase of the subscription schedule."
					},
					"days_until_due": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`."
					},
					"issuer": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.InvoiceSettings.Issuer"
							}
						],
						"nullable": true,
						"description": "The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account."
					}
				},
				"required": [
					"account_tax_ids",
					"days_until_due",
					"issuer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.Item.BillingThresholds": {
				"properties": {
					"usage_gte": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Usage threshold that triggers the subscription to create an invoice"
					}
				},
				"required": [
					"usage_gte"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.Item.Discount": {
				"properties": {
					"coupon": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Coupon"
							}
						],
						"nullable": true,
						"description": "ID of the coupon to create a new discount for."
					},
					"discount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Discount"
							}
						],
						"nullable": true,
						"description": "ID of an existing discount on the object (or one of its ancestors) to reuse."
					},
					"promotion_code": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PromotionCode"
							}
						],
						"nullable": true,
						"description": "ID of the promotion code to create a new discount for."
					}
				},
				"required": [
					"coupon",
					"discount",
					"promotion_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.DeletedPlan": {
				"description": "The DeletedPlan object.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"plan"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"deleted": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false,
						"description": "Always true for a deleted object"
					}
				},
				"required": [
					"id",
					"object",
					"deleted"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.Item": {
				"properties": {
					"billing_thresholds": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.Item.BillingThresholds"
							}
						],
						"nullable": true,
						"description": "Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period"
					},
					"discounts": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.Item.Discount"
						},
						"type": "array",
						"description": "The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an item. Metadata on this item will update the underlying subscription item's `metadata` when the phase is entered."
					},
					"plan": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Plan"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedPlan"
							}
						],
						"description": "ID of the plan to which the customer should be subscribed."
					},
					"price": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Price"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedPrice"
							}
						],
						"description": "ID of the price to which the customer should be subscribed."
					},
					"quantity": {
						"type": "number",
						"format": "double",
						"description": "Quantity of the plan to which the customer should be subscribed."
					},
					"tax_rates": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.TaxRate"
						},
						"type": "array",
						"nullable": true,
						"description": "The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`."
					}
				},
				"required": [
					"billing_thresholds",
					"discounts",
					"metadata",
					"plan",
					"price"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.ProrationBehavior": {
				"type": "string",
				"enum": [
					"always_invoice",
					"create_prorations",
					"none"
				]
			},
			"stripe.Stripe.SubscriptionSchedule.Phase.TransferData": {
				"properties": {
					"amount_percent": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination."
					},
					"destination": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The account where funds from the payment will be transferred to upon payment success."
					}
				},
				"required": [
					"amount_percent",
					"destination"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.Phase": {
				"properties": {
					"add_invoice_items": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.AddInvoiceItem"
						},
						"type": "array",
						"description": "A list of prices and quantities that will generate invoice items appended to the next invoice for this phase."
					},
					"application_fee_percent": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule."
					},
					"automatic_tax": {
						"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.AutomaticTax"
					},
					"billing_cycle_anchor": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.BillingCycleAnchor"
							}
						],
						"nullable": true,
						"description": "Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle)."
					},
					"billing_thresholds": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.BillingThresholds"
							}
						],
						"nullable": true,
						"description": "Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period"
					},
					"collection_method": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.CollectionMethod"
							}
						],
						"nullable": true,
						"description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`."
					},
					"coupon": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Coupon"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCoupon"
							}
						],
						"nullable": true,
						"description": "ID of the coupon to use during this phase of the subscription schedule."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"default_payment_method": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"nullable": true,
						"description": "ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings."
					},
					"default_tax_rates": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.TaxRate"
						},
						"type": "array",
						"nullable": true,
						"description": "The default tax rates to apply to the subscription during this phase of the subscription schedule."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs."
					},
					"discounts": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.Discount"
						},
						"type": "array",
						"description": "The stackable discounts that will be applied to the subscription on this phase. Subscription item discounts are applied before subscription discounts."
					},
					"end_date": {
						"type": "number",
						"format": "double",
						"description": "The end of this phase of the subscription schedule."
					},
					"invoice_settings": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.InvoiceSettings"
							}
						],
						"nullable": true,
						"description": "The invoice settings applicable during this phase."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.Item"
						},
						"type": "array",
						"description": "Subscription items to configure the subscription to during this phase of the subscription schedule."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule's phase will update the underlying subscription's `metadata` when the phase is entered. Updating the underlying subscription's `metadata` directly will not affect the current phase's `metadata`."
					},
					"on_behalf_of": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"nullable": true,
						"description": "The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details."
					},
					"proration_behavior": {
						"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.ProrationBehavior",
						"description": "If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`."
					},
					"start_date": {
						"type": "number",
						"format": "double",
						"description": "The start of this phase of the subscription schedule."
					},
					"transfer_data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase.TransferData"
							}
						],
						"nullable": true,
						"description": "The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices."
					},
					"trial_end": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "When the trial ends within the phase."
					}
				},
				"required": [
					"add_invoice_items",
					"application_fee_percent",
					"billing_cycle_anchor",
					"billing_thresholds",
					"collection_method",
					"coupon",
					"currency",
					"default_payment_method",
					"description",
					"discounts",
					"end_date",
					"invoice_settings",
					"items",
					"metadata",
					"on_behalf_of",
					"proration_behavior",
					"start_date",
					"transfer_data",
					"trial_end"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SubscriptionSchedule.Status": {
				"type": "string",
				"enum": [
					"active",
					"canceled",
					"completed",
					"not_started",
					"released"
				]
			},
			"stripe.Stripe.SubscriptionSchedule": {
				"description": "A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.\n\nRelated guide: [Subscription schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules)",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"subscription_schedule"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"application": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Application"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedApplication"
							}
						],
						"nullable": true,
						"description": "ID of the Connect Application that created the schedule."
					},
					"canceled_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch."
					},
					"completed_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"current_phase": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.CurrentPhase"
							}
						],
						"nullable": true,
						"description": "Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomer"
							}
						],
						"description": "ID of the customer who owns the subscription schedule."
					},
					"default_settings": {
						"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.DefaultSettings"
					},
					"end_behavior": {
						"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.EndBehavior",
						"description": "Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"phases": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Phase"
						},
						"type": "array",
						"description": "Configuration for the subscription schedule's phases."
					},
					"released_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Time at which the subscription schedule was released. Measured in seconds since the Unix epoch."
					},
					"released_subscription": {
						"type": "string",
						"nullable": true,
						"description": "ID of the subscription once managed by the subscription schedule (if it is released)."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.SubscriptionSchedule.Status",
						"description": "The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules)."
					},
					"subscription": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription"
							}
						],
						"nullable": true,
						"description": "ID of the subscription managed by the subscription schedule."
					},
					"test_clock": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.TestHelpers.TestClock"
							}
						],
						"nullable": true,
						"description": "ID of the test clock this subscription schedule belongs to."
					}
				},
				"required": [
					"id",
					"object",
					"application",
					"canceled_at",
					"completed_at",
					"created",
					"current_phase",
					"customer",
					"default_settings",
					"end_behavior",
					"livemode",
					"metadata",
					"phases",
					"released_at",
					"released_subscription",
					"status",
					"subscription",
					"test_clock"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.TotalDetails.Breakdown.Discount": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The amount discounted."
					},
					"discount": {
						"$ref": "#/components/schemas/stripe.Stripe.Discount",
						"description": "A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).\nIt contains information about when the discount began, when it will end, and what it is applied to.\n\nRelated guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)"
					}
				},
				"required": [
					"amount",
					"discount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.TotalDetails.Breakdown.Tax.TaxabilityReason": {
				"type": "string",
				"enum": [
					"customer_exempt",
					"not_collecting",
					"not_subject_to_tax",
					"not_supported",
					"portion_product_exempt",
					"portion_reduced_rated",
					"portion_standard_rated",
					"product_exempt",
					"product_exempt_holiday",
					"proportionally_rated",
					"reduced_rated",
					"reverse_charge",
					"standard_rated",
					"taxable_basis_reduced",
					"zero_rated"
				]
			},
			"stripe.Stripe.Quote.TotalDetails.Breakdown.Tax": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount of tax applied for this rate."
					},
					"rate": {
						"$ref": "#/components/schemas/stripe.Stripe.TaxRate",
						"description": "Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.\n\nRelated guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)"
					},
					"taxability_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Quote.TotalDetails.Breakdown.Tax.TaxabilityReason"
							}
						],
						"nullable": true,
						"description": "The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported."
					},
					"taxable_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount on which tax is calculated, in cents (or local equivalent)."
					}
				},
				"required": [
					"amount",
					"rate",
					"taxability_reason",
					"taxable_amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.TotalDetails.Breakdown": {
				"properties": {
					"discounts": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Quote.TotalDetails.Breakdown.Discount"
						},
						"type": "array",
						"description": "The aggregated discounts."
					},
					"taxes": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Quote.TotalDetails.Breakdown.Tax"
						},
						"type": "array",
						"description": "The aggregated tax amounts by rate."
					}
				},
				"required": [
					"discounts",
					"taxes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.TotalDetails": {
				"properties": {
					"amount_discount": {
						"type": "number",
						"format": "double",
						"description": "This is the sum of all the discounts."
					},
					"amount_shipping": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "This is the sum of all the shipping amounts."
					},
					"amount_tax": {
						"type": "number",
						"format": "double",
						"description": "This is the sum of all the tax amounts."
					},
					"breakdown": {
						"$ref": "#/components/schemas/stripe.Stripe.Quote.TotalDetails.Breakdown"
					}
				},
				"required": [
					"amount_discount",
					"amount_shipping",
					"amount_tax"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Quote.TransferData": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination."
					},
					"amount_percent": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount will be transferred to the destination."
					},
					"destination": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The account where funds from the payment will be transferred to upon payment success."
					}
				},
				"required": [
					"amount",
					"amount_percent",
					"destination"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.Rendering.Pdf.PageSize": {
				"type": "string",
				"enum": [
					"a4",
					"auto",
					"letter"
				]
			},
			"stripe.Stripe.Invoice.Rendering.Pdf": {
				"properties": {
					"page_size": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.Rendering.Pdf.PageSize"
							}
						],
						"nullable": true,
						"description": "Page size of invoice pdf. Options include a4, letter, and auto. If set to auto, page size will be switched to a4 or letter based on customer locale."
					}
				},
				"required": [
					"page_size"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.Rendering": {
				"properties": {
					"amount_tax_display": {
						"type": "string",
						"nullable": true,
						"description": "How line-item prices and amounts will be displayed with respect to tax on invoice PDFs."
					},
					"pdf": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.Rendering.Pdf"
							}
						],
						"nullable": true,
						"description": "Invoice pdf rendering options"
					},
					"template": {
						"type": "string",
						"nullable": true,
						"description": "ID of the rendering template that the invoice is formatted by."
					},
					"template_version": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Version of the rendering template that the invoice is using."
					}
				},
				"required": [
					"amount_tax_display",
					"pdf",
					"template",
					"template_version"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ShippingRate.DeliveryEstimate.Maximum.Unit": {
				"type": "string",
				"enum": [
					"business_day",
					"day",
					"hour",
					"month",
					"week"
				]
			},
			"stripe.Stripe.ShippingRate.DeliveryEstimate.Maximum": {
				"properties": {
					"unit": {
						"$ref": "#/components/schemas/stripe.Stripe.ShippingRate.DeliveryEstimate.Maximum.Unit",
						"description": "A unit of time."
					},
					"value": {
						"type": "number",
						"format": "double",
						"description": "Must be greater than 0."
					}
				},
				"required": [
					"unit",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ShippingRate.DeliveryEstimate.Minimum.Unit": {
				"type": "string",
				"enum": [
					"business_day",
					"day",
					"hour",
					"month",
					"week"
				]
			},
			"stripe.Stripe.ShippingRate.DeliveryEstimate.Minimum": {
				"properties": {
					"unit": {
						"$ref": "#/components/schemas/stripe.Stripe.ShippingRate.DeliveryEstimate.Minimum.Unit",
						"description": "A unit of time."
					},
					"value": {
						"type": "number",
						"format": "double",
						"description": "Must be greater than 0."
					}
				},
				"required": [
					"unit",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ShippingRate.DeliveryEstimate": {
				"properties": {
					"maximum": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.ShippingRate.DeliveryEstimate.Maximum"
							}
						],
						"nullable": true,
						"description": "The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite."
					},
					"minimum": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.ShippingRate.DeliveryEstimate.Minimum"
							}
						],
						"nullable": true,
						"description": "The lower bound of the estimated range. If empty, represents no lower bound."
					}
				},
				"required": [
					"maximum",
					"minimum"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ShippingRate.FixedAmount.CurrencyOptions.TaxBehavior": {
				"type": "string",
				"enum": [
					"exclusive",
					"inclusive",
					"unspecified"
				]
			},
			"stripe.Stripe.ShippingRate.FixedAmount.CurrencyOptions": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "A non-negative integer in cents representing how much to charge."
					},
					"tax_behavior": {
						"$ref": "#/components/schemas/stripe.Stripe.ShippingRate.FixedAmount.CurrencyOptions.TaxBehavior",
						"description": "Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`."
					}
				},
				"required": [
					"amount",
					"tax_behavior"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ShippingRate.FixedAmount": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "A non-negative integer in cents representing how much to charge."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"currency_options": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/stripe.Stripe.ShippingRate.FixedAmount.CurrencyOptions"
						},
						"type": "object",
						"description": "Shipping rates defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies)."
					}
				},
				"required": [
					"amount",
					"currency"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ShippingRate.TaxBehavior": {
				"type": "string",
				"enum": [
					"exclusive",
					"inclusive",
					"unspecified"
				]
			},
			"stripe.Stripe.ShippingRate": {
				"description": "Shipping rates describe the price of shipping presented to your customers and\napplied to a purchase. For more information, see [Charge for shipping](https://stripe.com/docs/payments/during-payment/charge-shipping).",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"shipping_rate"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"active": {
						"type": "boolean",
						"description": "Whether the shipping rate can be used for new purchases. Defaults to `true`."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"delivery_estimate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.ShippingRate.DeliveryEstimate"
							}
						],
						"nullable": true,
						"description": "The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions."
					},
					"display_name": {
						"type": "string",
						"nullable": true,
						"description": "The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions."
					},
					"fixed_amount": {
						"$ref": "#/components/schemas/stripe.Stripe.ShippingRate.FixedAmount"
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"tax_behavior": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.ShippingRate.TaxBehavior"
							}
						],
						"nullable": true,
						"description": "Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`."
					},
					"tax_code": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.TaxCode"
							}
						],
						"nullable": true,
						"description": "A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`."
					},
					"type": {
						"type": "string",
						"enum": [
							"fixed_amount"
						],
						"nullable": false,
						"description": "The type of calculation to use on the shipping rate."
					}
				},
				"required": [
					"id",
					"object",
					"active",
					"created",
					"delivery_estimate",
					"display_name",
					"livemode",
					"metadata",
					"tax_behavior",
					"tax_code",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.ShippingCost.Tax.TaxabilityReason": {
				"type": "string",
				"enum": [
					"customer_exempt",
					"not_collecting",
					"not_subject_to_tax",
					"not_supported",
					"portion_product_exempt",
					"portion_reduced_rated",
					"portion_standard_rated",
					"product_exempt",
					"product_exempt_holiday",
					"proportionally_rated",
					"reduced_rated",
					"reverse_charge",
					"standard_rated",
					"taxable_basis_reduced",
					"zero_rated"
				]
			},
			"stripe.Stripe.Invoice.ShippingCost.Tax": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount of tax applied for this rate."
					},
					"rate": {
						"$ref": "#/components/schemas/stripe.Stripe.TaxRate",
						"description": "Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.\n\nRelated guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)"
					},
					"taxability_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.ShippingCost.Tax.TaxabilityReason"
							}
						],
						"nullable": true,
						"description": "The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported."
					},
					"taxable_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount on which tax is calculated, in cents (or local equivalent)."
					}
				},
				"required": [
					"amount",
					"rate",
					"taxability_reason",
					"taxable_amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.ShippingCost": {
				"properties": {
					"amount_subtotal": {
						"type": "number",
						"format": "double",
						"description": "Total shipping cost before any taxes are applied."
					},
					"amount_tax": {
						"type": "number",
						"format": "double",
						"description": "Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0."
					},
					"amount_total": {
						"type": "number",
						"format": "double",
						"description": "Total shipping cost after taxes are applied."
					},
					"shipping_rate": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.ShippingRate"
							}
						],
						"nullable": true,
						"description": "The ID of the ShippingRate for this invoice."
					},
					"taxes": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Invoice.ShippingCost.Tax"
						},
						"type": "array",
						"description": "The taxes applied to the shipping rate."
					}
				},
				"required": [
					"amount_subtotal",
					"amount_tax",
					"amount_total",
					"shipping_rate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.ShippingDetails": {
				"properties": {
					"address": {
						"$ref": "#/components/schemas/stripe.Stripe.Address"
					},
					"carrier": {
						"type": "string",
						"nullable": true,
						"description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc."
					},
					"name": {
						"type": "string",
						"description": "Recipient name."
					},
					"phone": {
						"type": "string",
						"nullable": true,
						"description": "Recipient phone (including extension)."
					},
					"tracking_number": {
						"type": "string",
						"nullable": true,
						"description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.Status": {
				"type": "string",
				"enum": [
					"draft",
					"open",
					"paid",
					"uncollectible",
					"void"
				]
			},
			"stripe.Stripe.Invoice.StatusTransitions": {
				"properties": {
					"finalized_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The time that the invoice draft was finalized."
					},
					"marked_uncollectible_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The time that the invoice was marked uncollectible."
					},
					"paid_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The time that the invoice was paid."
					},
					"voided_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The time that the invoice was voided."
					}
				},
				"required": [
					"finalized_at",
					"marked_uncollectible_at",
					"paid_at",
					"voided_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.SubscriptionDetails": {
				"properties": {
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Metadata"
							}
						],
						"nullable": true,
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) defined as subscription metadata when an invoice is created. Becomes an immutable snapshot of the subscription metadata at the time of invoice finalization.\n *Note: This attribute is populated only for invoices created on or after June 29, 2023.*"
					}
				},
				"required": [
					"metadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.ThresholdReason.ItemReason": {
				"properties": {
					"line_item_ids": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The IDs of the line items that triggered the threshold invoice."
					},
					"usage_gte": {
						"type": "number",
						"format": "double",
						"description": "The quantity threshold boundary that applied to the given line item."
					}
				},
				"required": [
					"line_item_ids",
					"usage_gte"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.ThresholdReason": {
				"properties": {
					"amount_gte": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The total invoice amount threshold boundary if it triggered the threshold invoice."
					},
					"item_reasons": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Invoice.ThresholdReason.ItemReason"
						},
						"type": "array",
						"description": "Indicates which line items triggered a threshold invoice."
					}
				},
				"required": [
					"amount_gte",
					"item_reasons"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.TotalDiscountAmount": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The amount, in cents (or local equivalent), of the discount."
					},
					"discount": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Discount"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedDiscount"
							}
						],
						"description": "The discount that was applied to get this discount amount."
					}
				},
				"required": [
					"amount",
					"discount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.TotalTaxAmount.TaxabilityReason": {
				"type": "string",
				"enum": [
					"customer_exempt",
					"not_collecting",
					"not_subject_to_tax",
					"not_supported",
					"portion_product_exempt",
					"portion_reduced_rated",
					"portion_standard_rated",
					"product_exempt",
					"product_exempt_holiday",
					"proportionally_rated",
					"reduced_rated",
					"reverse_charge",
					"standard_rated",
					"taxable_basis_reduced",
					"zero_rated"
				]
			},
			"stripe.Stripe.Invoice.TotalTaxAmount": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "The amount, in cents (or local equivalent), of the tax."
					},
					"inclusive": {
						"type": "boolean",
						"description": "Whether this tax amount is inclusive or exclusive."
					},
					"tax_rate": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.TaxRate"
							}
						],
						"description": "The tax rate that was applied to get this tax amount."
					},
					"taxability_reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice.TotalTaxAmount.TaxabilityReason"
							}
						],
						"nullable": true,
						"description": "The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported."
					},
					"taxable_amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount on which tax is calculated, in cents (or local equivalent)."
					}
				},
				"required": [
					"amount",
					"inclusive",
					"tax_rate",
					"taxability_reason",
					"taxable_amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Invoice.TransferData": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination."
					},
					"destination": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The account where funds from the payment will be transferred to upon payment success."
					}
				},
				"required": [
					"amount",
					"destination"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.LastPaymentError.Code": {
				"type": "string",
				"enum": [
					"account_closed",
					"account_country_invalid_address",
					"account_error_country_change_requires_additional_steps",
					"account_information_mismatch",
					"account_invalid",
					"account_number_invalid",
					"acss_debit_session_incomplete",
					"alipay_upgrade_required",
					"amount_too_large",
					"amount_too_small",
					"api_key_expired",
					"application_fees_not_allowed",
					"authentication_required",
					"balance_insufficient",
					"balance_invalid_parameter",
					"bank_account_bad_routing_numbers",
					"bank_account_declined",
					"bank_account_exists",
					"bank_account_restricted",
					"bank_account_unusable",
					"bank_account_unverified",
					"bank_account_verification_failed",
					"billing_invalid_mandate",
					"bitcoin_upgrade_required",
					"capture_charge_authorization_expired",
					"capture_unauthorized_payment",
					"card_decline_rate_limit_exceeded",
					"card_declined",
					"cardholder_phone_number_required",
					"charge_already_captured",
					"charge_already_refunded",
					"charge_disputed",
					"charge_exceeds_source_limit",
					"charge_exceeds_transaction_limit",
					"charge_expired_for_capture",
					"charge_invalid_parameter",
					"charge_not_refundable",
					"clearing_code_unsupported",
					"country_code_invalid",
					"country_unsupported",
					"coupon_expired",
					"customer_max_payment_methods",
					"customer_max_subscriptions",
					"customer_tax_location_invalid",
					"debit_not_authorized",
					"email_invalid",
					"expired_card",
					"financial_connections_account_inactive",
					"financial_connections_no_successful_transaction_refresh",
					"forwarding_api_inactive",
					"forwarding_api_invalid_parameter",
					"forwarding_api_upstream_connection_error",
					"forwarding_api_upstream_connection_timeout",
					"idempotency_key_in_use",
					"incorrect_address",
					"incorrect_cvc",
					"incorrect_number",
					"incorrect_zip",
					"instant_payouts_config_disabled",
					"instant_payouts_currency_disabled",
					"instant_payouts_limit_exceeded",
					"instant_payouts_unsupported",
					"insufficient_funds",
					"intent_invalid_state",
					"intent_verification_method_missing",
					"invalid_card_type",
					"invalid_characters",
					"invalid_charge_amount",
					"invalid_cvc",
					"invalid_expiry_month",
					"invalid_expiry_year",
					"invalid_mandate_reference_prefix_format",
					"invalid_number",
					"invalid_source_usage",
					"invalid_tax_location",
					"invoice_no_customer_line_items",
					"invoice_no_payment_method_types",
					"invoice_no_subscription_line_items",
					"invoice_not_editable",
					"invoice_on_behalf_of_not_editable",
					"invoice_payment_intent_requires_action",
					"invoice_upcoming_none",
					"livemode_mismatch",
					"lock_timeout",
					"missing",
					"no_account",
					"not_allowed_on_standard_account",
					"out_of_inventory",
					"ownership_declaration_not_allowed",
					"parameter_invalid_empty",
					"parameter_invalid_integer",
					"parameter_invalid_string_blank",
					"parameter_invalid_string_empty",
					"parameter_missing",
					"parameter_unknown",
					"parameters_exclusive",
					"payment_intent_action_required",
					"payment_intent_authentication_failure",
					"payment_intent_incompatible_payment_method",
					"payment_intent_invalid_parameter",
					"payment_intent_konbini_rejected_confirmation_number",
					"payment_intent_mandate_invalid",
					"payment_intent_payment_attempt_expired",
					"payment_intent_payment_attempt_failed",
					"payment_intent_unexpected_state",
					"payment_method_bank_account_already_verified",
					"payment_method_bank_account_blocked",
					"payment_method_billing_details_address_missing",
					"payment_method_configuration_failures",
					"payment_method_currency_mismatch",
					"payment_method_customer_decline",
					"payment_method_invalid_parameter",
					"payment_method_invalid_parameter_testmode",
					"payment_method_microdeposit_failed",
					"payment_method_microdeposit_verification_amounts_invalid",
					"payment_method_microdeposit_verification_amounts_mismatch",
					"payment_method_microdeposit_verification_attempts_exceeded",
					"payment_method_microdeposit_verification_descriptor_code_mismatch",
					"payment_method_microdeposit_verification_timeout",
					"payment_method_not_available",
					"payment_method_provider_decline",
					"payment_method_provider_timeout",
					"payment_method_unactivated",
					"payment_method_unexpected_state",
					"payment_method_unsupported_type",
					"payout_reconciliation_not_ready",
					"payouts_limit_exceeded",
					"payouts_not_allowed",
					"platform_account_required",
					"platform_api_key_expired",
					"postal_code_invalid",
					"processing_error",
					"product_inactive",
					"progressive_onboarding_limit_exceeded",
					"rate_limit",
					"refer_to_customer",
					"refund_disputed_payment",
					"resource_already_exists",
					"resource_missing",
					"return_intent_already_processed",
					"routing_number_invalid",
					"secret_key_required",
					"sepa_unsupported_account",
					"setup_attempt_failed",
					"setup_intent_authentication_failure",
					"setup_intent_invalid_parameter",
					"setup_intent_mandate_invalid",
					"setup_intent_setup_attempt_expired",
					"setup_intent_unexpected_state",
					"shipping_address_invalid",
					"shipping_calculation_failed",
					"sku_inactive",
					"state_unsupported",
					"status_transition_invalid",
					"stripe_tax_inactive",
					"tax_id_invalid",
					"taxes_calculation_failed",
					"terminal_location_country_unsupported",
					"terminal_reader_busy",
					"terminal_reader_hardware_fault",
					"terminal_reader_invalid_location_for_activation",
					"terminal_reader_invalid_location_for_payment",
					"terminal_reader_offline",
					"terminal_reader_timeout",
					"testmode_charges_only",
					"tls_version_unsupported",
					"token_already_used",
					"token_card_network_invalid",
					"token_in_use",
					"transfer_source_balance_parameters_mismatch",
					"transfers_not_allowed",
					"url_invalid"
				]
			},
			"stripe.Stripe.PaymentIntent.LastPaymentError.Type": {
				"type": "string",
				"enum": [
					"api_error",
					"card_error",
					"idempotency_error",
					"invalid_request_error"
				]
			},
			"stripe.Stripe.PaymentIntent.LastPaymentError": {
				"properties": {
					"charge": {
						"type": "string",
						"description": "For card errors, the ID of the failed charge."
					},
					"code": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.LastPaymentError.Code",
						"description": "For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported."
					},
					"decline_code": {
						"type": "string",
						"description": "For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one."
					},
					"doc_url": {
						"type": "string",
						"description": "A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported."
					},
					"message": {
						"type": "string",
						"description": "A human-readable message providing more details about the error. For card errors, these messages can be shown to your users."
					},
					"param": {
						"type": "string",
						"description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field."
					},
					"payment_intent": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent",
						"description": "A PaymentIntent guides you through the process of collecting a payment from your customer.\nWe recommend that you create exactly one PaymentIntent for each order or\ncustomer session in your system. You can reference the PaymentIntent later to\nsee the history of payment attempts for a particular session.\n\nA PaymentIntent transitions through\n[multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)\nthroughout its lifetime as it interfaces with Stripe.js to perform\nauthentication flows and ultimately creates at most one successful charge.\n\nRelated guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)"
					},
					"payment_method": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod",
						"description": "PaymentMethod objects represent your customer's payment instruments.\nYou can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to\nCustomer objects to store instrument details for future payments.\n\nRelated guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios)."
					},
					"payment_method_type": {
						"type": "string",
						"description": "If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors."
					},
					"request_log_url": {
						"type": "string",
						"description": "A URL to the request log entry in your dashboard."
					},
					"setup_intent": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent",
						"description": "A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.\nFor example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.\nLater, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.\n\nCreate a SetupIntent when you're ready to collect your customer's payment credentials.\nDon't maintain long-lived, unconfirmed SetupIntents because they might not be valid.\nThe SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides\nyou through the setup process.\n\nSuccessful SetupIntents result in payment credentials that are optimized for future payments.\nFor example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through\n[Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection\nto streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).\nIf you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),\nit automatically attaches the resulting payment method to that Customer after successful setup.\nWe recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on\nPaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.\n\nBy using SetupIntents, you can reduce friction for your customers, even as regulations change over time.\n\nRelated guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)"
					},
					"source": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerSource"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.LastPaymentError.Type",
						"description": "The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.AlipayHandleRedirect": {
				"properties": {
					"native_data": {
						"type": "string",
						"nullable": true,
						"description": "The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App."
					},
					"native_url": {
						"type": "string",
						"nullable": true,
						"description": "The native URL you must redirect your customer to in order to authenticate the payment in an iOS App."
					},
					"return_url": {
						"type": "string",
						"nullable": true,
						"description": "If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion."
					},
					"url": {
						"type": "string",
						"nullable": true,
						"description": "The URL you must redirect your customer to in order to authenticate the payment."
					}
				},
				"required": [
					"native_data",
					"native_url",
					"return_url",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.BoletoDisplayDetails": {
				"properties": {
					"expires_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The timestamp after which the boleto expires."
					},
					"hosted_voucher_url": {
						"type": "string",
						"nullable": true,
						"description": "The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher."
					},
					"number": {
						"type": "string",
						"nullable": true,
						"description": "The boleto number."
					},
					"pdf": {
						"type": "string",
						"nullable": true,
						"description": "The URL to the downloadable boleto voucher PDF."
					}
				},
				"required": [
					"expires_at",
					"hosted_voucher_url",
					"number",
					"pdf"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.CardAwaitNotification": {
				"properties": {
					"charge_attempt_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The time that payment will be attempted. If customer approval is required, they need to provide approval before this time."
					},
					"customer_approval_required": {
						"type": "boolean",
						"nullable": true,
						"description": "For payments greater than INR 15000, the customer must provide explicit approval of the payment with their bank. For payments of lower amount, no customer action is required."
					}
				},
				"required": [
					"charge_attempt_at",
					"customer_approval_required"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.CashappHandleRedirectOrDisplayQrCode.QrCode": {
				"properties": {
					"expires_at": {
						"type": "number",
						"format": "double",
						"description": "The date (unix timestamp) when the QR code expires."
					},
					"image_url_png": {
						"type": "string",
						"description": "The image_url_png string used to render QR code"
					},
					"image_url_svg": {
						"type": "string",
						"description": "The image_url_svg string used to render QR code"
					}
				},
				"required": [
					"expires_at",
					"image_url_png",
					"image_url_svg"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.CashappHandleRedirectOrDisplayQrCode": {
				"properties": {
					"hosted_instructions_url": {
						"type": "string",
						"description": "The URL to the hosted Cash App Pay instructions page, which allows customers to view the QR code, and supports QR code refreshing on expiration."
					},
					"mobile_auth_url": {
						"type": "string",
						"description": "The url for mobile redirect based auth"
					},
					"qr_code": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.CashappHandleRedirectOrDisplayQrCode.QrCode"
					}
				},
				"required": [
					"hosted_instructions_url",
					"mobile_auth_url",
					"qr_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Aba": {
				"properties": {
					"account_number": {
						"type": "string",
						"description": "The ABA account number"
					},
					"bank_name": {
						"type": "string",
						"description": "The bank name"
					},
					"routing_number": {
						"type": "string",
						"description": "The ABA routing number"
					}
				},
				"required": [
					"account_number",
					"bank_name",
					"routing_number"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Iban": {
				"properties": {
					"account_holder_name": {
						"type": "string",
						"description": "The name of the person or business that owns the bank account"
					},
					"bic": {
						"type": "string",
						"description": "The BIC/SWIFT code of the account."
					},
					"country": {
						"type": "string",
						"description": "Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."
					},
					"iban": {
						"type": "string",
						"description": "The IBAN of the account."
					}
				},
				"required": [
					"account_holder_name",
					"bic",
					"country",
					"iban"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.SortCode": {
				"properties": {
					"account_holder_name": {
						"type": "string",
						"description": "The name of the person or business that owns the bank account"
					},
					"account_number": {
						"type": "string",
						"description": "The account number"
					},
					"sort_code": {
						"type": "string",
						"description": "The six-digit sort code"
					}
				},
				"required": [
					"account_holder_name",
					"account_number",
					"sort_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Spei": {
				"properties": {
					"bank_code": {
						"type": "string",
						"description": "The three-digit bank code"
					},
					"bank_name": {
						"type": "string",
						"description": "The short banking institution name"
					},
					"clabe": {
						"type": "string",
						"description": "The CLABE number"
					}
				},
				"required": [
					"bank_code",
					"bank_name",
					"clabe"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.SupportedNetwork": {
				"type": "string",
				"enum": [
					"ach",
					"bacs",
					"domestic_wire_us",
					"fps",
					"sepa",
					"spei",
					"swift",
					"zengin"
				]
			},
			"stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Swift": {
				"properties": {
					"account_number": {
						"type": "string",
						"description": "The account number"
					},
					"bank_name": {
						"type": "string",
						"description": "The bank name"
					},
					"swift_code": {
						"type": "string",
						"description": "The SWIFT code"
					}
				},
				"required": [
					"account_number",
					"bank_name",
					"swift_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Type": {
				"type": "string",
				"enum": [
					"aba",
					"iban",
					"sort_code",
					"spei",
					"swift",
					"zengin"
				]
			},
			"stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Zengin": {
				"properties": {
					"account_holder_name": {
						"type": "string",
						"nullable": true,
						"description": "The account holder name"
					},
					"account_number": {
						"type": "string",
						"nullable": true,
						"description": "The account number"
					},
					"account_type": {
						"type": "string",
						"nullable": true,
						"description": "The bank account type. In Japan, this can only be `futsu` or `toza`."
					},
					"bank_code": {
						"type": "string",
						"nullable": true,
						"description": "The bank code of the account"
					},
					"bank_name": {
						"type": "string",
						"nullable": true,
						"description": "The bank name of the account"
					},
					"branch_code": {
						"type": "string",
						"nullable": true,
						"description": "The branch code of the account"
					},
					"branch_name": {
						"type": "string",
						"nullable": true,
						"description": "The branch name of the account"
					}
				},
				"required": [
					"account_holder_name",
					"account_number",
					"account_type",
					"bank_code",
					"bank_name",
					"branch_code",
					"branch_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress": {
				"properties": {
					"aba": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Aba",
						"description": "ABA Records contain U.S. bank account details per the ABA format."
					},
					"iban": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Iban",
						"description": "Iban Records contain E.U. bank account details per the SEPA format."
					},
					"sort_code": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.SortCode",
						"description": "Sort Code Records contain U.K. bank account details per the sort code format."
					},
					"spei": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Spei",
						"description": "SPEI Records contain Mexico bank account details per the SPEI format."
					},
					"supported_networks": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.SupportedNetwork"
						},
						"type": "array",
						"description": "The payment networks supported by this FinancialAddress"
					},
					"swift": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Swift",
						"description": "SWIFT Records contain U.S. bank account details per the SWIFT format."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Type",
						"description": "The type of financial address"
					},
					"zengin": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Zengin",
						"description": "Zengin Records contain Japan bank account details per the Zengin format."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.Type": {
				"type": "string",
				"enum": [
					"eu_bank_transfer",
					"gb_bank_transfer",
					"jp_bank_transfer",
					"mx_bank_transfer",
					"us_bank_transfer"
				]
			},
			"stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions": {
				"properties": {
					"amount_remaining": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The remaining amount that needs to be transferred to complete the payment."
					},
					"currency": {
						"type": "string",
						"nullable": true,
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"financial_addresses": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress"
						},
						"type": "array",
						"description": "A list of financial addresses that can be used to fund the customer balance"
					},
					"hosted_instructions_url": {
						"type": "string",
						"nullable": true,
						"description": "A link to a hosted page that guides your customer through completing the transfer."
					},
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.Type",
						"description": "Type of bank transfer"
					}
				},
				"required": [
					"amount_remaining",
					"currency",
					"hosted_instructions_url",
					"reference",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Familymart": {
				"properties": {
					"confirmation_number": {
						"type": "string",
						"description": "The confirmation number."
					},
					"payment_code": {
						"type": "string",
						"description": "The payment code."
					}
				},
				"required": [
					"payment_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Lawson": {
				"properties": {
					"confirmation_number": {
						"type": "string",
						"description": "The confirmation number."
					},
					"payment_code": {
						"type": "string",
						"description": "The payment code."
					}
				},
				"required": [
					"payment_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Ministop": {
				"properties": {
					"confirmation_number": {
						"type": "string",
						"description": "The confirmation number."
					},
					"payment_code": {
						"type": "string",
						"description": "The payment code."
					}
				},
				"required": [
					"payment_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Seicomart": {
				"properties": {
					"confirmation_number": {
						"type": "string",
						"description": "The confirmation number."
					},
					"payment_code": {
						"type": "string",
						"description": "The payment code."
					}
				},
				"required": [
					"payment_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores": {
				"properties": {
					"familymart": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Familymart"
							}
						],
						"nullable": true,
						"description": "FamilyMart instruction details."
					},
					"lawson": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Lawson"
							}
						],
						"nullable": true,
						"description": "Lawson instruction details."
					},
					"ministop": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Ministop"
							}
						],
						"nullable": true,
						"description": "Ministop instruction details."
					},
					"seicomart": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Seicomart"
							}
						],
						"nullable": true,
						"description": "Seicomart instruction details."
					}
				},
				"required": [
					"familymart",
					"lawson",
					"ministop",
					"seicomart"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails": {
				"properties": {
					"expires_at": {
						"type": "number",
						"format": "double",
						"description": "The timestamp at which the pending Konbini payment expires."
					},
					"hosted_voucher_url": {
						"type": "string",
						"nullable": true,
						"description": "The URL for the Konbini payment instructions page, which allows customers to view and print a Konbini voucher."
					},
					"stores": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores"
					}
				},
				"required": [
					"expires_at",
					"hosted_voucher_url",
					"stores"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.MultibancoDisplayDetails": {
				"properties": {
					"entity": {
						"type": "string",
						"nullable": true,
						"description": "Entity number associated with this Multibanco payment."
					},
					"expires_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The timestamp at which the Multibanco voucher expires."
					},
					"hosted_voucher_url": {
						"type": "string",
						"nullable": true,
						"description": "The URL for the hosted Multibanco voucher page, which allows customers to view a Multibanco voucher."
					},
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "Reference number associated with this Multibanco payment."
					}
				},
				"required": [
					"entity",
					"expires_at",
					"hosted_voucher_url",
					"reference"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.OxxoDisplayDetails": {
				"properties": {
					"expires_after": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The timestamp after which the OXXO voucher expires."
					},
					"hosted_voucher_url": {
						"type": "string",
						"nullable": true,
						"description": "The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher."
					},
					"number": {
						"type": "string",
						"nullable": true,
						"description": "OXXO reference number."
					}
				},
				"required": [
					"expires_after",
					"hosted_voucher_url",
					"number"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.PaynowDisplayQrCode": {
				"properties": {
					"data": {
						"type": "string",
						"description": "The raw data string used to generate QR code, it should be used together with QR code library."
					},
					"hosted_instructions_url": {
						"type": "string",
						"nullable": true,
						"description": "The URL to the hosted PayNow instructions page, which allows customers to view the PayNow QR code."
					},
					"image_url_png": {
						"type": "string",
						"description": "The image_url_png string used to render QR code"
					},
					"image_url_svg": {
						"type": "string",
						"description": "The image_url_svg string used to render QR code"
					}
				},
				"required": [
					"data",
					"hosted_instructions_url",
					"image_url_png",
					"image_url_svg"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.PixDisplayQrCode": {
				"properties": {
					"data": {
						"type": "string",
						"description": "The raw data string used to generate QR code, it should be used together with QR code library."
					},
					"expires_at": {
						"type": "number",
						"format": "double",
						"description": "The date (unix timestamp) when the PIX expires."
					},
					"hosted_instructions_url": {
						"type": "string",
						"description": "The URL to the hosted pix instructions page, which allows customers to view the pix QR code."
					},
					"image_url_png": {
						"type": "string",
						"description": "The image_url_png string used to render png QR code"
					},
					"image_url_svg": {
						"type": "string",
						"description": "The image_url_svg string used to render svg QR code"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.PromptpayDisplayQrCode": {
				"properties": {
					"data": {
						"type": "string",
						"description": "The raw data string used to generate QR code, it should be used together with QR code library."
					},
					"hosted_instructions_url": {
						"type": "string",
						"description": "The URL to the hosted PromptPay instructions page, which allows customers to view the PromptPay QR code."
					},
					"image_url_png": {
						"type": "string",
						"description": "The PNG path used to render the QR code, can be used as the source in an HTML img tag"
					},
					"image_url_svg": {
						"type": "string",
						"description": "The SVG path used to render the QR code, can be used as the source in an HTML img tag"
					}
				},
				"required": [
					"data",
					"hosted_instructions_url",
					"image_url_png",
					"image_url_svg"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.RedirectToUrl": {
				"properties": {
					"return_url": {
						"type": "string",
						"nullable": true,
						"description": "If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion."
					},
					"url": {
						"type": "string",
						"nullable": true,
						"description": "The URL you must redirect your customer to in order to authenticate the payment."
					}
				},
				"required": [
					"return_url",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.SwishHandleRedirectOrDisplayQrCode.QrCode": {
				"properties": {
					"data": {
						"type": "string",
						"description": "The raw data string used to generate QR code, it should be used together with QR code library."
					},
					"image_url_png": {
						"type": "string",
						"description": "The image_url_png string used to render QR code"
					},
					"image_url_svg": {
						"type": "string",
						"description": "The image_url_svg string used to render QR code"
					}
				},
				"required": [
					"data",
					"image_url_png",
					"image_url_svg"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.SwishHandleRedirectOrDisplayQrCode": {
				"properties": {
					"hosted_instructions_url": {
						"type": "string",
						"description": "The URL to the hosted Swish instructions page, which allows customers to view the QR code."
					},
					"mobile_auth_url": {
						"type": "string",
						"description": "The url for mobile redirect based auth (for internal use only and not typically available in standard API requests)."
					},
					"qr_code": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.SwishHandleRedirectOrDisplayQrCode.QrCode"
					}
				},
				"required": [
					"hosted_instructions_url",
					"mobile_auth_url",
					"qr_code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.UseStripeSdk": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.VerifyWithMicrodeposits.MicrodepositType": {
				"type": "string",
				"enum": [
					"amounts",
					"descriptor_code"
				]
			},
			"stripe.Stripe.PaymentIntent.NextAction.VerifyWithMicrodeposits": {
				"properties": {
					"arrival_date": {
						"type": "number",
						"format": "double",
						"description": "The timestamp when the microdeposits are expected to land."
					},
					"hosted_verification_url": {
						"type": "string",
						"description": "The URL for the hosted verification page, which allows customers to verify their bank account."
					},
					"microdeposit_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.VerifyWithMicrodeposits.MicrodepositType"
							}
						],
						"nullable": true,
						"description": "The type of the microdeposit sent to the customer. Used to distinguish between different verification methods."
					}
				},
				"required": [
					"arrival_date",
					"hosted_verification_url",
					"microdeposit_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.WechatPayDisplayQrCode": {
				"properties": {
					"data": {
						"type": "string",
						"description": "The data being used to generate QR code"
					},
					"hosted_instructions_url": {
						"type": "string",
						"description": "The URL to the hosted WeChat Pay instructions page, which allows customers to view the WeChat Pay QR code."
					},
					"image_data_url": {
						"type": "string",
						"description": "The base64 image data for a pre-generated QR code"
					},
					"image_url_png": {
						"type": "string",
						"description": "The image_url_png string used to render QR code"
					},
					"image_url_svg": {
						"type": "string",
						"description": "The image_url_svg string used to render QR code"
					}
				},
				"required": [
					"data",
					"hosted_instructions_url",
					"image_data_url",
					"image_url_png",
					"image_url_svg"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.WechatPayRedirectToAndroidApp": {
				"properties": {
					"app_id": {
						"type": "string",
						"description": "app_id is the APP ID registered on WeChat open platform"
					},
					"nonce_str": {
						"type": "string",
						"description": "nonce_str is a random string"
					},
					"package": {
						"type": "string",
						"description": "package is static value"
					},
					"partner_id": {
						"type": "string",
						"description": "an unique merchant ID assigned by WeChat Pay"
					},
					"prepay_id": {
						"type": "string",
						"description": "an unique trading ID assigned by WeChat Pay"
					},
					"sign": {
						"type": "string",
						"description": "A signature"
					},
					"timestamp": {
						"type": "string",
						"description": "Specifies the current time in epoch format"
					}
				},
				"required": [
					"app_id",
					"nonce_str",
					"package",
					"partner_id",
					"prepay_id",
					"sign",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction.WechatPayRedirectToIosApp": {
				"properties": {
					"native_url": {
						"type": "string",
						"description": "An universal link that redirect to WeChat Pay app"
					}
				},
				"required": [
					"native_url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.NextAction": {
				"properties": {
					"alipay_handle_redirect": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.AlipayHandleRedirect"
					},
					"boleto_display_details": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.BoletoDisplayDetails"
					},
					"card_await_notification": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.CardAwaitNotification"
					},
					"cashapp_handle_redirect_or_display_qr_code": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.CashappHandleRedirectOrDisplayQrCode"
					},
					"display_bank_transfer_instructions": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions"
					},
					"konbini_display_details": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails"
					},
					"multibanco_display_details": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.MultibancoDisplayDetails"
					},
					"oxxo_display_details": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.OxxoDisplayDetails"
					},
					"paynow_display_qr_code": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.PaynowDisplayQrCode"
					},
					"pix_display_qr_code": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.PixDisplayQrCode"
					},
					"promptpay_display_qr_code": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.PromptpayDisplayQrCode"
					},
					"redirect_to_url": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.RedirectToUrl"
					},
					"swish_handle_redirect_or_display_qr_code": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.SwishHandleRedirectOrDisplayQrCode"
					},
					"type": {
						"type": "string",
						"description": "Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`."
					},
					"use_stripe_sdk": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.UseStripeSdk",
						"description": "When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js."
					},
					"verify_with_microdeposits": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.VerifyWithMicrodeposits"
					},
					"wechat_pay_display_qr_code": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.WechatPayDisplayQrCode"
					},
					"wechat_pay_redirect_to_android_app": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.WechatPayRedirectToAndroidApp"
					},
					"wechat_pay_redirect_to_ios_app": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.NextAction.WechatPayRedirectToIosApp"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodConfigurationDetails": {
				"properties": {
					"id": {
						"type": "string",
						"description": "ID of the payment method configuration used."
					},
					"parent": {
						"type": "string",
						"nullable": true,
						"description": "ID of the parent payment method configuration used."
					}
				},
				"required": [
					"id",
					"parent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.MandateOptions.PaymentSchedule": {
				"type": "string",
				"enum": [
					"combined",
					"interval",
					"sporadic"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType": {
				"type": "string",
				"enum": [
					"business",
					"personal"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.MandateOptions": {
				"properties": {
					"custom_mandate_url": {
						"type": "string",
						"description": "A URL for custom mandate text"
					},
					"interval_description": {
						"type": "string",
						"nullable": true,
						"description": "Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'."
					},
					"payment_schedule": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.MandateOptions.PaymentSchedule"
							}
						],
						"nullable": true,
						"description": "Payment schedule for the mandate."
					},
					"transaction_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType"
							}
						],
						"nullable": true,
						"description": "Transaction type of the mandate."
					}
				},
				"required": [
					"interval_description",
					"payment_schedule",
					"transaction_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session",
					"on_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.VerificationMethod": {
				"type": "string",
				"enum": [
					"automatic",
					"instant",
					"microdeposits"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit": {
				"properties": {
					"mandate_options": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.MandateOptions"
					},
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					},
					"verification_method": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.VerificationMethod",
						"description": "Bank account verification method."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Affirm": {
				"properties": {
					"capture_method": {
						"type": "string",
						"enum": [
							"manual"
						],
						"nullable": false,
						"description": "Controls when the funds will be captured from the customer's account."
					},
					"preferred_locale": {
						"type": "string",
						"description": "Preferred language of the Affirm authorization page that the customer is redirected to."
					},
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.AfterpayClearpay": {
				"properties": {
					"capture_method": {
						"type": "string",
						"enum": [
							"manual"
						],
						"nullable": false,
						"description": "Controls when the funds will be captured from the customer's account."
					},
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "An internal identifier or reference that this payment corresponds to. You must limit the identifier to 128 characters, and it can only contain letters, numbers, underscores, backslashes, and dashes.\nThis field differs from the statement descriptor and item name."
					},
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"required": [
					"reference"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Alipay.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Alipay": {
				"properties": {
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Alipay.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.AmazonPay.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.AmazonPay": {
				"properties": {
					"capture_method": {
						"type": "string",
						"enum": [
							"manual"
						],
						"nullable": false,
						"description": "Controls when the funds will be captured from the customer's account."
					},
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.AmazonPay.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.AuBecsDebit.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session",
					"on_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.AuBecsDebit": {
				"properties": {
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.AuBecsDebit.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.BacsDebit.MandateOptions": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.BacsDebit.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session",
					"on_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.BacsDebit": {
				"properties": {
					"mandate_options": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.BacsDebit.MandateOptions"
					},
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.BacsDebit.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Bancontact.PreferredLanguage": {
				"type": "string",
				"enum": [
					"de",
					"en",
					"fr",
					"nl"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Bancontact.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Bancontact": {
				"properties": {
					"preferred_language": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Bancontact.PreferredLanguage",
						"description": "Preferred language of the Bancontact authorization page that the customer is redirected to."
					},
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Bancontact.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"required": [
					"preferred_language"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Blik": {
				"properties": {
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Boleto.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session",
					"on_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Boleto": {
				"properties": {
					"expires_after_days": {
						"type": "number",
						"format": "double",
						"description": "The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time."
					},
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Boleto.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"required": [
					"expires_after_days"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Installments.AvailablePlan": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card."
					},
					"interval": {
						"type": "string",
						"enum": [
							"month",
							null
						],
						"nullable": true,
						"description": "For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.\nOne of `month`."
					},
					"type": {
						"type": "string",
						"enum": [
							"fixed_count"
						],
						"nullable": false,
						"description": "Type of installment plan, one of `fixed_count`."
					}
				},
				"required": [
					"count",
					"interval",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Installments.Plan": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card."
					},
					"interval": {
						"type": "string",
						"enum": [
							"month",
							null
						],
						"nullable": true,
						"description": "For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.\nOne of `month`."
					},
					"type": {
						"type": "string",
						"enum": [
							"fixed_count"
						],
						"nullable": false,
						"description": "Type of installment plan, one of `fixed_count`."
					}
				},
				"required": [
					"count",
					"interval",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Installments": {
				"properties": {
					"available_plans": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Installments.AvailablePlan"
						},
						"type": "array",
						"nullable": true,
						"description": "Installment plans that may be selected for this PaymentIntent."
					},
					"enabled": {
						"type": "boolean",
						"description": "Whether Installments are enabled for this PaymentIntent."
					},
					"plan": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Installments.Plan"
							}
						],
						"nullable": true,
						"description": "Installment plan selected for this PaymentIntent."
					}
				},
				"required": [
					"available_plans",
					"enabled",
					"plan"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.MandateOptions.AmountType": {
				"type": "string",
				"enum": [
					"fixed",
					"maximum"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.MandateOptions.Interval": {
				"type": "string",
				"enum": [
					"day",
					"month",
					"sporadic",
					"week",
					"year"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.MandateOptions": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount to be charged for future payments."
					},
					"amount_type": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.MandateOptions.AmountType",
						"description": "One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "A description of the mandate or subscription that is meant to be displayed to the customer."
					},
					"end_date": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date."
					},
					"interval": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.MandateOptions.Interval",
						"description": "Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`."
					},
					"interval_count": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`."
					},
					"reference": {
						"type": "string",
						"description": "Unique identifier for the mandate or subscription."
					},
					"start_date": {
						"type": "number",
						"format": "double",
						"description": "Start date of the mandate or subscription. Start date should not be lesser than yesterday."
					},
					"supported_types": {
						"items": {
							"type": "string",
							"enum": [
								"india"
							],
							"nullable": false
						},
						"type": "array",
						"nullable": true,
						"description": "Specifies the type of mandates supported. Possible values are `india`."
					}
				},
				"required": [
					"amount",
					"amount_type",
					"description",
					"end_date",
					"interval",
					"interval_count",
					"reference",
					"start_date",
					"supported_types"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Network": {
				"type": "string",
				"enum": [
					"amex",
					"cartes_bancaires",
					"diners",
					"discover",
					"eftpos_au",
					"girocard",
					"interac",
					"jcb",
					"mastercard",
					"unionpay",
					"unknown",
					"visa"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestExtendedAuthorization": {
				"type": "string",
				"enum": [
					"if_available",
					"never"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestIncrementalAuthorization": {
				"type": "string",
				"enum": [
					"if_available",
					"never"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestMulticapture": {
				"type": "string",
				"enum": [
					"if_available",
					"never"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestOvercapture": {
				"type": "string",
				"enum": [
					"if_available",
					"never"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestThreeDSecure": {
				"type": "string",
				"enum": [
					"any",
					"automatic",
					"challenge"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session",
					"on_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card": {
				"properties": {
					"capture_method": {
						"type": "string",
						"enum": [
							"manual"
						],
						"nullable": false,
						"description": "Controls when the funds will be captured from the customer's account."
					},
					"installments": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Installments"
							}
						],
						"nullable": true,
						"description": "Installment details for this payment (Mexico only).\n\nFor more information, see the [installments integration guide](https://stripe.com/docs/payments/installments)."
					},
					"mandate_options": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.MandateOptions"
							}
						],
						"nullable": true,
						"description": "Configuration options for setting up an eMandate for cards issued in India."
					},
					"network": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Network"
							}
						],
						"nullable": true,
						"description": "Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time."
					},
					"request_extended_authorization": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestExtendedAuthorization",
						"description": "Request ability to [capture beyond the standard authorization validity window](https://stripe.com/docs/payments/extended-authorization) for this PaymentIntent."
					},
					"request_incremental_authorization": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestIncrementalAuthorization",
						"description": "Request ability to [increment the authorization](https://stripe.com/docs/payments/incremental-authorization) for this PaymentIntent."
					},
					"request_multicapture": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestMulticapture",
						"description": "Request ability to make [multiple captures](https://stripe.com/docs/payments/multicapture) for this PaymentIntent."
					},
					"request_overcapture": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestOvercapture",
						"description": "Request ability to [overcapture](https://stripe.com/docs/payments/overcapture) for this PaymentIntent."
					},
					"request_three_d_secure": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestThreeDSecure"
							}
						],
						"nullable": true,
						"description": "We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine."
					},
					"require_cvc_recollection": {
						"type": "boolean",
						"description": "When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter)."
					},
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					},
					"statement_descriptor_suffix_kana": {
						"type": "string",
						"description": "Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that's set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters."
					},
					"statement_descriptor_suffix_kanji": {
						"type": "string",
						"description": "Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that's set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters."
					}
				},
				"required": [
					"installments",
					"mandate_options",
					"network",
					"request_three_d_secure"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.CardPresent.Routing.RequestedPriority": {
				"type": "string",
				"enum": [
					"domestic",
					"international"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.CardPresent.Routing": {
				"properties": {
					"requested_priority": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.CardPresent.Routing.RequestedPriority"
							}
						],
						"nullable": true,
						"description": "Requested routing priority"
					}
				},
				"required": [
					"requested_priority"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.CardPresent": {
				"properties": {
					"request_extended_authorization": {
						"type": "boolean",
						"nullable": true,
						"description": "Request ability to capture this payment beyond the standard [authorization validity window](https://stripe.com/docs/terminal/features/extended-authorizations#authorization-validity)"
					},
					"request_incremental_authorization_support": {
						"type": "boolean",
						"nullable": true,
						"description": "Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support."
					},
					"routing": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.CardPresent.Routing"
					}
				},
				"required": [
					"request_extended_authorization",
					"request_incremental_authorization_support"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Cashapp.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session",
					"on_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Cashapp": {
				"properties": {
					"capture_method": {
						"type": "string",
						"enum": [
							"manual"
						],
						"nullable": false,
						"description": "Controls when the funds will be captured from the customer's account."
					},
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Cashapp.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer.Country": {
				"type": "string",
				"enum": [
					"BE",
					"DE",
					"ES",
					"FR",
					"IE",
					"NL"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer": {
				"properties": {
					"country": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer.Country",
						"description": "The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`."
					}
				},
				"required": [
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.RequestedAddressType": {
				"type": "string",
				"enum": [
					"aba",
					"iban",
					"sepa",
					"sort_code",
					"spei",
					"swift",
					"zengin"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.Type": {
				"type": "string",
				"enum": [
					"eu_bank_transfer",
					"gb_bank_transfer",
					"jp_bank_transfer",
					"mx_bank_transfer",
					"us_bank_transfer"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer": {
				"properties": {
					"eu_bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer"
					},
					"requested_address_types": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.RequestedAddressType"
						},
						"type": "array",
						"description": "List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.\n\nPermitted values include: `sort_code`, `zengin`, `iban`, or `spei`."
					},
					"type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.Type"
							}
						],
						"nullable": true,
						"description": "The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance": {
				"properties": {
					"bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer"
					},
					"funding_type": {
						"type": "string",
						"enum": [
							"bank_transfer",
							null
						],
						"nullable": true,
						"description": "The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`."
					},
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"required": [
					"funding_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Eps": {
				"properties": {
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Fpx": {
				"properties": {
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Giropay": {
				"properties": {
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Grabpay": {
				"properties": {
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Ideal.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Ideal": {
				"properties": {
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Ideal.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.InteracPresent": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Klarna": {
				"properties": {
					"capture_method": {
						"type": "string",
						"enum": [
							"manual"
						],
						"nullable": false,
						"description": "Controls when the funds will be captured from the customer's account."
					},
					"preferred_locale": {
						"type": "string",
						"nullable": true,
						"description": "Preferred locale of the Klarna checkout page that the customer is redirected to."
					},
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"required": [
					"preferred_locale"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Konbini": {
				"properties": {
					"confirmation_number": {
						"type": "string",
						"nullable": true,
						"description": "An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores."
					},
					"expires_after_days": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST."
					},
					"expires_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The timestamp at which the Konbini payment instructions will expire. Only one of `expires_after_days` or `expires_at` may be set."
					},
					"product_description": {
						"type": "string",
						"nullable": true,
						"description": "A product descriptor of up to 22 characters, which will appear to customers at the convenience store."
					},
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"required": [
					"confirmation_number",
					"expires_after_days",
					"expires_at",
					"product_description"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Link.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Link": {
				"properties": {
					"capture_method": {
						"type": "string",
						"enum": [
							"manual"
						],
						"nullable": false,
						"description": "Controls when the funds will be captured from the customer's account."
					},
					"persistent_token": {
						"type": "string",
						"nullable": true,
						"description": "[Deprecated] This is a legacy parameter that no longer has any function.",
						"deprecated": true
					},
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Link.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"required": [
					"persistent_token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Mobilepay": {
				"properties": {
					"capture_method": {
						"type": "string",
						"enum": [
							"manual"
						],
						"nullable": false,
						"description": "Controls when the funds will be captured from the customer's account."
					},
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Multibanco": {
				"properties": {
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Oxxo": {
				"properties": {
					"expires_after_days": {
						"type": "number",
						"format": "double",
						"description": "The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time."
					},
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"required": [
					"expires_after_days"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.P24": {
				"properties": {
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Paynow": {
				"properties": {
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Paypal.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Paypal": {
				"properties": {
					"capture_method": {
						"type": "string",
						"enum": [
							"manual"
						],
						"nullable": false,
						"description": "Controls when the funds will be captured from the customer's account."
					},
					"preferred_locale": {
						"type": "string",
						"nullable": true,
						"description": "Preferred locale of the PayPal checkout page that the customer is redirected to."
					},
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "A reference of the PayPal transaction visible to customer which is mapped to PayPal's invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID."
					},
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Paypal.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"required": [
					"preferred_locale",
					"reference"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Pix": {
				"properties": {
					"expires_after_seconds": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The number of seconds (between 10 and 1209600) after which Pix payment will expire."
					},
					"expires_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The timestamp at which the Pix expires."
					},
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"required": [
					"expires_after_seconds",
					"expires_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Promptpay": {
				"properties": {
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.RevolutPay.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.RevolutPay": {
				"properties": {
					"capture_method": {
						"type": "string",
						"enum": [
							"manual"
						],
						"nullable": false,
						"description": "Controls when the funds will be captured from the customer's account."
					},
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.RevolutPay.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.SepaDebit.MandateOptions": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.SepaDebit.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session",
					"on_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.SepaDebit": {
				"properties": {
					"mandate_options": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.SepaDebit.MandateOptions"
					},
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.SepaDebit.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Sofort.PreferredLanguage": {
				"type": "string",
				"enum": [
					"de",
					"en",
					"es",
					"fr",
					"it",
					"nl",
					"pl"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Sofort.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Sofort": {
				"properties": {
					"preferred_language": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Sofort.PreferredLanguage"
							}
						],
						"nullable": true,
						"description": "Preferred language of the SOFORT authorization page that the customer is redirected to."
					},
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Sofort.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"required": [
					"preferred_language"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Swish": {
				"properties": {
					"reference": {
						"type": "string",
						"nullable": true,
						"description": "The order ID displayed in the Swish app after the payment is authorized."
					},
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"required": [
					"reference"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Twint": {
				"properties": {
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory": {
				"type": "string",
				"enum": [
					"checking",
					"savings"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters": {
				"properties": {
					"account_subcategories": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory"
						},
						"type": "array",
						"description": "The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission": {
				"type": "string",
				"enum": [
					"balances",
					"ownership",
					"payment_method",
					"transactions"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch": {
				"type": "string",
				"enum": [
					"balances",
					"ownership",
					"transactions"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections": {
				"properties": {
					"filters": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters"
					},
					"permissions": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission"
						},
						"type": "array",
						"description": "The list of permissions to request. The `payment_method` permission must be included."
					},
					"prefetch": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch"
						},
						"type": "array",
						"nullable": true,
						"description": "Data features requested to be retrieved upon account creation."
					},
					"return_url": {
						"type": "string",
						"description": "For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app."
					}
				},
				"required": [
					"prefetch"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.MandateOptions": {
				"properties": {
					"collection_method": {
						"type": "string",
						"enum": [
							"paper"
						],
						"nullable": false,
						"description": "Mandate collection method"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.PreferredSettlementSpeed": {
				"type": "string",
				"enum": [
					"fastest",
					"standard"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"none",
					"off_session",
					"on_session"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.VerificationMethod": {
				"type": "string",
				"enum": [
					"automatic",
					"instant",
					"microdeposits"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount": {
				"properties": {
					"financial_connections": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections"
					},
					"mandate_options": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.MandateOptions"
					},
					"preferred_settlement_speed": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.PreferredSettlementSpeed",
						"description": "Preferred transaction settlement speed"
					},
					"setup_future_usage": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.SetupFutureUsage",
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					},
					"verification_method": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.VerificationMethod",
						"description": "Bank account verification method."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.WechatPay.Client": {
				"type": "string",
				"enum": [
					"android",
					"ios",
					"web"
				]
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.WechatPay": {
				"properties": {
					"app_id": {
						"type": "string",
						"nullable": true,
						"description": "The app ID registered with WeChat Pay. Only required when client is ios or android."
					},
					"client": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.WechatPay.Client"
							}
						],
						"nullable": true,
						"description": "The client type that the end customer will pay from"
					},
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"required": [
					"app_id",
					"client"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions.Zip": {
				"properties": {
					"setup_future_usage": {
						"type": "string",
						"enum": [
							"none"
						],
						"nullable": false,
						"description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.PaymentMethodOptions": {
				"properties": {
					"acss_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit"
					},
					"affirm": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Affirm"
					},
					"afterpay_clearpay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.AfterpayClearpay"
					},
					"alipay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Alipay"
					},
					"amazon_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.AmazonPay"
					},
					"au_becs_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.AuBecsDebit"
					},
					"bacs_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.BacsDebit"
					},
					"bancontact": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Bancontact"
					},
					"blik": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Blik"
					},
					"boleto": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Boleto"
					},
					"card": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card"
					},
					"card_present": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.CardPresent"
					},
					"cashapp": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Cashapp"
					},
					"customer_balance": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance"
					},
					"eps": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Eps"
					},
					"fpx": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Fpx"
					},
					"giropay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Giropay"
					},
					"grabpay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Grabpay"
					},
					"ideal": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Ideal"
					},
					"interac_present": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.InteracPresent"
					},
					"klarna": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Klarna"
					},
					"konbini": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Konbini"
					},
					"link": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Link"
					},
					"mobilepay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Mobilepay"
					},
					"multibanco": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Multibanco"
					},
					"oxxo": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Oxxo"
					},
					"p24": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.P24"
					},
					"paynow": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Paynow"
					},
					"paypal": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Paypal"
					},
					"pix": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Pix"
					},
					"promptpay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Promptpay"
					},
					"revolut_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.RevolutPay"
					},
					"sepa_debit": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.SepaDebit"
					},
					"sofort": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Sofort"
					},
					"swish": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Swish"
					},
					"twint": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Twint"
					},
					"us_bank_account": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount"
					},
					"wechat_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.WechatPay"
					},
					"zip": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.PaymentMethodOptions.Zip"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.Processing.Card.CustomerNotification": {
				"properties": {
					"approval_requested": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether customer approval has been requested for this payment. For payments greater than INR 15000 or mandate amount, the customer must provide explicit approval of the payment with their bank."
					},
					"completes_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "If customer approval is required, they need to provide approval before this time."
					}
				},
				"required": [
					"approval_requested",
					"completes_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.Processing.Card": {
				"properties": {
					"customer_notification": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.Processing.Card.CustomerNotification"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.Processing": {
				"properties": {
					"card": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent.Processing.Card"
					},
					"type": {
						"type": "string",
						"enum": [
							"card"
						],
						"nullable": false,
						"description": "Type of the payment method for which payment is in `processing` state, one of `card`."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentIntent.SetupFutureUsage": {
				"type": "string",
				"enum": [
					"off_session",
					"on_session"
				]
			},
			"stripe.Stripe.PaymentIntent.Shipping": {
				"properties": {
					"address": {
						"$ref": "#/components/schemas/stripe.Stripe.Address"
					},
					"carrier": {
						"type": "string",
						"nullable": true,
						"description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc."
					},
					"name": {
						"type": "string",
						"description": "Recipient name."
					},
					"phone": {
						"type": "string",
						"nullable": true,
						"description": "Recipient phone (including extension)."
					},
					"tracking_number": {
						"type": "string",
						"nullable": true,
						"description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.DeletedCustomerSource": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/stripe.Stripe.DeletedBankAccount"
					},
					{
						"$ref": "#/components/schemas/stripe.Stripe.DeletedCard"
					}
				]
			},
			"stripe.Stripe.PaymentIntent.Status": {
				"type": "string",
				"enum": [
					"canceled",
					"processing",
					"requires_action",
					"requires_capture",
					"requires_confirmation",
					"requires_payment_method",
					"succeeded"
				]
			},
			"stripe.Stripe.PaymentIntent.TransferData": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99)."
					},
					"destination": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The account (if any) that the payment is attributed to for tax\nreporting, and where funds from the payment are transferred to after\npayment success."
					}
				},
				"required": [
					"destination"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.SetupAttempt.SetupError.Type": {
				"type": "string",
				"enum": [
					"api_error",
					"card_error",
					"idempotency_error",
					"invalid_request_error"
				]
			},
			"stripe.Stripe.SetupAttempt.SetupError": {
				"properties": {
					"charge": {
						"type": "string",
						"description": "For card errors, the ID of the failed charge."
					},
					"code": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.SetupError.Code",
						"description": "For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported."
					},
					"decline_code": {
						"type": "string",
						"description": "For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one."
					},
					"doc_url": {
						"type": "string",
						"description": "A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported."
					},
					"message": {
						"type": "string",
						"description": "A human-readable message providing more details about the error. For card errors, these messages can be shown to your users."
					},
					"param": {
						"type": "string",
						"description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field."
					},
					"payment_intent": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent",
						"description": "A PaymentIntent guides you through the process of collecting a payment from your customer.\nWe recommend that you create exactly one PaymentIntent for each order or\ncustomer session in your system. You can reference the PaymentIntent later to\nsee the history of payment attempts for a particular session.\n\nA PaymentIntent transitions through\n[multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)\nthroughout its lifetime as it interfaces with Stripe.js to perform\nauthentication flows and ultimately creates at most one successful charge.\n\nRelated guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)"
					},
					"payment_method": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod",
						"description": "PaymentMethod objects represent your customer's payment instruments.\nYou can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to\nCustomer objects to store instrument details for future payments.\n\nRelated guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios)."
					},
					"payment_method_type": {
						"type": "string",
						"description": "If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors."
					},
					"request_log_url": {
						"type": "string",
						"description": "A URL to the request log entry in your dashboard."
					},
					"setup_intent": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupIntent",
						"description": "A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.\nFor example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.\nLater, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.\n\nCreate a SetupIntent when you're ready to collect your customer's payment credentials.\nDon't maintain long-lived, unconfirmed SetupIntents because they might not be valid.\nThe SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides\nyou through the setup process.\n\nSuccessful SetupIntents result in payment credentials that are optimized for future payments.\nFor example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through\n[Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection\nto streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).\nIf you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),\nit automatically attaches the resulting payment method to that Customer after successful setup.\nWe recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on\nPaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.\n\nBy using SetupIntents, you can reduce friction for your customers, even as regulations change over time.\n\nRelated guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)"
					},
					"source": {
						"$ref": "#/components/schemas/stripe.Stripe.CustomerSource"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt.SetupError.Type",
						"description": "The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.GeneratedFrom": {
				"properties": {
					"charge": {
						"type": "string",
						"nullable": true,
						"description": "The charge that created this object."
					},
					"payment_method_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails"
							}
						],
						"nullable": true,
						"description": "Transaction-specific details of the payment method used in the payment."
					},
					"setup_attempt": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt"
							}
						],
						"nullable": true,
						"description": "The ID of the SetupAttempt that generated this PaymentMethod, if any."
					}
				},
				"required": [
					"charge",
					"payment_method_details",
					"setup_attempt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.Networks": {
				"properties": {
					"available": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "All available networks for the card."
					},
					"preferred": {
						"type": "string",
						"nullable": true,
						"description": "The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card."
					}
				},
				"required": [
					"available",
					"preferred"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.ThreeDSecureUsage": {
				"properties": {
					"supported": {
						"type": "boolean",
						"description": "Whether 3D Secure is supported on this card."
					}
				},
				"required": [
					"supported"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.Wallet.AmexExpressCheckout": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.Wallet.ApplePay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.Wallet.GooglePay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.Wallet.Link": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.Wallet.Masterpass": {
				"properties": {
					"billing_address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"email": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"shipping_address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					}
				},
				"required": [
					"billing_address",
					"email",
					"name",
					"shipping_address"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.Wallet.SamsungPay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.Wallet.Type": {
				"type": "string",
				"enum": [
					"amex_express_checkout",
					"apple_pay",
					"google_pay",
					"link",
					"masterpass",
					"samsung_pay",
					"visa_checkout"
				]
			},
			"stripe.Stripe.PaymentMethod.Card.Wallet.VisaCheckout": {
				"properties": {
					"billing_address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"email": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"shipping_address": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Address"
							}
						],
						"nullable": true,
						"description": "Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
					}
				},
				"required": [
					"billing_address",
					"email",
					"name",
					"shipping_address"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card.Wallet": {
				"properties": {
					"amex_express_checkout": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.Wallet.AmexExpressCheckout"
					},
					"apple_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.Wallet.ApplePay"
					},
					"dynamic_last4": {
						"type": "string",
						"nullable": true,
						"description": "(For tokenized numbers only.) The last four digits of the device account number."
					},
					"google_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.Wallet.GooglePay"
					},
					"link": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.Wallet.Link"
					},
					"masterpass": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.Wallet.Masterpass"
					},
					"samsung_pay": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.Wallet.SamsungPay"
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.Wallet.Type",
						"description": "The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type."
					},
					"visa_checkout": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.Wallet.VisaCheckout"
					}
				},
				"required": [
					"dynamic_last4",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Card": {
				"properties": {
					"brand": {
						"type": "string",
						"description": "Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."
					},
					"checks": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.Checks"
							}
						],
						"nullable": true,
						"description": "Checks on Card address and CVC if provided."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)"
					},
					"display_brand": {
						"type": "string",
						"nullable": true,
						"description": "The brand to use when displaying the card, this accounts for customer's brand choice on dual-branded cards. Can be `american_express`, `cartes_bancaires`, `diners_club`, `discover`, `eftpos_australia`, `interac`, `jcb`, `mastercard`, `union_pay`, `visa`, or `other` and may contain more values in the future."
					},
					"exp_month": {
						"type": "number",
						"format": "double",
						"description": "Two-digit number representing the card's expiration month."
					},
					"exp_year": {
						"type": "number",
						"format": "double",
						"description": "Four-digit number representing the card's expiration year."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*"
					},
					"funding": {
						"type": "string",
						"description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."
					},
					"generated_from": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.GeneratedFrom"
							}
						],
						"nullable": true,
						"description": "Details of the original PaymentMethod that created this object."
					},
					"iin": {
						"type": "string",
						"nullable": true,
						"description": "Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)"
					},
					"issuer": {
						"type": "string",
						"nullable": true,
						"description": "The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)"
					},
					"last4": {
						"type": "string",
						"description": "The last four digits of the card."
					},
					"networks": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.Networks"
							}
						],
						"nullable": true,
						"description": "Contains information about card networks that can be used to process the payment."
					},
					"three_d_secure_usage": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.ThreeDSecureUsage"
							}
						],
						"nullable": true,
						"description": "Contains details on how this Card may be used for 3D Secure authentication."
					},
					"wallet": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Card.Wallet"
							}
						],
						"nullable": true,
						"description": "If this Card is part of a card wallet, this contains the details of the card wallet."
					}
				},
				"required": [
					"brand",
					"checks",
					"country",
					"display_brand",
					"exp_month",
					"exp_year",
					"funding",
					"generated_from",
					"last4",
					"networks",
					"three_d_secure_usage",
					"wallet"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.CardPresent.Networks": {
				"properties": {
					"available": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "All available networks for the card."
					},
					"preferred": {
						"type": "string",
						"nullable": true,
						"description": "The preferred network for the card."
					}
				},
				"required": [
					"available",
					"preferred"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.CardPresent.Offline": {
				"properties": {
					"stored_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Time at which the payment was collected while offline"
					},
					"type": {
						"type": "string",
						"enum": [
							"deferred",
							null
						],
						"nullable": true,
						"description": "The method used to process this payment method offline. Only deferred is allowed."
					}
				},
				"required": [
					"stored_at",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.CardPresent.ReadMethod": {
				"type": "string",
				"enum": [
					"contact_emv",
					"contactless_emv",
					"contactless_magstripe_mode",
					"magnetic_stripe_fallback",
					"magnetic_stripe_track2"
				]
			},
			"stripe.Stripe.PaymentMethod.CardPresent.Wallet.Type": {
				"type": "string",
				"enum": [
					"apple_pay",
					"google_pay",
					"samsung_pay",
					"unknown"
				]
			},
			"stripe.Stripe.PaymentMethod.CardPresent.Wallet": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.CardPresent.Wallet.Type",
						"description": "The type of mobile wallet, one of `apple_pay`, `google_pay`, `samsung_pay`, or `unknown`."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.CardPresent": {
				"properties": {
					"brand": {
						"type": "string",
						"nullable": true,
						"description": "Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."
					},
					"brand_product": {
						"type": "string",
						"nullable": true,
						"description": "The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card."
					},
					"cardholder_name": {
						"type": "string",
						"nullable": true,
						"description": "The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)"
					},
					"exp_month": {
						"type": "number",
						"format": "double",
						"description": "Two-digit number representing the card's expiration month."
					},
					"exp_year": {
						"type": "number",
						"format": "double",
						"description": "Four-digit number representing the card's expiration year."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*"
					},
					"funding": {
						"type": "string",
						"nullable": true,
						"description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."
					},
					"iin": {
						"type": "string",
						"nullable": true,
						"description": "Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)"
					},
					"issuer": {
						"type": "string",
						"nullable": true,
						"description": "The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)"
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "The last four digits of the card."
					},
					"networks": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.CardPresent.Networks"
							}
						],
						"nullable": true,
						"description": "Contains information about card networks that can be used to process the payment."
					},
					"offline": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.CardPresent.Offline"
							}
						],
						"nullable": true,
						"description": "Details about payment methods collected offline."
					},
					"preferred_locales": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "EMV tag 5F2D. Preferred languages specified by the integrated circuit chip."
					},
					"read_method": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.CardPresent.ReadMethod"
							}
						],
						"nullable": true,
						"description": "How card details were read in this transaction."
					},
					"wallet": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.CardPresent.Wallet"
					}
				},
				"required": [
					"brand",
					"brand_product",
					"cardholder_name",
					"country",
					"exp_month",
					"exp_year",
					"fingerprint",
					"funding",
					"last4",
					"networks",
					"offline",
					"preferred_locales",
					"read_method"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Cashapp": {
				"properties": {
					"buyer_id": {
						"type": "string",
						"nullable": true,
						"description": "A unique and immutable identifier assigned by Cash App to every buyer."
					},
					"cashtag": {
						"type": "string",
						"nullable": true,
						"description": "A public identifier for buyers using Cash App."
					}
				},
				"required": [
					"buyer_id",
					"cashtag"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.CustomerBalance": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Eps.Bank": {
				"type": "string",
				"enum": [
					"arzte_und_apotheker_bank",
					"austrian_anadi_bank_ag",
					"bank_austria",
					"bankhaus_carl_spangler",
					"bankhaus_schelhammer_und_schattera_ag",
					"bawag_psk_ag",
					"bks_bank_ag",
					"brull_kallmus_bank_ag",
					"btv_vier_lander_bank",
					"capital_bank_grawe_gruppe_ag",
					"deutsche_bank_ag",
					"dolomitenbank",
					"easybank_ag",
					"erste_bank_und_sparkassen",
					"hypo_alpeadriabank_international_ag",
					"hypo_bank_burgenland_aktiengesellschaft",
					"hypo_noe_lb_fur_niederosterreich_u_wien",
					"hypo_oberosterreich_salzburg_steiermark",
					"hypo_tirol_bank_ag",
					"hypo_vorarlberg_bank_ag",
					"marchfelder_bank",
					"oberbank_ag",
					"raiffeisen_bankengruppe_osterreich",
					"schoellerbank_ag",
					"sparda_bank_wien",
					"volksbank_gruppe",
					"volkskreditbank_ag",
					"vr_bank_braunau"
				]
			},
			"stripe.Stripe.PaymentMethod.Eps": {
				"properties": {
					"bank": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Eps.Bank"
							}
						],
						"nullable": true,
						"description": "The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`."
					}
				},
				"required": [
					"bank"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Fpx.AccountHolderType": {
				"type": "string",
				"enum": [
					"company",
					"individual"
				]
			},
			"stripe.Stripe.PaymentMethod.Fpx.Bank": {
				"type": "string",
				"enum": [
					"affin_bank",
					"agrobank",
					"alliance_bank",
					"ambank",
					"bank_islam",
					"bank_muamalat",
					"bank_of_china",
					"bank_rakyat",
					"bsn",
					"cimb",
					"deutsche_bank",
					"hong_leong_bank",
					"hsbc",
					"kfh",
					"maybank2e",
					"maybank2u",
					"ocbc",
					"pb_enterprise",
					"public_bank",
					"rhb",
					"standard_chartered",
					"uob"
				]
			},
			"stripe.Stripe.PaymentMethod.Fpx": {
				"properties": {
					"account_holder_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Fpx.AccountHolderType"
							}
						],
						"nullable": true,
						"description": "Account holder type, if provided. Can be one of `individual` or `company`."
					},
					"bank": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Fpx.Bank",
						"description": "The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`."
					}
				},
				"required": [
					"account_holder_type",
					"bank"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Giropay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Grabpay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Ideal.Bank": {
				"type": "string",
				"enum": [
					"abn_amro",
					"asn_bank",
					"bunq",
					"handelsbanken",
					"ing",
					"knab",
					"moneyou",
					"n26",
					"nn",
					"rabobank",
					"regiobank",
					"revolut",
					"sns_bank",
					"triodos_bank",
					"van_lanschot",
					"yoursafe"
				]
			},
			"stripe.Stripe.PaymentMethod.Ideal.Bic": {
				"type": "string",
				"enum": [
					"ABNANL2A",
					"ASNBNL21",
					"BITSNL2A",
					"BUNQNL2A",
					"FVLBNL22",
					"HANDNL2A",
					"INGBNL2A",
					"KNABNL2H",
					"MOYONL21",
					"NNBANL2G",
					"NTSBDEB1",
					"RABONL2U",
					"RBRBNL21",
					"REVOIE23",
					"REVOLT21",
					"SNSBNL2A",
					"TRIONL2U"
				]
			},
			"stripe.Stripe.PaymentMethod.Ideal": {
				"properties": {
					"bank": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Ideal.Bank"
							}
						],
						"nullable": true,
						"description": "The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`."
					},
					"bic": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Ideal.Bic"
							}
						],
						"nullable": true,
						"description": "The Bank Identifier Code of the customer's bank, if the bank was provided."
					}
				},
				"required": [
					"bank",
					"bic"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.InteracPresent.Networks": {
				"properties": {
					"available": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "All available networks for the card."
					},
					"preferred": {
						"type": "string",
						"nullable": true,
						"description": "The preferred network for the card."
					}
				},
				"required": [
					"available",
					"preferred"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.InteracPresent.ReadMethod": {
				"type": "string",
				"enum": [
					"contact_emv",
					"contactless_emv",
					"contactless_magstripe_mode",
					"magnetic_stripe_fallback",
					"magnetic_stripe_track2"
				]
			},
			"stripe.Stripe.PaymentMethod.InteracPresent": {
				"properties": {
					"brand": {
						"type": "string",
						"nullable": true,
						"description": "Card brand. Can be `interac`, `mastercard` or `visa`."
					},
					"cardholder_name": {
						"type": "string",
						"nullable": true,
						"description": "The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)"
					},
					"exp_month": {
						"type": "number",
						"format": "double",
						"description": "Two-digit number representing the card's expiration month."
					},
					"exp_year": {
						"type": "number",
						"format": "double",
						"description": "Four-digit number representing the card's expiration year."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*"
					},
					"funding": {
						"type": "string",
						"nullable": true,
						"description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."
					},
					"iin": {
						"type": "string",
						"nullable": true,
						"description": "Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)"
					},
					"issuer": {
						"type": "string",
						"nullable": true,
						"description": "The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)"
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "The last four digits of the card."
					},
					"networks": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.InteracPresent.Networks"
							}
						],
						"nullable": true,
						"description": "Contains information about card networks that can be used to process the payment."
					},
					"preferred_locales": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "EMV tag 5F2D. Preferred languages specified by the integrated circuit chip."
					},
					"read_method": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.InteracPresent.ReadMethod"
							}
						],
						"nullable": true,
						"description": "How card details were read in this transaction."
					}
				},
				"required": [
					"brand",
					"cardholder_name",
					"country",
					"exp_month",
					"exp_year",
					"fingerprint",
					"funding",
					"last4",
					"networks",
					"preferred_locales",
					"read_method"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Klarna.Dob": {
				"properties": {
					"day": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The day of birth, between 1 and 31."
					},
					"month": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The month of birth, between 1 and 12."
					},
					"year": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The four-digit year of birth."
					}
				},
				"required": [
					"day",
					"month",
					"year"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Klarna": {
				"properties": {
					"dob": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.Klarna.Dob"
							}
						],
						"nullable": true,
						"description": "The customer's date of birth, if provided."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Konbini": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Link": {
				"properties": {
					"email": {
						"type": "string",
						"nullable": true,
						"description": "Account owner's email address."
					},
					"persistent_token": {
						"type": "string",
						"description": "[Deprecated] This is a legacy parameter that no longer has any function.",
						"deprecated": true
					}
				},
				"required": [
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Mobilepay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Multibanco": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Oxxo": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.P24.Bank": {
				"type": "string",
				"enum": [
					"alior_bank",
					"bank_millennium",
					"bank_nowy_bfg_sa",
					"bank_pekao_sa",
					"banki_spbdzielcze",
					"blik",
					"bnp_paribas",
					"boz",
					"citi_handlowy",
					"credit_agricole",
					"envelobank",
					"etransfer_pocztowy24",
					"getin_bank",
					"ideabank",
					"ing",
					"inteligo",
					"mbank_mtransfer",
					"nest_przelew",
					"noble_pay",
					"pbac_z_ipko",
					"plus_bank",
					"santander_przelew24",
					"tmobile_usbugi_bankowe",
					"toyota_bank",
					"velobank",
					"volkswagen_bank"
				]
			},
			"stripe.Stripe.PaymentMethod.P24": {
				"properties": {
					"bank": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.P24.Bank"
							}
						],
						"nullable": true,
						"description": "The customer's bank, if provided."
					}
				},
				"required": [
					"bank"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Paynow": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Paypal": {
				"properties": {
					"payer_email": {
						"type": "string",
						"nullable": true,
						"description": "Owner's email. Values are provided by PayPal directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
					},
					"payer_id": {
						"type": "string",
						"nullable": true,
						"description": "PayPal account PayerID. This identifier uniquely identifies the PayPal customer."
					}
				},
				"required": [
					"payer_email",
					"payer_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Pix": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Promptpay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.RadarOptions": {
				"properties": {
					"session": {
						"type": "string",
						"description": "A [Radar Session](https://stripe.com/docs/radar/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.RevolutPay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.SepaDebit.GeneratedFrom": {
				"properties": {
					"charge": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge"
							}
						],
						"nullable": true,
						"description": "The ID of the Charge that generated this PaymentMethod, if any."
					},
					"setup_attempt": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.SetupAttempt"
							}
						],
						"nullable": true,
						"description": "The ID of the SetupAttempt that generated this PaymentMethod, if any."
					}
				},
				"required": [
					"charge",
					"setup_attempt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.SepaDebit": {
				"properties": {
					"bank_code": {
						"type": "string",
						"nullable": true,
						"description": "Bank code of bank associated with the bank account."
					},
					"branch_code": {
						"type": "string",
						"nullable": true,
						"description": "Branch code of bank associated with the bank account."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country the bank account is located in."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."
					},
					"generated_from": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.SepaDebit.GeneratedFrom"
							}
						],
						"nullable": true,
						"description": "Information about the object that generated this PaymentMethod."
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four characters of the IBAN."
					}
				},
				"required": [
					"bank_code",
					"branch_code",
					"country",
					"fingerprint",
					"generated_from",
					"last4"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Sofort": {
				"properties": {
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter ISO code representing the country the bank account is located in."
					}
				},
				"required": [
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Swish": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Twint": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Type": {
				"type": "string",
				"enum": [
					"acss_debit",
					"affirm",
					"afterpay_clearpay",
					"alipay",
					"amazon_pay",
					"au_becs_debit",
					"bacs_debit",
					"bancontact",
					"blik",
					"boleto",
					"card",
					"card_present",
					"cashapp",
					"customer_balance",
					"eps",
					"fpx",
					"giropay",
					"grabpay",
					"ideal",
					"interac_present",
					"klarna",
					"konbini",
					"link",
					"mobilepay",
					"multibanco",
					"oxxo",
					"p24",
					"paynow",
					"paypal",
					"pix",
					"promptpay",
					"revolut_pay",
					"sepa_debit",
					"sofort",
					"swish",
					"twint",
					"us_bank_account",
					"wechat_pay",
					"zip"
				]
			},
			"stripe.Stripe.PaymentMethod.UsBankAccount.AccountHolderType": {
				"type": "string",
				"enum": [
					"company",
					"individual"
				]
			},
			"stripe.Stripe.PaymentMethod.UsBankAccount.AccountType": {
				"type": "string",
				"enum": [
					"checking",
					"savings"
				]
			},
			"stripe.Stripe.PaymentMethod.UsBankAccount.Networks.Supported": {
				"type": "string",
				"enum": [
					"ach",
					"us_domestic_wire"
				]
			},
			"stripe.Stripe.PaymentMethod.UsBankAccount.Networks": {
				"properties": {
					"preferred": {
						"type": "string",
						"nullable": true,
						"description": "The preferred network."
					},
					"supported": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.UsBankAccount.Networks.Supported"
						},
						"type": "array",
						"description": "All supported networks."
					}
				},
				"required": [
					"preferred",
					"supported"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails.Blocked.NetworkCode": {
				"type": "string",
				"enum": [
					"R02",
					"R03",
					"R04",
					"R05",
					"R07",
					"R08",
					"R10",
					"R11",
					"R16",
					"R20",
					"R29",
					"R31"
				]
			},
			"stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails.Blocked.Reason": {
				"type": "string",
				"enum": [
					"bank_account_closed",
					"bank_account_frozen",
					"bank_account_invalid_details",
					"bank_account_restricted",
					"bank_account_unusable",
					"debit_not_authorized"
				]
			},
			"stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails.Blocked": {
				"properties": {
					"network_code": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails.Blocked.NetworkCode"
							}
						],
						"nullable": true,
						"description": "The ACH network code that resulted in this block."
					},
					"reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails.Blocked.Reason"
							}
						],
						"nullable": true,
						"description": "The reason why this PaymentMethod's fingerprint has been blocked"
					}
				},
				"required": [
					"network_code",
					"reason"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails": {
				"properties": {
					"blocked": {
						"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails.Blocked"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.UsBankAccount": {
				"properties": {
					"account_holder_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.UsBankAccount.AccountHolderType"
							}
						],
						"nullable": true,
						"description": "Account holder type: individual or company."
					},
					"account_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.UsBankAccount.AccountType"
							}
						],
						"nullable": true,
						"description": "Account type: checkings or savings. Defaults to checking if omitted."
					},
					"bank_name": {
						"type": "string",
						"nullable": true,
						"description": "The name of the bank."
					},
					"financial_connections_account": {
						"type": "string",
						"nullable": true,
						"description": "The ID of the Financial Connections Account used to create the payment method."
					},
					"fingerprint": {
						"type": "string",
						"nullable": true,
						"description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."
					},
					"last4": {
						"type": "string",
						"nullable": true,
						"description": "Last four digits of the bank account number."
					},
					"networks": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.UsBankAccount.Networks"
							}
						],
						"nullable": true,
						"description": "Contains information about US bank account networks that can be used."
					},
					"routing_number": {
						"type": "string",
						"nullable": true,
						"description": "Routing number of the bank account."
					},
					"status_details": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails"
							}
						],
						"nullable": true,
						"description": "Contains information about the future reusability of this PaymentMethod."
					}
				},
				"required": [
					"account_holder_type",
					"account_type",
					"bank_name",
					"financial_connections_account",
					"fingerprint",
					"last4",
					"networks",
					"routing_number",
					"status_details"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.WechatPay": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.PaymentMethod.Zip": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Customer.InvoiceSettings.RenderingOptions": {
				"properties": {
					"amount_tax_display": {
						"type": "string",
						"nullable": true,
						"description": "How line-item prices and amounts will be displayed with respect to tax on invoice PDFs."
					},
					"template": {
						"type": "string",
						"nullable": true,
						"description": "ID of the invoice rendering template to be used for this customer's invoices. If set, the template will be used on all invoices for this customer unless a template is set directly on the invoice."
					}
				},
				"required": [
					"amount_tax_display",
					"template"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Customer.InvoiceSettings": {
				"properties": {
					"custom_fields": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Customer.InvoiceSettings.CustomField"
						},
						"type": "array",
						"nullable": true,
						"description": "Default custom fields to be displayed on invoices for this customer."
					},
					"default_payment_method": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"nullable": true,
						"description": "ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices."
					},
					"footer": {
						"type": "string",
						"nullable": true,
						"description": "Default footer to be displayed on invoices for this customer."
					},
					"rendering_options": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer.InvoiceSettings.RenderingOptions"
							}
						],
						"nullable": true,
						"description": "Default options for invoice PDF rendering for this customer."
					}
				},
				"required": [
					"custom_fields",
					"default_payment_method",
					"footer",
					"rendering_options"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Customer.Shipping": {
				"properties": {
					"address": {
						"$ref": "#/components/schemas/stripe.Stripe.Address"
					},
					"carrier": {
						"type": "string",
						"nullable": true,
						"description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc."
					},
					"name": {
						"type": "string",
						"description": "Recipient name."
					},
					"phone": {
						"type": "string",
						"nullable": true,
						"description": "Recipient phone (including extension)."
					},
					"tracking_number": {
						"type": "string",
						"nullable": true,
						"description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ApiList_stripe.Stripe.CustomerSource_": {
				"description": "A container for paginated lists of objects.\nThe array of objects is on the `.data` property,\nand `.has_more` indicates whether there are additional objects beyond the end of this list.\n\nLearn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)\nor, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.",
				"properties": {
					"object": {
						"type": "string",
						"enum": [
							"list"
						],
						"nullable": false
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.CustomerSource"
						},
						"type": "array"
					},
					"has_more": {
						"type": "boolean",
						"description": "True if this list has another page of items after this one that can be fetched."
					},
					"url": {
						"type": "string",
						"description": "The URL where this list can be accessed."
					}
				},
				"required": [
					"object",
					"data",
					"has_more",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ApiList_stripe.Stripe.Subscription_": {
				"description": "A container for paginated lists of objects.\nThe array of objects is on the `.data` property,\nand `.has_more` indicates whether there are additional objects beyond the end of this list.\n\nLearn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)\nor, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.",
				"properties": {
					"object": {
						"type": "string",
						"enum": [
							"list"
						],
						"nullable": false
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Subscription"
						},
						"type": "array"
					},
					"has_more": {
						"type": "boolean",
						"description": "True if this list has another page of items after this one that can be fetched."
					},
					"url": {
						"type": "string",
						"description": "The URL where this list can be accessed."
					}
				},
				"required": [
					"object",
					"data",
					"has_more",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Customer.Tax.AutomaticTax": {
				"type": "string",
				"enum": [
					"failed",
					"not_collecting",
					"supported",
					"unrecognized_location"
				]
			},
			"stripe.Stripe.Customer.Tax.Location.Source": {
				"type": "string",
				"enum": [
					"billing_address",
					"ip_address",
					"payment_method",
					"shipping_destination"
				]
			},
			"stripe.Stripe.Customer.Tax.Location": {
				"properties": {
					"country": {
						"type": "string",
						"description": "The customer's country as identified by Stripe Tax."
					},
					"source": {
						"$ref": "#/components/schemas/stripe.Stripe.Customer.Tax.Location.Source",
						"description": "The data source used to infer the customer's location."
					},
					"state": {
						"type": "string",
						"nullable": true,
						"description": "The customer's state, county, province, or region as identified by Stripe Tax."
					}
				},
				"required": [
					"country",
					"source",
					"state"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Customer.Tax": {
				"properties": {
					"automatic_tax": {
						"$ref": "#/components/schemas/stripe.Stripe.Customer.Tax.AutomaticTax",
						"description": "Surfaces if automatic tax computation is possible given the current customer location information."
					},
					"ip_address": {
						"type": "string",
						"nullable": true,
						"description": "A recent IP address of the customer used for tax reporting and tax location inference."
					},
					"location": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer.Tax.Location"
							}
						],
						"nullable": true,
						"description": "The customer's location as identified by Stripe Tax."
					}
				},
				"required": [
					"automatic_tax",
					"ip_address",
					"location"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Customer.TaxExempt": {
				"type": "string",
				"enum": [
					"exempt",
					"none",
					"reverse"
				]
			},
			"stripe.Stripe.ApiList_stripe.Stripe.TaxId_": {
				"description": "A container for paginated lists of objects.\nThe array of objects is on the `.data` property,\nand `.has_more` indicates whether there are additional objects beyond the end of this list.\n\nLearn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)\nor, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.",
				"properties": {
					"object": {
						"type": "string",
						"enum": [
							"list"
						],
						"nullable": false
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.TaxId"
						},
						"type": "array"
					},
					"has_more": {
						"type": "boolean",
						"description": "True if this list has another page of items after this one that can be fetched."
					},
					"url": {
						"type": "string",
						"description": "The URL where this list can be accessed."
					}
				},
				"required": [
					"object",
					"data",
					"has_more",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.BankAccount.FutureRequirements.Error.Code": {
				"type": "string",
				"enum": [
					"invalid_address_city_state_postal_code",
					"invalid_address_highway_contract_box",
					"invalid_address_private_mailbox",
					"invalid_business_profile_name",
					"invalid_business_profile_name_denylisted",
					"invalid_company_name_denylisted",
					"invalid_dob_age_over_maximum",
					"invalid_dob_age_under_18",
					"invalid_dob_age_under_minimum",
					"invalid_product_description_length",
					"invalid_product_description_url_match",
					"invalid_representative_country",
					"invalid_statement_descriptor_business_mismatch",
					"invalid_statement_descriptor_denylisted",
					"invalid_statement_descriptor_length",
					"invalid_statement_descriptor_prefix_denylisted",
					"invalid_statement_descriptor_prefix_mismatch",
					"invalid_street_address",
					"invalid_tax_id",
					"invalid_tax_id_format",
					"invalid_tos_acceptance",
					"invalid_url_denylisted",
					"invalid_url_format",
					"invalid_url_length",
					"invalid_url_web_presence_detected",
					"invalid_url_website_business_information_mismatch",
					"invalid_url_website_empty",
					"invalid_url_website_inaccessible",
					"invalid_url_website_inaccessible_geoblocked",
					"invalid_url_website_inaccessible_password_protected",
					"invalid_url_website_incomplete",
					"invalid_url_website_incomplete_cancellation_policy",
					"invalid_url_website_incomplete_customer_service_details",
					"invalid_url_website_incomplete_legal_restrictions",
					"invalid_url_website_incomplete_refund_policy",
					"invalid_url_website_incomplete_return_policy",
					"invalid_url_website_incomplete_terms_and_conditions",
					"invalid_url_website_incomplete_under_construction",
					"invalid_url_website_other",
					"invalid_value_other",
					"verification_directors_mismatch",
					"verification_document_address_mismatch",
					"verification_document_address_missing",
					"verification_document_corrupt",
					"verification_document_country_not_supported",
					"verification_document_directors_mismatch",
					"verification_document_dob_mismatch",
					"verification_document_duplicate_type",
					"verification_document_expired",
					"verification_document_failed_copy",
					"verification_document_failed_greyscale",
					"verification_document_failed_other",
					"verification_document_failed_test_mode",
					"verification_document_fraudulent",
					"verification_document_id_number_mismatch",
					"verification_document_id_number_missing",
					"verification_document_incomplete",
					"verification_document_invalid",
					"verification_document_issue_or_expiry_date_missing",
					"verification_document_manipulated",
					"verification_document_missing_back",
					"verification_document_missing_front",
					"verification_document_name_mismatch",
					"verification_document_name_missing",
					"verification_document_nationality_mismatch",
					"verification_document_not_readable",
					"verification_document_not_signed",
					"verification_document_not_uploaded",
					"verification_document_photo_mismatch",
					"verification_document_too_large",
					"verification_document_type_not_supported",
					"verification_extraneous_directors",
					"verification_failed_address_match",
					"verification_failed_business_iec_number",
					"verification_failed_document_match",
					"verification_failed_id_number_match",
					"verification_failed_keyed_identity",
					"verification_failed_keyed_match",
					"verification_failed_name_match",
					"verification_failed_other",
					"verification_failed_representative_authority",
					"verification_failed_residential_address",
					"verification_failed_tax_id_match",
					"verification_failed_tax_id_not_issued",
					"verification_missing_directors",
					"verification_missing_executives",
					"verification_missing_owners",
					"verification_requires_additional_memorandum_of_associations",
					"verification_requires_additional_proof_of_registration",
					"verification_supportability"
				]
			},
			"stripe.Stripe.BankAccount.FutureRequirements.Error": {
				"properties": {
					"code": {
						"$ref": "#/components/schemas/stripe.Stripe.BankAccount.FutureRequirements.Error.Code",
						"description": "The code for the type of error."
					},
					"reason": {
						"type": "string",
						"description": "An informative message that indicates the error type and provides additional details about the error."
					},
					"requirement": {
						"type": "string",
						"description": "The specific user onboarding requirement field (in the requirements hash) that needs to be resolved."
					}
				},
				"required": [
					"code",
					"reason",
					"requirement"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.BankAccount.FutureRequirements": {
				"properties": {
					"currently_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that need to be collected to keep the external account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled."
					},
					"errors": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.BankAccount.FutureRequirements.Error"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that are `currently_due` and need to be collected again because validation or verification failed."
					},
					"past_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the external account."
					},
					"pending_verification": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending."
					}
				},
				"required": [
					"currently_due",
					"errors",
					"past_due",
					"pending_verification"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.BankAccount.Requirements.Error.Code": {
				"type": "string",
				"enum": [
					"invalid_address_city_state_postal_code",
					"invalid_address_highway_contract_box",
					"invalid_address_private_mailbox",
					"invalid_business_profile_name",
					"invalid_business_profile_name_denylisted",
					"invalid_company_name_denylisted",
					"invalid_dob_age_over_maximum",
					"invalid_dob_age_under_18",
					"invalid_dob_age_under_minimum",
					"invalid_product_description_length",
					"invalid_product_description_url_match",
					"invalid_representative_country",
					"invalid_statement_descriptor_business_mismatch",
					"invalid_statement_descriptor_denylisted",
					"invalid_statement_descriptor_length",
					"invalid_statement_descriptor_prefix_denylisted",
					"invalid_statement_descriptor_prefix_mismatch",
					"invalid_street_address",
					"invalid_tax_id",
					"invalid_tax_id_format",
					"invalid_tos_acceptance",
					"invalid_url_denylisted",
					"invalid_url_format",
					"invalid_url_length",
					"invalid_url_web_presence_detected",
					"invalid_url_website_business_information_mismatch",
					"invalid_url_website_empty",
					"invalid_url_website_inaccessible",
					"invalid_url_website_inaccessible_geoblocked",
					"invalid_url_website_inaccessible_password_protected",
					"invalid_url_website_incomplete",
					"invalid_url_website_incomplete_cancellation_policy",
					"invalid_url_website_incomplete_customer_service_details",
					"invalid_url_website_incomplete_legal_restrictions",
					"invalid_url_website_incomplete_refund_policy",
					"invalid_url_website_incomplete_return_policy",
					"invalid_url_website_incomplete_terms_and_conditions",
					"invalid_url_website_incomplete_under_construction",
					"invalid_url_website_other",
					"invalid_value_other",
					"verification_directors_mismatch",
					"verification_document_address_mismatch",
					"verification_document_address_missing",
					"verification_document_corrupt",
					"verification_document_country_not_supported",
					"verification_document_directors_mismatch",
					"verification_document_dob_mismatch",
					"verification_document_duplicate_type",
					"verification_document_expired",
					"verification_document_failed_copy",
					"verification_document_failed_greyscale",
					"verification_document_failed_other",
					"verification_document_failed_test_mode",
					"verification_document_fraudulent",
					"verification_document_id_number_mismatch",
					"verification_document_id_number_missing",
					"verification_document_incomplete",
					"verification_document_invalid",
					"verification_document_issue_or_expiry_date_missing",
					"verification_document_manipulated",
					"verification_document_missing_back",
					"verification_document_missing_front",
					"verification_document_name_mismatch",
					"verification_document_name_missing",
					"verification_document_nationality_mismatch",
					"verification_document_not_readable",
					"verification_document_not_signed",
					"verification_document_not_uploaded",
					"verification_document_photo_mismatch",
					"verification_document_too_large",
					"verification_document_type_not_supported",
					"verification_extraneous_directors",
					"verification_failed_address_match",
					"verification_failed_business_iec_number",
					"verification_failed_document_match",
					"verification_failed_id_number_match",
					"verification_failed_keyed_identity",
					"verification_failed_keyed_match",
					"verification_failed_name_match",
					"verification_failed_other",
					"verification_failed_representative_authority",
					"verification_failed_residential_address",
					"verification_failed_tax_id_match",
					"verification_failed_tax_id_not_issued",
					"verification_missing_directors",
					"verification_missing_executives",
					"verification_missing_owners",
					"verification_requires_additional_memorandum_of_associations",
					"verification_requires_additional_proof_of_registration",
					"verification_supportability"
				]
			},
			"stripe.Stripe.BankAccount.Requirements.Error": {
				"properties": {
					"code": {
						"$ref": "#/components/schemas/stripe.Stripe.BankAccount.Requirements.Error.Code",
						"description": "The code for the type of error."
					},
					"reason": {
						"type": "string",
						"description": "An informative message that indicates the error type and provides additional details about the error."
					},
					"requirement": {
						"type": "string",
						"description": "The specific user onboarding requirement field (in the requirements hash) that needs to be resolved."
					}
				},
				"required": [
					"code",
					"reason",
					"requirement"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.BankAccount.Requirements": {
				"properties": {
					"currently_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that need to be collected to keep the external account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled."
					},
					"errors": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.BankAccount.Requirements.Error"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that are `currently_due` and need to be collected again because validation or verification failed."
					},
					"past_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the external account."
					},
					"pending_verification": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending."
					}
				},
				"required": [
					"currently_due",
					"errors",
					"past_due",
					"pending_verification"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ApiList_stripe.Stripe.ExternalAccount_": {
				"description": "A container for paginated lists of objects.\nThe array of objects is on the `.data` property,\nand `.has_more` indicates whether there are additional objects beyond the end of this list.\n\nLearn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)\nor, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.",
				"properties": {
					"object": {
						"type": "string",
						"enum": [
							"list"
						],
						"nullable": false
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.ExternalAccount"
						},
						"type": "array"
					},
					"has_more": {
						"type": "boolean",
						"description": "True if this list has another page of items after this one that can be fetched."
					},
					"url": {
						"type": "string",
						"description": "The URL where this list can be accessed."
					}
				},
				"required": [
					"object",
					"data",
					"has_more",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.FutureRequirements.Alternative": {
				"properties": {
					"alternative_fields_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that can be provided to satisfy all fields in `original_fields_due`."
					},
					"original_fields_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`."
					}
				},
				"required": [
					"alternative_fields_due",
					"original_fields_due"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.FutureRequirements.Error.Code": {
				"type": "string",
				"enum": [
					"invalid_address_city_state_postal_code",
					"invalid_address_highway_contract_box",
					"invalid_address_private_mailbox",
					"invalid_business_profile_name",
					"invalid_business_profile_name_denylisted",
					"invalid_company_name_denylisted",
					"invalid_dob_age_over_maximum",
					"invalid_dob_age_under_18",
					"invalid_dob_age_under_minimum",
					"invalid_product_description_length",
					"invalid_product_description_url_match",
					"invalid_representative_country",
					"invalid_statement_descriptor_business_mismatch",
					"invalid_statement_descriptor_denylisted",
					"invalid_statement_descriptor_length",
					"invalid_statement_descriptor_prefix_denylisted",
					"invalid_statement_descriptor_prefix_mismatch",
					"invalid_street_address",
					"invalid_tax_id",
					"invalid_tax_id_format",
					"invalid_tos_acceptance",
					"invalid_url_denylisted",
					"invalid_url_format",
					"invalid_url_length",
					"invalid_url_web_presence_detected",
					"invalid_url_website_business_information_mismatch",
					"invalid_url_website_empty",
					"invalid_url_website_inaccessible",
					"invalid_url_website_inaccessible_geoblocked",
					"invalid_url_website_inaccessible_password_protected",
					"invalid_url_website_incomplete",
					"invalid_url_website_incomplete_cancellation_policy",
					"invalid_url_website_incomplete_customer_service_details",
					"invalid_url_website_incomplete_legal_restrictions",
					"invalid_url_website_incomplete_refund_policy",
					"invalid_url_website_incomplete_return_policy",
					"invalid_url_website_incomplete_terms_and_conditions",
					"invalid_url_website_incomplete_under_construction",
					"invalid_url_website_other",
					"invalid_value_other",
					"verification_directors_mismatch",
					"verification_document_address_mismatch",
					"verification_document_address_missing",
					"verification_document_corrupt",
					"verification_document_country_not_supported",
					"verification_document_directors_mismatch",
					"verification_document_dob_mismatch",
					"verification_document_duplicate_type",
					"verification_document_expired",
					"verification_document_failed_copy",
					"verification_document_failed_greyscale",
					"verification_document_failed_other",
					"verification_document_failed_test_mode",
					"verification_document_fraudulent",
					"verification_document_id_number_mismatch",
					"verification_document_id_number_missing",
					"verification_document_incomplete",
					"verification_document_invalid",
					"verification_document_issue_or_expiry_date_missing",
					"verification_document_manipulated",
					"verification_document_missing_back",
					"verification_document_missing_front",
					"verification_document_name_mismatch",
					"verification_document_name_missing",
					"verification_document_nationality_mismatch",
					"verification_document_not_readable",
					"verification_document_not_signed",
					"verification_document_not_uploaded",
					"verification_document_photo_mismatch",
					"verification_document_too_large",
					"verification_document_type_not_supported",
					"verification_extraneous_directors",
					"verification_failed_address_match",
					"verification_failed_business_iec_number",
					"verification_failed_document_match",
					"verification_failed_id_number_match",
					"verification_failed_keyed_identity",
					"verification_failed_keyed_match",
					"verification_failed_name_match",
					"verification_failed_other",
					"verification_failed_representative_authority",
					"verification_failed_residential_address",
					"verification_failed_tax_id_match",
					"verification_failed_tax_id_not_issued",
					"verification_missing_directors",
					"verification_missing_executives",
					"verification_missing_owners",
					"verification_requires_additional_memorandum_of_associations",
					"verification_requires_additional_proof_of_registration",
					"verification_supportability"
				]
			},
			"stripe.Stripe.Account.FutureRequirements.Error": {
				"properties": {
					"code": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.FutureRequirements.Error.Code",
						"description": "The code for the type of error."
					},
					"reason": {
						"type": "string",
						"description": "An informative message that indicates the error type and provides additional details about the error."
					},
					"requirement": {
						"type": "string",
						"description": "The specific user onboarding requirement field (in the requirements hash) that needs to be resolved."
					}
				},
				"required": [
					"code",
					"reason",
					"requirement"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.FutureRequirements": {
				"properties": {
					"alternatives": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Account.FutureRequirements.Alternative"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that are due and can be satisfied by providing the corresponding alternative fields instead."
					},
					"current_deadline": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning."
					},
					"currently_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash."
					},
					"disabled_reason": {
						"type": "string",
						"nullable": true,
						"description": "This is typed as a string for consistency with `requirements.disabled_reason`."
					},
					"errors": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Account.FutureRequirements.Error"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that are `currently_due` and need to be collected again because validation or verification failed."
					},
					"eventually_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well."
					},
					"past_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`."
					},
					"pending_verification": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending."
					}
				},
				"required": [
					"alternatives",
					"current_deadline",
					"currently_due",
					"disabled_reason",
					"errors",
					"eventually_due",
					"past_due",
					"pending_verification"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person.AdditionalTosAcceptances.Account": {
				"properties": {
					"date": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The Unix timestamp marking when the legal guardian accepted the service agreement."
					},
					"ip": {
						"type": "string",
						"nullable": true,
						"description": "The IP address from which the legal guardian accepted the service agreement."
					},
					"user_agent": {
						"type": "string",
						"nullable": true,
						"description": "The user agent of the browser from which the legal guardian accepted the service agreement."
					}
				},
				"required": [
					"date",
					"ip",
					"user_agent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person.AdditionalTosAcceptances": {
				"properties": {
					"account": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Person.AdditionalTosAcceptances.Account"
							}
						],
						"nullable": true,
						"description": "Details on the legal guardian's acceptance of the main Stripe service agreement."
					}
				},
				"required": [
					"account"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person.AddressKana": {
				"properties": {
					"city": {
						"type": "string",
						"nullable": true,
						"description": "City/Ward."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."
					},
					"line1": {
						"type": "string",
						"nullable": true,
						"description": "Block/Building number."
					},
					"line2": {
						"type": "string",
						"nullable": true,
						"description": "Building details."
					},
					"postal_code": {
						"type": "string",
						"nullable": true,
						"description": "ZIP or postal code."
					},
					"state": {
						"type": "string",
						"nullable": true,
						"description": "Prefecture."
					},
					"town": {
						"type": "string",
						"nullable": true,
						"description": "Town/cho-me."
					}
				},
				"required": [
					"city",
					"country",
					"line1",
					"line2",
					"postal_code",
					"state",
					"town"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person.AddressKanji": {
				"properties": {
					"city": {
						"type": "string",
						"nullable": true,
						"description": "City/Ward."
					},
					"country": {
						"type": "string",
						"nullable": true,
						"description": "Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."
					},
					"line1": {
						"type": "string",
						"nullable": true,
						"description": "Block/Building number."
					},
					"line2": {
						"type": "string",
						"nullable": true,
						"description": "Building details."
					},
					"postal_code": {
						"type": "string",
						"nullable": true,
						"description": "ZIP or postal code."
					},
					"state": {
						"type": "string",
						"nullable": true,
						"description": "Prefecture."
					},
					"town": {
						"type": "string",
						"nullable": true,
						"description": "Town/cho-me."
					}
				},
				"required": [
					"city",
					"country",
					"line1",
					"line2",
					"postal_code",
					"state",
					"town"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person.Dob": {
				"properties": {
					"day": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The day of birth, between 1 and 31."
					},
					"month": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The month of birth, between 1 and 12."
					},
					"year": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The four-digit year of birth."
					}
				},
				"required": [
					"day",
					"month",
					"year"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person.FutureRequirements.Alternative": {
				"properties": {
					"alternative_fields_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that can be provided to satisfy all fields in `original_fields_due`."
					},
					"original_fields_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`."
					}
				},
				"required": [
					"alternative_fields_due",
					"original_fields_due"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person.FutureRequirements.Error.Code": {
				"type": "string",
				"enum": [
					"invalid_address_city_state_postal_code",
					"invalid_address_highway_contract_box",
					"invalid_address_private_mailbox",
					"invalid_business_profile_name",
					"invalid_business_profile_name_denylisted",
					"invalid_company_name_denylisted",
					"invalid_dob_age_over_maximum",
					"invalid_dob_age_under_18",
					"invalid_dob_age_under_minimum",
					"invalid_product_description_length",
					"invalid_product_description_url_match",
					"invalid_representative_country",
					"invalid_statement_descriptor_business_mismatch",
					"invalid_statement_descriptor_denylisted",
					"invalid_statement_descriptor_length",
					"invalid_statement_descriptor_prefix_denylisted",
					"invalid_statement_descriptor_prefix_mismatch",
					"invalid_street_address",
					"invalid_tax_id",
					"invalid_tax_id_format",
					"invalid_tos_acceptance",
					"invalid_url_denylisted",
					"invalid_url_format",
					"invalid_url_length",
					"invalid_url_web_presence_detected",
					"invalid_url_website_business_information_mismatch",
					"invalid_url_website_empty",
					"invalid_url_website_inaccessible",
					"invalid_url_website_inaccessible_geoblocked",
					"invalid_url_website_inaccessible_password_protected",
					"invalid_url_website_incomplete",
					"invalid_url_website_incomplete_cancellation_policy",
					"invalid_url_website_incomplete_customer_service_details",
					"invalid_url_website_incomplete_legal_restrictions",
					"invalid_url_website_incomplete_refund_policy",
					"invalid_url_website_incomplete_return_policy",
					"invalid_url_website_incomplete_terms_and_conditions",
					"invalid_url_website_incomplete_under_construction",
					"invalid_url_website_other",
					"invalid_value_other",
					"verification_directors_mismatch",
					"verification_document_address_mismatch",
					"verification_document_address_missing",
					"verification_document_corrupt",
					"verification_document_country_not_supported",
					"verification_document_directors_mismatch",
					"verification_document_dob_mismatch",
					"verification_document_duplicate_type",
					"verification_document_expired",
					"verification_document_failed_copy",
					"verification_document_failed_greyscale",
					"verification_document_failed_other",
					"verification_document_failed_test_mode",
					"verification_document_fraudulent",
					"verification_document_id_number_mismatch",
					"verification_document_id_number_missing",
					"verification_document_incomplete",
					"verification_document_invalid",
					"verification_document_issue_or_expiry_date_missing",
					"verification_document_manipulated",
					"verification_document_missing_back",
					"verification_document_missing_front",
					"verification_document_name_mismatch",
					"verification_document_name_missing",
					"verification_document_nationality_mismatch",
					"verification_document_not_readable",
					"verification_document_not_signed",
					"verification_document_not_uploaded",
					"verification_document_photo_mismatch",
					"verification_document_too_large",
					"verification_document_type_not_supported",
					"verification_extraneous_directors",
					"verification_failed_address_match",
					"verification_failed_business_iec_number",
					"verification_failed_document_match",
					"verification_failed_id_number_match",
					"verification_failed_keyed_identity",
					"verification_failed_keyed_match",
					"verification_failed_name_match",
					"verification_failed_other",
					"verification_failed_representative_authority",
					"verification_failed_residential_address",
					"verification_failed_tax_id_match",
					"verification_failed_tax_id_not_issued",
					"verification_missing_directors",
					"verification_missing_executives",
					"verification_missing_owners",
					"verification_requires_additional_memorandum_of_associations",
					"verification_requires_additional_proof_of_registration",
					"verification_supportability"
				]
			},
			"stripe.Stripe.Person.FutureRequirements.Error": {
				"properties": {
					"code": {
						"$ref": "#/components/schemas/stripe.Stripe.Person.FutureRequirements.Error.Code",
						"description": "The code for the type of error."
					},
					"reason": {
						"type": "string",
						"description": "An informative message that indicates the error type and provides additional details about the error."
					},
					"requirement": {
						"type": "string",
						"description": "The specific user onboarding requirement field (in the requirements hash) that needs to be resolved."
					}
				},
				"required": [
					"code",
					"reason",
					"requirement"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person.FutureRequirements": {
				"properties": {
					"alternatives": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Person.FutureRequirements.Alternative"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that are due and can be satisfied by providing the corresponding alternative fields instead."
					},
					"currently_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition."
					},
					"errors": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Person.FutureRequirements.Error"
						},
						"type": "array",
						"description": "Fields that are `currently_due` and need to be collected again because validation or verification failed."
					},
					"eventually_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set."
					},
					"past_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`."
					},
					"pending_verification": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending."
					}
				},
				"required": [
					"alternatives",
					"currently_due",
					"errors",
					"eventually_due",
					"past_due",
					"pending_verification"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person.PoliticalExposure": {
				"type": "string",
				"enum": [
					"existing",
					"none"
				]
			},
			"stripe.Stripe.Person.Relationship": {
				"properties": {
					"director": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations."
					},
					"executive": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether the person has significant responsibility to control, manage, or direct the organization."
					},
					"legal_guardian": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether the person is the legal guardian of the account's representative."
					},
					"owner": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether the person is an owner of the account's legal entity."
					},
					"percent_ownership": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The percent owned by the person of the account's legal entity."
					},
					"representative": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account."
					},
					"title": {
						"type": "string",
						"nullable": true,
						"description": "The person's title (e.g., CEO, Support Engineer)."
					}
				},
				"required": [
					"director",
					"executive",
					"legal_guardian",
					"owner",
					"percent_ownership",
					"representative",
					"title"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person.Requirements.Alternative": {
				"properties": {
					"alternative_fields_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that can be provided to satisfy all fields in `original_fields_due`."
					},
					"original_fields_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`."
					}
				},
				"required": [
					"alternative_fields_due",
					"original_fields_due"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person.Requirements.Error.Code": {
				"type": "string",
				"enum": [
					"invalid_address_city_state_postal_code",
					"invalid_address_highway_contract_box",
					"invalid_address_private_mailbox",
					"invalid_business_profile_name",
					"invalid_business_profile_name_denylisted",
					"invalid_company_name_denylisted",
					"invalid_dob_age_over_maximum",
					"invalid_dob_age_under_18",
					"invalid_dob_age_under_minimum",
					"invalid_product_description_length",
					"invalid_product_description_url_match",
					"invalid_representative_country",
					"invalid_statement_descriptor_business_mismatch",
					"invalid_statement_descriptor_denylisted",
					"invalid_statement_descriptor_length",
					"invalid_statement_descriptor_prefix_denylisted",
					"invalid_statement_descriptor_prefix_mismatch",
					"invalid_street_address",
					"invalid_tax_id",
					"invalid_tax_id_format",
					"invalid_tos_acceptance",
					"invalid_url_denylisted",
					"invalid_url_format",
					"invalid_url_length",
					"invalid_url_web_presence_detected",
					"invalid_url_website_business_information_mismatch",
					"invalid_url_website_empty",
					"invalid_url_website_inaccessible",
					"invalid_url_website_inaccessible_geoblocked",
					"invalid_url_website_inaccessible_password_protected",
					"invalid_url_website_incomplete",
					"invalid_url_website_incomplete_cancellation_policy",
					"invalid_url_website_incomplete_customer_service_details",
					"invalid_url_website_incomplete_legal_restrictions",
					"invalid_url_website_incomplete_refund_policy",
					"invalid_url_website_incomplete_return_policy",
					"invalid_url_website_incomplete_terms_and_conditions",
					"invalid_url_website_incomplete_under_construction",
					"invalid_url_website_other",
					"invalid_value_other",
					"verification_directors_mismatch",
					"verification_document_address_mismatch",
					"verification_document_address_missing",
					"verification_document_corrupt",
					"verification_document_country_not_supported",
					"verification_document_directors_mismatch",
					"verification_document_dob_mismatch",
					"verification_document_duplicate_type",
					"verification_document_expired",
					"verification_document_failed_copy",
					"verification_document_failed_greyscale",
					"verification_document_failed_other",
					"verification_document_failed_test_mode",
					"verification_document_fraudulent",
					"verification_document_id_number_mismatch",
					"verification_document_id_number_missing",
					"verification_document_incomplete",
					"verification_document_invalid",
					"verification_document_issue_or_expiry_date_missing",
					"verification_document_manipulated",
					"verification_document_missing_back",
					"verification_document_missing_front",
					"verification_document_name_mismatch",
					"verification_document_name_missing",
					"verification_document_nationality_mismatch",
					"verification_document_not_readable",
					"verification_document_not_signed",
					"verification_document_not_uploaded",
					"verification_document_photo_mismatch",
					"verification_document_too_large",
					"verification_document_type_not_supported",
					"verification_extraneous_directors",
					"verification_failed_address_match",
					"verification_failed_business_iec_number",
					"verification_failed_document_match",
					"verification_failed_id_number_match",
					"verification_failed_keyed_identity",
					"verification_failed_keyed_match",
					"verification_failed_name_match",
					"verification_failed_other",
					"verification_failed_representative_authority",
					"verification_failed_residential_address",
					"verification_failed_tax_id_match",
					"verification_failed_tax_id_not_issued",
					"verification_missing_directors",
					"verification_missing_executives",
					"verification_missing_owners",
					"verification_requires_additional_memorandum_of_associations",
					"verification_requires_additional_proof_of_registration",
					"verification_supportability"
				]
			},
			"stripe.Stripe.Person.Requirements.Error": {
				"properties": {
					"code": {
						"$ref": "#/components/schemas/stripe.Stripe.Person.Requirements.Error.Code",
						"description": "The code for the type of error."
					},
					"reason": {
						"type": "string",
						"description": "An informative message that indicates the error type and provides additional details about the error."
					},
					"requirement": {
						"type": "string",
						"description": "The specific user onboarding requirement field (in the requirements hash) that needs to be resolved."
					}
				},
				"required": [
					"code",
					"reason",
					"requirement"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person.Requirements": {
				"properties": {
					"alternatives": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Person.Requirements.Alternative"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that are due and can be satisfied by providing the corresponding alternative fields instead."
					},
					"currently_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled."
					},
					"errors": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Person.Requirements.Error"
						},
						"type": "array",
						"description": "Fields that are `currently_due` and need to be collected again because validation or verification failed."
					},
					"eventually_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set."
					},
					"past_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account."
					},
					"pending_verification": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending."
					}
				},
				"required": [
					"alternatives",
					"currently_due",
					"errors",
					"eventually_due",
					"past_due",
					"pending_verification"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person.Verification.AdditionalDocument": {
				"properties": {
					"back": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`."
					},
					"details": {
						"type": "string",
						"nullable": true,
						"description": "A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say \"Identity document is too unclear to read\"."
					},
					"details_code": {
						"type": "string",
						"nullable": true,
						"description": "One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document."
					},
					"front": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`."
					}
				},
				"required": [
					"back",
					"details",
					"details_code",
					"front"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person.Verification.Document": {
				"properties": {
					"back": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`."
					},
					"details": {
						"type": "string",
						"nullable": true,
						"description": "A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say \"Identity document is too unclear to read\"."
					},
					"details_code": {
						"type": "string",
						"nullable": true,
						"description": "One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document."
					},
					"front": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`."
					}
				},
				"required": [
					"back",
					"details",
					"details_code",
					"front"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person.Verification": {
				"properties": {
					"additional_document": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Person.Verification.AdditionalDocument"
							}
						],
						"nullable": true,
						"description": "A document showing address, either a passport, local ID card, or utility bill from a well-known utility company."
					},
					"details": {
						"type": "string",
						"nullable": true,
						"description": "A user-displayable string describing the verification state for the person. For example, this may say \"Provided identity information could not be verified\"."
					},
					"details_code": {
						"type": "string",
						"nullable": true,
						"description": "One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person."
					},
					"document": {
						"$ref": "#/components/schemas/stripe.Stripe.Person.Verification.Document"
					},
					"status": {
						"type": "string",
						"description": "The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`."
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Person": {
				"description": "This is an object representing a person associated with a Stripe account.\n\nA platform cannot access a person for an account where [account.controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, after creating an Account Link or Account Session to start Connect onboarding.\n\nSee the [Standard onboarding](https://stripe.com/connect/standard-accounts) or [Express onboarding](https://stripe.com/connect/express-accounts) documentation for information about prefilling information and account onboarding steps. Learn more about [handling identity verification with the API](https://stripe.com/connect/handling-api-verification#person-information).",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the object."
					},
					"object": {
						"type": "string",
						"enum": [
							"person"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"account": {
						"type": "string",
						"description": "The account the person is associated with."
					},
					"additional_tos_acceptances": {
						"$ref": "#/components/schemas/stripe.Stripe.Person.AdditionalTosAcceptances"
					},
					"address": {
						"$ref": "#/components/schemas/stripe.Stripe.Address"
					},
					"address_kana": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Person.AddressKana"
							}
						],
						"nullable": true,
						"description": "The Kana variation of the person's address (Japan only)."
					},
					"address_kanji": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Person.AddressKanji"
							}
						],
						"nullable": true,
						"description": "The Kanji variation of the person's address (Japan only)."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"dob": {
						"$ref": "#/components/schemas/stripe.Stripe.Person.Dob"
					},
					"email": {
						"type": "string",
						"nullable": true,
						"description": "The person's email address."
					},
					"first_name": {
						"type": "string",
						"nullable": true,
						"description": "The person's first name."
					},
					"first_name_kana": {
						"type": "string",
						"nullable": true,
						"description": "The Kana variation of the person's first name (Japan only)."
					},
					"first_name_kanji": {
						"type": "string",
						"nullable": true,
						"description": "The Kanji variation of the person's first name (Japan only)."
					},
					"full_name_aliases": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "A list of alternate names or aliases that the person is known by."
					},
					"future_requirements": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Person.FutureRequirements"
							}
						],
						"nullable": true,
						"description": "Information about the [upcoming new requirements for this person](https://stripe.com/docs/connect/custom-accounts/future-requirements), including what information needs to be collected, and by when."
					},
					"gender": {
						"type": "string",
						"nullable": true,
						"description": "The person's gender (International regulations require either \"male\" or \"female\")."
					},
					"id_number_provided": {
						"type": "boolean",
						"description": "Whether the person's `id_number` was provided. True if either the full ID number was provided or if only the required part of the ID number was provided (ex. last four of an individual's SSN for the US indicated by `ssn_last_4_provided`)."
					},
					"id_number_secondary_provided": {
						"type": "boolean",
						"description": "Whether the person's `id_number_secondary` was provided."
					},
					"last_name": {
						"type": "string",
						"nullable": true,
						"description": "The person's last name."
					},
					"last_name_kana": {
						"type": "string",
						"nullable": true,
						"description": "The Kana variation of the person's last name (Japan only)."
					},
					"last_name_kanji": {
						"type": "string",
						"nullable": true,
						"description": "The Kanji variation of the person's last name (Japan only)."
					},
					"maiden_name": {
						"type": "string",
						"nullable": true,
						"description": "The person's maiden name."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"nationality": {
						"type": "string",
						"nullable": true,
						"description": "The country where the person is a national."
					},
					"phone": {
						"type": "string",
						"nullable": true,
						"description": "The person's phone number."
					},
					"political_exposure": {
						"$ref": "#/components/schemas/stripe.Stripe.Person.PoliticalExposure",
						"description": "Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction."
					},
					"registered_address": {
						"$ref": "#/components/schemas/stripe.Stripe.Address"
					},
					"relationship": {
						"$ref": "#/components/schemas/stripe.Stripe.Person.Relationship"
					},
					"requirements": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Person.Requirements"
							}
						],
						"nullable": true,
						"description": "Information about the requirements for this person, including what information needs to be collected, and by when."
					},
					"ssn_last_4_provided": {
						"type": "boolean",
						"description": "Whether the last four digits of the person's Social Security number have been provided (U.S. only)."
					},
					"verification": {
						"$ref": "#/components/schemas/stripe.Stripe.Person.Verification"
					}
				},
				"required": [
					"id",
					"object",
					"account",
					"created"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Requirements.Alternative": {
				"properties": {
					"alternative_fields_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that can be provided to satisfy all fields in `original_fields_due`."
					},
					"original_fields_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`."
					}
				},
				"required": [
					"alternative_fields_due",
					"original_fields_due"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Requirements.Error.Code": {
				"type": "string",
				"enum": [
					"invalid_address_city_state_postal_code",
					"invalid_address_highway_contract_box",
					"invalid_address_private_mailbox",
					"invalid_business_profile_name",
					"invalid_business_profile_name_denylisted",
					"invalid_company_name_denylisted",
					"invalid_dob_age_over_maximum",
					"invalid_dob_age_under_18",
					"invalid_dob_age_under_minimum",
					"invalid_product_description_length",
					"invalid_product_description_url_match",
					"invalid_representative_country",
					"invalid_statement_descriptor_business_mismatch",
					"invalid_statement_descriptor_denylisted",
					"invalid_statement_descriptor_length",
					"invalid_statement_descriptor_prefix_denylisted",
					"invalid_statement_descriptor_prefix_mismatch",
					"invalid_street_address",
					"invalid_tax_id",
					"invalid_tax_id_format",
					"invalid_tos_acceptance",
					"invalid_url_denylisted",
					"invalid_url_format",
					"invalid_url_length",
					"invalid_url_web_presence_detected",
					"invalid_url_website_business_information_mismatch",
					"invalid_url_website_empty",
					"invalid_url_website_inaccessible",
					"invalid_url_website_inaccessible_geoblocked",
					"invalid_url_website_inaccessible_password_protected",
					"invalid_url_website_incomplete",
					"invalid_url_website_incomplete_cancellation_policy",
					"invalid_url_website_incomplete_customer_service_details",
					"invalid_url_website_incomplete_legal_restrictions",
					"invalid_url_website_incomplete_refund_policy",
					"invalid_url_website_incomplete_return_policy",
					"invalid_url_website_incomplete_terms_and_conditions",
					"invalid_url_website_incomplete_under_construction",
					"invalid_url_website_other",
					"invalid_value_other",
					"verification_directors_mismatch",
					"verification_document_address_mismatch",
					"verification_document_address_missing",
					"verification_document_corrupt",
					"verification_document_country_not_supported",
					"verification_document_directors_mismatch",
					"verification_document_dob_mismatch",
					"verification_document_duplicate_type",
					"verification_document_expired",
					"verification_document_failed_copy",
					"verification_document_failed_greyscale",
					"verification_document_failed_other",
					"verification_document_failed_test_mode",
					"verification_document_fraudulent",
					"verification_document_id_number_mismatch",
					"verification_document_id_number_missing",
					"verification_document_incomplete",
					"verification_document_invalid",
					"verification_document_issue_or_expiry_date_missing",
					"verification_document_manipulated",
					"verification_document_missing_back",
					"verification_document_missing_front",
					"verification_document_name_mismatch",
					"verification_document_name_missing",
					"verification_document_nationality_mismatch",
					"verification_document_not_readable",
					"verification_document_not_signed",
					"verification_document_not_uploaded",
					"verification_document_photo_mismatch",
					"verification_document_too_large",
					"verification_document_type_not_supported",
					"verification_extraneous_directors",
					"verification_failed_address_match",
					"verification_failed_business_iec_number",
					"verification_failed_document_match",
					"verification_failed_id_number_match",
					"verification_failed_keyed_identity",
					"verification_failed_keyed_match",
					"verification_failed_name_match",
					"verification_failed_other",
					"verification_failed_representative_authority",
					"verification_failed_residential_address",
					"verification_failed_tax_id_match",
					"verification_failed_tax_id_not_issued",
					"verification_missing_directors",
					"verification_missing_executives",
					"verification_missing_owners",
					"verification_requires_additional_memorandum_of_associations",
					"verification_requires_additional_proof_of_registration",
					"verification_supportability"
				]
			},
			"stripe.Stripe.Account.Requirements.Error": {
				"properties": {
					"code": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Requirements.Error.Code",
						"description": "The code for the type of error."
					},
					"reason": {
						"type": "string",
						"description": "An informative message that indicates the error type and provides additional details about the error."
					},
					"requirement": {
						"type": "string",
						"description": "The specific user onboarding requirement field (in the requirements hash) that needs to be resolved."
					}
				},
				"required": [
					"code",
					"reason",
					"requirement"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Requirements": {
				"properties": {
					"alternatives": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Account.Requirements.Alternative"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that are due and can be satisfied by providing the corresponding alternative fields instead."
					},
					"current_deadline": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected."
					},
					"currently_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled."
					},
					"disabled_reason": {
						"type": "string",
						"nullable": true,
						"description": "If the account is disabled, this string describes why. [Learn more about handling verification issues](https://stripe.com/docs/connect/handling-api-verification). Can be `action_required.requested_capabilities`, `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.incomplete_verification`, `rejected.listed`, `rejected.other`, `rejected.terms_of_service`, `under_review`, or `other`."
					},
					"errors": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Account.Requirements.Error"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that are `currently_due` and need to be collected again because validation or verification failed."
					},
					"eventually_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set."
					},
					"past_due": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account."
					},
					"pending_verification": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending."
					}
				},
				"required": [
					"alternatives",
					"current_deadline",
					"currently_due",
					"disabled_reason",
					"errors",
					"eventually_due",
					"past_due",
					"pending_verification"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Settings.BacsDebitPayments": {
				"properties": {
					"display_name": {
						"type": "string",
						"nullable": true,
						"description": "The Bacs Direct Debit display name for this account. For payments made with Bacs Direct Debit, this name appears on the mandate as the statement descriptor. Mobile banking apps display it as the name of the business. To use custom branding, set the Bacs Direct Debit Display Name during or right after creation. Custom branding incurs an additional monthly fee for the platform. The fee appears 5 business days after requesting Bacs. If you don't set the display name before requesting Bacs capability, it's automatically set as \"Stripe\" and the account is onboarded to Stripe branding, which is free."
					},
					"service_user_number": {
						"type": "string",
						"nullable": true,
						"description": "The Bacs Direct Debit Service user number for this account. For payments made with Bacs Direct Debit, this number is a unique identifier of the account with our banking partners."
					}
				},
				"required": [
					"display_name",
					"service_user_number"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Settings.Branding": {
				"properties": {
					"icon": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px."
					},
					"logo": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.File"
							}
						],
						"nullable": true,
						"description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px."
					},
					"primary_color": {
						"type": "string",
						"nullable": true,
						"description": "A CSS hex color value representing the primary branding color for this account"
					},
					"secondary_color": {
						"type": "string",
						"nullable": true,
						"description": "A CSS hex color value representing the secondary branding color for this account"
					}
				},
				"required": [
					"icon",
					"logo",
					"primary_color",
					"secondary_color"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Settings.CardIssuing.TosAcceptance": {
				"properties": {
					"date": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The Unix timestamp marking when the account representative accepted the service agreement."
					},
					"ip": {
						"type": "string",
						"nullable": true,
						"description": "The IP address from which the account representative accepted the service agreement."
					},
					"user_agent": {
						"type": "string",
						"description": "The user agent of the browser from which the account representative accepted the service agreement."
					}
				},
				"required": [
					"date",
					"ip"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Settings.CardIssuing": {
				"properties": {
					"tos_acceptance": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Settings.CardIssuing.TosAcceptance"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Settings.CardPayments.DeclineOn": {
				"properties": {
					"avs_failure": {
						"type": "boolean",
						"description": "Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification."
					},
					"cvc_failure": {
						"type": "boolean",
						"description": "Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification."
					}
				},
				"required": [
					"avs_failure",
					"cvc_failure"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Settings.CardPayments": {
				"properties": {
					"decline_on": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Settings.CardPayments.DeclineOn"
					},
					"statement_descriptor_prefix": {
						"type": "string",
						"nullable": true,
						"description": "The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion."
					},
					"statement_descriptor_prefix_kana": {
						"type": "string",
						"nullable": true,
						"description": "The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kana` specified on the charge. `statement_descriptor_prefix_kana` is useful for maximizing descriptor space for the dynamic portion."
					},
					"statement_descriptor_prefix_kanji": {
						"type": "string",
						"nullable": true,
						"description": "The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kanji` specified on the charge. `statement_descriptor_prefix_kanji` is useful for maximizing descriptor space for the dynamic portion."
					}
				},
				"required": [
					"statement_descriptor_prefix",
					"statement_descriptor_prefix_kana",
					"statement_descriptor_prefix_kanji"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Settings.Dashboard": {
				"properties": {
					"display_name": {
						"type": "string",
						"nullable": true,
						"description": "The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts."
					},
					"timezone": {
						"type": "string",
						"nullable": true,
						"description": "The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones)."
					}
				},
				"required": [
					"display_name",
					"timezone"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Settings.Invoices": {
				"properties": {
					"default_account_tax_ids": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.TaxId"
								}
							]
						},
						"type": "array",
						"nullable": true,
						"description": "The list of default Account Tax IDs to automatically include on invoices. Account Tax IDs get added when an invoice is finalized."
					}
				},
				"required": [
					"default_account_tax_ids"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Settings.Payments": {
				"properties": {
					"statement_descriptor": {
						"type": "string",
						"nullable": true,
						"description": "The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge."
					},
					"statement_descriptor_kana": {
						"type": "string",
						"nullable": true,
						"description": "The Kana variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors)."
					},
					"statement_descriptor_kanji": {
						"type": "string",
						"nullable": true,
						"description": "The Kanji variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors)."
					},
					"statement_descriptor_prefix_kana": {
						"type": "string",
						"nullable": true,
						"description": "The Kana variation of `statement_descriptor_prefix` used for card charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors)."
					},
					"statement_descriptor_prefix_kanji": {
						"type": "string",
						"nullable": true,
						"description": "The Kanji variation of `statement_descriptor_prefix` used for card charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors)."
					}
				},
				"required": [
					"statement_descriptor",
					"statement_descriptor_kana",
					"statement_descriptor_kanji",
					"statement_descriptor_prefix_kana",
					"statement_descriptor_prefix_kanji"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Settings.Payouts.Schedule": {
				"properties": {
					"delay_days": {
						"type": "number",
						"format": "double",
						"description": "The number of days charges for the account will be held before being paid out."
					},
					"interval": {
						"type": "string",
						"description": "How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`."
					},
					"monthly_anchor": {
						"type": "number",
						"format": "double",
						"description": "The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months."
					},
					"weekly_anchor": {
						"type": "string",
						"description": "The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly."
					}
				},
				"required": [
					"delay_days",
					"interval"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Settings.Payouts": {
				"properties": {
					"debit_negative_balances": {
						"type": "boolean",
						"description": "A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See [Understanding Connect account balances](https://stripe.com/connect/account-balances) for details. The default value is `false` when [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, otherwise `true`."
					},
					"schedule": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Settings.Payouts.Schedule"
					},
					"statement_descriptor": {
						"type": "string",
						"nullable": true,
						"description": "The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard."
					}
				},
				"required": [
					"debit_negative_balances",
					"schedule",
					"statement_descriptor"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Settings.SepaDebitPayments": {
				"properties": {
					"creditor_id": {
						"type": "string",
						"description": "SEPA creditor identifier that identifies the company making the payment."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Settings.Treasury.TosAcceptance": {
				"properties": {
					"date": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The Unix timestamp marking when the account representative accepted the service agreement."
					},
					"ip": {
						"type": "string",
						"nullable": true,
						"description": "The IP address from which the account representative accepted the service agreement."
					},
					"user_agent": {
						"type": "string",
						"description": "The user agent of the browser from which the account representative accepted the service agreement."
					}
				},
				"required": [
					"date",
					"ip"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Settings.Treasury": {
				"properties": {
					"tos_acceptance": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Settings.Treasury.TosAcceptance"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Settings": {
				"properties": {
					"bacs_debit_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Settings.BacsDebitPayments"
					},
					"branding": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Settings.Branding"
					},
					"card_issuing": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Settings.CardIssuing"
					},
					"card_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Settings.CardPayments"
					},
					"dashboard": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Settings.Dashboard"
					},
					"invoices": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Settings.Invoices"
					},
					"payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Settings.Payments"
					},
					"payouts": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Settings.Payouts"
					},
					"sepa_debit_payments": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Settings.SepaDebitPayments"
					},
					"treasury": {
						"$ref": "#/components/schemas/stripe.Stripe.Account.Settings.Treasury"
					}
				},
				"required": [
					"branding",
					"card_payments",
					"dashboard",
					"payments"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.TosAcceptance": {
				"properties": {
					"date": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The Unix timestamp marking when the account representative accepted their service agreement"
					},
					"ip": {
						"type": "string",
						"nullable": true,
						"description": "The IP address from which the account representative accepted their service agreement"
					},
					"service_agreement": {
						"type": "string",
						"description": "The user's service agreement type"
					},
					"user_agent": {
						"type": "string",
						"nullable": true,
						"description": "The user agent of the browser from which the account representative accepted their service agreement"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Account.Type": {
				"type": "string",
				"enum": [
					"custom",
					"express",
					"none",
					"standard"
				]
			},
			"stripe.Stripe.Subscription.AutomaticTax.Liability.Type": {
				"type": "string",
				"enum": [
					"account",
					"self"
				]
			},
			"stripe.Stripe.Subscription.AutomaticTax.Liability": {
				"properties": {
					"account": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The connected account being referenced when `type` is `account`."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.AutomaticTax.Liability.Type",
						"description": "Type of the account referenced."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.AutomaticTax": {
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "Whether Stripe automatically computes tax on this subscription."
					},
					"liability": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.AutomaticTax.Liability"
							}
						],
						"nullable": true,
						"description": "The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account."
					}
				},
				"required": [
					"enabled",
					"liability"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.BillingCycleAnchorConfig": {
				"properties": {
					"day_of_month": {
						"type": "number",
						"format": "double",
						"description": "The day of the month of the billing_cycle_anchor."
					},
					"hour": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The hour of the day of the billing_cycle_anchor."
					},
					"minute": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The minute of the hour of the billing_cycle_anchor."
					},
					"month": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The month to start full cycle billing periods."
					},
					"second": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The second of the minute of the billing_cycle_anchor."
					}
				},
				"required": [
					"day_of_month",
					"hour",
					"minute",
					"month",
					"second"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.BillingThresholds": {
				"properties": {
					"amount_gte": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Monetary threshold that triggers the subscription to create an invoice"
					},
					"reset_billing_cycle_anchor": {
						"type": "boolean",
						"nullable": true,
						"description": "Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`."
					}
				},
				"required": [
					"amount_gte",
					"reset_billing_cycle_anchor"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.CancellationDetails.Feedback": {
				"type": "string",
				"enum": [
					"customer_service",
					"low_quality",
					"missing_features",
					"other",
					"switched_service",
					"too_complex",
					"too_expensive",
					"unused"
				]
			},
			"stripe.Stripe.Subscription.CancellationDetails.Reason": {
				"type": "string",
				"enum": [
					"cancellation_requested",
					"payment_disputed",
					"payment_failed"
				]
			},
			"stripe.Stripe.Subscription.CancellationDetails": {
				"properties": {
					"comment": {
						"type": "string",
						"nullable": true,
						"description": "Additional comments about why the user canceled the subscription, if the subscription was canceled explicitly by the user."
					},
					"feedback": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.CancellationDetails.Feedback"
							}
						],
						"nullable": true,
						"description": "The customer submitted reason for why they canceled, if the subscription was canceled explicitly by the user."
					},
					"reason": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.CancellationDetails.Reason"
							}
						],
						"nullable": true,
						"description": "Why this subscription was canceled."
					}
				},
				"required": [
					"comment",
					"feedback",
					"reason"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.CollectionMethod": {
				"type": "string",
				"enum": [
					"charge_automatically",
					"send_invoice"
				]
			},
			"stripe.Stripe.Subscription.InvoiceSettings.Issuer.Type": {
				"type": "string",
				"enum": [
					"account",
					"self"
				]
			},
			"stripe.Stripe.Subscription.InvoiceSettings.Issuer": {
				"properties": {
					"account": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The connected account being referenced when `type` is `account`."
					},
					"type": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.InvoiceSettings.Issuer.Type",
						"description": "Type of the account referenced."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.InvoiceSettings": {
				"properties": {
					"account_tax_ids": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.TaxId"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.DeletedTaxId"
								}
							]
						},
						"type": "array",
						"nullable": true,
						"description": "The account tax IDs associated with the subscription. Will be set on invoices generated by the subscription."
					},
					"issuer": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.InvoiceSettings.Issuer"
					}
				},
				"required": [
					"account_tax_ids",
					"issuer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.ApiList_stripe.Stripe.SubscriptionItem_": {
				"description": "A container for paginated lists of objects.\nThe array of objects is on the `.data` property,\nand `.has_more` indicates whether there are additional objects beyond the end of this list.\n\nLearn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)\nor, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.",
				"properties": {
					"object": {
						"type": "string",
						"enum": [
							"list"
						],
						"nullable": false
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.SubscriptionItem"
						},
						"type": "array"
					},
					"has_more": {
						"type": "boolean",
						"description": "True if this list has another page of items after this one that can be fetched."
					},
					"url": {
						"type": "string",
						"description": "The URL where this list can be accessed."
					}
				},
				"required": [
					"object",
					"data",
					"has_more",
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PauseCollection.Behavior": {
				"type": "string",
				"enum": [
					"keep_as_draft",
					"mark_uncollectible",
					"void"
				]
			},
			"stripe.Stripe.Subscription.PauseCollection": {
				"properties": {
					"behavior": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.PauseCollection.Behavior",
						"description": "The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`."
					},
					"resumes_at": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The time after which the subscription will resume collecting payments."
					}
				},
				"required": [
					"behavior",
					"resumes_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType": {
				"type": "string",
				"enum": [
					"business",
					"personal"
				]
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions": {
				"properties": {
					"transaction_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType"
							}
						],
						"nullable": true,
						"description": "Transaction type of the mandate."
					}
				},
				"required": [
					"transaction_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit.VerificationMethod": {
				"type": "string",
				"enum": [
					"automatic",
					"instant",
					"microdeposits"
				]
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit": {
				"properties": {
					"mandate_options": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions"
					},
					"verification_method": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit.VerificationMethod",
						"description": "Bank account verification method."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Bancontact.PreferredLanguage": {
				"type": "string",
				"enum": [
					"de",
					"en",
					"fr",
					"nl"
				]
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Bancontact": {
				"properties": {
					"preferred_language": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Bancontact.PreferredLanguage",
						"description": "Preferred language of the Bancontact authorization page that the customer is redirected to."
					}
				},
				"required": [
					"preferred_language"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.MandateOptions.AmountType": {
				"type": "string",
				"enum": [
					"fixed",
					"maximum"
				]
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.MandateOptions": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Amount to be charged for future payments."
					},
					"amount_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.MandateOptions.AmountType"
							}
						],
						"nullable": true,
						"description": "One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "A description of the mandate or subscription that is meant to be displayed to the customer."
					}
				},
				"required": [
					"amount",
					"amount_type",
					"description"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.Network": {
				"type": "string",
				"enum": [
					"amex",
					"cartes_bancaires",
					"diners",
					"discover",
					"eftpos_au",
					"girocard",
					"interac",
					"jcb",
					"mastercard",
					"unionpay",
					"unknown",
					"visa"
				]
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.RequestThreeDSecure": {
				"type": "string",
				"enum": [
					"any",
					"automatic",
					"challenge"
				]
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card": {
				"properties": {
					"mandate_options": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.MandateOptions"
					},
					"network": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.Network"
							}
						],
						"nullable": true,
						"description": "Selected network to process this Subscription on. Depends on the available networks of the card attached to the Subscription. Can be only set confirm-time."
					},
					"request_three_d_secure": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.RequestThreeDSecure"
							}
						],
						"nullable": true,
						"description": "We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine."
					}
				},
				"required": [
					"network",
					"request_three_d_secure"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer.Country": {
				"type": "string",
				"enum": [
					"BE",
					"DE",
					"ES",
					"FR",
					"IE",
					"NL"
				]
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer": {
				"properties": {
					"country": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer.Country",
						"description": "The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`."
					}
				},
				"required": [
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer": {
				"properties": {
					"eu_bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer"
					},
					"type": {
						"type": "string",
						"nullable": true,
						"description": "The bank transfer type that can be used for funding. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance": {
				"properties": {
					"bank_transfer": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer"
					},
					"funding_type": {
						"type": "string",
						"enum": [
							"bank_transfer",
							null
						],
						"nullable": true,
						"description": "The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`."
					}
				},
				"required": [
					"funding_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Konbini": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.SepaDebit": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory": {
				"type": "string",
				"enum": [
					"checking",
					"savings"
				]
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters": {
				"properties": {
					"account_subcategories": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory"
						},
						"type": "array",
						"description": "The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission": {
				"type": "string",
				"enum": [
					"balances",
					"ownership",
					"payment_method",
					"transactions"
				]
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch": {
				"type": "string",
				"enum": [
					"balances",
					"ownership",
					"transactions"
				]
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections": {
				"properties": {
					"filters": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters"
					},
					"permissions": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission"
						},
						"type": "array",
						"description": "The list of permissions to request. The `payment_method` permission must be included."
					},
					"prefetch": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch"
						},
						"type": "array",
						"nullable": true,
						"description": "Data features requested to be retrieved upon account creation."
					}
				},
				"required": [
					"prefetch"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.VerificationMethod": {
				"type": "string",
				"enum": [
					"automatic",
					"instant",
					"microdeposits"
				]
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount": {
				"properties": {
					"financial_connections": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections"
					},
					"verification_method": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.VerificationMethod",
						"description": "Bank account verification method."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions": {
				"properties": {
					"acss_debit": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit"
							}
						],
						"nullable": true,
						"description": "This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription."
					},
					"bancontact": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Bancontact"
							}
						],
						"nullable": true,
						"description": "This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription."
					},
					"card": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card"
							}
						],
						"nullable": true,
						"description": "This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription."
					},
					"customer_balance": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance"
							}
						],
						"nullable": true,
						"description": "This sub-hash contains details about the Bank transfer payment method options to pass to invoices created by the subscription."
					},
					"konbini": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Konbini"
							}
						],
						"nullable": true,
						"description": "This sub-hash contains details about the Konbini payment method options to pass to invoices created by the subscription."
					},
					"sepa_debit": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.SepaDebit"
							}
						],
						"nullable": true,
						"description": "This sub-hash contains details about the SEPA Direct Debit payment method options to pass to invoices created by the subscription."
					},
					"us_bank_account": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount"
							}
						],
						"nullable": true,
						"description": "This sub-hash contains details about the ACH direct debit payment method options to pass to invoices created by the subscription."
					}
				},
				"required": [
					"acss_debit",
					"bancontact",
					"card",
					"customer_balance",
					"konbini",
					"sepa_debit",
					"us_bank_account"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PaymentSettings.PaymentMethodType": {
				"type": "string",
				"enum": [
					"ach_credit_transfer",
					"ach_debit",
					"acss_debit",
					"amazon_pay",
					"au_becs_debit",
					"bacs_debit",
					"bancontact",
					"boleto",
					"card",
					"cashapp",
					"customer_balance",
					"eps",
					"fpx",
					"giropay",
					"grabpay",
					"ideal",
					"konbini",
					"link",
					"multibanco",
					"p24",
					"paynow",
					"paypal",
					"promptpay",
					"revolut_pay",
					"sepa_credit_transfer",
					"sepa_debit",
					"sofort",
					"swish",
					"us_bank_account",
					"wechat_pay"
				]
			},
			"stripe.Stripe.Subscription.PaymentSettings.SaveDefaultPaymentMethod": {
				"type": "string",
				"enum": [
					"off",
					"on_subscription"
				]
			},
			"stripe.Stripe.Subscription.PaymentSettings": {
				"properties": {
					"payment_method_options": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions"
							}
						],
						"nullable": true,
						"description": "Payment-method-specific configuration to provide to invoices created by the subscription."
					},
					"payment_method_types": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.PaymentMethodType"
						},
						"type": "array",
						"nullable": true,
						"description": "The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice's default payment method, the subscription's default payment method, the customer's default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice)."
					},
					"save_default_payment_method": {
						"allOf": [
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription.PaymentSettings.SaveDefaultPaymentMethod"
							}
						],
						"nullable": true,
						"description": "Configure whether Stripe updates `subscription.default_payment_method` when payment succeeds. Defaults to `off`."
					}
				},
				"required": [
					"payment_method_options",
					"payment_method_types",
					"save_default_payment_method"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PendingInvoiceItemInterval.Interval": {
				"type": "string",
				"enum": [
					"day",
					"month",
					"week",
					"year"
				]
			},
			"stripe.Stripe.Subscription.PendingInvoiceItemInterval": {
				"properties": {
					"interval": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.PendingInvoiceItemInterval.Interval",
						"description": "Specifies invoicing frequency. Either `day`, `week`, `month` or `year`."
					},
					"interval_count": {
						"type": "number",
						"format": "double",
						"description": "The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks)."
					}
				},
				"required": [
					"interval",
					"interval_count"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.PendingUpdate": {
				"properties": {
					"billing_cycle_anchor": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format."
					},
					"expires_at": {
						"type": "number",
						"format": "double",
						"description": "The point after which the changes reflected by this update will be discarded and no longer applied."
					},
					"subscription_items": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.SubscriptionItem"
						},
						"type": "array",
						"nullable": true,
						"description": "List of subscription items, each with an attached plan, that will be set if the update is applied."
					},
					"trial_end": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied."
					},
					"trial_from_plan": {
						"type": "boolean",
						"nullable": true,
						"description": "Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more."
					}
				},
				"required": [
					"billing_cycle_anchor",
					"expires_at",
					"subscription_items",
					"trial_end",
					"trial_from_plan"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.Status": {
				"type": "string",
				"enum": [
					"active",
					"canceled",
					"incomplete",
					"incomplete_expired",
					"past_due",
					"paused",
					"trialing",
					"unpaid"
				]
			},
			"stripe.Stripe.Subscription.TransferData": {
				"properties": {
					"amount_percent": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination."
					},
					"destination": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The account where funds from the payment will be transferred to upon payment success."
					}
				},
				"required": [
					"amount_percent",
					"destination"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.TrialSettings.EndBehavior.MissingPaymentMethod": {
				"type": "string",
				"enum": [
					"cancel",
					"create_invoice",
					"pause"
				]
			},
			"stripe.Stripe.Subscription.TrialSettings.EndBehavior": {
				"properties": {
					"missing_payment_method": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.TrialSettings.EndBehavior.MissingPaymentMethod",
						"description": "Indicates how the subscription should change when the trial ends if the user did not provide a payment method."
					}
				},
				"required": [
					"missing_payment_method"
				],
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Subscription.TrialSettings": {
				"properties": {
					"end_behavior": {
						"$ref": "#/components/schemas/stripe.Stripe.Subscription.TrialSettings.EndBehavior",
						"description": "Defines how a subscription behaves when a free trial ends."
					}
				},
				"required": [
					"end_behavior"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.stripe.Stripe.Discount_": {
				"properties": {},
				"additionalProperties": {
					"$ref": "#/components/schemas/stripe.Stripe.Discount"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"Pick_stripe.Stripe.Invoice.Exclude_keyofstripe.Stripe.Invoice.id__": {
				"properties": {
					"number": {
						"type": "string",
						"description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified."
					},
					"object": {
						"type": "string",
						"enum": [
							"invoice"
						],
						"nullable": false,
						"description": "String representing the object's type. Objects of the same type share the same value."
					},
					"status": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.Status",
						"description": "The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)"
					},
					"application": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Application"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedApplication"
							}
						],
						"description": "ID of the Connect Application that created the invoice."
					},
					"subscription": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Subscription"
							}
						],
						"description": "The subscription that this invoice was prepared for, if any."
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Customer"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.DeletedCustomer"
							}
						],
						"description": "The ID of the customer who will be billed."
					},
					"deleted": {
						"description": "Always true for a deleted object"
					},
					"issuer": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.Issuer"
					},
					"charge": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Charge"
							}
						],
						"description": "ID of the latest charge generated for this invoice, if any."
					},
					"paid": {
						"type": "boolean",
						"description": "Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance."
					},
					"account_country": {
						"type": "string",
						"description": "The country of the business associated with this invoice, most often the business creating the invoice."
					},
					"account_name": {
						"type": "string",
						"description": "The public name of the business associated with this invoice, most often the business creating the invoice."
					},
					"account_tax_ids": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.TaxId"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.DeletedTaxId"
								}
							]
						},
						"type": "array",
						"description": "The account tax IDs associated with the invoice. Only editable when the invoice is a draft."
					},
					"amount_due": {
						"type": "number",
						"format": "double",
						"description": "Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`."
					},
					"amount_paid": {
						"type": "number",
						"format": "double",
						"description": "The amount, in cents (or local equivalent), that was paid."
					},
					"amount_remaining": {
						"type": "number",
						"format": "double",
						"description": "The difference between amount_due and amount_paid, in cents (or local equivalent)."
					},
					"amount_shipping": {
						"type": "number",
						"format": "double",
						"description": "This is the sum of all the shipping amounts."
					},
					"application_fee_amount": {
						"type": "number",
						"format": "double",
						"description": "The fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid."
					},
					"attempt_count": {
						"type": "number",
						"format": "double",
						"description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. If a failure is returned with a non-retryable return code, the invoice can no longer be retried unless a new payment method is obtained. Retries will continue to be scheduled, and attempt_count will continue to increment, but retries will only be executed if a new payment method is obtained."
					},
					"attempted": {
						"type": "boolean",
						"description": "Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users."
					},
					"auto_advance": {
						"type": "boolean",
						"description": "Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action."
					},
					"automatic_tax": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.AutomaticTax"
					},
					"automatically_finalizes_at": {
						"type": "number",
						"format": "double",
						"description": "The time when this invoice is currently scheduled to be automatically finalized. The field will be `null` if the invoice is not scheduled to finalize in the future. If the invoice is not in the draft state, this field will always be `null` - see `finalized_at` for the time when an already-finalized invoice was finalized."
					},
					"billing_reason": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.BillingReason",
						"description": "Indicates the reason why the invoice was created.\n\n* `manual`: Unrelated to a subscription, for example, created via the invoice editor.\n* `subscription`: No longer in use. Applies to subscriptions from before May 2018 where no distinction was made between updates, cycles, and thresholds.\n* `subscription_create`: A new subscription was created.\n* `subscription_cycle`: A subscription advanced into a new period.\n* `subscription_threshold`: A subscription reached a billing threshold.\n* `subscription_update`: A subscription was updated.\n* `upcoming`: Reserved for simulated invoices, per the upcoming invoice endpoint."
					},
					"collection_method": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.CollectionMethod",
						"description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "Time at which the object was created. Measured in seconds since the Unix epoch."
					},
					"currency": {
						"type": "string",
						"description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."
					},
					"custom_fields": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Invoice.CustomField"
						},
						"type": "array",
						"description": "Custom fields displayed on the invoice."
					},
					"customer_address": {
						"$ref": "#/components/schemas/stripe.Stripe.Address",
						"description": "The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated."
					},
					"customer_email": {
						"type": "string",
						"description": "The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated."
					},
					"customer_name": {
						"type": "string",
						"description": "The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated."
					},
					"customer_phone": {
						"type": "string",
						"description": "The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated."
					},
					"customer_shipping": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.CustomerShipping",
						"description": "The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated."
					},
					"customer_tax_exempt": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.CustomerTaxExempt",
						"description": "The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated."
					},
					"customer_tax_ids": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Invoice.CustomerTaxId"
						},
						"type": "array",
						"description": "The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated."
					},
					"default_payment_method": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentMethod"
							}
						],
						"description": "ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings."
					},
					"default_source": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.CustomerSource"
							}
						],
						"description": "ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source."
					},
					"default_tax_rates": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.TaxRate"
						},
						"type": "array",
						"description": "The tax rates applied to this invoice, if any."
					},
					"description": {
						"type": "string",
						"description": "An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard."
					},
					"discount": {
						"$ref": "#/components/schemas/stripe.Stripe.Discount",
						"description": "Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts."
					},
					"discounts": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.Discount"
								},
								{
									"$ref": "#/components/schemas/stripe.Stripe.DeletedDiscount"
								}
							]
						},
						"type": "array",
						"description": "The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount."
					},
					"due_date": {
						"type": "number",
						"format": "double",
						"description": "The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`."
					},
					"effective_at": {
						"type": "number",
						"format": "double",
						"description": "The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt."
					},
					"ending_balance": {
						"type": "number",
						"format": "double",
						"description": "Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null."
					},
					"footer": {
						"type": "string",
						"description": "Footer displayed on the invoice."
					},
					"from_invoice": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.FromInvoice",
						"description": "Details of the invoice that was cloned. See the [revision documentation](https://stripe.com/docs/invoicing/invoice-revisions) for more details."
					},
					"hosted_invoice_url": {
						"type": "string",
						"description": "The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null."
					},
					"invoice_pdf": {
						"type": "string",
						"description": "The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null."
					},
					"last_finalization_error": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.LastFinalizationError",
						"description": "The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized."
					},
					"latest_revision": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Invoice"
							}
						],
						"description": "The ID of the most recent non-draft revision of this invoice"
					},
					"lines": {
						"$ref": "#/components/schemas/stripe.Stripe.ApiList_stripe.Stripe.InvoiceLineItem_",
						"description": "The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order."
					},
					"livemode": {
						"type": "boolean",
						"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."
					},
					"metadata": {
						"$ref": "#/components/schemas/stripe.Stripe.Metadata",
						"description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
					},
					"next_payment_attempt": {
						"type": "number",
						"format": "double",
						"description": "The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`."
					},
					"on_behalf_of": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Account"
							}
						],
						"description": "The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details."
					},
					"paid_out_of_band": {
						"type": "boolean",
						"description": "Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe."
					},
					"payment_intent": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.PaymentIntent"
							}
						],
						"description": "The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent."
					},
					"payment_settings": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.PaymentSettings"
					},
					"period_end": {
						"type": "number",
						"format": "double",
						"description": "End of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price."
					},
					"period_start": {
						"type": "number",
						"format": "double",
						"description": "Start of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price."
					},
					"post_payment_credit_notes_amount": {
						"type": "number",
						"format": "double",
						"description": "Total amount of all post-payment credit notes issued for this invoice."
					},
					"pre_payment_credit_notes_amount": {
						"type": "number",
						"format": "double",
						"description": "Total amount of all pre-payment credit notes issued for this invoice."
					},
					"quote": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.Quote"
							}
						],
						"description": "The quote this invoice was generated from."
					},
					"receipt_number": {
						"type": "string",
						"description": "This is the transaction number that appears on email receipts sent for this invoice."
					},
					"rendering": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.Rendering",
						"description": "The rendering-related settings that control how the invoice is displayed on customer-facing surfaces such as PDF and Hosted Invoice Page."
					},
					"shipping_cost": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.ShippingCost",
						"description": "The details of the cost of shipping, including the ShippingRate applied on the invoice."
					},
					"shipping_details": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.ShippingDetails",
						"description": "Shipping details for the invoice. The Invoice PDF will use the `shipping_details` value if it is set, otherwise the PDF will render the shipping address from the customer."
					},
					"starting_balance": {
						"type": "number",
						"format": "double",
						"description": "Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. For revision invoices, this also includes any customer balance that was applied to the original invoice."
					},
					"statement_descriptor": {
						"type": "string",
						"description": "Extra information about an invoice for the customer's credit card statement."
					},
					"status_transitions": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.StatusTransitions"
					},
					"subscription_details": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.SubscriptionDetails",
						"description": "Details about the subscription that created this invoice."
					},
					"subscription_proration_date": {
						"type": "number",
						"format": "double",
						"description": "Only set for upcoming invoices that preview prorations. The time used to calculate prorations."
					},
					"subtotal": {
						"type": "number",
						"format": "double",
						"description": "Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or exclusive tax is applied. Item discounts are already incorporated"
					},
					"subtotal_excluding_tax": {
						"type": "number",
						"format": "double",
						"description": "The integer amount in cents (or local equivalent) representing the subtotal of the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated"
					},
					"tax": {
						"type": "number",
						"format": "double",
						"description": "The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice."
					},
					"test_clock": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/stripe.Stripe.TestHelpers.TestClock"
							}
						],
						"description": "ID of the test clock this invoice belongs to."
					},
					"threshold_reason": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.ThresholdReason"
					},
					"total": {
						"type": "number",
						"format": "double",
						"description": "Total after discounts and taxes."
					},
					"total_discount_amounts": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Invoice.TotalDiscountAmount"
						},
						"type": "array",
						"description": "The aggregate amounts calculated per discount across all line items."
					},
					"total_excluding_tax": {
						"type": "number",
						"format": "double",
						"description": "The integer amount in cents (or local equivalent) representing the total amount of the invoice including all discounts but excluding all tax."
					},
					"total_tax_amounts": {
						"items": {
							"$ref": "#/components/schemas/stripe.Stripe.Invoice.TotalTaxAmount"
						},
						"type": "array",
						"description": "The aggregate amounts calculated per tax rate for all line items."
					},
					"transfer_data": {
						"$ref": "#/components/schemas/stripe.Stripe.Invoice.TransferData",
						"description": "The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice."
					},
					"webhooks_delivered_at": {
						"type": "number",
						"format": "double",
						"description": "Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created."
					}
				},
				"required": [
					"number",
					"object",
					"status",
					"application",
					"subscription",
					"customer",
					"issuer",
					"charge",
					"paid",
					"account_country",
					"account_name",
					"account_tax_ids",
					"amount_due",
					"amount_paid",
					"amount_remaining",
					"amount_shipping",
					"application_fee_amount",
					"attempt_count",
					"attempted",
					"automatic_tax",
					"automatically_finalizes_at",
					"billing_reason",
					"collection_method",
					"created",
					"currency",
					"custom_fields",
					"customer_address",
					"customer_email",
					"customer_name",
					"customer_phone",
					"customer_shipping",
					"customer_tax_exempt",
					"default_payment_method",
					"default_source",
					"default_tax_rates",
					"description",
					"discount",
					"discounts",
					"due_date",
					"effective_at",
					"ending_balance",
					"footer",
					"from_invoice",
					"last_finalization_error",
					"latest_revision",
					"lines",
					"livemode",
					"metadata",
					"next_payment_attempt",
					"on_behalf_of",
					"paid_out_of_band",
					"payment_intent",
					"payment_settings",
					"period_end",
					"period_start",
					"post_payment_credit_notes_amount",
					"pre_payment_credit_notes_amount",
					"quote",
					"receipt_number",
					"rendering",
					"shipping_cost",
					"shipping_details",
					"starting_balance",
					"statement_descriptor",
					"status_transitions",
					"subscription_details",
					"subtotal",
					"subtotal_excluding_tax",
					"tax",
					"test_clock",
					"total",
					"total_discount_amounts",
					"total_excluding_tax",
					"total_tax_amounts",
					"transfer_data",
					"webhooks_delivered_at"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_stripe.Stripe.Invoice.id_": {
				"$ref": "#/components/schemas/Pick_stripe.Stripe.Invoice.Exclude_keyofstripe.Stripe.Invoice.id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"stripe.Stripe.UpcomingInvoice": {
				"$ref": "#/components/schemas/Omit_stripe.Stripe.Invoice.id_"
			},
			"ConvertToWavResponse": {
				"properties": {
					"data": {
						"type": "string",
						"nullable": true
					},
					"error": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ConvertToWavRequestBody": {
				"properties": {
					"audioData": {
						"type": "string"
					}
				},
				"required": [
					"audioData"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"api_key": {
				"type": "apiKey",
				"name": "authorization",
				"in": "header"
			}
		}
	},
	"info": {
		"title": "helicone-api",
		"version": "1.0.0",
		"license": {
			"name": "MIT"
		},
		"contact": {}
	},
	"paths": {
		"/v1/user-feedback": {
			"post": {
				"operationId": "PostUserFeedback",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"success": {},
												"error": {
													"type": "string"
												}
											},
											"required": [
												"error"
											],
											"type": "object"
										},
										{
											"properties": {
												"error": {},
												"success": {
													"type": "boolean"
												}
											},
											"required": [
												"success"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"User Feedback"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"tag": {
										"type": "string"
									},
									"feedback": {
										"type": "string"
									}
								},
								"required": [
									"tag",
									"feedback"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/evaluator": {
			"post": {
				"operationId": "CreateEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_EvaluatorResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateEvaluatorParams"
							}
						}
					}
				}
			}
		},
		"/v1/evaluator/{evaluatorId}": {
			"get": {
				"operationId": "GetEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_EvaluatorResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_EvaluatorResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateEvaluatorParams"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/evaluator/query": {
			"post": {
				"operationId": "QueryEvaluators",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_EvaluatorResult-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/evaluator/{evaluatorId}/experiments": {
			"get": {
				"operationId": "GetExperimentsForEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_EvaluatorExperiment-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/evaluator/{evaluatorId}/onlineEvaluators": {
			"get": {
				"operationId": "GetOnlineEvaluators",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_OnlineEvaluatorByEvaluatorId-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateOnlineEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOnlineEvaluatorParams"
							}
						}
					}
				}
			}
		},
		"/v1/evaluator/{evaluatorId}/onlineEvaluators/{onlineEvaluatorId}": {
			"delete": {
				"operationId": "DeleteOnlineEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "onlineEvaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/evaluator/python/test": {
			"post": {
				"operationId": "TestPythonEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__output-string--traces-string-Array--statusCode_63_-number_.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"testInput": {
										"$ref": "#/components/schemas/TestInput"
									},
									"code": {
										"type": "string"
									}
								},
								"required": [
									"testInput",
									"code"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/evaluator/llm/test": {
			"post": {
				"operationId": "TestLLMEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EvaluatorScoreResult"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"evaluatorName": {
										"type": "string"
									},
									"testInput": {
										"$ref": "#/components/schemas/TestInput"
									},
									"evaluatorConfig": {
										"$ref": "#/components/schemas/EvaluatorConfig"
									}
								},
								"required": [
									"evaluatorName",
									"testInput",
									"evaluatorConfig"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/evaluator/lastmile/test": {
			"post": {
				"operationId": "TestLastMileEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__score-number--input-string--output-string--ground_truth_63_-string_.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"testInput": {
										"$ref": "#/components/schemas/TestInput"
									},
									"config": {
										"$ref": "#/components/schemas/LastMileConfigForm"
									}
								},
								"required": [
									"testInput",
									"config"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/evaluator/{evaluatorId}/stats": {
			"get": {
				"operationId": "GetEvaluatorStats",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_EvaluatorStats.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/create/empty": {
			"post": {
				"operationId": "CreateEmptyExperiment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__experimentId-string_.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v2/experiment/create/from-request/{requestId}": {
			"post": {
				"operationId": "CreateExperimentFromRequest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__experimentId-string_.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "requestId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/new": {
			"post": {
				"operationId": "CreateNewExperiment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__experimentId-string_.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"originalPromptVersion": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								},
								"required": [
									"originalPromptVersion",
									"name"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment": {
			"get": {
				"operationId": "GetExperiments",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_ExperimentV2-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v2/experiment/{experimentId}": {
			"delete": {
				"operationId": "DeleteExperiment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"get": {
				"operationId": "GetExperimentById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_ExtendedExperimentData.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/prompt-version": {
			"post": {
				"operationId": "CreateNewPromptVersionForExperiment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateNewPromptVersionForExperimentParams"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/prompt-version/{promptVersionId}": {
			"delete": {
				"operationId": "DeletePromptVersion",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/prompt-versions": {
			"get": {
				"operationId": "GetPromptVersionsForExperiment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_ExperimentV2PromptVersion-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/input-keys": {
			"get": {
				"operationId": "GetInputKeysForExperiment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_string-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/add-manual-row": {
			"post": {
				"operationId": "AddManualRowToExperiment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_string.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"inputs": {
										"$ref": "#/components/schemas/Record_string.string_"
									}
								},
								"required": [
									"inputs"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/add-manual-rows-batch": {
			"post": {
				"operationId": "AddManualRowsToExperimentBatch",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"inputs": {
										"items": {
											"$ref": "#/components/schemas/Record_string.string_"
										},
										"type": "array"
									}
								},
								"required": [
									"inputs"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/rows": {
			"delete": {
				"operationId": "DeleteExperimentTableRows",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"inputRecordIds": {
										"items": {
											"type": "string"
										},
										"type": "array"
									}
								},
								"required": [
									"inputRecordIds"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/row/insert/batch": {
			"post": {
				"operationId": "CreateExperimentTableRowBatch",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"rows": {
										"items": {
											"properties": {
												"autoInputs": {
													"items": {},
													"type": "array"
												},
												"inputs": {
													"$ref": "#/components/schemas/Record_string.string_"
												},
												"inputRecordId": {
													"type": "string"
												}
											},
											"required": [
												"autoInputs",
												"inputs",
												"inputRecordId"
											],
											"type": "object"
										},
										"type": "array"
									}
								},
								"required": [
									"rows"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/row/insert/dataset/{datasetId}": {
			"post": {
				"operationId": "CreateExperimentTableRowFromDataset",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "datasetId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/row/update": {
			"post": {
				"operationId": "UpdateExperimentTableRow",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"inputs": {
										"$ref": "#/components/schemas/Record_string.string_"
									},
									"inputRecordId": {
										"type": "string"
									}
								},
								"required": [
									"inputs",
									"inputRecordId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/run-hypothesis": {
			"post": {
				"operationId": "RunHypothesis",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_string.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"inputRecordId": {
										"type": "string"
									},
									"promptVersionId": {
										"type": "string"
									}
								},
								"required": [
									"inputRecordId",
									"promptVersionId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/evaluators": {
			"get": {
				"operationId": "GetExperimentEvaluators",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_EvaluatorResult-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateExperimentEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"evaluatorId": {
										"type": "string"
									}
								},
								"required": [
									"evaluatorId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/evaluators/{evaluatorId}": {
			"delete": {
				"operationId": "DeleteExperimentEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/evaluators/run": {
			"post": {
				"operationId": "RunExperimentEvaluators",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/should-run-evaluators": {
			"get": {
				"operationId": "ShouldRunEvaluators",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_boolean.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/{promptVersionId}/scores": {
			"get": {
				"operationId": "GetExperimentPromptVersionScores",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_Record_string.ScoreV2_.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/{requestId}/{scoreKey}": {
			"get": {
				"operationId": "GetExperimentScore",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_ScoreV2-or-null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "requestId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "scoreKey",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/request/query": {
			"post": {
				"operationId": "GetRequests",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_HeliconeRequest-Array.string_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"filter": "all",
											"isCached": false,
											"limit": 10,
											"offset": 0,
											"sort": {
												"created_at": "desc"
											},
											"isScored": false,
											"isPartOfExperiment": false
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Request query filters",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RequestQueryParams",
								"description": "Request query filters"
							},
							"example": {
								"filter": "all",
								"isCached": false,
								"limit": 10,
								"offset": 0,
								"sort": {
									"created_at": "desc"
								},
								"isScored": false,
								"isPartOfExperiment": false
							}
						}
					}
				}
			}
		},
		"/v1/request/query-clickhouse": {
			"post": {
				"operationId": "GetRequestsClickhouse",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_HeliconeRequest-Array.string_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"filter": "all",
											"isCached": false,
											"limit": 10,
											"offset": 0,
											"sort": {
												"created_at": "desc"
											},
											"isScored": false,
											"isPartOfExperiment": false
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Request query filters",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RequestQueryParams",
								"description": "Request query filters"
							},
							"example": {
								"filter": "all",
								"isCached": false,
								"limit": 100,
								"offset": 0,
								"sort": {
									"created_at": "desc"
								},
								"includeInputs": false,
								"isScored": false,
								"isPartOfExperiment": false
							}
						}
					}
				}
			}
		},
		"/v1/request/{requestId}": {
			"get": {
				"operationId": "GetRequestById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_HeliconeRequest.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "requestId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "includeBody",
						"required": false,
						"schema": {
							"default": false,
							"type": "boolean"
						}
					}
				]
			}
		},
		"/v1/request/query-ids": {
			"post": {
				"operationId": "GetRequestsByIds",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_HeliconeRequest-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"requestIds": {
										"items": {
											"type": "string"
										},
										"type": "array"
									}
								},
								"required": [
									"requestIds"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/request/{requestId}/feedback": {
			"post": {
				"operationId": "FeedbackRequest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "requestId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"rating": {
										"type": "boolean"
									}
								},
								"required": [
									"rating"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/request/{requestId}/property": {
			"put": {
				"operationId": "PutProperty",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "requestId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"value": {
										"type": "string"
									},
									"key": {
										"type": "string"
									}
								},
								"required": [
									"value",
									"key"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/request/{requestId}/assets/{assetId}": {
			"post": {
				"operationId": "GetRequestAssetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_HeliconeRequestAsset.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "requestId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "assetId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/request/{requestId}/score": {
			"post": {
				"operationId": "AddScores",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "requestId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ScoreRequest"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/query": {
			"post": {
				"operationId": "GetPrompts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptsResult-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptsQueryParams"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/{promptId}/query": {
			"post": {
				"operationId": "GetPrompt",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptQueryParams"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/{promptId}": {
			"delete": {
				"operationId": "DeletePrompt",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/prompt/create": {
			"post": {
				"operationId": "CreatePrompt",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_CreatePromptResponse.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"metadata": {
										"$ref": "#/components/schemas/Record_string.any_"
									},
									"prompt": {},
									"userDefinedId": {
										"type": "string"
									}
								},
								"required": [
									"metadata",
									"prompt",
									"userDefinedId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/{promptId}/user-defined-id": {
			"patch": {
				"operationId": "UpdatePromptUserDefinedId",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"userDefinedId": {
										"type": "string"
									}
								},
								"required": [
									"userDefinedId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/version/{promptVersionId}/edit-label": {
			"post": {
				"operationId": "EditPromptVersionLabel",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__metadata-Record_string.any__.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptEditSubversionLabelParams"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/version/{promptVersionId}/edit-template": {
			"post": {
				"operationId": "EditPromptVersionTemplate",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptEditSubversionTemplateParams"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/version/{promptVersionId}/subversion-from-ui": {
			"post": {
				"operationId": "CreateSubversionFromUi",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptCreateSubversionParams"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/version/{promptVersionId}/subversion": {
			"post": {
				"operationId": "CreateSubversion",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptCreateSubversionParams"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/version/{promptVersionId}/promote": {
			"post": {
				"operationId": "PromotePromptVersionToProduction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"previousProductionVersionId": {
										"type": "string"
									}
								},
								"required": [
									"previousProductionVersionId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/version/{promptVersionId}/inputs/query": {
			"post": {
				"operationId": "GetInputs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptInputRecord-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"random": {
										"type": "boolean"
									},
									"limit": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"limit"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/{promptId}/experiments": {
			"get": {
				"operationId": "GetPromptExperiments",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/prompt/{promptId}/versions/query": {
			"post": {
				"operationId": "GetPromptVersions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResult-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptVersionsQueryParams"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/version/{promptVersionId}": {
			"get": {
				"operationId": "GetPromptVersion",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeletePromptVersion",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/prompt/{user_defined_id}/compile": {
			"post": {
				"operationId": "GetPromptVersionsCompiled",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResultCompiled.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "user_defined_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptVersiosQueryParamsCompiled"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/{user_defined_id}/template": {
			"post": {
				"operationId": "GetPromptVersionTemplates",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResultFilled.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "user_defined_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptVersiosQueryParamsCompiled"
							}
						}
					}
				}
			}
		},
		"/v1/settings/query": {
			"get": {
				"operationId": "GetSettings",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"useAzureForExperiment": {
											"type": "boolean"
										}
									},
									"required": [
										"useAzureForExperiment"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Settings"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/cost-for-prompts": {
			"get": {
				"operationId": "GetCostForPrompts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/cost-for-evals": {
			"get": {
				"operationId": "GetCostForEvals",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/cost-for-experiments": {
			"get": {
				"operationId": "GetCostForExperiments",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/free/usage": {
			"get": {
				"operationId": "GetFreeUsage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/new-customer/upgrade-to-pro": {
			"post": {
				"operationId": "UpgradeToPro",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpgradeToProRequest"
							}
						}
					}
				}
			}
		},
		"/v1/stripe/subscription/existing-customer/upgrade-to-pro": {
			"post": {
				"operationId": "UpgradeExistingCustomer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpgradeToProRequest"
							}
						}
					}
				}
			}
		},
		"/v1/stripe/subscription/new-customer/upgrade-to-team-bundle": {
			"post": {
				"operationId": "UpgradeToTeamBundle",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpgradeToTeamBundleRequest"
							}
						}
					}
				}
			}
		},
		"/v1/stripe/subscription/existing-customer/upgrade-to-team-bundle": {
			"post": {
				"operationId": "UpgradeExistingCustomerToTeamBundle",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpgradeToTeamBundleRequest"
							}
						}
					}
				}
			}
		},
		"/v1/stripe/subscription/manage-subscription": {
			"post": {
				"operationId": "ManageSubscription",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/undo-cancel-subscription": {
			"post": {
				"operationId": "UndoCancelSubscription",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"enum": [
										null
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/add-ons/{productType}": {
			"post": {
				"operationId": "AddOns",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"enum": [
										null
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "productType",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"alerts",
								"prompts",
								"experiments",
								"evals"
							]
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteAddOns",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"enum": [
										null
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "productType",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"alerts",
								"prompts",
								"experiments",
								"evals"
							]
						}
					}
				]
			}
		},
		"/v1/stripe/subscription/preview-invoice": {
			"get": {
				"operationId": "PreviewInvoice",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"evaluators_usage": {
											"items": {
												"$ref": "#/components/schemas/LLMUsage"
											},
											"type": "array"
										},
										"experiments_usage": {
											"items": {
												"$ref": "#/components/schemas/LLMUsage"
											},
											"type": "array"
										},
										"total": {
											"type": "number",
											"format": "double"
										},
										"tax": {
											"type": "number",
											"format": "double",
											"nullable": true
										},
										"subtotal": {
											"type": "number",
											"format": "double"
										},
										"discount": {
											"properties": {
												"coupon": {
													"properties": {
														"amount_off": {
															"type": "number",
															"format": "double",
															"nullable": true
														},
														"percent_off": {
															"type": "number",
															"format": "double",
															"nullable": true
														},
														"name": {
															"type": "string",
															"nullable": true
														}
													},
													"required": [
														"amount_off",
														"percent_off",
														"name"
													],
													"type": "object"
												}
											},
											"required": [
												"coupon"
											],
											"type": "object",
											"nullable": true
										},
										"lines": {
											"properties": {
												"data": {
													"items": {
														"properties": {
															"description": {
																"type": "string",
																"nullable": true
															},
															"amount": {
																"type": "number",
																"format": "double",
																"nullable": true
															},
															"id": {
																"type": "string",
																"nullable": true
															}
														},
														"required": [
															"description",
															"amount",
															"id"
														],
														"type": "object"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object",
											"nullable": true
										},
										"next_payment_attempt": {
											"type": "number",
											"format": "double",
											"nullable": true
										},
										"currency": {
											"type": "string",
											"nullable": true
										}
									},
									"required": [
										"evaluators_usage",
										"experiments_usage",
										"total",
										"tax",
										"subtotal",
										"discount",
										"lines",
										"next_payment_attempt",
										"currency"
									],
									"type": "object",
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/cancel-subscription": {
			"post": {
				"operationId": "CancelSubscription",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"enum": [
										null
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/migrate-to-pro": {
			"post": {
				"operationId": "MigrateToPro",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription": {
			"get": {
				"operationId": "GetSubscription",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"items": {
											"items": {
												"properties": {
													"price": {
														"properties": {
															"product": {
																"properties": {
																	"name": {
																		"type": "string",
																		"nullable": true
																	}
																},
																"required": [
																	"name"
																],
																"type": "object",
																"nullable": true
															}
														},
														"required": [
															"product"
														],
														"type": "object"
													},
													"quantity": {
														"type": "number",
														"format": "double"
													}
												},
												"required": [
													"price"
												],
												"type": "object"
											},
											"type": "array"
										},
										"trial_end": {
											"type": "number",
											"format": "double",
											"nullable": true
										},
										"id": {
											"type": "string"
										},
										"current_period_start": {
											"type": "number",
											"format": "double"
										},
										"current_period_end": {
											"type": "number",
											"format": "double"
										},
										"cancel_at_period_end": {
											"type": "boolean"
										},
										"status": {
											"type": "string"
										}
									},
									"required": [
										"items",
										"trial_end",
										"id",
										"current_period_start",
										"current_period_end",
										"cancel_at_period_end",
										"status"
									],
									"type": "object",
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/webhook": {
			"post": {
				"operationId": "HandleStripeWebhook",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {}
						}
					}
				}
			}
		},
		"/v1/organization": {
			"get": {
				"operationId": "GetOrganizations",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__40_Database-at-public_91_Tables_93_-at-organization_91_Row_93_-and-_role-string__41_-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/organization/{organizationId}": {
			"get": {
				"operationId": "GetOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_Database-at-public_91_Tables_93_-at-organization_91_Row_93_.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/organization/reseller/{resellerId}": {
			"get": {
				"operationId": "GetReseller",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_Result__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array.string_.unknown_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "resellerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/organization/user/accept_terms": {
			"post": {
				"operationId": "AcceptTerms",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/organization/create": {
			"post": {
				"operationId": "CreateNewOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_string.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NewOrganizationParams"
							}
						}
					}
				}
			}
		},
		"/v1/organization/{organizationId}/update": {
			"post": {
				"operationId": "UpdateOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateOrganizationParams"
							}
						}
					}
				}
			}
		},
		"/v1/organization/onboard": {
			"post": {
				"operationId": "OnboardOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/organization/{organizationId}/add_member": {
			"post": {
				"operationId": "AddMemberToOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"email": {
										"type": "string"
									}
								},
								"required": [
									"email"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/organization/{organizationId}/create_filter": {
			"post": {
				"operationId": "CreateOrganizationFilter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"filterType": {
										"type": "string",
										"enum": [
											"dashboard",
											"requests"
										]
									},
									"filters": {
										"items": {
											"$ref": "#/components/schemas/OrganizationFilter"
										},
										"type": "array"
									}
								},
								"required": [
									"filterType",
									"filters"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/organization/{organizationId}/update_filter": {
			"post": {
				"operationId": "UpdateOrganizationFilter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"filterType": {
										"type": "string",
										"enum": [
											"dashboard",
											"requests"
										]
									},
									"filters": {
										"items": {
											"$ref": "#/components/schemas/OrganizationFilter"
										},
										"type": "array"
									}
								},
								"required": [
									"filterType",
									"filters"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/organization/delete": {
			"delete": {
				"operationId": "DeleteOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/organization/{organizationId}/layout": {
			"get": {
				"operationId": "GetOrganizationLayout",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_OrganizationLayout.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "filterType",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/organization/{organizationId}/members": {
			"get": {
				"operationId": "GetOrganizationMembers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_OrganizationMember-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/organization/{organizationId}/update_member": {
			"post": {
				"operationId": "UpdateOrganizationMember",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"memberId": {
										"type": "string"
									},
									"role": {
										"type": "string"
									}
								},
								"required": [
									"memberId",
									"role"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/organization/{organizationId}/owner": {
			"get": {
				"operationId": "GetOrganizationOwner",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_OrganizationOwner-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/organization/{organizationId}/remove_member": {
			"delete": {
				"operationId": "RemoveMemberFromOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "memberId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/organization/setup-demo": {
			"post": {
				"operationId": "SetupDemo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/organization/update_onboarding": {
			"post": {
				"operationId": "UpdateOnboardingStatus",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"has_onboarded": {
										"type": "boolean"
									},
									"name": {
										"type": "string"
									},
									"onboarding_status": {
										"$ref": "#/components/schemas/OnboardingStatus"
									}
								},
								"required": [
									"has_onboarded",
									"name",
									"onboarding_status"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/log/request": {
			"post": {
				"operationId": "LogRequests",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Log"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Log message to log",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/KafkaMessageContents",
								"description": "Log message to log"
							}
						}
					}
				}
			}
		},
		"/v1/gov-organization/limits/member/{memberId}": {
			"post": {
				"operationId": "SetMemberLimits",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResultError_unknown_"
										},
										{
											"$ref": "#/components/schemas/ResultSuccess_any_"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Gov Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "memberId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"days": {
										"type": "number",
										"format": "double"
									},
									"limitUSD": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"days",
									"limitUSD"
								],
								"type": "object"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetMemberLimits",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResultError_unknown_"
										},
										{
											"$ref": "#/components/schemas/ResultSuccess_unknown_"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Gov Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "memberId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/gov-organization/my-limits": {
			"get": {
				"operationId": "GetMyLimits",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResultError_unknown_"
										},
										{
											"$ref": "#/components/schemas/ResultSuccess_unknown_"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Gov Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/gov-organization/is-governance-org": {
			"get": {
				"operationId": "IsGovernanceOrg",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResultError_unknown_"
										},
										{
											"$ref": "#/components/schemas/ResultSuccess_unknown_"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Gov Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/key/generateHash": {
			"post": {
				"operationId": "GenerateHash",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {
											"properties": {
												"details": {
													"type": "string"
												},
												"message": {
													"type": "string"
												}
											},
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Utils"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GenerateHashQueryParams"
							}
						}
					}
				}
			}
		},
		"/v1/dataset/{datasetId}/fine-tune": {
			"post": {
				"operationId": "DatasetFineTune",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FineTuneResult"
								}
							}
						}
					}
				},
				"tags": [
					"FineTune",
					"Dataset"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "datasetId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FineTuneBodyParams"
							}
						}
					}
				}
			}
		},
		"/v1/fine-tune": {
			"post": {
				"operationId": "FineTune",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"error": {
													"type": "string"
												}
											},
											"required": [
												"error"
											],
											"type": "object"
										},
										{
											"properties": {
												"data": {
													"properties": {
														"url": {
															"type": "string"
														},
														"fineTuneJob": {
															"type": "string"
														}
													},
													"required": [
														"url",
														"fineTuneJob"
													],
													"type": "object"
												},
												"success": {
													"type": "boolean"
												}
											},
											"required": [
												"data",
												"success"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"FineTune"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FineTuneBody"
							}
						}
					}
				}
			}
		},
		"/v1/fine-tune/{jobId}/stats": {
			"get": {
				"operationId": "FineTuneJobStats",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"error": {
													"type": "string"
												}
											},
											"required": [
												"error"
											],
											"type": "object"
										},
										{
											"properties": {
												"events": {},
												"job": {}
											},
											"required": [
												"events",
												"job"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"FineTune"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "jobId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/filter": {
			"get": {
				"operationId": "GetFilters",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_StoreFilterType-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Filter"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateFilter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__id-string_.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Filter"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/StoreFilterType"
							}
						}
					}
				}
			}
		},
		"/v1/filter/{id}": {
			"get": {
				"operationId": "GetFilter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_StoreFilterType.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Filter"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteFilter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Filter"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"patch": {
				"operationId": "UpdateFilter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Filter"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"filters": {}
								},
								"required": [
									"filters"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/demo/completion": {
			"post": {
				"operationId": "DemoCompletion",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_ChatCompletion.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Demo",
					"Demo"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"cache_enabled": {
										"type": "boolean"
									},
									"max_tokens": {
										"type": "number",
										"format": "double"
									},
									"tool_choice": {
										"$ref": "#/components/schemas/ChatCompletionToolChoiceOption"
									},
									"tools": {
										"items": {
											"$ref": "#/components/schemas/ChatCompletionTool"
										},
										"type": "array"
									},
									"sessionPath": {
										"type": "string"
									},
									"sessionName": {
										"type": "string"
									},
									"sessionId": {
										"type": "string"
									},
									"userEmail": {
										"type": "string"
									},
									"promptId": {
										"type": "string"
									},
									"messages": {
										"items": {
											"$ref": "#/components/schemas/ChatCompletionMessageParam"
										},
										"type": "array"
									}
								},
								"required": [
									"promptId",
									"messages"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/alert/query": {
			"get": {
				"operationId": "GetAlerts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_AlertResponse.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Alert"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/alert/create": {
			"post": {
				"operationId": "CreateAlert",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_string.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Alert"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AlertRequest"
							}
						}
					}
				}
			}
		},
		"/v1/alert/{alertId}": {
			"delete": {
				"operationId": "DeleteAlert",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Alert"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "alertId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/alert-banner": {
			"get": {
				"operationId": "GetAlertBanners",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__active-boolean--created_at-string--id-number--message-string--title-string--updated_at-string_-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Alert Banner"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/admin/feature-flags": {
			"post": {
				"operationId": "UpdateFeatureFlags",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"orgId": {
										"type": "string"
									},
									"flag": {
										"type": "string"
									}
								},
								"required": [
									"orgId",
									"flag"
								],
								"type": "object"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteFeatureFlag",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"orgId": {
										"type": "string"
									},
									"flag": {
										"type": "string"
									}
								},
								"required": [
									"orgId",
									"flag"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/feature-flags/query": {
			"post": {
				"operationId": "GetFeatureFlags",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__organization_id-string--name-string--flags-string-Array_-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/admin/orgs/top-usage": {
			"post": {
				"operationId": "GetTopOrgsByUsage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"organizations": {
											"items": {
												"properties": {
													"usage": {
														"properties": {
															"all_time_count": {
																"type": "number",
																"format": "double"
															},
															"monthly_usage": {
																"items": {
																	"properties": {
																		"requestCount": {
																			"type": "number",
																			"format": "double"
																		},
																		"month": {
																			"type": "string"
																		}
																	},
																	"required": [
																		"requestCount",
																		"month"
																	],
																	"type": "object"
																},
																"type": "array"
															},
															"requests_last_30_days": {
																"type": "number",
																"format": "double"
															},
															"total_requests": {
																"type": "number",
																"format": "double"
															}
														},
														"required": [
															"all_time_count",
															"monthly_usage",
															"requests_last_30_days",
															"total_requests"
														],
														"type": "object"
													},
													"organization": {
														"properties": {
															"members": {
																"items": {
																	"properties": {
																		"last_sign_in_at": {
																			"type": "string",
																			"nullable": true
																		},
																		"role": {
																			"type": "string"
																		},
																		"name": {
																			"type": "string"
																		},
																		"email": {
																			"type": "string"
																		},
																		"id": {
																			"type": "string"
																		}
																	},
																	"required": [
																		"last_sign_in_at",
																		"role",
																		"name",
																		"email",
																		"id"
																	],
																	"type": "object"
																},
																"type": "array"
															},
															"subscription_status": {
																"type": "string",
																"nullable": true
															},
															"stripe_subscription_id": {
																"type": "string",
																"nullable": true
															},
															"stripe_customer_id": {
																"type": "string",
																"nullable": true
															},
															"tier": {
																"type": "string"
															},
															"owner": {
																"type": "string"
															},
															"created_at": {
																"type": "string"
															},
															"name": {
																"type": "string"
															},
															"id": {
																"type": "string"
															}
														},
														"required": [
															"members",
															"subscription_status",
															"stripe_subscription_id",
															"stripe_customer_id",
															"tier",
															"owner",
															"created_at",
															"name",
															"id"
														],
														"type": "object"
													}
												},
												"required": [
													"usage",
													"organization"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"required": [
										"organizations"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"minRequests": {
										"type": "number",
										"format": "double"
									},
									"limit": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"minRequests",
									"limit"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/orgs/top": {
			"post": {
				"operationId": "GetTopOrgs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"properties": {
											"ct": {
												"type": "number",
												"format": "double"
											},
											"organization_id": {
												"type": "string"
											},
											"members": {
												"items": {
													"properties": {
														"last_active": {
															"type": "string"
														},
														"role": {
															"type": "string"
														},
														"email": {
															"type": "string"
														},
														"id": {
															"type": "string"
														}
													},
													"required": [
														"last_active",
														"role",
														"email",
														"id"
													],
													"type": "object"
												},
												"type": "array"
											},
											"name": {
												"type": "string"
											},
											"owner_last_login": {
												"type": "string"
											},
											"owner_email": {
												"type": "string"
											},
											"tier": {
												"type": "string"
											},
											"id": {
												"type": "string"
											},
											"overTime": {
												"items": {
													"properties": {
														"organization_id": {
															"type": "string"
														},
														"dt": {
															"type": "string"
														},
														"count": {
															"type": "number",
															"format": "double"
														}
													},
													"required": [
														"organization_id",
														"dt",
														"count"
													],
													"type": "object"
												},
												"type": "array"
											}
										},
										"required": [
											"ct",
											"organization_id",
											"members",
											"name",
											"owner_last_login",
											"owner_email",
											"tier",
											"id",
											"overTime"
										],
										"type": "object"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"emailContains": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"orgsNameContains": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"orgsId": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"tier": {
										"type": "string",
										"enum": [
											"all",
											"pro",
											"free",
											"growth",
											"enterprise"
										]
									},
									"endDate": {
										"type": "string"
									},
									"startDate": {
										"type": "string"
									}
								},
								"required": [
									"tier",
									"endDate",
									"startDate"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/admins/query": {
			"get": {
				"operationId": "GetAdmins",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"properties": {
											"user_id": {
												"type": "string",
												"nullable": true
											},
											"user_email": {
												"type": "string",
												"nullable": true
											},
											"id": {
												"type": "number",
												"format": "double"
											},
											"created_at": {
												"type": "string"
											}
										},
										"required": [
											"user_id",
											"user_email",
											"id",
											"created_at"
										],
										"type": "object"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/admin/whodis": {
			"post": {
				"operationId": "Whodis",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"organizations": {
											"items": {
												"properties": {
													"usage": {
														"properties": {
															"all_time_count": {
																"type": "number",
																"format": "double"
															},
															"monthly_usage": {
																"items": {
																	"properties": {
																		"requestCount": {
																			"type": "number",
																			"format": "double"
																		},
																		"month": {
																			"type": "string"
																		}
																	},
																	"required": [
																		"requestCount",
																		"month"
																	],
																	"type": "object"
																},
																"type": "array"
															},
															"requests_last_30_days": {
																"type": "number",
																"format": "double"
															},
															"total_requests": {
																"type": "number",
																"format": "double"
															}
														},
														"required": [
															"all_time_count",
															"monthly_usage",
															"requests_last_30_days",
															"total_requests"
														],
														"type": "object"
													},
													"organization": {
														"properties": {
															"members": {
																"items": {
																	"properties": {
																		"last_sign_in_at": {
																			"type": "string",
																			"nullable": true
																		},
																		"role": {
																			"type": "string"
																		},
																		"name": {
																			"type": "string"
																		},
																		"email": {
																			"type": "string"
																		},
																		"id": {
																			"type": "string"
																		}
																	},
																	"required": [
																		"last_sign_in_at",
																		"role",
																		"name",
																		"email",
																		"id"
																	],
																	"type": "object"
																},
																"type": "array"
															},
															"subscription_status": {
																"type": "string",
																"nullable": true
															},
															"stripe_subscription_id": {
																"type": "string",
																"nullable": true
															},
															"stripe_customer_id": {
																"type": "string",
																"nullable": true
															},
															"tier": {
																"type": "string"
															},
															"owner": {
																"type": "string"
															},
															"created_at": {
																"type": "string"
															},
															"name": {
																"type": "string"
															},
															"id": {
																"type": "string"
															}
														},
														"required": [
															"members",
															"subscription_status",
															"stripe_subscription_id",
															"stripe_customer_id",
															"tier",
															"owner",
															"created_at",
															"name",
															"id"
														],
														"type": "object"
													}
												},
												"required": [
													"usage",
													"organization"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"required": [
										"organizations"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"email": {
										"type": "string"
									},
									"userId": {
										"type": "string"
									},
									"organizationId": {
										"type": "string"
									}
								},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/settings/{name}": {
			"get": {
				"operationId": "GetSetting",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Setting"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/SettingName"
						}
					}
				]
			}
		},
		"/v1/admin/azure/run-test": {
			"post": {
				"operationId": "AzureTest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"fetchParams": {
											"properties": {
												"body": {
													"type": "string"
												},
												"headers": {
													"properties": {},
													"additionalProperties": {
														"type": "string"
													},
													"type": "object"
												},
												"url": {
													"$ref": "#/components/schemas/url.URL"
												}
											},
											"required": [
												"body",
												"headers",
												"url"
											],
											"type": "object"
										},
										"resultText": {
											"type": "string"
										}
									},
									"required": [
										"fetchParams",
										"resultText"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"requestBody": {}
								},
								"required": [
									"requestBody"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/settings": {
			"post": {
				"operationId": "UpdateSetting",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"settings": {
										"$ref": "#/components/schemas/Setting"
									},
									"name": {
										"$ref": "#/components/schemas/SettingName"
									}
								},
								"required": [
									"settings",
									"name"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/orgs/query": {
			"post": {
				"operationId": "FindAllOrgs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"orgs": {
											"items": {
												"properties": {
													"id": {
														"type": "string"
													},
													"name": {
														"type": "string"
													}
												},
												"required": [
													"id",
													"name"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"required": [
										"orgs"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"orgName": {
										"type": "string"
									}
								},
								"required": [
									"orgName"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/orgs/over-time/query": {
			"post": {
				"operationId": "NewOrgsOverTime",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"usersOverTime": {
											"items": {
												"properties": {
													"day": {
														"type": "string"
													},
													"count": {
														"type": "string"
													}
												},
												"required": [
													"day",
													"count"
												],
												"type": "object"
											},
											"type": "array"
										},
										"newUsersOvertime": {
											"items": {
												"properties": {
													"day": {
														"type": "string"
													},
													"count": {
														"type": "string"
													}
												},
												"required": [
													"day",
													"count"
												],
												"type": "object"
											},
											"type": "array"
										},
										"newOrgsOvertime": {
											"items": {
												"properties": {
													"day": {
														"type": "string"
													},
													"count": {
														"type": "string"
													}
												},
												"required": [
													"day",
													"count"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"required": [
										"usersOverTime",
										"newUsersOvertime",
										"newOrgsOvertime"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"groupBy": {
										"type": "string",
										"enum": [
											"hour",
											"day",
											"week",
											"month"
										]
									},
									"timeFilter": {
										"type": "string",
										"enum": [
											"1 days",
											"7 days",
											"1 month",
											"3 months",
											"6 months",
											"12 months",
											"24 months"
										]
									}
								},
								"required": [
									"groupBy",
									"timeFilter"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/admins/org/query": {
			"post": {
				"operationId": "AddAdminsToOrg",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"adminIds": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"orgId": {
										"type": "string"
									}
								},
								"required": [
									"adminIds",
									"orgId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/alert_banners": {
			"post": {
				"operationId": "CreateAlertBanner",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"message": {
										"type": "string"
									},
									"title": {
										"type": "string"
									}
								},
								"required": [
									"message",
									"title"
								],
								"type": "object"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "UpdateAlertBanner",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"active": {
										"type": "boolean"
									},
									"id": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"active",
									"id"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/top-orgs-over-time": {
			"post": {
				"operationId": "GetTopOrgsOverTime",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"organizations": {
											"items": {
												"properties": {
													"data": {
														"items": {
															"properties": {
																"request_count": {
																	"type": "number",
																	"format": "double"
																},
																"time": {
																	"type": "string"
																}
															},
															"required": [
																"request_count",
																"time"
															],
															"type": "object"
														},
														"type": "array"
													},
													"organization_name": {
														"type": "string"
													},
													"organization_id": {
														"type": "string"
													}
												},
												"required": [
													"data",
													"organization_name",
													"organization_id"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"required": [
										"organizations"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"groupBy": {
										"type": "string"
									},
									"limit": {
										"type": "number",
										"format": "double"
									},
									"timeRange": {
										"type": "string"
									}
								},
								"required": [
									"limit",
									"timeRange"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/subscription-data": {
			"get": {
				"operationId": "GetSubscriptionData",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"upcomingInvoices": {
											"items": {
												"$ref": "#/components/schemas/stripe.Stripe.UpcomingInvoice"
											},
											"type": "array"
										},
										"discounts": {
											"$ref": "#/components/schemas/Record_string.stripe.Stripe.Discount_"
										},
										"invoices": {
											"items": {
												"$ref": "#/components/schemas/stripe.Stripe.Invoice"
											},
											"type": "array"
										},
										"subscriptions": {
											"items": {
												"$ref": "#/components/schemas/stripe.Stripe.Subscription"
											},
											"type": "array"
										}
									},
									"required": [
										"upcomingInvoices",
										"discounts",
										"invoices",
										"subscriptions"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Get all subscription data, invoices, and discounts for the admin projections page\nUses caching to minimize API calls to Stripe",
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "forceRefresh",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					}
				]
			}
		},
		"/v1/audio/convert-to-wav": {
			"post": {
				"operationId": "ConvertToWav",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConvertToWavResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Audio"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ConvertToWavRequestBody"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "https://api.helicone.ai/"
		},
		{
			"url": "http://localhost:8585/"
		}
	]
}