{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"EvaluatorResult": {
				"properties": {
					"id": {
						"type": "string"
					},
					"created_at": {
						"type": "string"
					},
					"scoring_type": {
						"type": "string"
					},
					"llm_template": {},
					"organization_id": {
						"type": "string"
					},
					"updated_at": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"code_template": {},
					"last_mile_config": {}
				},
				"required": [
					"id",
					"created_at",
					"scoring_type",
					"llm_template",
					"organization_id",
					"updated_at",
					"name",
					"code_template",
					"last_mile_config"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_EvaluatorResult_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/EvaluatorResult"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultError_string_": {
				"properties": {
					"data": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"error": {
						"type": "string"
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_EvaluatorResult.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_EvaluatorResult_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"CreateEvaluatorParams": {
				"properties": {
					"scoring_type": {
						"type": "string"
					},
					"llm_template": {},
					"name": {
						"type": "string"
					},
					"code_template": {},
					"last_mile_config": {}
				},
				"required": [
					"scoring_type",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_EvaluatorResult-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/EvaluatorResult"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_EvaluatorResult-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_EvaluatorResult-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"UpdateEvaluatorParams": {
				"properties": {
					"scoring_type": {
						"type": "string"
					},
					"llm_template": {},
					"code_template": {},
					"name": {
						"type": "string"
					},
					"last_mile_config": {}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_null_": {
				"properties": {
					"data": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_null.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_null_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"EvaluatorExperiment": {
				"properties": {
					"experiment_name": {
						"type": "string"
					},
					"experiment_created_at": {
						"type": "string"
					},
					"experiment_id": {
						"type": "string"
					}
				},
				"required": [
					"experiment_name",
					"experiment_created_at",
					"experiment_id"
				],
				"type": "object"
			},
			"ResultSuccess_EvaluatorExperiment-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/EvaluatorExperiment"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_EvaluatorExperiment-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_EvaluatorExperiment-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"OnlineEvaluatorByEvaluatorId": {
				"properties": {
					"config": {},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"config",
					"id"
				],
				"type": "object"
			},
			"ResultSuccess_OnlineEvaluatorByEvaluatorId-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/OnlineEvaluatorByEvaluatorId"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_OnlineEvaluatorByEvaluatorId-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_OnlineEvaluatorByEvaluatorId-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"Record_string.any_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"CreateOnlineEvaluatorParams": {
				"properties": {
					"config": {
						"$ref": "#/components/schemas/Record_string.any_"
					}
				},
				"required": [
					"config"
				],
				"type": "object"
			},
			"ResultSuccess__output-string--traces-string-Array--statusCode_63_-number__": {
				"properties": {
					"data": {
						"properties": {
							"statusCode": {
								"type": "number",
								"format": "double"
							},
							"traces": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"output": {
								"type": "string"
							}
						},
						"required": [
							"traces",
							"output"
						],
						"type": "object"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__output-string--traces-string-Array--statusCode_63_-number_.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__output-string--traces-string-Array--statusCode_63_-number__"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"Record_string.string_": {
				"properties": {},
				"additionalProperties": {
					"type": "string"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"TestInput": {
				"properties": {
					"promptTemplate": {
						"type": "string"
					},
					"inputs": {
						"properties": {
							"autoInputs": {
								"$ref": "#/components/schemas/Record_string.string_"
							},
							"inputs": {
								"$ref": "#/components/schemas/Record_string.string_"
							}
						},
						"required": [
							"inputs"
						],
						"type": "object"
					},
					"outputBody": {
						"type": "string"
					},
					"inputBody": {
						"type": "string"
					}
				},
				"required": [
					"inputs",
					"outputBody",
					"inputBody"
				],
				"type": "object"
			},
			"EvaluatorScore": {
				"properties": {
					"score": {
						"anyOf": [
							{
								"type": "number",
								"format": "double"
							},
							{
								"type": "boolean"
							}
						]
					}
				},
				"required": [
					"score"
				],
				"type": "object"
			},
			"ResultSuccess_EvaluatorScore_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/EvaluatorScore"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_EvaluatorScore.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_EvaluatorScore_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"EvaluatorScoreResult": {
				"$ref": "#/components/schemas/Result_EvaluatorScore.string_"
			},
			"EvaluatorConfig": {
				"properties": {
					"evaluator_code_template": {
						"type": "string"
					},
					"evaluator_llm_template": {
						"type": "string"
					},
					"evaluator_scoring_type": {
						"type": "string"
					}
				},
				"required": [
					"evaluator_scoring_type"
				],
				"type": "object"
			},
			"ResultSuccess__score-number--input-string--output-string--ground_truth_63_-string__": {
				"properties": {
					"data": {
						"properties": {
							"ground_truth": {
								"type": "string"
							},
							"output": {
								"type": "string"
							},
							"input": {
								"type": "string"
							},
							"score": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"output",
							"input",
							"score"
						],
						"type": "object"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__score-number--input-string--output-string--ground_truth_63_-string_.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__score-number--input-string--output-string--ground_truth_63_-string__"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"DataEntry": {
				"anyOf": [
					{
						"properties": {
							"_type": {
								"type": "string",
								"enum": [
									"system-prompt"
								],
								"nullable": false
							}
						},
						"required": [
							"_type"
						],
						"type": "object"
					},
					{
						"properties": {
							"inputKey": {
								"type": "string"
							},
							"_type": {
								"type": "string",
								"enum": [
									"prompt-input"
								],
								"nullable": false
							}
						},
						"required": [
							"inputKey",
							"_type"
						],
						"type": "object"
					},
					{
						"properties": {
							"content": {
								"type": "string",
								"enum": [
									"jsonify",
									"message"
								]
							},
							"_type": {
								"type": "string",
								"enum": [
									"input-body"
								],
								"nullable": false
							}
						},
						"required": [
							"content",
							"_type"
						],
						"type": "object"
					},
					{
						"properties": {
							"content": {
								"type": "string",
								"enum": [
									"jsonify",
									"message"
								]
							},
							"_type": {
								"type": "string",
								"enum": [
									"output-body"
								],
								"nullable": false
							}
						},
						"required": [
							"content",
							"_type"
						],
						"type": "object"
					}
				]
			},
			"BaseLastMileConfigForm": {
				"properties": {
					"output": {
						"$ref": "#/components/schemas/DataEntry"
					},
					"input": {
						"$ref": "#/components/schemas/DataEntry"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"output",
					"input",
					"name"
				],
				"type": "object"
			},
			"LastMileConfigForm": {
				"allOf": [
					{
						"$ref": "#/components/schemas/BaseLastMileConfigForm"
					},
					{
						"anyOf": [
							{
								"properties": {
									"_type": {
										"type": "string",
										"enum": [
											"relevance",
											"context_relevance"
										]
									}
								},
								"required": [
									"_type"
								],
								"type": "object"
							},
							{
								"properties": {
									"groundTruth": {
										"$ref": "#/components/schemas/DataEntry"
									},
									"_type": {
										"type": "string",
										"enum": [
											"faithfulness"
										],
										"nullable": false
									}
								},
								"required": [
									"groundTruth",
									"_type"
								],
								"type": "object"
							}
						]
					}
				]
			},
			"EvaluatorStats": {
				"properties": {
					"averageScore": {
						"type": "number",
						"format": "double"
					},
					"totalUses": {
						"type": "number",
						"format": "double"
					},
					"recentTrend": {
						"type": "string",
						"enum": [
							"up",
							"down",
							"stable"
						]
					},
					"scoreDistribution": {
						"items": {
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								},
								"range": {
									"type": "string"
								}
							},
							"required": [
								"count",
								"range"
							],
							"type": "object"
						},
						"type": "array"
					},
					"timeSeriesData": {
						"items": {
							"properties": {
								"value": {
									"type": "number",
									"format": "double"
								},
								"date": {
									"type": "string"
								}
							},
							"required": [
								"value",
								"date"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"averageScore",
					"totalUses",
					"recentTrend",
					"scoreDistribution",
					"timeSeriesData"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_EvaluatorStats_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/EvaluatorStats"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_EvaluatorStats.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_EvaluatorStats_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess__experimentId-string__": {
				"properties": {
					"data": {
						"properties": {
							"experimentId": {
								"type": "string"
							}
						},
						"required": [
							"experimentId"
						],
						"type": "object"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__experimentId-string_.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__experimentId-string__"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ExperimentV2": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"original_prompt_version": {
						"type": "string"
					},
					"copied_original_prompt_version": {
						"type": "string",
						"nullable": true
					},
					"input_keys": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true
					},
					"created_at": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"original_prompt_version",
					"copied_original_prompt_version",
					"input_keys",
					"created_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_ExperimentV2-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/ExperimentV2"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_ExperimentV2-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_ExperimentV2-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ExperimentV2Output": {
				"properties": {
					"id": {
						"type": "string"
					},
					"request_id": {
						"type": "string"
					},
					"is_original": {
						"type": "boolean"
					},
					"prompt_version_id": {
						"type": "string"
					},
					"created_at": {
						"type": "string"
					},
					"input_record_id": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"request_id",
					"is_original",
					"prompt_version_id",
					"created_at",
					"input_record_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ExperimentV2Row": {
				"properties": {
					"id": {
						"type": "string"
					},
					"inputs": {
						"$ref": "#/components/schemas/Record_string.string_"
					},
					"prompt_version": {
						"type": "string"
					},
					"requests": {
						"items": {
							"$ref": "#/components/schemas/ExperimentV2Output"
						},
						"type": "array"
					},
					"auto_prompt_inputs": {
						"items": {},
						"type": "array"
					}
				},
				"required": [
					"id",
					"inputs",
					"prompt_version",
					"requests",
					"auto_prompt_inputs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ExtendedExperimentData": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"original_prompt_version": {
						"type": "string"
					},
					"copied_original_prompt_version": {
						"type": "string",
						"nullable": true
					},
					"input_keys": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true
					},
					"created_at": {
						"type": "string"
					},
					"rows": {
						"items": {
							"$ref": "#/components/schemas/ExperimentV2Row"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"original_prompt_version",
					"copied_original_prompt_version",
					"input_keys",
					"created_at",
					"rows"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_ExtendedExperimentData_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ExtendedExperimentData"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_ExtendedExperimentData.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_ExtendedExperimentData_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"PromptVersionResult": {
				"properties": {
					"id": {
						"type": "string"
					},
					"minor_version": {
						"type": "number",
						"format": "double"
					},
					"major_version": {
						"type": "number",
						"format": "double"
					},
					"prompt_v2": {
						"type": "string"
					},
					"model": {
						"type": "string"
					},
					"helicone_template": {
						"type": "string"
					},
					"created_at": {
						"type": "string"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.any_"
					},
					"parent_prompt_version": {
						"type": "string",
						"nullable": true
					},
					"experiment_id": {
						"type": "string",
						"nullable": true
					},
					"updated_at": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"minor_version",
					"major_version",
					"prompt_v2",
					"model",
					"helicone_template",
					"created_at",
					"metadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_PromptVersionResult_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PromptVersionResult"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_PromptVersionResult.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_PromptVersionResult_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"CreateNewPromptVersionForExperimentParams": {
				"properties": {
					"newHeliconeTemplate": {},
					"isMajorVersion": {
						"type": "boolean"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.any_"
					},
					"experimentId": {
						"type": "string"
					},
					"bumpForMajorPromptVersionId": {
						"type": "string"
					},
					"parentPromptVersionId": {
						"type": "string"
					}
				},
				"required": [
					"newHeliconeTemplate",
					"parentPromptVersionId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Json": {
				"anyOf": [
					{
						"type": "string"
					},
					{
						"type": "number",
						"format": "double"
					},
					{
						"type": "boolean"
					},
					{
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/Json"
						},
						"type": "object"
					},
					{
						"items": {
							"$ref": "#/components/schemas/Json"
						},
						"type": "array"
					}
				],
				"nullable": true
			},
			"ExperimentV2PromptVersion": {
				"properties": {
					"created_at": {
						"type": "string",
						"nullable": true
					},
					"experiment_id": {
						"type": "string",
						"nullable": true
					},
					"helicone_template": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Json"
							}
						],
						"nullable": true
					},
					"id": {
						"type": "string"
					},
					"major_version": {
						"type": "number",
						"format": "double"
					},
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Json"
							}
						],
						"nullable": true
					},
					"minor_version": {
						"type": "number",
						"format": "double"
					},
					"model": {
						"type": "string",
						"nullable": true
					},
					"organization": {
						"type": "string"
					},
					"prompt_v2": {
						"type": "string"
					},
					"soft_delete": {
						"type": "boolean",
						"nullable": true
					}
				},
				"required": [
					"created_at",
					"experiment_id",
					"helicone_template",
					"id",
					"major_version",
					"metadata",
					"minor_version",
					"model",
					"organization",
					"prompt_v2",
					"soft_delete"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_ExperimentV2PromptVersion-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/ExperimentV2PromptVersion"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_ExperimentV2PromptVersion-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_ExperimentV2PromptVersion-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess_string-Array_": {
				"properties": {
					"data": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_string-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_string-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess_string_": {
				"properties": {
					"data": {
						"type": "string"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_string.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_string_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess_boolean_": {
				"properties": {
					"data": {
						"type": "boolean"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_boolean.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_boolean_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ScoreV2": {
				"properties": {
					"valueType": {
						"type": "string"
					},
					"value": {
						"anyOf": [
							{
								"type": "number",
								"format": "double"
							},
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						]
					},
					"max": {
						"type": "number",
						"format": "double"
					},
					"min": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"valueType",
					"value",
					"max",
					"min"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.ScoreV2_": {
				"properties": {},
				"additionalProperties": {
					"$ref": "#/components/schemas/ScoreV2"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"ResultSuccess_Record_string.ScoreV2__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/Record_string.ScoreV2_"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_Record_string.ScoreV2_.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_Record_string.ScoreV2__"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess_ScoreV2-or-null_": {
				"properties": {
					"data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ScoreV2"
							}
						],
						"nullable": true
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_ScoreV2-or-null.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_ScoreV2-or-null_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ProviderName": {
				"type": "string",
				"enum": [
					"OPENAI",
					"ANTHROPIC",
					"AZURE",
					"LOCAL",
					"HELICONE",
					"AMDBARTEK",
					"ANYSCALE",
					"CLOUDFLARE",
					"2YFV",
					"TOGETHER",
					"LEMONFOX",
					"FIREWORKS",
					"PERPLEXITY",
					"GOOGLE",
					"OPENROUTER",
					"WISDOMINANUTSHELL",
					"GROQ",
					"COHERE",
					"MISTRAL",
					"DEEPINFRA",
					"QSTASH",
					"FIRECRAWL",
					"AWS",
					"DEEPSEEK",
					"X",
					"AVIAN",
					"NEBIUS",
					"NOVITA"
				]
			},
			"Provider": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ProviderName"
					},
					{
						"type": "string",
						"enum": [
							"CUSTOM"
						]
					}
				]
			},
			"LlmType": {
				"type": "string",
				"enum": [
					"chat",
					"completion"
				]
			},
			"FunctionCall": {
				"properties": {
					"name": {
						"type": "string"
					},
					"arguments": {
						"$ref": "#/components/schemas/Record_string.any_"
					}
				},
				"required": [
					"name",
					"arguments"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Message": {
				"properties": {
					"contentArray": {
						"items": {
							"$ref": "#/components/schemas/Message"
						},
						"type": "array"
					},
					"idx": {
						"type": "number",
						"format": "double"
					},
					"audio_data": {
						"type": "string"
					},
					"image_url": {
						"type": "string"
					},
					"timestamp": {
						"type": "string"
					},
					"tool_call_id": {
						"type": "string"
					},
					"tool_calls": {
						"items": {
							"$ref": "#/components/schemas/FunctionCall"
						},
						"type": "array"
					},
					"content": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"role": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"_type": {
						"type": "string",
						"enum": [
							"functionCall",
							"function",
							"image",
							"message",
							"autoInput",
							"contentArray",
							"audio"
						]
					}
				},
				"required": [
					"_type"
				],
				"type": "object"
			},
			"Tool": {
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"parameters": {
						"$ref": "#/components/schemas/Record_string.any_"
					}
				},
				"required": [
					"name",
					"description"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HeliconeEventTool": {
				"properties": {
					"_type": {
						"type": "string",
						"enum": [
							"tool"
						],
						"nullable": false
					},
					"toolName": {
						"type": "string"
					},
					"input": {}
				},
				"required": [
					"_type",
					"toolName",
					"input"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"HeliconeEventVectorDB": {
				"properties": {
					"_type": {
						"type": "string",
						"enum": [
							"vector_db"
						],
						"nullable": false
					},
					"operation": {
						"type": "string",
						"enum": [
							"search",
							"insert",
							"delete",
							"update"
						]
					},
					"text": {
						"type": "string"
					},
					"vector": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					},
					"topK": {
						"type": "number",
						"format": "double"
					},
					"filter": {
						"additionalProperties": false,
						"type": "object"
					},
					"databaseName": {
						"type": "string"
					}
				},
				"required": [
					"_type",
					"operation"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"LLMRequestBody": {
				"properties": {
					"llm_type": {
						"$ref": "#/components/schemas/LlmType"
					},
					"provider": {
						"type": "string"
					},
					"model": {
						"type": "string"
					},
					"messages": {
						"items": {
							"$ref": "#/components/schemas/Message"
						},
						"type": "array",
						"nullable": true
					},
					"prompt": {
						"type": "string",
						"nullable": true
					},
					"max_tokens": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"temperature": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"top_p": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"seed": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"stream": {
						"type": "boolean",
						"nullable": true
					},
					"presence_penalty": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"frequency_penalty": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"stop": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"type": "string"
							}
						],
						"nullable": true
					},
					"reasoning_effort": {
						"type": "string",
						"enum": [
							"low",
							"medium",
							"high",
							null
						],
						"nullable": true
					},
					"tools": {
						"items": {
							"$ref": "#/components/schemas/Tool"
						},
						"type": "array"
					},
					"parallel_tool_calls": {
						"type": "boolean",
						"nullable": true
					},
					"tool_choice": {
						"properties": {
							"name": {
								"type": "string"
							},
							"type": {
								"type": "string",
								"enum": [
									"none",
									"auto",
									"any",
									"tool"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					},
					"response_format": {
						"properties": {
							"json_schema": {},
							"type": {
								"type": "string"
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					},
					"toolDetails": {
						"$ref": "#/components/schemas/HeliconeEventTool"
					},
					"vectorDBDetails": {
						"$ref": "#/components/schemas/HeliconeEventVectorDB"
					},
					"input": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							}
						]
					},
					"n": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"size": {
						"type": "string"
					},
					"quality": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"LLMResponseBody": {
				"properties": {
					"vectorDBDetailsResponse": {
						"properties": {
							"_type": {
								"type": "string",
								"enum": [
									"vector_db"
								],
								"nullable": false
							},
							"metadata": {
								"properties": {
									"timestamp": {
										"type": "string"
									},
									"destination_parsed": {
										"type": "boolean"
									},
									"destination": {
										"type": "string"
									}
								},
								"required": [
									"timestamp"
								],
								"type": "object"
							},
							"actualSimilarity": {
								"type": "number",
								"format": "double"
							},
							"similarityThreshold": {
								"type": "number",
								"format": "double"
							},
							"message": {
								"type": "string"
							},
							"status": {
								"type": "string"
							}
						},
						"required": [
							"_type",
							"metadata",
							"message",
							"status"
						],
						"type": "object"
					},
					"toolDetailsResponse": {
						"properties": {
							"toolName": {
								"type": "string"
							},
							"_type": {
								"type": "string",
								"enum": [
									"tool"
								],
								"nullable": false
							},
							"metadata": {
								"properties": {
									"timestamp": {
										"type": "string"
									}
								},
								"required": [
									"timestamp"
								],
								"type": "object"
							},
							"tips": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"message": {
								"type": "string"
							},
							"status": {
								"type": "string"
							}
						},
						"required": [
							"toolName",
							"_type",
							"metadata",
							"tips",
							"message",
							"status"
						],
						"type": "object"
					},
					"error": {
						"properties": {
							"heliconeMessage": {}
						},
						"required": [
							"heliconeMessage"
						],
						"type": "object"
					},
					"model": {
						"type": "string",
						"nullable": true
					},
					"messages": {
						"items": {
							"$ref": "#/components/schemas/Message"
						},
						"type": "array",
						"nullable": true
					}
				},
				"type": "object"
			},
			"LlmSchema": {
				"properties": {
					"request": {
						"$ref": "#/components/schemas/LLMRequestBody"
					},
					"response": {
						"allOf": [
							{
								"$ref": "#/components/schemas/LLMResponseBody"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"request"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.number_": {
				"properties": {},
				"additionalProperties": {
					"type": "number",
					"format": "double"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"HeliconeRequest": {
				"properties": {
					"response_id": {
						"type": "string",
						"nullable": true
					},
					"response_created_at": {
						"type": "string",
						"nullable": true
					},
					"response_body": {},
					"response_status": {
						"type": "number",
						"format": "double"
					},
					"response_model": {
						"type": "string",
						"nullable": true
					},
					"request_id": {
						"type": "string"
					},
					"request_created_at": {
						"type": "string"
					},
					"request_body": {},
					"request_path": {
						"type": "string"
					},
					"request_user_id": {
						"type": "string",
						"nullable": true
					},
					"request_properties": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Record_string.string_"
							}
						],
						"nullable": true
					},
					"request_model": {
						"type": "string",
						"nullable": true
					},
					"model_override": {
						"type": "string",
						"nullable": true
					},
					"helicone_user": {
						"type": "string",
						"nullable": true
					},
					"provider": {
						"$ref": "#/components/schemas/Provider"
					},
					"delay_ms": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"time_to_first_token": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"total_tokens": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"prompt_tokens": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"prompt_cache_write_tokens": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"prompt_cache_read_tokens": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"completion_tokens": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"prompt_id": {
						"type": "string",
						"nullable": true
					},
					"feedback_created_at": {
						"type": "string",
						"nullable": true
					},
					"feedback_id": {
						"type": "string",
						"nullable": true
					},
					"feedback_rating": {
						"type": "boolean",
						"nullable": true
					},
					"signed_body_url": {
						"type": "string",
						"nullable": true
					},
					"llmSchema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/LlmSchema"
							}
						],
						"nullable": true
					},
					"country_code": {
						"type": "string",
						"nullable": true
					},
					"asset_ids": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true
					},
					"asset_urls": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Record_string.string_"
							}
						],
						"nullable": true
					},
					"scores": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Record_string.number_"
							}
						],
						"nullable": true
					},
					"costUSD": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"properties": {
						"$ref": "#/components/schemas/Record_string.string_"
					},
					"assets": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"target_url": {
						"type": "string"
					},
					"model": {
						"type": "string"
					}
				},
				"required": [
					"response_id",
					"response_created_at",
					"response_status",
					"response_model",
					"request_id",
					"request_created_at",
					"request_body",
					"request_path",
					"request_user_id",
					"request_properties",
					"request_model",
					"model_override",
					"helicone_user",
					"provider",
					"delay_ms",
					"time_to_first_token",
					"total_tokens",
					"prompt_tokens",
					"prompt_cache_write_tokens",
					"prompt_cache_read_tokens",
					"completion_tokens",
					"prompt_id",
					"llmSchema",
					"country_code",
					"asset_ids",
					"asset_urls",
					"scores",
					"properties",
					"assets",
					"target_url",
					"model"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_HeliconeRequest-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/HeliconeRequest"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_HeliconeRequest-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_HeliconeRequest-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"Partial_NumberOperators_": {
				"properties": {
					"not-equals": {
						"type": "number",
						"format": "double"
					},
					"equals": {
						"type": "number",
						"format": "double"
					},
					"gte": {
						"type": "number",
						"format": "double"
					},
					"lte": {
						"type": "number",
						"format": "double"
					},
					"lt": {
						"type": "number",
						"format": "double"
					},
					"gt": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_TimestampOperators_": {
				"properties": {
					"gte": {
						"type": "string"
					},
					"lte": {
						"type": "string"
					},
					"lt": {
						"type": "string"
					},
					"gt": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_BooleanOperators_": {
				"properties": {
					"equals": {
						"type": "boolean"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_TextOperators_": {
				"properties": {
					"not-equals": {
						"type": "string"
					},
					"equals": {
						"type": "string"
					},
					"like": {
						"type": "string"
					},
					"ilike": {
						"type": "string"
					},
					"contains": {
						"type": "string"
					},
					"not-contains": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_FeedbackTableToOperators_": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"created_at": {
						"$ref": "#/components/schemas/Partial_TimestampOperators_"
					},
					"rating": {
						"$ref": "#/components/schemas/Partial_BooleanOperators_"
					},
					"response_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_RequestTableToOperators_": {
				"properties": {
					"prompt": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"created_at": {
						"$ref": "#/components/schemas/Partial_TimestampOperators_"
					},
					"user_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"auth_hash": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"org_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"node_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"model": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"modelOverride": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"path": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"prompt_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_ResponseTableToOperators_": {
				"properties": {
					"body_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"body_model": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"body_completion": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"status": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"model": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_VectorOperators_": {
				"properties": {
					"contains": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_RequestResponseSearchToOperators_": {
				"properties": {
					"request_body_vector": {
						"$ref": "#/components/schemas/Partial_VectorOperators_"
					},
					"response_body_vector": {
						"$ref": "#/components/schemas/Partial_VectorOperators_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_TimestampOperatorsTyped_": {
				"properties": {
					"gte": {
						"type": "string",
						"format": "date-time"
					},
					"lte": {
						"type": "string",
						"format": "date-time"
					},
					"lt": {
						"type": "string",
						"format": "date-time"
					},
					"gt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_CacheHitsTableToOperators_": {
				"properties": {
					"organization_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"request_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"latency": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"completion_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"prompt_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"created_at": {
						"$ref": "#/components/schemas/Partial_TimestampOperatorsTyped_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_RequestResponseRMTToOperators_": {
				"properties": {
					"latency": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"status": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"request_created_at": {
						"$ref": "#/components/schemas/Partial_TimestampOperatorsTyped_"
					},
					"response_created_at": {
						"$ref": "#/components/schemas/Partial_TimestampOperatorsTyped_"
					},
					"model": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"user_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"organization_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"node_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"job_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"threat": {
						"$ref": "#/components/schemas/Partial_BooleanOperators_"
					},
					"request_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"prompt_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"completion_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"total_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"target_url": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"properties": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/Partial_TextOperators_"
						},
						"type": "object"
					},
					"search_properties": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/Partial_TextOperators_"
						},
						"type": "object"
					},
					"scores": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/Partial_TextOperators_"
						},
						"type": "object"
					},
					"scores_column": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"request_body": {
						"$ref": "#/components/schemas/Partial_VectorOperators_"
					},
					"response_body": {
						"$ref": "#/components/schemas/Partial_VectorOperators_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_SessionsRequestResponseRMTToOperators_": {
				"properties": {
					"session_session_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"session_session_name": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"session_total_cost": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"session_total_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"session_prompt_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"session_completion_tokens": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"session_total_requests": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"session_created_at": {
						"$ref": "#/components/schemas/Partial_TimestampOperatorsTyped_"
					},
					"session_latest_request_created_at": {
						"$ref": "#/components/schemas/Partial_TimestampOperatorsTyped_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_FilterLeaf.feedback-or-request-or-response-or-properties-or-values-or-request_response_search-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_": {
				"properties": {
					"feedback": {
						"$ref": "#/components/schemas/Partial_FeedbackTableToOperators_"
					},
					"request": {
						"$ref": "#/components/schemas/Partial_RequestTableToOperators_"
					},
					"response": {
						"$ref": "#/components/schemas/Partial_ResponseTableToOperators_"
					},
					"properties": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/Partial_TextOperators_"
						},
						"type": "object"
					},
					"values": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/Partial_TextOperators_"
						},
						"type": "object"
					},
					"request_response_search": {
						"$ref": "#/components/schemas/Partial_RequestResponseSearchToOperators_"
					},
					"cache_hits": {
						"$ref": "#/components/schemas/Partial_CacheHitsTableToOperators_"
					},
					"request_response_rmt": {
						"$ref": "#/components/schemas/Partial_RequestResponseRMTToOperators_"
					},
					"sessions_request_response_rmt": {
						"$ref": "#/components/schemas/Partial_SessionsRequestResponseRMTToOperators_"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"FilterLeafSubset_feedback-or-request-or-response-or-properties-or-values-or-request_response_search-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_": {
				"$ref": "#/components/schemas/Pick_FilterLeaf.feedback-or-request-or-response-or-properties-or-values-or-request_response_search-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_"
			},
			"RequestFilterNode": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/FilterLeafSubset_feedback-or-request-or-response-or-properties-or-values-or-request_response_search-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_"
					},
					{
						"$ref": "#/components/schemas/RequestFilterBranch"
					},
					{
						"type": "string",
						"enum": [
							"all"
						]
					}
				]
			},
			"RequestFilterBranch": {
				"properties": {
					"right": {
						"$ref": "#/components/schemas/RequestFilterNode"
					},
					"operator": {
						"type": "string",
						"enum": [
							"or",
							"and"
						]
					},
					"left": {
						"$ref": "#/components/schemas/RequestFilterNode"
					}
				},
				"required": [
					"right",
					"operator",
					"left"
				],
				"type": "object"
			},
			"SortDirection": {
				"type": "string",
				"enum": [
					"asc",
					"desc"
				]
			},
			"SortLeafRequest": {
				"properties": {
					"random": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"created_at": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"cache_created_at": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"latency": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"last_active": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"total_tokens": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"completion_tokens": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"prompt_tokens": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"user_id": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"body_model": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"is_cached": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"request_prompt": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"response_text": {
						"$ref": "#/components/schemas/SortDirection"
					},
					"properties": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/SortDirection"
						},
						"type": "object"
					},
					"values": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/SortDirection"
						},
						"type": "object"
					},
					"cost_usd": {
						"$ref": "#/components/schemas/SortDirection"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"RequestQueryParams": {
				"properties": {
					"filter": {
						"$ref": "#/components/schemas/RequestFilterNode"
					},
					"offset": {
						"type": "number",
						"format": "double"
					},
					"limit": {
						"type": "number",
						"format": "double"
					},
					"sort": {
						"$ref": "#/components/schemas/SortLeafRequest"
					},
					"isCached": {
						"type": "boolean"
					},
					"includeInputs": {
						"type": "boolean"
					},
					"isPartOfExperiment": {
						"type": "boolean"
					},
					"isScored": {
						"type": "boolean"
					}
				},
				"required": [
					"filter"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_HeliconeRequest_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/HeliconeRequest"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_HeliconeRequest.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_HeliconeRequest_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"HeliconeRequestAsset": {
				"properties": {
					"assetUrl": {
						"type": "string"
					}
				},
				"required": [
					"assetUrl"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_HeliconeRequestAsset_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/HeliconeRequestAsset"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_HeliconeRequestAsset.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_HeliconeRequestAsset_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"Record_string.number-or-boolean-or-undefined_": {
				"properties": {},
				"additionalProperties": {
					"anyOf": [
						{
							"type": "number",
							"format": "double"
						},
						{
							"type": "boolean"
						}
					]
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"Scores": {
				"$ref": "#/components/schemas/Record_string.number-or-boolean-or-undefined_"
			},
			"ScoreRequest": {
				"properties": {
					"scores": {
						"$ref": "#/components/schemas/Scores"
					}
				},
				"required": [
					"scores"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromptsResult": {
				"properties": {
					"id": {
						"type": "string"
					},
					"user_defined_id": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"pretty_name": {
						"type": "string"
					},
					"created_at": {
						"type": "string"
					},
					"major_version": {
						"type": "number",
						"format": "double"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.any_"
					}
				},
				"required": [
					"id",
					"user_defined_id",
					"description",
					"pretty_name",
					"created_at",
					"major_version"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_PromptsResult-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/PromptsResult"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_PromptsResult-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_PromptsResult-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"Partial_PromptToOperators_": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"user_defined_id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_FilterLeaf.prompt_v2_": {
				"properties": {
					"prompt_v2": {
						"$ref": "#/components/schemas/Partial_PromptToOperators_"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"FilterLeafSubset_prompt_v2_": {
				"$ref": "#/components/schemas/Pick_FilterLeaf.prompt_v2_"
			},
			"PromptsFilterNode": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/FilterLeafSubset_prompt_v2_"
					},
					{
						"$ref": "#/components/schemas/PromptsFilterBranch"
					},
					{
						"type": "string",
						"enum": [
							"all"
						]
					}
				]
			},
			"PromptsFilterBranch": {
				"properties": {
					"right": {
						"$ref": "#/components/schemas/PromptsFilterNode"
					},
					"operator": {
						"type": "string",
						"enum": [
							"or",
							"and"
						]
					},
					"left": {
						"$ref": "#/components/schemas/PromptsFilterNode"
					}
				},
				"required": [
					"right",
					"operator",
					"left"
				],
				"type": "object"
			},
			"PromptsQueryParams": {
				"properties": {
					"filter": {
						"$ref": "#/components/schemas/PromptsFilterNode"
					}
				},
				"required": [
					"filter"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromptResult": {
				"properties": {
					"id": {
						"type": "string"
					},
					"user_defined_id": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"pretty_name": {
						"type": "string"
					},
					"major_version": {
						"type": "number",
						"format": "double"
					},
					"latest_version_id": {
						"type": "string"
					},
					"latest_model_used": {
						"type": "string"
					},
					"created_at": {
						"type": "string"
					},
					"last_used": {
						"type": "string"
					},
					"versions": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.any_"
					}
				},
				"required": [
					"id",
					"user_defined_id",
					"description",
					"pretty_name",
					"major_version",
					"latest_version_id",
					"latest_model_used",
					"created_at",
					"last_used",
					"versions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_PromptResult_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PromptResult"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_PromptResult.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_PromptResult_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"PromptQueryParams": {
				"properties": {
					"timeFilter": {
						"properties": {
							"end": {
								"type": "string"
							},
							"start": {
								"type": "string"
							}
						},
						"required": [
							"end",
							"start"
						],
						"type": "object"
					}
				},
				"required": [
					"timeFilter"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreatePromptResponse": {
				"properties": {
					"id": {
						"type": "string"
					},
					"prompt_version_id": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"prompt_version_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_CreatePromptResponse_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/CreatePromptResponse"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_CreatePromptResponse.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_CreatePromptResponse_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess__metadata-Record_string.any___": {
				"properties": {
					"data": {
						"properties": {
							"metadata": {
								"$ref": "#/components/schemas/Record_string.any_"
							}
						},
						"required": [
							"metadata"
						],
						"type": "object"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__metadata-Record_string.any__.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__metadata-Record_string.any___"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"PromptEditSubversionLabelParams": {
				"properties": {
					"label": {
						"type": "string"
					}
				},
				"required": [
					"label"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromptEditSubversionTemplateParams": {
				"properties": {
					"heliconeTemplate": {},
					"experimentId": {
						"type": "string"
					}
				},
				"required": [
					"heliconeTemplate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromptCreateSubversionParams": {
				"properties": {
					"newHeliconeTemplate": {},
					"isMajorVersion": {
						"type": "boolean"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.any_"
					},
					"experimentId": {
						"type": "string"
					},
					"bumpForMajorPromptVersionId": {
						"type": "string"
					}
				},
				"required": [
					"newHeliconeTemplate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromptInputRecord": {
				"properties": {
					"id": {
						"type": "string"
					},
					"inputs": {
						"$ref": "#/components/schemas/Record_string.string_"
					},
					"dataset_row_id": {
						"type": "string"
					},
					"source_request": {
						"type": "string"
					},
					"prompt_version": {
						"type": "string"
					},
					"created_at": {
						"type": "string"
					},
					"response_body": {
						"type": "string"
					},
					"request_body": {
						"type": "string"
					},
					"auto_prompt_inputs": {
						"items": {},
						"type": "array"
					}
				},
				"required": [
					"id",
					"inputs",
					"source_request",
					"prompt_version",
					"created_at",
					"auto_prompt_inputs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_PromptInputRecord-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/PromptInputRecord"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_PromptInputRecord-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_PromptInputRecord-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array_": {
				"properties": {
					"data": {
						"items": {
							"properties": {
								"meta": {
									"$ref": "#/components/schemas/Record_string.any_"
								},
								"dataset": {
									"type": "string"
								},
								"num_hypotheses": {
									"type": "number",
									"format": "double"
								},
								"created_at": {
									"type": "string"
								},
								"id": {
									"type": "string"
								}
							},
							"required": [
								"meta",
								"dataset",
								"num_hypotheses",
								"created_at",
								"id"
							],
							"type": "object"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess_PromptVersionResult-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/PromptVersionResult"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_PromptVersionResult-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_PromptVersionResult-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"Partial_PromptVersionsToOperators_": {
				"properties": {
					"minor_version": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"major_version": {
						"$ref": "#/components/schemas/Partial_NumberOperators_"
					},
					"id": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					},
					"prompt_v2": {
						"$ref": "#/components/schemas/Partial_TextOperators_"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_FilterLeaf.prompts_versions_": {
				"properties": {
					"prompts_versions": {
						"$ref": "#/components/schemas/Partial_PromptVersionsToOperators_"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"FilterLeafSubset_prompts_versions_": {
				"$ref": "#/components/schemas/Pick_FilterLeaf.prompts_versions_"
			},
			"PromptVersionsFilterNode": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/FilterLeafSubset_prompts_versions_"
					},
					{
						"$ref": "#/components/schemas/PromptVersionsFilterBranch"
					},
					{
						"type": "string",
						"enum": [
							"all"
						]
					}
				]
			},
			"PromptVersionsFilterBranch": {
				"properties": {
					"right": {
						"$ref": "#/components/schemas/PromptVersionsFilterNode"
					},
					"operator": {
						"type": "string",
						"enum": [
							"or",
							"and"
						]
					},
					"left": {
						"$ref": "#/components/schemas/PromptVersionsFilterNode"
					}
				},
				"required": [
					"right",
					"operator",
					"left"
				],
				"type": "object"
			},
			"PromptVersionsQueryParams": {
				"properties": {
					"filter": {
						"$ref": "#/components/schemas/PromptVersionsFilterNode"
					},
					"includeExperimentVersions": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"PromptVersionResultCompiled": {
				"properties": {
					"id": {
						"type": "string"
					},
					"minor_version": {
						"type": "number",
						"format": "double"
					},
					"major_version": {
						"type": "number",
						"format": "double"
					},
					"prompt_v2": {
						"type": "string"
					},
					"model": {
						"type": "string"
					},
					"prompt_compiled": {}
				},
				"required": [
					"id",
					"minor_version",
					"major_version",
					"prompt_v2",
					"model",
					"prompt_compiled"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_PromptVersionResultCompiled_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PromptVersionResultCompiled"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_PromptVersionResultCompiled.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_PromptVersionResultCompiled_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"PromptVersiosQueryParamsCompiled": {
				"properties": {
					"filter": {
						"$ref": "#/components/schemas/PromptVersionsFilterNode"
					},
					"includeExperimentVersions": {
						"type": "boolean"
					},
					"inputs": {
						"$ref": "#/components/schemas/Record_string.string_"
					}
				},
				"required": [
					"inputs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromptVersionResultFilled": {
				"properties": {
					"id": {
						"type": "string"
					},
					"minor_version": {
						"type": "number",
						"format": "double"
					},
					"major_version": {
						"type": "number",
						"format": "double"
					},
					"prompt_v2": {
						"type": "string"
					},
					"model": {
						"type": "string"
					},
					"filled_helicone_template": {}
				},
				"required": [
					"id",
					"minor_version",
					"major_version",
					"prompt_v2",
					"model",
					"filled_helicone_template"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_PromptVersionResultFilled_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PromptVersionResultFilled"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_PromptVersionResultFilled.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_PromptVersionResultFilled_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"UpgradeToProRequest": {
				"properties": {
					"addons": {
						"properties": {
							"evals": {
								"type": "boolean"
							},
							"experiments": {
								"type": "boolean"
							},
							"prompts": {
								"type": "boolean"
							},
							"alerts": {
								"type": "boolean"
							}
						},
						"type": "object"
					},
					"seats": {
						"type": "number",
						"format": "double"
					},
					"ui_mode": {
						"type": "string",
						"enum": [
							"embedded",
							"hosted"
						]
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UpgradeToTeamBundleRequest": {
				"properties": {
					"ui_mode": {
						"type": "string",
						"enum": [
							"embedded",
							"hosted"
						]
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"LLMUsage": {
				"properties": {
					"model": {
						"type": "string"
					},
					"provider": {
						"type": "string"
					},
					"prompt_tokens": {
						"type": "number",
						"format": "double"
					},
					"completion_tokens": {
						"type": "number",
						"format": "double"
					},
					"total_count": {
						"type": "number",
						"format": "double"
					},
					"amount": {
						"type": "number",
						"format": "double"
					},
					"description": {
						"type": "string"
					},
					"totalCost": {
						"properties": {
							"prompt_token": {
								"type": "number",
								"format": "double"
							},
							"completion_token": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"prompt_token",
							"completion_token"
						],
						"type": "object"
					}
				},
				"required": [
					"model",
					"provider",
					"prompt_tokens",
					"completion_tokens",
					"total_count",
					"amount",
					"description",
					"totalCost"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NewOrganizationParams": {
				"properties": {
					"tier": {
						"type": "string",
						"nullable": true
					},
					"subscription_status": {
						"type": "string",
						"nullable": true
					},
					"stripe_subscription_item_id": {
						"type": "string",
						"nullable": true
					},
					"stripe_subscription_id": {
						"type": "string",
						"nullable": true
					},
					"stripe_metadata": {
						"$ref": "#/components/schemas/Json"
					},
					"stripe_customer_id": {
						"type": "string",
						"nullable": true
					},
					"soft_delete": {
						"type": "boolean"
					},
					"size": {
						"type": "string",
						"nullable": true
					},
					"reseller_id": {
						"type": "string",
						"nullable": true
					},
					"request_limit": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"referral": {
						"type": "string",
						"nullable": true
					},
					"percent_to_log": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"owner": {
						"type": "string"
					},
					"organization_type": {
						"type": "string"
					},
					"org_provider_key": {
						"type": "string",
						"nullable": true
					},
					"onboarding_status": {
						"$ref": "#/components/schemas/Json"
					},
					"name": {
						"type": "string"
					},
					"logo_path": {
						"type": "string",
						"nullable": true
					},
					"limits": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Json"
							}
						],
						"nullable": true
					},
					"is_personal": {
						"type": "boolean"
					},
					"is_main_org": {
						"type": "boolean"
					},
					"id": {
						"type": "string"
					},
					"icon": {
						"type": "string"
					},
					"has_onboarded": {
						"type": "boolean"
					},
					"governance_settings": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Json"
							}
						],
						"nullable": true
					},
					"domain": {
						"type": "string",
						"nullable": true
					},
					"created_at": {
						"type": "string",
						"nullable": true
					},
					"color": {
						"type": "string"
					}
				},
				"required": [
					"owner",
					"name"
				],
				"type": "object"
			},
			"Pick_NewOrganizationParams.name-or-color-or-icon-or-org_provider_key-or-limits-or-reseller_id-or-organization_type-or-onboarding_status_": {
				"properties": {
					"name": {
						"type": "string"
					},
					"color": {
						"type": "string"
					},
					"icon": {
						"type": "string"
					},
					"org_provider_key": {
						"type": "string"
					},
					"limits": {
						"$ref": "#/components/schemas/Json"
					},
					"reseller_id": {
						"type": "string"
					},
					"organization_type": {
						"type": "string"
					},
					"onboarding_status": {
						"$ref": "#/components/schemas/Json"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"UpdateOrganizationParams": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Pick_NewOrganizationParams.name-or-color-or-icon-or-org_provider_key-or-limits-or-reseller_id-or-organization_type-or-onboarding_status_"
					},
					{
						"properties": {
							"variant": {
								"type": "string"
							}
						},
						"type": "object"
					}
				]
			},
			"UIFilterRowTree": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/UIFilterRowNode"
					},
					{
						"$ref": "#/components/schemas/FilterRow"
					}
				]
			},
			"UIFilterRowNode": {
				"properties": {
					"operator": {
						"type": "string",
						"enum": [
							"and",
							"or"
						]
					},
					"rows": {
						"items": {
							"$ref": "#/components/schemas/UIFilterRowTree"
						},
						"type": "array"
					}
				},
				"required": [
					"operator",
					"rows"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FilterRow": {
				"properties": {
					"value": {
						"type": "string"
					},
					"operatorIdx": {
						"type": "number",
						"format": "double"
					},
					"filterMapIdx": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"value",
					"operatorIdx",
					"filterMapIdx"
				],
				"type": "object"
			},
			"OrganizationFilter": {
				"properties": {
					"softDelete": {
						"type": "boolean"
					},
					"createdAt": {
						"type": "string"
					},
					"filter": {
						"items": {
							"$ref": "#/components/schemas/UIFilterRowTree"
						},
						"type": "array"
					},
					"name": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"softDelete",
					"filter",
					"name",
					"id"
				],
				"type": "object"
			},
			"OrganizationLayout": {
				"properties": {
					"filters": {
						"items": {
							"$ref": "#/components/schemas/OrganizationFilter"
						},
						"type": "array"
					},
					"type": {
						"type": "string"
					},
					"organization_id": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"filters",
					"type",
					"organization_id",
					"id"
				],
				"type": "object"
			},
			"ResultSuccess_OrganizationLayout_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/OrganizationLayout"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_OrganizationLayout.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_OrganizationLayout_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"OrganizationMember": {
				"properties": {
					"org_role": {
						"type": "string"
					},
					"member": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				},
				"required": [
					"org_role",
					"member",
					"email"
				],
				"type": "object"
			},
			"ResultSuccess_OrganizationMember-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/OrganizationMember"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_OrganizationMember-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_OrganizationMember-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"OrganizationOwner": {
				"properties": {
					"tier": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				},
				"required": [
					"tier",
					"email"
				],
				"type": "object"
			},
			"ResultSuccess_OrganizationOwner-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/OrganizationOwner"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_OrganizationOwner-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_OrganizationOwner-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"Partial__currentStep-string--selectedTier-string--hasOnboarded-boolean--members-any-Array--addons_58__prompts-boolean--experiments-boolean--evals-boolean___": {
				"properties": {
					"currentStep": {
						"type": "string"
					},
					"selectedTier": {
						"type": "string"
					},
					"hasOnboarded": {
						"type": "boolean"
					},
					"members": {
						"items": {},
						"type": "array"
					},
					"addons": {
						"properties": {
							"evals": {
								"type": "boolean"
							},
							"experiments": {
								"type": "boolean"
							},
							"prompts": {
								"type": "boolean"
							}
						},
						"required": [
							"evals",
							"experiments",
							"prompts"
						],
						"type": "object"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"OnboardingStatus": {
				"$ref": "#/components/schemas/Partial__currentStep-string--selectedTier-string--hasOnboarded-boolean--members-any-Array--addons_58__prompts-boolean--experiments-boolean--evals-boolean___"
			},
			"HeliconeMeta": {
				"properties": {
					"heliconeManualAccessKey": {
						"type": "string"
					},
					"lytixHost": {
						"type": "string"
					},
					"lytixKey": {
						"type": "string"
					},
					"posthogHost": {
						"type": "string"
					},
					"posthogApiKey": {
						"type": "string"
					},
					"webhookEnabled": {
						"type": "boolean"
					},
					"omitResponseLog": {
						"type": "boolean"
					},
					"omitRequestLog": {
						"type": "boolean"
					},
					"modelOverride": {
						"type": "string"
					}
				},
				"required": [
					"webhookEnabled",
					"omitResponseLog",
					"omitRequestLog"
				],
				"type": "object"
			},
			"TemplateWithInputs": {
				"description": "Parses a string containing custom JSX-like tags and extracts information to produce two outputs:\n1. A version of the string with all JSX tags removed, leaving only the text content.\n2. An object representing a template with self-closing JSX tags and a separate mapping of keys to their\n   corresponding text content.\n\nThe function specifically targets `<helicone-prompt-input>` tags, which include a `key` attribute and enclosed text content.\nThese tags are transformed or removed based on the desired output structure. The process involves regular expressions\nto match and manipulate the input string to produce the outputs.\n\nParameters:\n- input: A string containing the text and JSX-like tags to be parsed.\n\nReturns:\nAn object with two properties:\n1. stringWithoutJSXTags: A string where all `<helicone-prompt-input>` tags are removed, and only their text content remains.\n2. templateWithInputs: An object containing:\n   - template: A version of the input string where `<helicone-prompt-input>` tags are replaced with self-closing versions,\n     preserving the `key` attributes but removing the text content.\n   - inputs: An object mapping the `key` attributes to their corresponding text content, effectively extracting\n     the data from the original tags.\n\nExample Usage:\n```ts\nconst input = `\nThe scene is <helicone-prompt-input key=\"scene\" >Harry Potter</helicone-prompt-input>.\n<helicone-prompt-input key=\"name\" >justin</helicone-prompt-input>  test`;\n\nconst expectedOutput = parseJSXString(input);\nconsole.log(expectedOutput);\n```\nThe function is useful for preprocessing strings with embedded custom JSX-like tags, extracting useful data,\nand preparing templates for further processing or rendering. It demonstrates a practical application of regular\nexpressions for text manipulation in TypeScript, specifically tailored to a custom JSX-like syntax.",
				"properties": {
					"template": {
						"additionalProperties": false,
						"type": "object"
					},
					"inputs": {
						"properties": {},
						"additionalProperties": {
							"type": "string"
						},
						"type": "object"
					},
					"autoInputs": {
						"items": {},
						"type": "array"
					}
				},
				"required": [
					"template",
					"inputs",
					"autoInputs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Log": {
				"properties": {
					"response": {
						"properties": {
							"delayMs": {
								"type": "number",
								"format": "double"
							},
							"responseCreatedAt": {
								"type": "string",
								"format": "date-time"
							},
							"timeToFirstToken": {
								"type": "number",
								"format": "double"
							},
							"bodySize": {
								"type": "number",
								"format": "double"
							},
							"status": {
								"type": "number",
								"format": "double"
							},
							"id": {
								"type": "string"
							}
						},
						"required": [
							"delayMs",
							"responseCreatedAt",
							"bodySize",
							"status",
							"id"
						],
						"type": "object"
					},
					"request": {
						"properties": {
							"experimentRowIndex": {
								"type": "string"
							},
							"experimentColumnId": {
								"type": "string"
							},
							"heliconeTemplate": {
								"$ref": "#/components/schemas/TemplateWithInputs"
							},
							"isStream": {
								"type": "boolean"
							},
							"requestCreatedAt": {
								"type": "string",
								"format": "date-time"
							},
							"countryCode": {
								"type": "string"
							},
							"threat": {
								"type": "boolean"
							},
							"path": {
								"type": "string"
							},
							"bodySize": {
								"type": "number",
								"format": "double"
							},
							"provider": {
								"$ref": "#/components/schemas/Provider"
							},
							"targetUrl": {
								"type": "string"
							},
							"heliconeProxyKeyId": {
								"type": "string"
							},
							"heliconeApiKeyId": {
								"type": "number",
								"format": "double"
							},
							"properties": {
								"$ref": "#/components/schemas/Record_string.string_"
							},
							"promptVersion": {
								"type": "string"
							},
							"promptId": {
								"type": "string"
							},
							"userId": {
								"type": "string"
							},
							"id": {
								"type": "string"
							}
						},
						"required": [
							"isStream",
							"requestCreatedAt",
							"path",
							"bodySize",
							"provider",
							"targetUrl",
							"properties",
							"userId",
							"id"
						],
						"type": "object"
					}
				},
				"required": [
					"response",
					"request"
				],
				"type": "object"
			},
			"KafkaMessageContents": {
				"properties": {
					"log": {
						"$ref": "#/components/schemas/Log"
					},
					"heliconeMeta": {
						"$ref": "#/components/schemas/HeliconeMeta"
					},
					"authorization": {
						"type": "string"
					}
				},
				"required": [
					"log",
					"heliconeMeta",
					"authorization"
				],
				"type": "object"
			},
			"ResultSuccess_unknown_": {
				"properties": {
					"data": {},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultError_unknown_": {
				"properties": {
					"data": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"error": {}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PostgrestResponseSuccess__created_at-string--governance_limits-Json--member-string--org_role-string--organization-string__": {
				"properties": {
					"status": {
						"type": "number",
						"format": "double"
					},
					"statusText": {
						"type": "string"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"data": {
						"properties": {
							"organization": {
								"type": "string"
							},
							"org_role": {
								"type": "string"
							},
							"member": {
								"type": "string"
							},
							"governance_limits": {
								"$ref": "#/components/schemas/Json"
							},
							"created_at": {
								"type": "string"
							}
						},
						"required": [
							"organization",
							"org_role",
							"member",
							"governance_limits",
							"created_at"
						],
						"type": "object"
					},
					"count": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"required": [
					"status",
					"statusText",
					"error",
					"data",
					"count"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PostgrestError": {
				"description": "Error format\n\n{@link https://postgrest.org/en/stable/api.html?highlight=options#errors-and-http-status-codes}",
				"properties": {
					"name": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"stack": {
						"type": "string"
					},
					"details": {
						"type": "string"
					},
					"hint": {
						"type": "string"
					},
					"code": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"message",
					"details",
					"hint",
					"code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PostgrestResponseFailure": {
				"properties": {
					"status": {
						"type": "number",
						"format": "double"
					},
					"statusText": {
						"type": "string"
					},
					"error": {
						"$ref": "#/components/schemas/PostgrestError"
					},
					"data": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"count": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"status",
					"statusText",
					"error",
					"data",
					"count"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PostgrestSingleResponse__created_at-string--governance_limits-Json--member-string--org_role-string--organization-string__": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/PostgrestResponseSuccess__created_at-string--governance_limits-Json--member-string--org_role-string--organization-string__"
					},
					{
						"$ref": "#/components/schemas/PostgrestResponseFailure"
					}
				]
			},
			"PostgrestResponseSuccess__governance_settings-Json__": {
				"properties": {
					"status": {
						"type": "number",
						"format": "double"
					},
					"statusText": {
						"type": "string"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"data": {
						"properties": {
							"governance_settings": {
								"$ref": "#/components/schemas/Json"
							}
						},
						"required": [
							"governance_settings"
						],
						"type": "object"
					},
					"count": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"required": [
					"status",
					"statusText",
					"error",
					"data",
					"count"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PostgrestSingleResponse__governance_settings-Json__": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/PostgrestResponseSuccess__governance_settings-Json__"
					},
					{
						"$ref": "#/components/schemas/PostgrestResponseFailure"
					}
				]
			},
			"KeyPermissions": {
				"type": "string",
				"enum": [
					"w",
					"rw"
				]
			},
			"GenerateHashQueryParams": {
				"properties": {
					"apiKey": {
						"type": "string"
					},
					"governance": {
						"type": "boolean"
					},
					"keyName": {
						"type": "string"
					},
					"permissions": {
						"$ref": "#/components/schemas/KeyPermissions"
					}
				},
				"required": [
					"apiKey",
					"governance",
					"keyName",
					"permissions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FineTuneResult": {
				"anyOf": [
					{
						"properties": {
							"error": {
								"type": "string"
							}
						},
						"required": [
							"error"
						],
						"type": "object"
					},
					{
						"properties": {
							"data": {
								"properties": {
									"url": {
										"type": "string"
									},
									"fineTuneJob": {
										"type": "string"
									}
								},
								"required": [
									"url",
									"fineTuneJob"
								],
								"type": "object"
							},
							"success": {
								"type": "boolean"
							}
						},
						"required": [
							"data",
							"success"
						],
						"type": "object"
					}
				]
			},
			"FineTuneBodyParams": {
				"properties": {
					"providerKeyId": {
						"type": "string"
					}
				},
				"required": [
					"providerKeyId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FineTuneBody": {
				"properties": {
					"providerKeyId": {
						"type": "string"
					}
				},
				"required": [
					"providerKeyId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"StoreFilterType": {
				"properties": {
					"createdAt": {
						"type": "string"
					},
					"filter": {},
					"name": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"filter",
					"name"
				],
				"type": "object"
			},
			"ResultSuccess_StoreFilterType-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/StoreFilterType"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_StoreFilterType-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_StoreFilterType-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess_StoreFilterType_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/StoreFilterType"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_StoreFilterType.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_StoreFilterType_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ResultSuccess__id-string__": {
				"properties": {
					"data": {
						"properties": {
							"id": {
								"type": "string"
							}
						},
						"required": [
							"id"
						],
						"type": "object"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__id-string_.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__id-string__"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ChatCompletionTokenLogprob.TopLogprob": {
				"properties": {
					"token": {
						"type": "string",
						"description": "The token."
					},
					"bytes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"nullable": true,
						"description": "A list of integers representing the UTF-8 bytes representation of the token.\nUseful in instances where characters are represented by multiple tokens and\ntheir byte representations must be combined to generate the correct text\nrepresentation. Can be `null` if there is no bytes representation for the token."
					},
					"logprob": {
						"type": "number",
						"format": "double",
						"description": "The log probability of this token, if it is within the top 20 most likely\ntokens. Otherwise, the value `-9999.0` is used to signify that the token is very\nunlikely."
					}
				},
				"required": [
					"token",
					"bytes",
					"logprob"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionTokenLogprob": {
				"properties": {
					"token": {
						"type": "string",
						"description": "The token."
					},
					"bytes": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"nullable": true,
						"description": "A list of integers representing the UTF-8 bytes representation of the token.\nUseful in instances where characters are represented by multiple tokens and\ntheir byte representations must be combined to generate the correct text\nrepresentation. Can be `null` if there is no bytes representation for the token."
					},
					"logprob": {
						"type": "number",
						"format": "double",
						"description": "The log probability of this token, if it is within the top 20 most likely\ntokens. Otherwise, the value `-9999.0` is used to signify that the token is very\nunlikely."
					},
					"top_logprobs": {
						"items": {
							"$ref": "#/components/schemas/ChatCompletionTokenLogprob.TopLogprob"
						},
						"type": "array",
						"description": "List of the most likely tokens and their log probability, at this token\nposition. In rare cases, there may be fewer than the number of requested\n`top_logprobs` returned."
					}
				},
				"required": [
					"token",
					"bytes",
					"logprob",
					"top_logprobs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletion.Choice.Logprobs": {
				"description": "Log probability information for the choice.",
				"properties": {
					"content": {
						"items": {
							"$ref": "#/components/schemas/ChatCompletionTokenLogprob"
						},
						"type": "array",
						"nullable": true,
						"description": "A list of message content tokens with log probability information."
					},
					"refusal": {
						"items": {
							"$ref": "#/components/schemas/ChatCompletionTokenLogprob"
						},
						"type": "array",
						"nullable": true,
						"description": "A list of message refusal tokens with log probability information."
					}
				},
				"required": [
					"content",
					"refusal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionAudio": {
				"description": "If the audio output modality is requested, this object contains data about the\naudio response from the model.\n[Learn more](https://platform.openai.com/docs/guides/audio).",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for this audio response."
					},
					"data": {
						"type": "string",
						"description": "Base64 encoded audio bytes generated by the model, in the format specified in\nthe request."
					},
					"expires_at": {
						"type": "number",
						"format": "double",
						"description": "The Unix timestamp (in seconds) for when this audio response will no longer be\naccessible on the server for use in multi-turn conversations."
					},
					"transcript": {
						"type": "string",
						"description": "Transcript of the audio generated by the model."
					}
				},
				"required": [
					"id",
					"data",
					"expires_at",
					"transcript"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionMessage.FunctionCall": {
				"properties": {
					"arguments": {
						"type": "string",
						"description": "The arguments to call the function with, as generated by the model in JSON\nformat. Note that the model does not always generate valid JSON, and may\nhallucinate parameters not defined by your function schema. Validate the\narguments in your code before calling your function."
					},
					"name": {
						"type": "string",
						"description": "The name of the function to call."
					}
				},
				"required": [
					"arguments",
					"name"
				],
				"type": "object",
				"additionalProperties": false,
				"deprecated": true
			},
			"ChatCompletionMessageToolCall.Function": {
				"description": "The function that the model called.",
				"properties": {
					"arguments": {
						"type": "string",
						"description": "The arguments to call the function with, as generated by the model in JSON\nformat. Note that the model does not always generate valid JSON, and may\nhallucinate parameters not defined by your function schema. Validate the\narguments in your code before calling your function."
					},
					"name": {
						"type": "string",
						"description": "The name of the function to call."
					}
				},
				"required": [
					"arguments",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionMessageToolCall": {
				"properties": {
					"id": {
						"type": "string",
						"description": "The ID of the tool call."
					},
					"function": {
						"$ref": "#/components/schemas/ChatCompletionMessageToolCall.Function",
						"description": "The function that the model called."
					},
					"type": {
						"type": "string",
						"enum": [
							"function"
						],
						"nullable": false,
						"description": "The type of the tool. Currently, only `function` is supported."
					}
				},
				"required": [
					"id",
					"function",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionMessage": {
				"description": "A chat completion message generated by the model.",
				"properties": {
					"content": {
						"type": "string",
						"nullable": true,
						"description": "The contents of the message."
					},
					"refusal": {
						"type": "string",
						"nullable": true,
						"description": "The refusal message generated by the model."
					},
					"role": {
						"type": "string",
						"enum": [
							"assistant"
						],
						"nullable": false,
						"description": "The role of the author of this message."
					},
					"audio": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ChatCompletionAudio"
							}
						],
						"nullable": true,
						"description": "If the audio output modality is requested, this object contains data about the\naudio response from the model.\n[Learn more](https://platform.openai.com/docs/guides/audio)."
					},
					"function_call": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ChatCompletionMessage.FunctionCall"
							}
						],
						"nullable": true,
						"deprecated": true
					},
					"tool_calls": {
						"items": {
							"$ref": "#/components/schemas/ChatCompletionMessageToolCall"
						},
						"type": "array",
						"description": "The tool calls generated by the model, such as function calls."
					}
				},
				"required": [
					"content",
					"refusal",
					"role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletion.Choice": {
				"properties": {
					"finish_reason": {
						"type": "string",
						"enum": [
							"stop",
							"length",
							"tool_calls",
							"content_filter",
							"function_call"
						],
						"description": "The reason the model stopped generating tokens. This will be `stop` if the model\nhit a natural stop point or a provided stop sequence, `length` if the maximum\nnumber of tokens specified in the request was reached, `content_filter` if\ncontent was omitted due to a flag from our content filters, `tool_calls` if the\nmodel called a tool, or `function_call` (deprecated) if the model called a\nfunction."
					},
					"index": {
						"type": "number",
						"format": "double",
						"description": "The index of the choice in the list of choices."
					},
					"logprobs": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ChatCompletion.Choice.Logprobs"
							}
						],
						"nullable": true,
						"description": "Log probability information for the choice."
					},
					"message": {
						"$ref": "#/components/schemas/ChatCompletionMessage",
						"description": "A chat completion message generated by the model."
					}
				},
				"required": [
					"finish_reason",
					"index",
					"logprobs",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CompletionUsage.CompletionTokensDetails": {
				"description": "Breakdown of tokens used in a completion.",
				"properties": {
					"audio_tokens": {
						"type": "number",
						"format": "double",
						"description": "Audio input tokens generated by the model."
					},
					"reasoning_tokens": {
						"type": "number",
						"format": "double",
						"description": "Tokens generated by the model for reasoning."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CompletionUsage.PromptTokensDetails": {
				"description": "Breakdown of tokens used in the prompt.",
				"properties": {
					"audio_tokens": {
						"type": "number",
						"format": "double",
						"description": "Audio input tokens present in the prompt."
					},
					"cached_tokens": {
						"type": "number",
						"format": "double",
						"description": "Cached tokens present in the prompt."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CompletionUsage": {
				"description": "Usage statistics for the completion request.",
				"properties": {
					"completion_tokens": {
						"type": "number",
						"format": "double",
						"description": "Number of tokens in the generated completion."
					},
					"prompt_tokens": {
						"type": "number",
						"format": "double",
						"description": "Number of tokens in the prompt."
					},
					"total_tokens": {
						"type": "number",
						"format": "double",
						"description": "Total number of tokens used in the request (prompt + completion)."
					},
					"completion_tokens_details": {
						"$ref": "#/components/schemas/CompletionUsage.CompletionTokensDetails",
						"description": "Breakdown of tokens used in a completion."
					},
					"prompt_tokens_details": {
						"$ref": "#/components/schemas/CompletionUsage.PromptTokensDetails",
						"description": "Breakdown of tokens used in the prompt."
					}
				},
				"required": [
					"completion_tokens",
					"prompt_tokens",
					"total_tokens"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletion": {
				"description": "Represents a chat completion response returned by model, based on the provided\ninput.",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier for the chat completion."
					},
					"choices": {
						"items": {
							"$ref": "#/components/schemas/ChatCompletion.Choice"
						},
						"type": "array",
						"description": "A list of chat completion choices. Can be more than one if `n` is greater\nthan 1."
					},
					"created": {
						"type": "number",
						"format": "double",
						"description": "The Unix timestamp (in seconds) of when the chat completion was created."
					},
					"model": {
						"type": "string",
						"description": "The model used for the chat completion."
					},
					"object": {
						"type": "string",
						"enum": [
							"chat.completion"
						],
						"nullable": false,
						"description": "The object type, which is always `chat.completion`."
					},
					"service_tier": {
						"type": "string",
						"enum": [
							"scale",
							"default",
							null
						],
						"nullable": true,
						"description": "The service tier used for processing the request. This field is only included if\nthe `service_tier` parameter is specified in the request."
					},
					"system_fingerprint": {
						"type": "string",
						"description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when\nbackend changes have been made that might impact determinism."
					},
					"usage": {
						"$ref": "#/components/schemas/CompletionUsage",
						"description": "Usage statistics for the completion request."
					}
				},
				"required": [
					"id",
					"choices",
					"created",
					"model",
					"object"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_ChatCompletion_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChatCompletion"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_ChatCompletion.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_ChatCompletion_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"ChatCompletionContentPartText": {
				"description": "Learn about\n[text inputs](https://platform.openai.com/docs/guides/text-generation).",
				"properties": {
					"text": {
						"type": "string",
						"description": "The text content."
					},
					"type": {
						"type": "string",
						"enum": [
							"text"
						],
						"nullable": false,
						"description": "The type of the content part."
					}
				},
				"required": [
					"text",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionSystemMessageParam": {
				"properties": {
					"content": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ChatCompletionContentPartText"
								},
								"type": "array"
							}
						],
						"description": "The contents of the system message."
					},
					"role": {
						"type": "string",
						"enum": [
							"system"
						],
						"nullable": false,
						"description": "The role of the messages author, in this case `system`."
					},
					"name": {
						"type": "string",
						"description": "An optional name for the participant. Provides the model information to\ndifferentiate between participants of the same role."
					}
				},
				"required": [
					"content",
					"role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionContentPartImage.ImageURL": {
				"properties": {
					"url": {
						"type": "string",
						"description": "Either a URL of the image or the base64 encoded image data."
					},
					"detail": {
						"type": "string",
						"enum": [
							"auto",
							"low",
							"high"
						],
						"description": "Specifies the detail level of the image. Learn more in the\n[Vision guide](https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding)."
					}
				},
				"required": [
					"url"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionContentPartImage": {
				"description": "Learn about [image inputs](https://platform.openai.com/docs/guides/vision).",
				"properties": {
					"image_url": {
						"$ref": "#/components/schemas/ChatCompletionContentPartImage.ImageURL"
					},
					"type": {
						"type": "string",
						"enum": [
							"image_url"
						],
						"nullable": false,
						"description": "The type of the content part."
					}
				},
				"required": [
					"image_url",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionContentPartInputAudio.InputAudio": {
				"properties": {
					"data": {
						"type": "string",
						"description": "Base64 encoded audio data."
					},
					"format": {
						"type": "string",
						"enum": [
							"wav",
							"mp3"
						],
						"description": "The format of the encoded audio data. Currently supports \"wav\" and \"mp3\"."
					}
				},
				"required": [
					"data",
					"format"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionContentPartInputAudio": {
				"description": "Learn about [audio inputs](https://platform.openai.com/docs/guides/audio).",
				"properties": {
					"input_audio": {
						"$ref": "#/components/schemas/ChatCompletionContentPartInputAudio.InputAudio"
					},
					"type": {
						"type": "string",
						"enum": [
							"input_audio"
						],
						"nullable": false,
						"description": "The type of the content part. Always `input_audio`."
					}
				},
				"required": [
					"input_audio",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionContentPart": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ChatCompletionContentPartText"
					},
					{
						"$ref": "#/components/schemas/ChatCompletionContentPartImage"
					},
					{
						"$ref": "#/components/schemas/ChatCompletionContentPartInputAudio"
					}
				],
				"description": "Learn about\n[text inputs](https://platform.openai.com/docs/guides/text-generation)."
			},
			"ChatCompletionUserMessageParam": {
				"properties": {
					"content": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ChatCompletionContentPart"
								},
								"type": "array"
							}
						],
						"description": "The contents of the user message."
					},
					"role": {
						"type": "string",
						"enum": [
							"user"
						],
						"nullable": false,
						"description": "The role of the messages author, in this case `user`."
					},
					"name": {
						"type": "string",
						"description": "An optional name for the participant. Provides the model information to\ndifferentiate between participants of the same role."
					}
				},
				"required": [
					"content",
					"role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionAssistantMessageParam.Audio": {
				"description": "Data about a previous audio response from the model.\n[Learn more](https://platform.openai.com/docs/guides/audio).",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for a previous audio response from the model."
					}
				},
				"required": [
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionContentPartRefusal": {
				"properties": {
					"refusal": {
						"type": "string",
						"description": "The refusal message generated by the model."
					},
					"type": {
						"type": "string",
						"enum": [
							"refusal"
						],
						"nullable": false,
						"description": "The type of the content part."
					}
				},
				"required": [
					"refusal",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionAssistantMessageParam.FunctionCall": {
				"properties": {
					"arguments": {
						"type": "string",
						"description": "The arguments to call the function with, as generated by the model in JSON\nformat. Note that the model does not always generate valid JSON, and may\nhallucinate parameters not defined by your function schema. Validate the\narguments in your code before calling your function."
					},
					"name": {
						"type": "string",
						"description": "The name of the function to call."
					}
				},
				"required": [
					"arguments",
					"name"
				],
				"type": "object",
				"additionalProperties": false,
				"deprecated": true
			},
			"ChatCompletionAssistantMessageParam": {
				"properties": {
					"role": {
						"type": "string",
						"enum": [
							"assistant"
						],
						"nullable": false,
						"description": "The role of the messages author, in this case `assistant`."
					},
					"audio": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ChatCompletionAssistantMessageParam.Audio"
							}
						],
						"nullable": true,
						"description": "Data about a previous audio response from the model.\n[Learn more](https://platform.openai.com/docs/guides/audio)."
					},
					"content": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"items": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ChatCompletionContentPartText"
										},
										{
											"$ref": "#/components/schemas/ChatCompletionContentPartRefusal"
										}
									]
								},
								"type": "array"
							}
						],
						"nullable": true,
						"description": "The contents of the assistant message. Required unless `tool_calls` or\n`function_call` is specified."
					},
					"function_call": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ChatCompletionAssistantMessageParam.FunctionCall"
							}
						],
						"nullable": true,
						"deprecated": true
					},
					"name": {
						"type": "string",
						"description": "An optional name for the participant. Provides the model information to\ndifferentiate between participants of the same role."
					},
					"refusal": {
						"type": "string",
						"nullable": true,
						"description": "The refusal message by the assistant."
					},
					"tool_calls": {
						"items": {
							"$ref": "#/components/schemas/ChatCompletionMessageToolCall"
						},
						"type": "array",
						"description": "The tool calls generated by the model, such as function calls."
					}
				},
				"required": [
					"role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionToolMessageParam": {
				"properties": {
					"content": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ChatCompletionContentPartText"
								},
								"type": "array"
							}
						],
						"description": "The contents of the tool message."
					},
					"role": {
						"type": "string",
						"enum": [
							"tool"
						],
						"nullable": false,
						"description": "The role of the messages author, in this case `tool`."
					},
					"tool_call_id": {
						"type": "string",
						"description": "Tool call that this message is responding to."
					}
				},
				"required": [
					"content",
					"role",
					"tool_call_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionFunctionMessageParam": {
				"properties": {
					"content": {
						"type": "string",
						"nullable": true,
						"description": "The contents of the function message."
					},
					"name": {
						"type": "string",
						"description": "The name of the function to call."
					},
					"role": {
						"type": "string",
						"enum": [
							"function"
						],
						"nullable": false,
						"description": "The role of the messages author, in this case `function`."
					}
				},
				"required": [
					"content",
					"name",
					"role"
				],
				"type": "object",
				"additionalProperties": false,
				"deprecated": true
			},
			"ChatCompletionMessageParam": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ChatCompletionSystemMessageParam"
					},
					{
						"$ref": "#/components/schemas/ChatCompletionUserMessageParam"
					},
					{
						"$ref": "#/components/schemas/ChatCompletionAssistantMessageParam"
					},
					{
						"$ref": "#/components/schemas/ChatCompletionToolMessageParam"
					},
					{
						"$ref": "#/components/schemas/ChatCompletionFunctionMessageParam"
					}
				]
			},
			"Record_string.unknown_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"FunctionParameters": {
				"$ref": "#/components/schemas/Record_string.unknown_",
				"description": "The parameters the functions accepts, described as a JSON Schema object. See the\n[guide](https://platform.openai.com/docs/guides/function-calling) for examples,\nand the\n[JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\ndocumentation about the format.\n\nOmitting `parameters` defines a function with an empty parameter list."
			},
			"FunctionDefinition": {
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64."
					},
					"description": {
						"type": "string",
						"description": "A description of what the function does, used by the model to choose when and\nhow to call the function."
					},
					"parameters": {
						"$ref": "#/components/schemas/FunctionParameters",
						"description": "The parameters the functions accepts, described as a JSON Schema object. See the\n[guide](https://platform.openai.com/docs/guides/function-calling) for examples,\nand the\n[JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\ndocumentation about the format.\n\nOmitting `parameters` defines a function with an empty parameter list."
					},
					"strict": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether to enable strict schema adherence when generating the function call. If\nset to true, the model will follow the exact schema defined in the `parameters`\nfield. Only a subset of JSON Schema is supported when `strict` is `true`. Learn\nmore about Structured Outputs in the\n[function calling guide](docs/guides/function-calling)."
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionTool": {
				"properties": {
					"function": {
						"$ref": "#/components/schemas/FunctionDefinition"
					},
					"type": {
						"type": "string",
						"enum": [
							"function"
						],
						"nullable": false,
						"description": "The type of the tool. Currently, only `function` is supported."
					}
				},
				"required": [
					"function",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionNamedToolChoice.Function": {
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the function to call."
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionNamedToolChoice": {
				"description": "Specifies a tool the model should use. Use to force the model to call a specific\nfunction.",
				"properties": {
					"function": {
						"$ref": "#/components/schemas/ChatCompletionNamedToolChoice.Function"
					},
					"type": {
						"type": "string",
						"enum": [
							"function"
						],
						"nullable": false,
						"description": "The type of the tool. Currently, only `function` is supported."
					}
				},
				"required": [
					"function",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatCompletionToolChoiceOption": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ChatCompletionNamedToolChoice"
					},
					{
						"type": "string",
						"enum": [
							"none",
							"auto",
							"required"
						]
					}
				],
				"description": "Controls which (if any) tool is called by the model. `none` means the model will\nnot call any tool and instead generates a message. `auto` means the model can\npick between generating a message or calling one or more tools. `required` means\nthe model must call one or more tools. Specifying a particular tool via\n`{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\ncall that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools\nare present."
			},
			"AlertResponse": {
				"properties": {
					"alerts": {
						"items": {
							"properties": {
								"updated_at": {
									"type": "string",
									"nullable": true
								},
								"time_window": {
									"type": "number",
									"format": "double"
								},
								"time_block_duration": {
									"type": "number",
									"format": "double"
								},
								"threshold": {
									"type": "number",
									"format": "double"
								},
								"status": {
									"type": "string"
								},
								"soft_delete": {
									"type": "boolean"
								},
								"slack_channels": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"org_id": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"minimum_request_count": {
									"type": "number",
									"format": "double",
									"nullable": true
								},
								"metric": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"emails": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"created_at": {
									"type": "string",
									"nullable": true
								}
							},
							"required": [
								"updated_at",
								"time_window",
								"time_block_duration",
								"threshold",
								"status",
								"soft_delete",
								"slack_channels",
								"org_id",
								"name",
								"minimum_request_count",
								"metric",
								"id",
								"emails",
								"created_at"
							],
							"type": "object"
						},
						"type": "array"
					},
					"history": {
						"items": {
							"properties": {
								"updated_at": {
									"type": "string",
									"nullable": true
								},
								"triggered_value": {
									"type": "string"
								},
								"status": {
									"type": "string"
								},
								"soft_delete": {
									"type": "boolean"
								},
								"org_id": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"created_at": {
									"type": "string",
									"nullable": true
								},
								"alert_start_time": {
									"type": "string"
								},
								"alert_name": {
									"type": "string"
								},
								"alert_metric": {
									"type": "string"
								},
								"alert_id": {
									"type": "string"
								},
								"alert_end_time": {
									"type": "string",
									"nullable": true
								}
							},
							"required": [
								"updated_at",
								"triggered_value",
								"status",
								"soft_delete",
								"org_id",
								"id",
								"created_at",
								"alert_start_time",
								"alert_name",
								"alert_metric",
								"alert_id",
								"alert_end_time"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"alerts",
					"history"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess_AlertResponse_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/AlertResponse"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result_AlertResponse.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess_AlertResponse_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"AlertRequest": {
				"properties": {
					"name": {
						"type": "string"
					},
					"metric": {
						"type": "string"
					},
					"threshold": {
						"type": "number",
						"format": "double"
					},
					"time_window": {
						"type": "string"
					},
					"emails": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"slack_channels": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"minimum_request_count": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"metric",
					"threshold",
					"time_window",
					"emails",
					"slack_channels"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResultSuccess__organization_id-string--name-string--flags-string-Array_-Array_": {
				"properties": {
					"data": {
						"items": {
							"properties": {
								"flags": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"name": {
									"type": "string"
								},
								"organization_id": {
									"type": "string"
								}
							},
							"required": [
								"flags",
								"name",
								"organization_id"
							],
							"type": "object"
						},
						"type": "array"
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"data",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Result__organization_id-string--name-string--flags-string-Array_-Array.string_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ResultSuccess__organization_id-string--name-string--flags-string-Array_-Array_"
					},
					{
						"$ref": "#/components/schemas/ResultError_string_"
					}
				]
			},
			"KafkaSettings": {
				"properties": {
					"miniBatchSize": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"miniBatchSize"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AzureExperiment": {
				"properties": {
					"azureBaseUri": {
						"type": "string"
					},
					"azureApiVersion": {
						"type": "string"
					},
					"azureDeploymentName": {
						"type": "string"
					},
					"azureApiKey": {
						"type": "string"
					}
				},
				"required": [
					"azureBaseUri",
					"azureApiVersion",
					"azureDeploymentName",
					"azureApiKey"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiKey": {
				"properties": {
					"apiKey": {
						"type": "string"
					}
				},
				"required": [
					"apiKey"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Setting": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/KafkaSettings"
					},
					{
						"$ref": "#/components/schemas/AzureExperiment"
					},
					{
						"$ref": "#/components/schemas/ApiKey"
					}
				]
			},
			"SettingName": {
				"type": "string",
				"enum": [
					"kafka:dlq",
					"kafka:log",
					"kafka:score",
					"kafka:dlq:score",
					"kafka:dlq:eu",
					"kafka:log:eu",
					"kafka:orgs-to-dlq",
					"azure:experiment",
					"openai:apiKey",
					"anthropic:apiKey",
					"openrouter:apiKey"
				],
				"nullable": false
			},
			"url.URL": {
				"type": "string",
				"description": "The URL interface represents an object providing static methods used for creating object URLs.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL)\n`URL` class is a global reference for `import { URL } from 'node:url'`\nhttps://nodejs.org/api/url.html#the-whatwg-url-api"
			}
		},
		"securitySchemes": {
			"api_key": {
				"type": "apiKey",
				"name": "authorization",
				"in": "header"
			}
		}
	},
	"info": {
		"title": "helicone-api",
		"version": "1.0.0",
		"license": {
			"name": "MIT"
		},
		"contact": {}
	},
	"paths": {
		"/v1/evaluator": {
			"post": {
				"operationId": "CreateEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_EvaluatorResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateEvaluatorParams"
							}
						}
					}
				}
			}
		},
		"/v1/evaluator/{evaluatorId}": {
			"get": {
				"operationId": "GetEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_EvaluatorResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_EvaluatorResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateEvaluatorParams"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/evaluator/query": {
			"post": {
				"operationId": "QueryEvaluators",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_EvaluatorResult-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/evaluator/{evaluatorId}/experiments": {
			"get": {
				"operationId": "GetExperimentsForEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_EvaluatorExperiment-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/evaluator/{evaluatorId}/onlineEvaluators": {
			"get": {
				"operationId": "GetOnlineEvaluators",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_OnlineEvaluatorByEvaluatorId-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateOnlineEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOnlineEvaluatorParams"
							}
						}
					}
				}
			}
		},
		"/v1/evaluator/{evaluatorId}/onlineEvaluators/{onlineEvaluatorId}": {
			"delete": {
				"operationId": "DeleteOnlineEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "onlineEvaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/evaluator/python/test": {
			"post": {
				"operationId": "TestPythonEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__output-string--traces-string-Array--statusCode_63_-number_.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"testInput": {
										"$ref": "#/components/schemas/TestInput"
									},
									"code": {
										"type": "string"
									}
								},
								"required": [
									"testInput",
									"code"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/evaluator/llm/test": {
			"post": {
				"operationId": "TestLLMEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EvaluatorScoreResult"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"evaluatorName": {
										"type": "string"
									},
									"testInput": {
										"$ref": "#/components/schemas/TestInput"
									},
									"evaluatorConfig": {
										"$ref": "#/components/schemas/EvaluatorConfig"
									}
								},
								"required": [
									"evaluatorName",
									"testInput",
									"evaluatorConfig"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/evaluator/lastmile/test": {
			"post": {
				"operationId": "TestLastMileEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__score-number--input-string--output-string--ground_truth_63_-string_.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"testInput": {
										"$ref": "#/components/schemas/TestInput"
									},
									"config": {
										"$ref": "#/components/schemas/LastMileConfigForm"
									}
								},
								"required": [
									"testInput",
									"config"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/evaluator/{evaluatorId}/stats": {
			"get": {
				"operationId": "GetEvaluatorStats",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_EvaluatorStats.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Evaluator"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/create/empty": {
			"post": {
				"operationId": "CreateEmptyExperiment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__experimentId-string_.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v2/experiment/create/from-request/{requestId}": {
			"post": {
				"operationId": "CreateExperimentFromRequest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__experimentId-string_.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "requestId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/new": {
			"post": {
				"operationId": "CreateNewExperiment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__experimentId-string_.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"originalPromptVersion": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								},
								"required": [
									"originalPromptVersion",
									"name"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment": {
			"get": {
				"operationId": "GetExperiments",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_ExperimentV2-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v2/experiment/{experimentId}": {
			"delete": {
				"operationId": "DeleteExperiment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"get": {
				"operationId": "GetExperimentById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_ExtendedExperimentData.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/prompt-version": {
			"post": {
				"operationId": "CreateNewPromptVersionForExperiment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateNewPromptVersionForExperimentParams"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/prompt-version/{promptVersionId}": {
			"delete": {
				"operationId": "DeletePromptVersion",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/prompt-versions": {
			"get": {
				"operationId": "GetPromptVersionsForExperiment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_ExperimentV2PromptVersion-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/input-keys": {
			"get": {
				"operationId": "GetInputKeysForExperiment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_string-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/add-manual-row": {
			"post": {
				"operationId": "AddManualRowToExperiment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_string.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"inputs": {
										"$ref": "#/components/schemas/Record_string.string_"
									}
								},
								"required": [
									"inputs"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/add-manual-rows-batch": {
			"post": {
				"operationId": "AddManualRowsToExperimentBatch",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"inputs": {
										"items": {
											"$ref": "#/components/schemas/Record_string.string_"
										},
										"type": "array"
									}
								},
								"required": [
									"inputs"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/rows": {
			"delete": {
				"operationId": "DeleteExperimentTableRows",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"inputRecordIds": {
										"items": {
											"type": "string"
										},
										"type": "array"
									}
								},
								"required": [
									"inputRecordIds"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/row/insert/batch": {
			"post": {
				"operationId": "CreateExperimentTableRowBatch",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"rows": {
										"items": {
											"properties": {
												"autoInputs": {
													"items": {},
													"type": "array"
												},
												"inputs": {
													"$ref": "#/components/schemas/Record_string.string_"
												},
												"inputRecordId": {
													"type": "string"
												}
											},
											"required": [
												"autoInputs",
												"inputs",
												"inputRecordId"
											],
											"type": "object"
										},
										"type": "array"
									}
								},
								"required": [
									"rows"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/row/insert/dataset/{datasetId}": {
			"post": {
				"operationId": "CreateExperimentTableRowFromDataset",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "datasetId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/row/update": {
			"post": {
				"operationId": "UpdateExperimentTableRow",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"inputs": {
										"$ref": "#/components/schemas/Record_string.string_"
									},
									"inputRecordId": {
										"type": "string"
									}
								},
								"required": [
									"inputs",
									"inputRecordId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/run-hypothesis": {
			"post": {
				"operationId": "RunHypothesis",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_string.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"inputRecordId": {
										"type": "string"
									},
									"promptVersionId": {
										"type": "string"
									}
								},
								"required": [
									"inputRecordId",
									"promptVersionId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/evaluators": {
			"get": {
				"operationId": "GetExperimentEvaluators",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_EvaluatorResult-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateExperimentEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"evaluatorId": {
										"type": "string"
									}
								},
								"required": [
									"evaluatorId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v2/experiment/{experimentId}/evaluators/{evaluatorId}": {
			"delete": {
				"operationId": "DeleteExperimentEvaluator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "evaluatorId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/evaluators/run": {
			"post": {
				"operationId": "RunExperimentEvaluators",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/should-run-evaluators": {
			"get": {
				"operationId": "ShouldRunEvaluators",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_boolean.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/{promptVersionId}/scores": {
			"get": {
				"operationId": "GetExperimentPromptVersionScores",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_Record_string.ScoreV2_.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/experiment/{experimentId}/{requestId}/{scoreKey}": {
			"get": {
				"operationId": "GetExperimentScore",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_ScoreV2-or-null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Experiment"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "experimentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "requestId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "scoreKey",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/request/query": {
			"post": {
				"operationId": "GetRequests",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_HeliconeRequest-Array.string_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"filter": "all",
											"isCached": false,
											"limit": 10,
											"offset": 0,
											"sort": {
												"created_at": "desc"
											},
											"isScored": false,
											"isPartOfExperiment": false
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Request query filters",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RequestQueryParams",
								"description": "Request query filters"
							},
							"example": {
								"filter": "all",
								"isCached": false,
								"limit": 10,
								"offset": 0,
								"sort": {
									"created_at": "desc"
								},
								"isScored": false,
								"isPartOfExperiment": false
							}
						}
					}
				}
			}
		},
		"/v1/request/query-clickhouse": {
			"post": {
				"operationId": "GetRequestsClickhouse",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_HeliconeRequest-Array.string_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"filter": "all",
											"isCached": false,
											"limit": 10,
											"offset": 0,
											"sort": {
												"created_at": "desc"
											},
											"isScored": false,
											"isPartOfExperiment": false
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Request query filters",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RequestQueryParams",
								"description": "Request query filters"
							},
							"example": {
								"filter": "all",
								"isCached": false,
								"limit": 100,
								"offset": 0,
								"sort": {
									"created_at": "desc"
								},
								"includeInputs": false,
								"isScored": false,
								"isPartOfExperiment": false
							}
						}
					}
				}
			}
		},
		"/v1/request/{requestId}": {
			"get": {
				"operationId": "GetRequestById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_HeliconeRequest.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "requestId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "includeBody",
						"required": false,
						"schema": {
							"default": false,
							"type": "boolean"
						}
					}
				]
			}
		},
		"/v1/request/query-ids": {
			"post": {
				"operationId": "GetRequestsByIds",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_HeliconeRequest-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"requestIds": {
										"items": {
											"type": "string"
										},
										"type": "array"
									}
								},
								"required": [
									"requestIds"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/request/{requestId}/feedback": {
			"post": {
				"operationId": "FeedbackRequest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "requestId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"rating": {
										"type": "boolean"
									}
								},
								"required": [
									"rating"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/request/{requestId}/property": {
			"put": {
				"operationId": "PutProperty",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "requestId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"value": {
										"type": "string"
									},
									"key": {
										"type": "string"
									}
								},
								"required": [
									"value",
									"key"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/request/{requestId}/assets/{assetId}": {
			"post": {
				"operationId": "GetRequestAssetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_HeliconeRequestAsset.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "requestId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "assetId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/request/{requestId}/score": {
			"post": {
				"operationId": "AddScores",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Request"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "requestId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ScoreRequest"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/query": {
			"post": {
				"operationId": "GetPrompts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptsResult-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptsQueryParams"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/{promptId}/query": {
			"post": {
				"operationId": "GetPrompt",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptQueryParams"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/{promptId}": {
			"delete": {
				"operationId": "DeletePrompt",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/prompt/create": {
			"post": {
				"operationId": "CreatePrompt",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_CreatePromptResponse.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"metadata": {
										"$ref": "#/components/schemas/Record_string.any_"
									},
									"prompt": {},
									"userDefinedId": {
										"type": "string"
									}
								},
								"required": [
									"metadata",
									"prompt",
									"userDefinedId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/{promptId}/user-defined-id": {
			"patch": {
				"operationId": "UpdatePromptUserDefinedId",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"userDefinedId": {
										"type": "string"
									}
								},
								"required": [
									"userDefinedId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/version/{promptVersionId}/edit-label": {
			"post": {
				"operationId": "EditPromptVersionLabel",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__metadata-Record_string.any__.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptEditSubversionLabelParams"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/version/{promptVersionId}/edit-template": {
			"post": {
				"operationId": "EditPromptVersionTemplate",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptEditSubversionTemplateParams"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/version/{promptVersionId}/subversion-from-ui": {
			"post": {
				"operationId": "CreateSubversionFromUi",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptCreateSubversionParams"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/version/{promptVersionId}/subversion": {
			"post": {
				"operationId": "CreateSubversion",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptCreateSubversionParams"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/version/{promptVersionId}/promote": {
			"post": {
				"operationId": "PromotePromptVersionToProduction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"previousProductionVersionId": {
										"type": "string"
									}
								},
								"required": [
									"previousProductionVersionId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/version/{promptVersionId}/inputs/query": {
			"post": {
				"operationId": "GetInputs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptInputRecord-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"random": {
										"type": "boolean"
									},
									"limit": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"limit"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/{promptId}/experiments": {
			"get": {
				"operationId": "GetPromptExperiments",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/prompt/{promptId}/versions/query": {
			"post": {
				"operationId": "GetPromptVersions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResult-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptVersionsQueryParams"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/version/{promptVersionId}": {
			"get": {
				"operationId": "GetPromptVersion",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResult.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeletePromptVersion",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "promptVersionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/prompt/{user_defined_id}/compile": {
			"post": {
				"operationId": "GetPromptVersionsCompiled",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResultCompiled.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "user_defined_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptVersiosQueryParamsCompiled"
							}
						}
					}
				}
			}
		},
		"/v1/prompt/{user_defined_id}/template": {
			"post": {
				"operationId": "GetPromptVersionTemplates",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_PromptVersionResultFilled.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Prompt"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "user_defined_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromptVersiosQueryParamsCompiled"
							}
						}
					}
				}
			}
		},
		"/v1/settings/query": {
			"get": {
				"operationId": "GetSettings",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"useAzureForExperiment": {
											"type": "boolean"
										}
									},
									"required": [
										"useAzureForExperiment"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Settings"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/cost-for-prompts": {
			"get": {
				"operationId": "GetCostForPrompts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/cost-for-evals": {
			"get": {
				"operationId": "GetCostForEvals",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/cost-for-experiments": {
			"get": {
				"operationId": "GetCostForExperiments",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/free/usage": {
			"get": {
				"operationId": "GetFreeUsage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/new-customer/upgrade-to-pro": {
			"post": {
				"operationId": "UpgradeToPro",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpgradeToProRequest"
							}
						}
					}
				}
			}
		},
		"/v1/stripe/subscription/existing-customer/upgrade-to-pro": {
			"post": {
				"operationId": "UpgradeExistingCustomer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpgradeToProRequest"
							}
						}
					}
				}
			}
		},
		"/v1/stripe/subscription/new-customer/upgrade-to-team-bundle": {
			"post": {
				"operationId": "UpgradeToTeamBundle",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpgradeToTeamBundleRequest"
							}
						}
					}
				}
			}
		},
		"/v1/stripe/subscription/existing-customer/upgrade-to-team-bundle": {
			"post": {
				"operationId": "UpgradeExistingCustomerToTeamBundle",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpgradeToTeamBundleRequest"
							}
						}
					}
				}
			}
		},
		"/v1/stripe/subscription/manage-subscription": {
			"post": {
				"operationId": "ManageSubscription",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/undo-cancel-subscription": {
			"post": {
				"operationId": "UndoCancelSubscription",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"enum": [
										null
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/add-ons/{productType}": {
			"post": {
				"operationId": "AddOns",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"enum": [
										null
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "productType",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"alerts",
								"prompts",
								"experiments",
								"evals"
							]
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteAddOns",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"enum": [
										null
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "productType",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"alerts",
								"prompts",
								"experiments",
								"evals"
							]
						}
					}
				]
			}
		},
		"/v1/stripe/subscription/preview-invoice": {
			"get": {
				"operationId": "PreviewInvoice",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"evaluators_usage": {
											"items": {
												"$ref": "#/components/schemas/LLMUsage"
											},
											"type": "array"
										},
										"experiments_usage": {
											"items": {
												"$ref": "#/components/schemas/LLMUsage"
											},
											"type": "array"
										},
										"total": {
											"type": "number",
											"format": "double"
										},
										"tax": {
											"type": "number",
											"format": "double",
											"nullable": true
										},
										"subtotal": {
											"type": "number",
											"format": "double"
										},
										"discount": {
											"properties": {
												"coupon": {
													"properties": {
														"amount_off": {
															"type": "number",
															"format": "double",
															"nullable": true
														},
														"percent_off": {
															"type": "number",
															"format": "double",
															"nullable": true
														},
														"name": {
															"type": "string",
															"nullable": true
														}
													},
													"required": [
														"amount_off",
														"percent_off",
														"name"
													],
													"type": "object"
												}
											},
											"required": [
												"coupon"
											],
											"type": "object",
											"nullable": true
										},
										"lines": {
											"properties": {
												"data": {
													"items": {
														"properties": {
															"description": {
																"type": "string",
																"nullable": true
															},
															"amount": {
																"type": "number",
																"format": "double",
																"nullable": true
															},
															"id": {
																"type": "string",
																"nullable": true
															}
														},
														"required": [
															"description",
															"amount",
															"id"
														],
														"type": "object"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object",
											"nullable": true
										},
										"next_payment_attempt": {
											"type": "number",
											"format": "double",
											"nullable": true
										},
										"currency": {
											"type": "string",
											"nullable": true
										}
									},
									"required": [
										"evaluators_usage",
										"experiments_usage",
										"total",
										"tax",
										"subtotal",
										"discount",
										"lines",
										"next_payment_attempt",
										"currency"
									],
									"type": "object",
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/cancel-subscription": {
			"post": {
				"operationId": "CancelSubscription",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"enum": [
										null
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription/migrate-to-pro": {
			"post": {
				"operationId": "MigrateToPro",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/subscription": {
			"get": {
				"operationId": "GetSubscription",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"items": {
											"items": {
												"properties": {
													"price": {
														"properties": {
															"product": {
																"properties": {
																	"name": {
																		"type": "string",
																		"nullable": true
																	}
																},
																"required": [
																	"name"
																],
																"type": "object",
																"nullable": true
															}
														},
														"required": [
															"product"
														],
														"type": "object"
													},
													"quantity": {
														"type": "number",
														"format": "double"
													}
												},
												"required": [
													"price"
												],
												"type": "object"
											},
											"type": "array"
										},
										"trial_end": {
											"type": "number",
											"format": "double",
											"nullable": true
										},
										"id": {
											"type": "string"
										},
										"current_period_start": {
											"type": "number",
											"format": "double"
										},
										"current_period_end": {
											"type": "number",
											"format": "double"
										},
										"cancel_at_period_end": {
											"type": "boolean"
										},
										"status": {
											"type": "string"
										}
									},
									"required": [
										"items",
										"trial_end",
										"id",
										"current_period_start",
										"current_period_end",
										"cancel_at_period_end",
										"status"
									],
									"type": "object",
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/stripe/webhook": {
			"post": {
				"operationId": "HandleStripeWebhook",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Stripe"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {}
						}
					}
				}
			}
		},
		"/v1/organization/user/accept_terms": {
			"post": {
				"operationId": "AcceptTerms",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/organization/create": {
			"post": {
				"operationId": "CreateNewOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_string.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NewOrganizationParams"
							}
						}
					}
				}
			}
		},
		"/v1/organization/{organizationId}/update": {
			"post": {
				"operationId": "UpdateOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateOrganizationParams"
							}
						}
					}
				}
			}
		},
		"/v1/organization/onboard": {
			"post": {
				"operationId": "OnboardOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/organization/{organizationId}/add_member": {
			"post": {
				"operationId": "AddMemberToOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"email": {
										"type": "string"
									}
								},
								"required": [
									"email"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/organization/{organizationId}/create_filter": {
			"post": {
				"operationId": "CreateOrganizationFilter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"filterType": {
										"type": "string",
										"enum": [
											"dashboard",
											"requests"
										]
									},
									"filters": {
										"items": {
											"$ref": "#/components/schemas/OrganizationFilter"
										},
										"type": "array"
									}
								},
								"required": [
									"filterType",
									"filters"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/organization/{organizationId}/update_filter": {
			"post": {
				"operationId": "UpdateOrganizationFilter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"filterType": {
										"type": "string",
										"enum": [
											"dashboard",
											"requests"
										]
									},
									"filters": {
										"items": {
											"$ref": "#/components/schemas/OrganizationFilter"
										},
										"type": "array"
									}
								},
								"required": [
									"filterType",
									"filters"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/organization/delete": {
			"delete": {
				"operationId": "DeleteOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/organization/{organizationId}/layout": {
			"get": {
				"operationId": "GetOrganizationLayout",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_OrganizationLayout.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "filterType",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/organization/{organizationId}/members": {
			"get": {
				"operationId": "GetOrganizationMembers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_OrganizationMember-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/organization/{organizationId}/update_member": {
			"post": {
				"operationId": "UpdateOrganizationMember",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"memberId": {
										"type": "string"
									},
									"role": {
										"type": "string"
									}
								},
								"required": [
									"memberId",
									"role"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/organization/{organizationId}/owner": {
			"get": {
				"operationId": "GetOrganizationOwner",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_OrganizationOwner-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/organization/{organizationId}/remove_member": {
			"delete": {
				"operationId": "RemoveMemberFromOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "memberId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/organization/setup-demo": {
			"post": {
				"operationId": "SetupDemo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/organization/update_onboarding": {
			"post": {
				"operationId": "UpdateOnboardingStatus",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"has_onboarded": {
										"type": "boolean"
									},
									"name": {
										"type": "string"
									},
									"onboarding_status": {
										"$ref": "#/components/schemas/OnboardingStatus"
									}
								},
								"required": [
									"has_onboarded",
									"name",
									"onboarding_status"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/log/request": {
			"post": {
				"operationId": "GetRequests",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Log"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Log message to log",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/KafkaMessageContents",
								"description": "Log message to log"
							}
						}
					}
				}
			}
		},
		"/v1/gov-organization/limits/member/{memberId}": {
			"post": {
				"operationId": "SetMemberLimits",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResultSuccess_unknown_"
										},
										{
											"$ref": "#/components/schemas/ResultError_unknown_"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Gov Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "memberId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"days": {
										"type": "number",
										"format": "double"
									},
									"limitUSD": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"days",
									"limitUSD"
								],
								"type": "object"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetMemberLimits",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostgrestSingleResponse__created_at-string--governance_limits-Json--member-string--org_role-string--organization-string__"
								}
							}
						}
					}
				},
				"tags": [
					"Gov Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "memberId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/gov-organization/my-limits": {
			"get": {
				"operationId": "GetMyLimits",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostgrestSingleResponse__created_at-string--governance_limits-Json--member-string--org_role-string--organization-string__"
								}
							}
						}
					}
				},
				"tags": [
					"Gov Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/gov-organization/is-governance-org": {
			"get": {
				"operationId": "IsGovernanceOrg",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostgrestSingleResponse__governance_settings-Json__"
								}
							}
						}
					}
				},
				"tags": [
					"Gov Organization"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/key/generateHash": {
			"post": {
				"operationId": "GenerateHash",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {
											"properties": {
												"details": {
													"type": "string"
												},
												"message": {
													"type": "string"
												}
											},
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Utils"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GenerateHashQueryParams"
							}
						}
					}
				}
			}
		},
		"/v1/dataset/{datasetId}/fine-tune": {
			"post": {
				"operationId": "DatasetFineTune",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FineTuneResult"
								}
							}
						}
					}
				},
				"tags": [
					"FineTune",
					"Dataset"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "datasetId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FineTuneBodyParams"
							}
						}
					}
				}
			}
		},
		"/v1/fine-tune": {
			"post": {
				"operationId": "FineTune",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"error": {
													"type": "string"
												}
											},
											"required": [
												"error"
											],
											"type": "object"
										},
										{
											"properties": {
												"data": {
													"properties": {
														"url": {
															"type": "string"
														},
														"fineTuneJob": {
															"type": "string"
														}
													},
													"required": [
														"url",
														"fineTuneJob"
													],
													"type": "object"
												},
												"success": {
													"type": "boolean"
												}
											},
											"required": [
												"data",
												"success"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"FineTune"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FineTuneBody"
							}
						}
					}
				}
			}
		},
		"/v1/fine-tune/{jobId}/stats": {
			"get": {
				"operationId": "FineTuneJobStats",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"error": {
													"type": "string"
												}
											},
											"required": [
												"error"
											],
											"type": "object"
										},
										{
											"properties": {
												"events": {},
												"job": {}
											},
											"required": [
												"events",
												"job"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"FineTune"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "jobId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/filter": {
			"get": {
				"operationId": "GetFilters",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_StoreFilterType-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Filter"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateFilter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__id-string_.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Filter"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/StoreFilterType"
							}
						}
					}
				}
			}
		},
		"/v1/filter/{id}": {
			"get": {
				"operationId": "GetFilter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_StoreFilterType.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Filter"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteFilter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Filter"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"patch": {
				"operationId": "UpdateFilter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Filter"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"filters": {}
								},
								"required": [
									"filters"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/demo/completion": {
			"post": {
				"operationId": "DemoCompletion",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_ChatCompletion.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Demo",
					"Demo"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"cache_enabled": {
										"type": "boolean"
									},
									"max_tokens": {
										"type": "number",
										"format": "double"
									},
									"tool_choice": {
										"$ref": "#/components/schemas/ChatCompletionToolChoiceOption"
									},
									"tools": {
										"items": {
											"$ref": "#/components/schemas/ChatCompletionTool"
										},
										"type": "array"
									},
									"sessionPath": {
										"type": "string"
									},
									"sessionName": {
										"type": "string"
									},
									"sessionId": {
										"type": "string"
									},
									"userEmail": {
										"type": "string"
									},
									"promptId": {
										"type": "string"
									},
									"messages": {
										"items": {
											"$ref": "#/components/schemas/ChatCompletionMessageParam"
										},
										"type": "array"
									}
								},
								"required": [
									"promptId",
									"messages"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/alert/query": {
			"get": {
				"operationId": "GetAlerts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_AlertResponse.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Alert"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/alert/create": {
			"post": {
				"operationId": "CreateAlert",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_string.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Alert"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AlertRequest"
							}
						}
					}
				}
			}
		},
		"/v1/alert/{alertId}": {
			"delete": {
				"operationId": "DeleteAlert",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result_null.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Alert"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "alertId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/admin/feature-flags": {
			"post": {
				"operationId": "UpdateFeatureFlags",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"orgId": {
										"type": "string"
									},
									"flag": {
										"type": "string"
									}
								},
								"required": [
									"orgId",
									"flag"
								],
								"type": "object"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteFeatureFlag",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"orgId": {
										"type": "string"
									},
									"flag": {
										"type": "string"
									}
								},
								"required": [
									"orgId",
									"flag"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/feature-flags/query": {
			"post": {
				"operationId": "GetFeatureFlags",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Result__organization_id-string--name-string--flags-string-Array_-Array.string_"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/admin/orgs/top-usage": {
			"post": {
				"operationId": "GetTopOrgsByUsage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"organizations": {
											"items": {
												"properties": {
													"usage": {
														"properties": {
															"all_time_count": {
																"type": "number",
																"format": "double"
															},
															"monthly_usage": {
																"items": {
																	"properties": {
																		"requestCount": {
																			"type": "number",
																			"format": "double"
																		},
																		"month": {
																			"type": "string"
																		}
																	},
																	"required": [
																		"requestCount",
																		"month"
																	],
																	"type": "object"
																},
																"type": "array"
															},
															"requests_last_30_days": {
																"type": "number",
																"format": "double"
															},
															"total_requests": {
																"type": "number",
																"format": "double"
															}
														},
														"required": [
															"all_time_count",
															"monthly_usage",
															"requests_last_30_days",
															"total_requests"
														],
														"type": "object"
													},
													"organization": {
														"properties": {
															"members": {
																"items": {
																	"properties": {
																		"last_sign_in_at": {
																			"type": "string",
																			"nullable": true
																		},
																		"role": {
																			"type": "string"
																		},
																		"name": {
																			"type": "string"
																		},
																		"email": {
																			"type": "string"
																		},
																		"id": {
																			"type": "string"
																		}
																	},
																	"required": [
																		"last_sign_in_at",
																		"role",
																		"name",
																		"email",
																		"id"
																	],
																	"type": "object"
																},
																"type": "array"
															},
															"subscription_status": {
																"type": "string",
																"nullable": true
															},
															"stripe_subscription_id": {
																"type": "string",
																"nullable": true
															},
															"stripe_customer_id": {
																"type": "string",
																"nullable": true
															},
															"tier": {
																"type": "string"
															},
															"owner": {
																"type": "string"
															},
															"created_at": {
																"type": "string"
															},
															"name": {
																"type": "string"
															},
															"id": {
																"type": "string"
															}
														},
														"required": [
															"members",
															"subscription_status",
															"stripe_subscription_id",
															"stripe_customer_id",
															"tier",
															"owner",
															"created_at",
															"name",
															"id"
														],
														"type": "object"
													}
												},
												"required": [
													"usage",
													"organization"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"required": [
										"organizations"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"minRequests": {
										"type": "number",
										"format": "double"
									},
									"limit": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"minRequests",
									"limit"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/orgs/top": {
			"post": {
				"operationId": "GetTopOrgs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"properties": {
											"ct": {
												"type": "number",
												"format": "double"
											},
											"organization_id": {
												"type": "string"
											},
											"members": {
												"items": {
													"properties": {
														"last_active": {
															"type": "string"
														},
														"role": {
															"type": "string"
														},
														"email": {
															"type": "string"
														},
														"id": {
															"type": "string"
														}
													},
													"required": [
														"last_active",
														"role",
														"email",
														"id"
													],
													"type": "object"
												},
												"type": "array"
											},
											"name": {
												"type": "string"
											},
											"owner_last_login": {
												"type": "string"
											},
											"owner_email": {
												"type": "string"
											},
											"tier": {
												"type": "string"
											},
											"id": {
												"type": "string"
											},
											"overTime": {
												"items": {
													"properties": {
														"organization_id": {
															"type": "string"
														},
														"dt": {
															"type": "string"
														},
														"count": {
															"type": "number",
															"format": "double"
														}
													},
													"required": [
														"organization_id",
														"dt",
														"count"
													],
													"type": "object"
												},
												"type": "array"
											}
										},
										"required": [
											"ct",
											"organization_id",
											"members",
											"name",
											"owner_last_login",
											"owner_email",
											"tier",
											"id",
											"overTime"
										],
										"type": "object"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"emailContains": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"orgsNameContains": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"orgsId": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"tier": {
										"type": "string",
										"enum": [
											"all",
											"pro",
											"free",
											"growth",
											"enterprise"
										]
									},
									"endDate": {
										"type": "string"
									},
									"startDate": {
										"type": "string"
									}
								},
								"required": [
									"tier",
									"endDate",
									"startDate"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/admins/query": {
			"get": {
				"operationId": "GetAdmins",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"properties": {
											"user_id": {
												"type": "string",
												"nullable": true
											},
											"user_email": {
												"type": "string",
												"nullable": true
											},
											"id": {
												"type": "number",
												"format": "double"
											},
											"created_at": {
												"type": "string"
											}
										},
										"required": [
											"user_id",
											"user_email",
											"id",
											"created_at"
										],
										"type": "object"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/v1/admin/whodis": {
			"post": {
				"operationId": "Whodis",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"organizations": {
											"items": {
												"properties": {
													"usage": {
														"properties": {
															"all_time_count": {
																"type": "number",
																"format": "double"
															},
															"monthly_usage": {
																"items": {
																	"properties": {
																		"requestCount": {
																			"type": "number",
																			"format": "double"
																		},
																		"month": {
																			"type": "string"
																		}
																	},
																	"required": [
																		"requestCount",
																		"month"
																	],
																	"type": "object"
																},
																"type": "array"
															},
															"requests_last_30_days": {
																"type": "number",
																"format": "double"
															},
															"total_requests": {
																"type": "number",
																"format": "double"
															}
														},
														"required": [
															"all_time_count",
															"monthly_usage",
															"requests_last_30_days",
															"total_requests"
														],
														"type": "object"
													},
													"organization": {
														"properties": {
															"members": {
																"items": {
																	"properties": {
																		"last_sign_in_at": {
																			"type": "string",
																			"nullable": true
																		},
																		"role": {
																			"type": "string"
																		},
																		"name": {
																			"type": "string"
																		},
																		"email": {
																			"type": "string"
																		},
																		"id": {
																			"type": "string"
																		}
																	},
																	"required": [
																		"last_sign_in_at",
																		"role",
																		"name",
																		"email",
																		"id"
																	],
																	"type": "object"
																},
																"type": "array"
															},
															"subscription_status": {
																"type": "string",
																"nullable": true
															},
															"stripe_subscription_id": {
																"type": "string",
																"nullable": true
															},
															"stripe_customer_id": {
																"type": "string",
																"nullable": true
															},
															"tier": {
																"type": "string"
															},
															"owner": {
																"type": "string"
															},
															"created_at": {
																"type": "string"
															},
															"name": {
																"type": "string"
															},
															"id": {
																"type": "string"
															}
														},
														"required": [
															"members",
															"subscription_status",
															"stripe_subscription_id",
															"stripe_customer_id",
															"tier",
															"owner",
															"created_at",
															"name",
															"id"
														],
														"type": "object"
													}
												},
												"required": [
													"usage",
													"organization"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"required": [
										"organizations"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"email": {
										"type": "string"
									},
									"userId": {
										"type": "string"
									},
									"organizationId": {
										"type": "string"
									}
								},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/settings/{name}": {
			"get": {
				"operationId": "GetSetting",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Setting"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/SettingName"
						}
					}
				]
			}
		},
		"/v1/admin/azure/run-test": {
			"post": {
				"operationId": "AzureTest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"fetchParams": {
											"properties": {
												"body": {
													"type": "string"
												},
												"headers": {
													"properties": {},
													"additionalProperties": {
														"type": "string"
													},
													"type": "object"
												},
												"url": {
													"$ref": "#/components/schemas/url.URL"
												}
											},
											"required": [
												"body",
												"headers",
												"url"
											],
											"type": "object"
										},
										"resultText": {
											"type": "string"
										}
									},
									"required": [
										"fetchParams",
										"resultText"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"requestBody": {}
								},
								"required": [
									"requestBody"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/settings": {
			"post": {
				"operationId": "UpdateSetting",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"settings": {
										"$ref": "#/components/schemas/Setting"
									},
									"name": {
										"$ref": "#/components/schemas/SettingName"
									}
								},
								"required": [
									"settings",
									"name"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/orgs/query": {
			"post": {
				"operationId": "FindAllOrgs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"orgs": {
											"items": {
												"properties": {
													"id": {
														"type": "string"
													},
													"name": {
														"type": "string"
													}
												},
												"required": [
													"id",
													"name"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"required": [
										"orgs"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"orgName": {
										"type": "string"
									}
								},
								"required": [
									"orgName"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/orgs/over-time/query": {
			"post": {
				"operationId": "NewOrgsOverTime",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"usersOverTime": {
											"items": {
												"properties": {
													"day": {
														"type": "string"
													},
													"count": {
														"type": "string"
													}
												},
												"required": [
													"day",
													"count"
												],
												"type": "object"
											},
											"type": "array"
										},
										"newUsersOvertime": {
											"items": {
												"properties": {
													"day": {
														"type": "string"
													},
													"count": {
														"type": "string"
													}
												},
												"required": [
													"day",
													"count"
												],
												"type": "object"
											},
											"type": "array"
										},
										"newOrgsOvertime": {
											"items": {
												"properties": {
													"day": {
														"type": "string"
													},
													"count": {
														"type": "string"
													}
												},
												"required": [
													"day",
													"count"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"required": [
										"usersOverTime",
										"newUsersOvertime",
										"newOrgsOvertime"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"groupBy": {
										"type": "string",
										"enum": [
											"hour",
											"day",
											"week",
											"month"
										]
									},
									"timeFilter": {
										"type": "string",
										"enum": [
											"1 days",
											"7 days",
											"1 month",
											"3 months",
											"6 months",
											"12 months",
											"24 months"
										]
									}
								},
								"required": [
									"groupBy",
									"timeFilter"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/admins/org/query": {
			"post": {
				"operationId": "AddAdminsToOrg",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"adminIds": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"orgId": {
										"type": "string"
									}
								},
								"required": [
									"adminIds",
									"orgId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/alert_banners": {
			"post": {
				"operationId": "CreateAlertBanner",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"message": {
										"type": "string"
									},
									"title": {
										"type": "string"
									}
								},
								"required": [
									"message",
									"title"
								],
								"type": "object"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "UpdateAlertBanner",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"active": {
										"type": "boolean"
									},
									"id": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"active",
									"id"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/admin/top-orgs-over-time": {
			"post": {
				"operationId": "GetTopOrgsOverTime",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"organizations": {
											"items": {
												"properties": {
													"data": {
														"items": {
															"properties": {
																"request_count": {
																	"type": "number",
																	"format": "double"
																},
																"time": {
																	"type": "string"
																}
															},
															"required": [
																"request_count",
																"time"
															],
															"type": "object"
														},
														"type": "array"
													},
													"organization_name": {
														"type": "string"
													},
													"organization_id": {
														"type": "string"
													}
												},
												"required": [
													"data",
													"organization_name",
													"organization_id"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"required": [
										"organizations"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"groupBy": {
										"type": "string"
									},
									"limit": {
										"type": "number",
										"format": "double"
									},
									"timeRange": {
										"type": "string"
									}
								},
								"required": [
									"limit",
									"timeRange"
								],
								"type": "object"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "https://api.helicone.ai/"
		},
		{
			"url": "http://localhost:8585/"
		}
	]
}