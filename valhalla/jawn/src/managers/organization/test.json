{
  "message": "Based on the provided codebase, I can help analyze the integration requirements and select the appropriate prompts. Let's break this down according to the selection process:\n\n1. **LLM Providers Identified**:\nFrom `/lib/debate/api-clients.ts`, we can see:\n- OpenRouter (for accessing Gemini)\n- Perplexity\n\n2. **Programming Language**:\n- TypeScript/JavaScript (Next.js project)\n\n3. **Integration Methods**:\n- SDK-based integration using:\n  - `@openrouter/ai-sdk-provider`\n  - `@ai-sdk/perplexity`\n\n4. **Model Constants**:\n```typescript\nexport const GEMINI_MODEL = \"google/gemini-flash-1.5-8b\";\nexport const PERPLEXITY_MODEL = \"sonar\";\n```\n\nBased on this analysis, we should select the following integration prompts:\n\n1. For OpenRouter (Gemini access):\n```\nproviders/openrouter/typescript/direct/streaming.md\n```\nThis is because the codebase uses OpenRouter to access Gemini models with streaming capabilities (as seen in the research and simulation components).\n\n2. For Perplexity:\nSince there isn't a direct match in the provided directory structure, we should follow the fallback strategy:\n- Use a similar provider's SDK integration as a template\n- The closest match would be:\n```\nproviders/vercel-ai/typescript/sdk/integration.md\n```\nThis is because the codebase uses a similar SDK-based approach with the AI SDK.\n\nSpecial Considerations:\n\n1. **Streaming Support**:\nThe codebase implements streaming responses, as seen in:\n- `/app/api/debate/stream/route.ts`\n- The simulation and research components\n\n2. **Next.js Integration**:\nThe project is built with Next.js, so the integration should consider:\n- API routes implementation\n- Server-side vs client-side usage\n- Environment variable handling\n\n3. **Error Handling**:\nThe codebase includes robust error handling in:\n- Research functions\n- Simulation components\n- API routes\n\nRecommended Integration Approach:\n\n1. For OpenRouter/Gemini:\n```typescript\n// Current implementation\nexport const openrouter = createOpenRouter({\n  apiKey: process.env.OPENROUTER_API_KEY || \"\",\n});\n```\n\n2. For Perplexity:\n```typescript\n// Current implementation\nexport const perplexity = createPerplexity({\n  apiKey: process.env.PERPLEXITY_API_KEY || \"\",\n});\n```\n\nThe integration should maintain these patterns while adding Helicone:\n\n1. Add Helicone configuration:\n```typescript\n// Add to api-clients.ts\nimport { HeliconeAsyncClient } from '@helicone/sdk';\n\nexport const helicone = new HeliconeAsyncClient({\n  apiKey: process.env.HELICONE_API_KEY\n});\n```\n\n2. Wrap the existing clients with Helicone:\n```typescript\n// Modify the existing clients to include Helicone headers and tracking\nexport const openrouter = createOpenRouter({\n  apiKey: process.env.OPENROUTER_API_KEY || \"\",\n  headers: {\n    'Helicone-Auth': `Bearer ${process.env.HELICONE_API_KEY}`,\n    'Helicone-Cache-Enabled': 'true'\n  }\n});\n```\n\n3. For streaming implementations:\n```typescript\n// In stream/route.ts\nconst response = await generateText({\n  ...config,\n  headers: {\n    'Helicone-Auth': `Bearer ${process.env.HELICONE_API_KEY}`,\n    'Helicone-Stream-Force-Response': 'true'\n  }\n});\n```\n\nThis integration approach maintains the existing functionality while adding Helicone's monitoring and caching capabilities.",
  "sources": [
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/README.md",
      "linestart": null,
      "lineend": null,
      "summary": "# README for DebateAI Project\n\n## Overview\n\nThis repository contains a Next.js project named DebateAI, which has been initialized using the `create-next-app` command. Next.js is a popular React framework that enables server-side rendering and static site generation, making it ideal for building modern web applications.\n\n## Getting Started\n\nTo begin development with the DebateAI project, follow these steps:\n\n1. **Run the Development Server**: Use one of the following commands in your terminal to start the development server:\n\n   ```bash\n   npm run dev\n   # or\n   yarn dev\n   # or\n   pnpm dev\n   # or\n   bun dev\n   ```\n\n2. **Access the Application**: Open your web browser and navigate to [http://localhost:3000](http://localhost:3000) to view the application in action.\n\n3. **Editing the Page**: You can start modifying the main page by editing the file located at `app/page.tsx`. The application supports hot reloading, meaning that changes you make to this file will automatically reflect in the browser without needing a manual refresh.\n\n## Font Optimization\n\nThis project utilizes the `next/font` feature to automatically optimize and load the Geist font family, which is provided by Vercel. This ensures that the application has a consistent and visually appealing typography.\n\n## Additional Resources\n\nTo deepen your understanding of Next.js and its capabilities, consider exploring the following resources:\n\n- **[Next.js Documentation](https://nextjs.org/docs)**: Comprehensive documentation covering all features and APIs of Next.js.\n- **[Learn Next.js](https://nextjs.org/learn)**: An interactive tutorial designed to help you learn Next.js through hands-on experience.\n- **[Next.js GitHub Repository](https://github.com/vercel/next.js)**: The official repository where you can contribute and provide feedback.\n\n## Deployment\n\nFor deploying your Next.js application, the recommended approach is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme). Vercel is the platform created by the same team behind Next.js, making it the most seamless option for deployment.\n\nFor detailed instructions on deploying your application, refer to the [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying).\n\n---\n\nThis README provides a concise overview of the DebateAI project, including setup instructions, resources for learning, and deployment guidance. For further inquiries or contributions, please refer to the provided links.",
      "distance": 0.2781776472104619
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/lib/debate/api-clients.ts",
      "linestart": null,
      "lineend": null,
      "summary": "# Documentation for `api-clients.ts`\n\nThis TypeScript file, located in the `lib/debate` directory of the `helicone/debateai` repository, is responsible for setting up API clients that interact with external services. It imports necessary functions from external libraries and exports configured clients and model constants for use in other parts of the application.\n\n## Imports\n\n1. **createOpenRouter** from `@openrouter/ai-sdk-provider`\n   - This function is used to create an API client for the OpenRouter service, which provides access to the Gemini model.\n\n2. **createPerplexity** from `@ai-sdk/perplexity`\n   - This function is used to create an API client for the Perplexity service, which offers research capabilities.\n\n## Exports\n\n1. **openrouter**\n   - This is an instance of the OpenRouter API client created by calling `createOpenRouter`. It is configured with an API key that is retrieved from the environment variable `OPENROUTER_API_KEY`. If the environment variable is not set, it defaults to an empty string.\n\n   ```typescript\n   export const openrouter = createOpenRouter({\n     apiKey: process.env.OPENROUTER_API_KEY || \"\",\n   });\n   ```\n\n2. **perplexity**\n   - This is an instance of the Perplexity API client created by calling `createPerplexity`. It is similarly configured with an API key from the environment variable `PERPLEXITY_API_KEY`, defaulting to an empty string if not set.\n\n   ```typescript\n   export const perplexity = createPerplexity({\n     apiKey: process.env.PERPLEXITY_API_KEY || \"\",\n   });\n   ```\n\n3. **GEMINI_MODEL**\n   - This constant holds the string identifier for the Gemini model, specifically `\"google/gemini-flash-1.5-8b\"`. It is likely used to specify which model to interact with when making requests through the OpenRouter client.\n\n   ```typescript\n   export const GEMINI_MODEL = \"google/gemini-flash-1.5-8b\";\n   ```\n\n4. **PERPLEXITY_MODEL**\n   - This constant holds the string identifier for the Perplexity model, specifically `\"sonar\"`. It is used to specify the model for research capabilities when making requests through the Perplexity client.\n\n   ```typescript\n   export const PERPLEXITY_MODEL = \"sonar\";\n   ```\n\n## Summary\n\nThe `api-clients.ts` file sets up two API clients: one for the OpenRouter service and another for the Perplexity service. It exports these clients along with constants that define the models used for each service. The API keys for both clients are sourced from environment variables, ensuring that sensitive information is not hard-coded into the application. This structure allows for easy integration and interaction with external AI services within the application.",
      "distance": 0.26381249186581923
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/lib/debate/research.ts",
      "linestart": null,
      "lineend": null,
      "summary": "# Documentation for `research.ts`\n\nThis document provides a comprehensive overview of the `research.ts` file located in the `helicone/debateai` repository. The file is written in TypeScript and contains functions that facilitate research on debate topics using an external API. Below is a detailed description of the components, their interactions, and the imports and exports of the file.\n\n## Imports\n\nThe file imports the following components:\n\n1. **`generateText`** from the `\"ai\"` module: This function is used to interact with the Perplexity API to generate text based on a given prompt.\n2. **Types** from the local `\"./types\"` module:\n   - `Message`: Represents a message structure in the conversation.\n   - `ProgressCallback`: A callback type for reporting progress updates.\n   - `ResearchData`: Represents the structured data returned from research.\n   - `ResearchResult`: Represents the result of the research process.\n   - `SimulationUpdate`: Represents updates related to the simulation process.\n3. **`perplexity`** and **`PERPLEXITY_MODEL`** from the `\"./api-clients\"` module: These are used to configure the API call to the Perplexity service.\n\n## Exports\n\nThe file exports three components:\n\n1. **`sendProgressUpdate`**: A function that sends progress updates during the research process.\n2. **`conductResearch`**: An asynchronous function that conducts research on a specified debate topic.\n3. **`createResearchQuery`**: A function that generates a structured research query based on the topic, stance, and recent conversation context.\n\n## Functions\n\n### 1. `sendProgressUpdate`\n\n**Purpose**: Sends a progress update to a provided callback function if available.\n\n**Parameters**:\n- `callback?: ProgressCallback`: An optional callback function to handle the progress update.\n- `update?: Partial<SimulationUpdate>`: An optional object containing partial properties of the `SimulationUpdate` type.\n\n**Functionality**:\n- Checks if both `callback` and `update` are provided.\n- If both are present, it invokes the `callback` with an object that includes:\n  - `status`: A string indicating the current status (e.g., \"starting\").\n  - `message`: A message string (e.g., \"Starting simulation...\").\n  - `progress`: A number indicating the progress (initialized to 0).\n  - Additional properties from the `update` object.\n\n### 2. `conductResearch`\n\n**Purpose**: Conducts research on a debate topic using the Perplexity API and returns structured research data.\n\n**Parameters**:\n- `topic: string`: The subject matter for research.\n- `stance: \"for\" | \"against\"`: Indicates the user's position in the debate.\n- `context: Message[]`: An array of messages providing context for the research.\n- `progressCallback?: ProgressCallback`: An optional callback function for progress updates.\n\n**Returns**: A promise that resolves to an object containing:\n- `researchData`: An object with detailed research findings.\n- `query`: The generated research query string.\n\n**Functionality**:\n1. Extracts the last three messages from the context and identifies the most recent user message.\n2. Constructs a research query using the `createResearchQuery` function.\n3. Sends an initial progress update indicating that research is underway.\n4. Calls the `generateText` function to interact with the Perplexity API.\n5. Handles the API response, attempting to parse it as JSON. If parsing fails, it extracts structured data from the raw text response.\n6. Sends a final progress update upon successful completion of the research.\n7. Implements error handling to log errors and return a basic structure indicating failure if an error occurs.\n\n### 3. `createResearchQuery`\n\n**Purpose**: Generates a structured research query based on the specified topic, stance, and recent conversation context.\n\n**Parameters**:\n- `topic: string`: The subject matter of the debate.\n- `stance: \"for\" | \"against\"`: Indicates the user's position in the debate.\n- `lastUserMessage: string`: The most recent message from the user.\n- `lastMessages: Message[]`: An array of previous messages providing context.\n\n**Returns**: A formatted string that instructs the recipient to return a valid JSON object containing the requested research information.\n\n**Functionality**:\n- Extracts context from the last few messages and formats them.\n- Constructs a comprehensive research query that includes:\n  - The topic and stance.\n  - Recent conversation context.\n  - A detailed request for balanced research, including analysis, supporting evidence, counter-evidence, historical context, and a summary.\n\n## Summary\n\nThe `research.ts` file provides essential functions for conducting structured research on debate topics. It utilizes an external API to generate comprehensive research data while ensuring that both sides of an argument are considered. The functions are designed to handle progress updates and errors effectively, making them suitable for integration into a debate preparation tool.",
      "distance": 0.26598637693997007
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/lib/debate/simulation.ts",
      "linestart": null,
      "lineend": null,
      "summary": "# Documentation for `simulation.ts`\n\nThis document provides a comprehensive overview of the `simulation.ts` file located in the `helicone/debateai` repository. The file contains functions and utilities for simulating a debate, including estimating API usage, running debate simulations, generating responses, and scoring debate paths.\n\n## Imports\n\nThe file imports various modules and types:\n\n- **Text Generation**: \n  - `generateText` from the `\"ai\"` module for generating conversational text.\n  \n- **UUID Generation**: \n  - `uuidv4` from the `\"uuid\"` module for generating unique identifiers.\n\n- **Types**: \n  - Various types from the `./types` module, including:\n    - `Message`\n    - `DebateNode`\n    - `DebateSimulationConfig`\n    - `DebateSimulationResult`\n    - `ProgressCallback`\n    - `SimulationUpdate`\n    - `DebatePath`\n    - `NodeScore`\n    - `ResearchData`\n    - `ApiUsageEstimate`\n\n- **Research Functions**: \n  - `conductResearch` and `sendProgressUpdate` from the `./research` module for conducting research and updating progress.\n\n- **API Clients**: \n  - `openrouter` and `GEMINI_MODEL` from the `./api-clients` module for interacting with external APIs.\n\n## Functions\n\n### 1. `estimateApiUsage`\n\n**Purpose**: Estimates the API usage based on the simulation configuration.\n\n**Parameters**:\n- `config`: An object of type `DebateSimulationConfig` containing:\n  - `maxDepth`: Maximum depth of the debate tree.\n  - `branchingFactor`: Number of branches at each node.\n\n**Returns**: An object of type `ApiUsageEstimate` with:\n- `perplexityCalls`: Number of calls to the Perplexity API.\n- `geminiCalls`: Total number of calls to the Gemini API.\n- `estimatedCost`: Estimated cost of the API calls.\n- `estimatedTimeSeconds`: Estimated time required for the API calls.\n\n### 2. `runDebateSimulation`\n\n**Purpose**: Runs a debate simulation to find the optimal response.\n\n**Parameters**:\n- `config`: An object of type `DebateSimulationConfig` containing:\n  - `messages`: Array of messages relevant to the debate.\n  - `topic`: Object containing the debate topic and stance.\n  - `maxDepth`: Maximum depth for exploring the debate tree.\n  - `branchingFactor`: Number of branches to explore at each node.\n  - `progressCallback`: Function to report progress updates.\n  - `userStartsDebate`: Boolean indicating if the user initiates the debate.\n\n**Returns**: A promise that resolves to an object of type `DebateSimulationResult` containing:\n- `bestResponse`: The best response determined from the simulation.\n- `simulationTree`: The root node of the debate simulation tree.\n- `bestPath`: The path leading to the best response.\n- `researchData`: Data gathered during the research phase.\n\n### 3. `generateInitialResponse`\n\n**Purpose**: Generates the initial response to start the debate.\n\n**Parameters**:\n- `topic`: Object containing the debate topic and opponent information.\n- `messages`: Array of `Message` objects containing previous conversation context.\n- `researchData`: Object of type `ResearchData` containing relevant research information.\n- `progressCallback`: Optional callback function to report progress updates.\n\n**Returns**: A promise that resolves to a string containing the generated response text.\n\n### 4. `exploreDebateTree`\n\n**Purpose**: Explores the debate tree by generating responses and scoring them.\n\n**Parameters**:\n- `rootNode`: The starting node of type `DebateNode`.\n- `topic`: String representing the topic of the debate.\n- `messages`: Array of `Message` objects containing prior messages.\n- `researchData`: Object of type `ResearchData` containing relevant information.\n- `maxDepth`: Maximum depth to explore in the debate tree.\n- `branchingFactor`: Number of child nodes each node can generate.\n- `progressCallback`: Optional function to report progress during exploration.\n\n### 5. `generateResponses`\n\n**Purpose**: Generates possible responses for a node in the debate tree.\n\n**Parameters**:\n- `parentNode`: The current node of type `DebateNode`.\n- `topic`: Object representing the debate topic and stance.\n- `messages`: Array of `Message` objects.\n- `researchData`: Object of type `ResearchData`.\n- `count`: Number of responses to generate.\n- `currentDepth`: Current depth in the debate tree.\n- `progressCallback`: Optional function to report progress.\n\n**Returns**: A promise that resolves to an array of `DebateNode` objects representing the generated responses.\n\n### 6. `scoreDebatePaths`\n\n**Purpose**: Scores all paths in the debate tree.\n\n**Parameters**:\n- `rootNode`: The starting point of the debate tree of type `DebateNode`.\n- `topic`: Object of type `DebateSimulationConfig[\"topic\"]`.\n- `progressCallback`: Optional function to report progress updates.\n\n### 7. `scoreNode`\n\n**Purpose**: Scores a single node in the debate tree.\n\n**Parameters**:\n- `node`: An object of type `DebateNode`.\n- `topic`: Object of type `DebateSimulationConfig[\"topic\"]`.\n\n### 8. `evaluateResponse`\n\n**Purpose**: Evaluates a response in the debate.\n\n**Parameters**:\n- `node`: An object of type `DebateNode`.\n- `topic`: Object of type `DebateSimulationConfig[\"topic\"]`.\n\n**Returns**: A promise that resolves to an object of type `NodeScore` containing:\n- `score`: A numerical score from 1 to 10.\n- `reasoning`: A brief explanation of the score.\n\n### 9. `propagateScores`\n\n**Purpose**: Propagates scores up the tree.\n\n**Parameters**:\n- `node`: An object of type `DebateNode`.\n\n**Returns**: A number representing the updated score of the node.\n\n### 10. `findBestPath`\n\n**Purpose**: Finds the best path in the debate tree.\n\n**Parameters**:\n- `rootNode`: A `DebateNode` object that serves as the starting point.\n\n**Returns**: An object of type `DebatePath` containing:\n- `nodes`: An array of `DebateNode` objects representing the path taken.\n- `totalScore`: A numeric value representing the cumulative score of the nodes in the path.\n\n## Conclusion\n\nThe `simulation.ts` file provides essential functions for simulating debates, generating responses, and evaluating the effectiveness of those responses. Each function is designed to work cohesively within the debate simulation framework, allowing for dynamic exploration and scoring of debate paths.",
      "distance": 0.27269912307241384
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/lib/debate/types.ts",
      "linestart": null,
      "lineend": null,
      "summary": "# Documentation for TypeScript Code: `types.ts`\n\nThis TypeScript file defines core types and interfaces used in a debate simulation system. These types facilitate the representation of messages, debate topics, nodes in a debate tree, research data, simulation results, and more. Below is a detailed description of each component defined in the file.\n\n## Interfaces\n\n### 1. `Message`\nRepresents a message in a conversation.\n- **Properties:**\n  - `role`: A string that can be either `\"system\"`, `\"user\"`, or `\"assistant\"`, indicating the sender of the message.\n  - `content`: A string containing the actual message content.\n\n### 2. `DebateTopic`\nDefines the topic and configuration for a debate.\n- **Properties:**\n  - `topic`: A string representing the subject of the debate.\n  - `stance`: A string that can be either `\"for\"` or `\"against\"`, indicating the position taken in the debate.\n  - `opponent?`: An optional string representing the persona the AI should adopt during the debate.\n\n### 3. `DebateNode`\nRepresents a node in the debate tree structure.\n- **Properties:**\n  - `id`: A unique string identifier for the node.\n  - `text`: A string containing the argument or content of the node.\n  - `score`: A number representing the strength or weight of the argument.\n  - `children`: An array of `DebateNode` objects representing the child nodes.\n  - `isUserStance`: A boolean indicating if the node reflects the user's stance (`true`) or the opponent's stance (`false`).\n  - `context`: An array of `Message` objects providing additional context for the node.\n  - `depth`: A number indicating the depth level of the node in the debate tree.\n  - `parentId`: A string or `null` indicating the identifier of the parent node (null if it is a root node).\n\n### 4. `Source`\nRepresents an information source related to research.\n- **Properties:**\n  - `title?`: An optional string for the title of the source.\n  - `url?`: An optional string for the URL of the source.\n  - `snippet?`: An optional string providing a brief excerpt or summary from the source.\n\n### 5. `ResearchData`\nHolds information related to research findings.\n- **Properties:**\n  - `analysis`: A string providing the main analysis or interpretation of the research.\n  - `supportingEvidence`: An array of strings containing evidence supporting the analysis.\n  - `counterEvidence`: An array of strings containing evidence that contradicts the analysis.\n  - `historicalContext?`: An optional string providing relevant background information.\n  - `summary`: A string summarizing the key points of the research.\n  - `sources`: An array of `Source` objects detailing the references or origins of the research data.\n\n### 6. `ResearchResult`\nRepresents the outcome of a research query.\n- **Properties:**\n  - `query`: A string representing the research query.\n  - `researchData`: An object of type `ResearchData` containing the findings.\n  - `rawResponse?`: An optional string for the raw response from the research query.\n\n### 7. `NodeScore`\nRepresents the score and reasoning for a simulation node.\n- **Properties:**\n  - `score`: A number representing the score of the node.\n  - `reasoning`: A string explaining the reasoning behind the score.\n\n### 8. `DebatePath`\nRepresents a path through the debate tree.\n- **Properties:**\n  - `nodes`: An array of `DebateNode` objects representing the sequence of nodes in the path.\n  - `totalScore`: A number representing the cumulative score of the path.\n\n### 9. `DebateSimulationResult`\nEncapsulates the results of a debate simulation.\n- **Properties:**\n  - `bestResponse`: A string representing the optimal response from the simulation.\n  - `simulationTree`: A `DebateNode` representing the hierarchical structure of the debate.\n  - `bestPath`: A `DebatePath` representing the most effective sequence of arguments.\n  - `researchData?`: An optional `ResearchData` object containing additional insights.\n\n### 10. `SimulationStatus`\nA type representing the various statuses of a simulation.\n- **Possible Values:**\n  - `\"starting\"`\n  - `\"researching\"`\n  - `\"research_complete\"`\n  - `\"generating_responses\"`\n  - `\"exploring_tree\"`\n  - `\"scoring_paths\"`\n  - `\"finalizing\"`\n  - `\"completed\"`\n  - `\"error\"`\n\n### 11. `SimulationUpdate`\nDefines the structure for updates during a simulation process.\n- **Properties:**\n  - `status`: A `SimulationStatus` indicating the current status of the simulation.\n  - `message`: A string providing a descriptive message about the simulation's state.\n  - `progress`: A number representing the progress percentage of the simulation.\n  - `currentNode?`: An optional `DebateNode` representing the current node in the debate tree.\n  - `partialTree?`: An optional `DebateNode` representing a partial view of the debate tree.\n  - `researchData?`: An optional `ResearchData` object containing relevant research information.\n  - `estimatedTimeRemaining?`: An optional number estimating the remaining time for the simulation.\n\n### 12. `ProgressCallback`\nA type representing a callback function for progress updates during the simulation.\n- **Parameters:**\n  - `update`: An object of type `SimulationUpdate` containing the current update information.\n\n### 13. `DebateSimulationConfig`\nDefines the configuration settings for a debate simulation.\n- **Properties:**\n  - `topic`: A `DebateTopic` object specifying the subject matter of the debate.\n  - `messages`: An array of `Message` objects representing the communication exchanged during the debate.\n  - `maxDepth`: A number indicating the maximum depth of the debate.\n  - `branchingFactor`: A number determining the number of possible responses from each point in the debate.\n  - `progressCallback?`: An optional `ProgressCallback` function for reporting progress during the simulation.\n  - `userStartsDebate`: A boolean indicating if the user initiates the debate.\n\n### 14. `ApiUsageEstimate`\nRepresents an estimate of API usage during the simulation.\n- **Properties:**\n  - `perplexityCalls`: A number representing the number of calls made to the perplexity API.\n  - `geminiCalls`: A number representing the number of calls made to the gemini API.\n  - `estimatedCost`: A number representing the estimated cost associated with the API usage.\n  - `estimatedTimeSeconds`: A number representing the estimated time in seconds for the API usage.\n\n## Summary\nThis file provides a comprehensive set of interfaces and types that define the structure and behavior of a debate simulation system. Each interface serves a specific purpose, ensuring that the data used throughout the system is well-organized and type-safe. The interactions between these components facilitate the management of debates, research, and simulation processes effectively.",
      "remoteUrl": ""
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/app/api/debate/estimate/route.ts",
      "linestart": null,
      "lineend": null,
      "summary": "# Documentation for `route.ts`\n\nThis document provides a detailed overview of the `route.ts` file located in the `helicone/debateai` repository. The file is written in TypeScript and is responsible for handling HTTP POST requests to estimate API usage for a debate simulation.\n\n## Imports\n\nThe file imports the following modules:\n\n1. **NextRequest and NextResponse** from `next/server`:\n   - `NextRequest`: Represents the incoming HTTP request.\n   - `NextResponse`: Facilitates the creation of HTTP responses.\n\n2. **DebateTopic and DebateSimulationConfig** from `@/lib/debate/types`:\n   - `DebateTopic`: A type that defines the structure of a debate topic.\n   - `DebateSimulationConfig`: A type that outlines the configuration for a debate simulation.\n\n3. **estimateApiUsage** from `@/lib/debate/simulation`:\n   - A function that estimates the API usage based on the provided simulation configuration.\n\n## Function: `POST`\n\n### Description\nThe `POST` function is an asynchronous handler for HTTP POST requests. It processes the request to estimate the API usage for a debate simulation based on parameters provided in the request body.\n\n### Parameters\n- `req: NextRequest`: The incoming request object that contains a JSON body with parameters for the debate simulation.\n\n### Functionality\n\n1. **Request Body Parsing**:\n   - The function retrieves the JSON body from the request using `await req.json()`.\n   - It destructures the body to extract the following fields:\n     - `topic`: The subject of the debate.\n     - `stance`: The position taken in the debate.\n     - `opponent`: The opposing stance (optional).\n     - `maxDepth`: The maximum depth of the debate simulation (optional).\n     - `branchingFactor`: The branching factor for the simulation (optional).\n\n2. **Validation**:\n   - The function checks for the presence of the `topic` and `stance` fields. If either is missing, it returns a JSON response with an error message and a 400 status code.\n\n3. **Debate Topic Creation**:\n   - Constructs a `debateTopic` object using the extracted `topic`, `stance`, and `opponent`.\n\n4. **Simulation Configuration**:\n   - Creates a `config` object of type `DebateSimulationConfig` with the following properties:\n     - `topic`: The previously created `debateTopic`.\n     - `messages`: Initialized as an empty array (not utilized for estimation).\n     - `maxDepth`: Set to the provided value or defaults to 3 if not specified.\n     - `branchingFactor`: Set to the provided value or defaults to 2 if not specified.\n     - `userStartsDebate`: Defaults to `true`, indicating that the user initiates the debate.\n     - `progressCallback`: Set to `undefined`.\n\n5. **API Usage Estimation**:\n   - Calls the `estimateApiUsage(config)` function to calculate the estimated API usage based on the configuration.\n\n6. **Response**:\n   - Returns the estimated usage as a JSON response.\n\n7. **Error Handling**:\n   - If an error occurs during execution, it logs the error to the console and returns a JSON response with a 500 status code and an error message.\n\n### Symbols Used\n- `async/await`: For handling asynchronous operations.\n- `try/catch`: For error handling.\n- `if`: For conditional checks.\n- `return`: To send responses back to the client.\n- `NextResponse.json()`: To format and send JSON responses.\n\n## Summary\nThe `POST` function is a critical component of the backend service that estimates the resources required for simulating a debate based on user-defined parameters. It ensures that necessary fields are validated, constructs appropriate objects for the simulation, and provides a structured response to the client.",
      "distance": 0.3099318700906949
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/app/api/debate/stream/route.ts",
      "linestart": null,
      "lineend": null,
      "summary": "# Documentation for `route.ts` in the DebateAI API\n\nThis document provides a comprehensive overview of the `route.ts` file located in the `helicone/debateai` repository. The file contains the implementation of an API for managing debate simulations, including starting, retrieving, and canceling simulations.\n\n## Imports\n\nThe file imports the following modules and types:\n\n- **NextRequest** from `next/server`: Represents the incoming HTTP request in a Next.js application.\n- Types from `@/lib/debate/types`:\n  - **Message**: Represents a message in the debate.\n  - **DebateTopic**: Represents the topic of the debate.\n  - **DebateSimulationConfig**: Configuration settings for the debate simulation.\n  - **SimulationUpdate**: Represents updates during the simulation process.\n- **runDebateSimulation** from `@/lib/debate/simulation`: A function that executes the debate simulation based on the provided configuration.\n\n## Active Simulations Storage\n\nThe file maintains a `Map` called `activeSimulations` to store ongoing debate simulations. Each entry in the map uses a unique simulation ID as the key and an object containing the following properties as the value:\n\n- **controller**: An instance of `AbortController` to manage the cancellation of the simulation.\n- **stream**: An optional `TransformStream` for handling data streaming.\n- **writer**: An optional `WritableStreamDefaultWriter<Uint8Array>` for writing data to the stream.\n\n## Functions\n\n### 1. `POST(req: NextRequest)`\n\nThis asynchronous function handles HTTP POST requests to initiate a new debate simulation.\n\n#### Parameters\n- **req**: An instance of `NextRequest`, representing the incoming HTTP request.\n\n#### Functionality\n1. **Request Body Parsing**: Parses the JSON body of the request to extract simulation parameters.\n2. **Debate Topic Creation**: Constructs a `debateTopic` object using the extracted parameters.\n3. **Simulation ID Generation**: Creates a unique simulation ID based on the current timestamp.\n4. **Abort Controller Setup**: Initializes an `AbortController` for managing simulation cancellation.\n5. **Stream Setup**: Creates a `TransformStream` and obtains a writable stream writer.\n6. **Active Simulations Storage**: Stores the simulation details in the `activeSimulations` map.\n7. **Simulation Configuration**: Constructs a configuration object for the debate simulation.\n8. **Simulation Execution**: Calls `runDebateSimulation(config)` to start the simulation.\n9. **Response Handling**: Returns a JSON response containing the simulation ID.\n10. **Error Handling**: Catches and logs errors, returning a 500 status response if necessary.\n\n### 2. `GET(req: NextRequest)`\n\nThis asynchronous function handles HTTP GET requests to retrieve the status of an ongoing simulation.\n\n#### Parameters\n- **req**: An instance of `NextRequest`, representing the incoming HTTP request.\n\n#### Functionality\n1. **Extract Simulation ID**: Retrieves the simulation ID from the query parameters.\n2. **Validation of Simulation ID**: Returns a 400 error if the ID is missing.\n3. **Retrieve Simulation**: Attempts to get the simulation from `activeSimulations` using the ID.\n4. **Check for Stream**: If a stream exists, returns it; otherwise, returns a 500 error.\n5. **Error Handling**: Logs errors and returns a 500 status response if any issues occur.\n\n### 3. `DELETE(req: NextRequest)`\n\nThis asynchronous function handles HTTP DELETE requests to cancel an ongoing simulation.\n\n#### Parameters\n- **req**: An instance of `NextRequest`, representing the incoming HTTP request.\n\n#### Functionality\n1. **Extract Simulation ID**: Retrieves the simulation ID from the query parameters.\n2. **Validation**: Returns a 400 error if the ID is missing.\n3. **Retrieve Simulation**: Attempts to get the simulation from `activeSimulations`.\n4. **Abort Simulation**: Calls `simulation.controller.abort()` to terminate the simulation.\n5. **Remove Simulation**: Deletes the simulation from `activeSimulations`.\n6. **Success Response**: Returns a 200 status response indicating success.\n7. **Error Handling**: Logs errors and returns a 500 status response if any issues occur.\n\n## Response Structure\n\nAll responses are formatted as JSON objects with appropriate status codes and headers. The `Content-Type` header is set to `application/json` for JSON responses, and `text/event-stream` for streaming responses.\n\n## Conclusion\n\nThe `route.ts` file provides a robust API for managing debate simulations, allowing users to start, retrieve, and cancel simulations effectively. The implementation includes error handling and maintains the state of active simulations, ensuring a smooth user experience.",
      "distance": 0.29448922957062396
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/app/debate/page.tsx",
      "linestart": null,
      "lineend": null,
      "summary": "# Document for `DebatePage` Component\n\n## Overview\nThe `DebatePage` component is a React functional component written in TypeScript (TSX). It facilitates a debate simulation by managing user input, displaying messages, and visualizing the debate tree. The component utilizes various React hooks for state management and side effects.\n\n## Key Features\n\n1. **State Management**:\n   - Uses `useState` to manage multiple state variables, including:\n     - `messages`: Stores the conversation messages.\n     - `userInput`: Captures user input from a text area.\n     - `isLoading`: Indicates if a process is ongoing.\n     - `simulationId`, `simulationStatus`, `simulationTree`, `researchData`: Manage simulation-related data.\n     - `progress`, `error`: Track progress and error messages.\n     - `userStartsDebate`, `maxDepth`, `branchingFactor`, `estimatedCost`, `estimatedTime`: Control debate settings and estimations.\n\n2. **Search Parameters**:\n   - Utilizes `useSearchParams` to retrieve query parameters (`topic`, `stance`, `opponent`) from the URL, providing default values if they are not present.\n\n3. **Scrolling Behavior**:\n   - Implements `useRef` to reference the end of the messages list and `useEffect` to scroll to the bottom whenever new messages are added.\n\n4. **Debate Initialization**:\n   - The `startDebate` function is called to initiate the debate when the AI is set to go first.\n\n5. **Event Source Management**:\n   - Cleans up the event source connection when the component unmounts to prevent memory leaks.\n\n6. **Dynamic UI Elements**:\n   - Renders various UI components, including:\n     - **Debate Settings**: Displays topic, stance, opponent, and adjustable parameters (max depth, branching factor).\n     - **Debate Conversation**: Shows messages exchanged during the debate, with a text area for user input.\n     - **Debate Simulation Visualization**: Displays a visual representation of the debate tree.\n\n7. **User Interaction**:\n   - Handles user input through a text area and submits it via a form. The `handleSubmit` function processes the input and starts the debate.\n\n8. **Error Handling**:\n   - Displays error messages if any issues arise during the debate simulation.\n\n## Breakdown of Symbols and Functions\n\n- **React Hooks**:\n  - `useState`: Manages state variables.\n  - `useEffect`: Executes side effects based on dependencies.\n  - `useRef`: Creates mutable references that persist across renders.\n\n- **Event Handling**:\n  - `onChange`: Captures changes in the text area.\n  - `onSubmit`: Handles form submission.\n\n- **Conditional Rendering**:\n  - Uses conditional statements to render components based on state (e.g., displaying the opponent only if defined).\n\n- **Mapping**:\n  - The `map` function is used to iterate over arrays (e.g., rendering messages and research data).\n\n- **Progress and Loading Indicators**:\n  - Displays loading indicators and progress bars during ongoing simulations.\n\n## Summary\nThe `DebatePage` component effectively manages a debate simulation, allowing users to interact with the system, view messages, and visualize the debate tree. It leverages React's state management and lifecycle methods to create a responsive and user-friendly interface.\n\n---\n\n### MarkdownRenderer Component Documentation\n\n**Component Name:** `MarkdownRenderer`\n\n**Type:** Functional Component (React.FC)\n\n**Parameters:**\n- **children**: A string that represents the Markdown content to be rendered.\n\n**Functionality:**\n- The `MarkdownRenderer` component utilizes the `ReactMarkdown` library to convert Markdown syntax into React components.\n- It incorporates the `remarkGfm` plugin to support GitHub Flavored Markdown features.\n\n**Components Prop:**\n- The `components` prop is an object that customizes how certain Markdown elements are rendered. In this case, it is set up to define how specific elements (like links) should behave and appear.\n\n**Return Value:**\n- The component returns a `ReactMarkdown` element that renders the provided `children` as Markdown.\n\n**Usage:**\n- This component is designed to render Markdown content safely and effectively within a React application, allowing for rich text formatting and styling.\n\n**Key Symbols:**\n- `React.FC`: TypeScript type for functional components in React.\n- `{ children }`: Destructuring assignment to extract the `children` prop.\n- `<ReactMarkdown>`: A component from the `react-markdown` library that processes and renders Markdown.\n- `remarkPlugins`: An array that specifies plugins to enhance Markdown processing.\n\nThis component is particularly useful for displaying Markdown content with additional features and styling in a React application.",
      "remoteUrl": ""
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/app/api/debate/route.ts",
      "linestart": null,
      "lineend": null,
      "summary": "# Documentation for `route.ts` in the `helicone/debateai` Repository\n\nThis document provides a comprehensive overview of the `route.ts` file located in the `/app/api/debate/` directory of the `helicone/debateai` repository. The file contains three main asynchronous functions: `POST`, `GET`, and `DELETE`, which handle the creation, retrieval, and deletion of debate simulations, respectively. \n\n## Imports\n\nThe file imports the following modules and types:\n\n- **NextRequest, NextResponse**: These are imported from the `next/server` module and are used to handle incoming requests and send responses.\n- **Message, DebateTopic, DebateSimulationConfig, SimulationUpdate**: These types are imported from `@/lib/debate/types` and define the structure of messages, debate topics, simulation configurations, and updates.\n- **runDebateSimulation, estimateApiUsage**: These functions are imported from `@/lib/debate/simulation` and are used to execute the debate simulation and estimate API usage based on the simulation configuration.\n\n## Active Simulations Storage\n\nThe file maintains a `Map` called `activeSimulations` to store ongoing debate simulations. Each entry in the map associates a unique simulation ID with an object containing:\n- `updates`: An array of `SimulationUpdate` objects that track the progress of the simulation.\n- `controller`: An `AbortController` instance that allows for the cancellation of the simulation.\n\n## Functions\n\n### 1. POST Function\n\n```typescript\nexport async function POST(req: NextRequest)\n```\n\nThis function handles HTTP POST requests to initiate a debate simulation.\n\n#### Key Operations:\n- **Request Body Parsing**: The function parses the JSON body of the request to extract necessary fields such as `topic`, `stance`, `opponent`, `messages`, etc.\n- **Validation**: It checks for the presence of required fields (`topic`, `stance`, `messages`). If any are missing, it returns a 400 status with an error message.\n- **Debate Topic Creation**: Constructs a `debateTopic` object.\n- **Simulation Configuration**: Creates a `config` object of type `DebateSimulationConfig`, setting defaults for optional fields.\n- **API Usage Estimation**: Calls `estimateApiUsage(config)` to estimate API usage.\n- **Simulation ID Generation**: Generates a unique `simulationId` if not provided.\n- **Abort Controller Initialization**: Initializes an `AbortController` for managing the simulation's lifecycle.\n- **Updates Storage**: Initializes an empty array `updates` to store simulation updates.\n- **Progress Callback Setup**: Defines a callback function to push updates to the `updates` array.\n- **Simulation Execution**: Calls `runDebateSimulation(config)` to start the simulation in the background.\n- **Response**: Returns a JSON response containing the `simulationId` and `estimatedUsage`.\n\n#### Error Handling:\nThe function includes a `try-catch` block to handle errors, logging them and returning a 500 status with a failure message if an error occurs.\n\n### 2. GET Function\n\n```typescript\nexport async function GET(req: NextRequest)\n```\n\nThis function handles HTTP GET requests to retrieve updates for a specific simulation based on its ID.\n\n#### Key Operations:\n- **Extract Simulation ID**: Parses the request URL to retrieve the simulation ID from query parameters.\n- **Validation**: Checks if the ID is present; if not, returns a 400 status with an error message.\n- **Retrieve Simulation**: Attempts to get the simulation from `activeSimulations` using the provided ID.\n- **Return Updates**: If the simulation is found, returns a JSON object containing the simulation's updates.\n- **Error Handling**: Logs any errors and returns a 500 status with a failure message if an error occurs.\n\n### 3. DELETE Function\n\n```typescript\nexport async function DELETE(req: NextRequest)\n```\n\nThis function handles HTTP DELETE requests to cancel a simulation based on a provided simulation ID.\n\n#### Key Operations:\n- **Extract Simulation ID**: Parses the request URL to retrieve the simulation ID from query parameters.\n- **Validation**: Checks if the ID is present; if not, returns a 400 status with an error message.\n- **Retrieve Simulation**: Attempts to get the simulation from `activeSimulations` using the provided ID.\n- **Abort Simulation**: Calls the `abort` method on the simulation's controller to terminate the simulation process.\n- **Remove Simulation**: Deletes the simulation from the `activeSimulations` collection.\n- **Success Response**: Returns a JSON response indicating success.\n- **Error Handling**: Logs any errors and returns a 500 status with a failure message if an error occurs.\n\n## Summary\n\nThe `route.ts` file provides a structured API for managing debate simulations, allowing users to start, retrieve updates, and cancel simulations. Each function is designed to handle specific HTTP methods and includes validation and error handling to ensure robust operation. The use of a `Map` for active simulations allows for efficient tracking and management of ongoing simulations.",
      "distance": 0.3031523616061068
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/components/assistant-ui/markdown-text.tsx",
      "linestart": null,
      "lineend": null,
      "summary": "# Documentation for `markdown-text.tsx`\n\nThis document provides a comprehensive overview of the `markdown-text.tsx` file located in the `helicone/debateai` repository. The file is responsible for rendering Markdown content with enhanced features, including a copy-to-clipboard functionality for code snippets.\n\n## Imports\n\nThe file imports several modules and components:\n\n1. **CSS Styles**: \n   - `import \"@assistant-ui/react-markdown/styles/dot.css\";` - Imports CSS styles for the Markdown component.\n\n2. **Markdown Components and Utilities**:\n   - `CodeHeaderProps`, `MarkdownTextPrimitive`, `unstable_memoizeMarkdownComponents as memoizeMarkdownComponents`, `useIsMarkdownCodeBlock` from `@assistant-ui/react-markdown` - These are used for rendering Markdown and managing code blocks.\n\n3. **Markdown Plugin**:\n   - `remarkGfm` - A plugin that adds support for GitHub Flavored Markdown (GFM).\n\n4. **React Hooks and Components**:\n   - `FC`, `memo`, `useState` from `react` - Used for creating functional components and managing state.\n\n5. **Icons**:\n   - `CheckIcon`, `CopyIcon` from `lucide-react` - Icons used for indicating copy actions.\n\n6. **Custom Components**:\n   - `TooltipIconButton` from `@/components/assistant-ui/tooltip-icon-button` - A button component that displays a tooltip.\n   - `cn` from `@/lib/utils` - A utility function for conditional class names.\n\n## Components\n\n### 1. `MarkdownTextImpl`\n\n- **Type**: Functional Component\n- **Functionality**: Renders Markdown content using the `MarkdownTextPrimitive` component.\n- **Props**:\n  - `remarkPlugins`: Includes `remarkGfm` for GFM support.\n  - `className`: Applies the class `aui-md` for styling.\n  - `components`: Uses `defaultComponents` for custom rendering of Markdown elements.\n\n### 2. `MarkdownText`\n\n- **Type**: Memoized Functional Component\n- **Functionality**: A memoized version of `MarkdownTextImpl` to optimize performance by preventing unnecessary re-renders.\n\n### 3. `CodeHeader`\n\n- **Type**: Functional Component\n- **Props**:\n  - `language`: The programming language of the code snippet.\n  - `code`: The actual code to be copied.\n- **Functionality**:\n  - Manages clipboard actions using the `useCopyToClipboard` hook.\n  - Displays a header for code snippets with a copy button.\n  - Renders a tooltip button that shows either a `CopyIcon` or a `CheckIcon` based on the copy state.\n\n### 4. `useCopyToClipboard`\n\n- **Type**: Custom Hook\n- **Parameters**:\n  - `copiedDuration`: Optional duration for which the copy confirmation state remains true (default is 3000 ms).\n- **Functionality**:\n  - Manages the `isCopied` state to indicate if text has been copied.\n  - Provides a `copyToClipboard` function to handle the clipboard operation.\n\n### 5. `defaultComponents`\n\n- **Type**: Memoized Object\n- **Functionality**: Defines default rendering components for various Markdown elements (e.g., headings, paragraphs, lists, tables).\n- **Customization**: Each component applies specific styles using the `cn` utility for conditional class names.\n\n## Summary\n\nThe `markdown-text.tsx` file provides a robust implementation for rendering Markdown content with enhanced features such as GitHub Flavored Markdown support and a user-friendly copy-to-clipboard functionality for code snippets. The components are designed to be reusable and optimized for performance through memoization. The use of custom hooks and utility functions enhances the overall functionality and user experience.",
      "distance": 0.27597905337497586
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/components/ui/select.tsx",
      "linestart": null,
      "lineend": null,
      "summary": "# Documentation for `select.tsx`\n\nThis document provides a comprehensive overview of the `select.tsx` file located in the `helicone/debateai` repository. The file contains a set of React functional components that implement a customizable select dropdown using the `@radix-ui/react-select` library. Each component is designed to enhance the user interface and experience of select inputs.\n\n## Imports\n\n- **React**: The core library for building user interfaces.\n- **SelectPrimitive**: A set of components from the `@radix-ui/react-select` library that provides the foundational functionality for the select dropdown.\n- **Icons**: `CheckIcon`, `ChevronDownIcon`, and `ChevronUpIcon` from the `lucide-react` library, used for visual indicators in the dropdown.\n- **cn**: A utility function from `@/lib/utils` for conditionally combining class names.\n\n## Components\n\n### 1. `Select`\n- **Description**: The root component for the select dropdown.\n- **Props**: Accepts all props from `SelectPrimitive.Root`.\n- **Return**: Renders the `SelectPrimitive.Root` with a `data-slot` attribute for identification.\n\n### 2. `SelectGroup`\n- **Description**: A component that groups related select items.\n- **Props**: Accepts all props from `SelectPrimitive.Group`.\n- **Return**: Renders the `SelectPrimitive.Group` with a `data-slot` attribute.\n\n### 3. `SelectValue`\n- **Description**: Displays the currently selected value in the dropdown.\n- **Props**: Accepts all props from `SelectPrimitive.Value`.\n- **Return**: Renders the `SelectPrimitive.Value` with a `data-slot` attribute.\n\n### 4. `SelectTrigger`\n- **Description**: The clickable area that opens the dropdown.\n- **Props**:\n  - `className`: Additional CSS classes for styling.\n  - `children`: Content to display within the trigger.\n- **Return**: Renders the `SelectPrimitive.Trigger` with a styled button and a downward chevron icon.\n\n### 5. `SelectContent`\n- **Description**: The container for dropdown items.\n- **Props**:\n  - `className`: Additional CSS classes for styling.\n  - `children`: Content to display within the dropdown.\n  - `position`: Determines the positioning of the dropdown (default is \"popper\").\n- **Return**: Renders the dropdown content wrapped in a portal, including scroll buttons and a viewport for items.\n\n### 6. `SelectLabel`\n- **Description**: A label for the select input.\n- **Props**:\n  - `className`: Additional CSS classes for styling.\n- **Return**: Renders the `SelectPrimitive.Label` with a `data-slot` attribute.\n\n### 7. `SelectItem`\n- **Description**: Represents an individual selectable item in the dropdown.\n- **Props**:\n  - `className`: Additional CSS classes for styling.\n  - `children`: Content to display within the item.\n- **Return**: Renders the `SelectPrimitive.Item` with an indicator for selected state and the item text.\n\n### 8. `SelectSeparator`\n- **Description**: A visual separator between items in the dropdown.\n- **Props**:\n  - `className`: Additional CSS classes for styling.\n- **Return**: Renders the `SelectPrimitive.Separator` with a `data-slot` attribute.\n\n### 9. `SelectScrollUpButton`\n- **Description**: A button to scroll up through the dropdown items.\n- **Props**:\n  - `className`: Additional CSS classes for styling.\n- **Return**: Renders the `SelectPrimitive.ScrollUpButton` with an upward chevron icon.\n\n### 10. `SelectScrollDownButton`\n- **Description**: A button to scroll down through the dropdown items.\n- **Props**:\n  - `className`: Additional CSS classes for styling.\n- **Return**: Renders the `SelectPrimitive.ScrollDownButton` with a downward chevron icon.\n\n## Exports\n\nThe following components are exported for use in other parts of the application:\n- `Select`\n- `SelectContent`\n- `SelectGroup`\n- `SelectItem`\n- `SelectLabel`\n- `SelectScrollDownButton`\n- `SelectScrollUpButton`\n- `SelectSeparator`\n- `SelectTrigger`\n- `SelectValue`\n\n## Summary\n\nThe `select.tsx` file provides a comprehensive set of components for creating a customizable select dropdown in a React application. Each component is designed to be reusable and flexible, allowing for a consistent user experience while leveraging the functionality of the `@radix-ui/react-select` library. The use of utility functions for styling ensures that the components can be easily customized to fit various design requirements.",
      "distance": 0.2720444038033373
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/components/ui/button.tsx",
      "linestart": null,
      "lineend": null,
      "summary": "# Button Component Documentation\n\n## Function Signature:\n```tsx\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  })\n```\n\n## Description:\nThe `Button` component is a customizable button element designed for use in a React application. It provides various styling options and can render as a different component based on the `asChild` prop, allowing for greater flexibility in usage.\n\n## Parameters:\n- **className** (string): Additional CSS classes to apply to the button for custom styling.\n- **variant** (string): Specifies the visual style of the button, which is determined by the `buttonVariants` function.\n- **size** (string): Defines the size of the button, also determined by the `buttonVariants` function.\n- **asChild** (boolean, optional): If set to true, the component will render as a `Slot` component instead of a standard HTML button. Defaults to false.\n- **...props**: Any additional properties that can be passed to the button element, adhering to the standard button props.\n\n## Internal Logic:\n- The component determines which element to render (`Comp`) based on the `asChild` prop. If `asChild` is true, it uses the `Slot` component; otherwise, it defaults to a standard HTML `<button>`.\n- The `data-slot` attribute is set to \"button\" for tracking or styling purposes.\n- The `className` is generated by combining the output of `buttonVariants` with the provided `variant`, `size`, and `className` props using the `cn` function, which is likely a utility function for merging class names.\n\n## Return Value:\nThe function returns a React component that renders either a `Slot` or a `<button>` element with the specified properties and styles.\n\n## Imports:\n- **React**: The core library for building user interfaces.\n- **Slot**: A component from the `@radix-ui/react-slot` package, used for rendering as a child component.\n- **cva**: A function from the `class-variance-authority` package, used to define and manage class variants.\n- **cn**: A utility function imported from the local library (`@/lib/utils`), likely used for merging class names.\n\n## Exports:\n- **Button**: The main component that can be used in other parts of the application.\n- **buttonVariants**: The variant configuration object that defines the styles for different button variants and sizes.",
      "remoteUrl": ""
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/components/ui/tooltip.tsx",
      "linestart": null,
      "lineend": null,
      "summary": "# Tooltip Component Documentation\n\nThis document provides a comprehensive overview of the `tooltip.tsx` file located in the `helicone/debateai` repository. The file defines a set of React components that implement tooltip functionality using the `@radix-ui/react-tooltip` library. Below is a detailed description of each component, their interactions, and the imports and exports of the file.\n\n## Imports\n\n- **React**: The core library for building user interfaces in JavaScript.\n- **TooltipPrimitive**: A set of components from the `@radix-ui/react-tooltip` library that provides the foundational tooltip functionality.\n- **cn**: A utility function imported from `@/lib/utils` for conditional class name management.\n\n## Components\n\n### 1. TooltipProvider\n\n**Function Name:** `TooltipProvider`\n\n**Parameters:**\n- `delayDuration` (optional): A number that specifies the delay duration for the tooltip. Defaults to `0` if not provided.\n- `...props`: Additional properties that are passed to the `TooltipPrimitive.Provider`.\n\n**Returns:**\n- A JSX element that renders the `TooltipPrimitive.Provider` component.\n\n**Key Components:**\n- `TooltipPrimitive.Provider`: Manages the context and behavior of tooltips.\n- `data-slot`: A custom attribute set to \"tooltip-provider\" for styling or identification purposes.\n\n**Usage:**\nThis component wraps the `TooltipPrimitive.Provider`, allowing customization of the tooltip's delay duration while passing any additional props to the provider.\n\n### 2. Tooltip\n\n**Function Name:** `Tooltip`\n\n**Parameters:**\n- `...props`: Accepts all properties defined in `React.ComponentProps<typeof TooltipPrimitive.Root>`.\n\n**Returns:**\n- A JSX element consisting of a `TooltipProvider` wrapping a `TooltipPrimitive.Root` component.\n\n**Key Components:**\n- `TooltipProvider`: Provides context or state management for tooltips.\n- `TooltipPrimitive.Root`: Represents the root of the tooltip, receiving all props passed to the `Tooltip` function.\n\n**Attributes:**\n- `data-slot=\"tooltip\"`: Added to the `TooltipPrimitive.Root` component for styling or targeting purposes.\n\n**Summary:**\nThe `Tooltip` function serves as a wrapper for the `TooltipPrimitive.Root` component, providing necessary context through `TooltipProvider` and allowing for flexible prop passing.\n\n### 3. TooltipTrigger\n\n**Function Name:** `TooltipTrigger`\n\n**Parameters:**\n- `...props`: Accepts all properties defined in `React.ComponentProps<typeof TooltipPrimitive.Trigger>`.\n\n**Returns:**\n- A JSX element that renders the `TooltipPrimitive.Trigger` component.\n\n**Key Components:**\n- `TooltipPrimitive.Trigger`: Represents the element that triggers the tooltip when hovered or focused.\n\n**Attributes:**\n- `data-slot=\"tooltip-trigger\"`: Added for styling or identification purposes.\n\n### 4. TooltipContent\n\n**Function Name:** `TooltipContent`\n\n**Parameters:**\n- `className` (optional): A string for additional CSS classes.\n- `sideOffset` (optional, default = 0): A number specifying the offset of the tooltip from its target element.\n- `children`: The content to be displayed inside the tooltip.\n- `...props`: Additional props for the `TooltipPrimitive.Content` component.\n\n**Returns:**\n- A JSX element that renders the tooltip content.\n\n**Key Components:**\n- `TooltipPrimitive.Portal`: Renders the tooltip content in a different part of the DOM for better positioning.\n- `TooltipPrimitive.Content`: Displays the tooltip, receiving various props for customization.\n- `TooltipPrimitive.Arrow`: Renders an arrow pointing to the tooltip's target.\n\n**Class Name Composition:**\nThe `cn` function is used to concatenate multiple class names, including:\n- Background and text color classes.\n- Animation classes for showing and hiding the tooltip.\n- State-based animations for when the tooltip is closed.\n- Position-based animations depending on the tooltip's side.\n- Additional styling for size, padding, and text.\n\n## Exports\n\nThe file exports the following components:\n- `Tooltip`\n- `TooltipTrigger`\n- `TooltipContent`\n- `TooltipProvider`\n\nThese components can be imported and used in other parts of the application to implement tooltip functionality. \n\n## Summary\n\nThe `tooltip.tsx` file defines a set of React components that utilize the `@radix-ui/react-tooltip` library to create customizable tooltips. Each component serves a specific purpose, from providing context to rendering the tooltip content and trigger. The use of utility functions for class name management and the inclusion of custom attributes enhances the flexibility and usability of the tooltip components.",
      "distance": 0.2853969419948904
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/components/ui/card.tsx",
      "linestart": null,
      "lineend": null,
      "summary": "# Documentation for Card Components in `card.tsx`\n\nThis document provides a comprehensive overview of the components defined in the `card.tsx` file located in the `helicone/debateai` repository. The file contains several React functional components that are designed to create a card UI element with various sections such as header, title, description, content, and footer. Each component is built using TypeScript and JSX.\n\n## Imports\n\n- `import * as React from \"react\"`: This imports the entire React library, allowing the use of React features such as components and hooks.\n- `import { cn } from \"@/lib/utils\"`: This imports a utility function `cn` from a local library, which is likely used for conditionally joining class names.\n\n## Components\n\n### 1. Card\n\n- **Description**: The `Card` component renders a `div` element styled as a card. It serves as the main container for the card's content.\n- **Parameters**:\n  - `className`: A string for additional CSS classes.\n  - `...props`: Other properties valid for a `div` element.\n- **Return Value**: A `div` with:\n  - `data-slot=\"card\"`: Custom data attribute for targeting.\n  - `className`: Combines default classes with any additional classes passed.\n  - `{...props}`: Additional properties spread onto the `div`.\n\n### 2. CardHeader\n\n- **Description**: The `CardHeader` component renders a `div` styled as the header of the card.\n- **Parameters**:\n  - `className`: A string for additional CSS classes.\n  - `...props`: Other properties valid for a `div` element.\n- **Return Value**: A `div` with:\n  - `data-slot=\"card-header\"`: Custom data attribute for targeting.\n  - `className`: Combines default classes with any additional classes passed.\n  - `{...props}`: Additional properties spread onto the `div`.\n\n### 3. CardTitle\n\n- **Description**: The `CardTitle` component renders a `div` styled as the title of the card.\n- **Parameters**:\n  - `className`: A string for additional CSS classes.\n  - `...props`: Other properties valid for a `div` element.\n- **Return Value**: A `div` with:\n  - `data-slot=\"card-title\"`: Custom data attribute for targeting.\n  - `className`: Combines default classes with any additional classes passed.\n  - `{...props}`: Additional properties spread onto the `div`.\n\n### 4. CardDescription\n\n- **Description**: The `CardDescription` component renders a `div` styled as the description of the card.\n- **Parameters**:\n  - `className`: A string for additional CSS classes.\n  - `...props`: Other properties valid for a `div` element.\n- **Return Value**: A `div` with:\n  - `data-slot=\"card-description\"`: Custom data attribute for targeting.\n  - `className`: Combines default classes with any additional classes passed.\n  - `{...props}`: Additional properties spread onto the `div`.\n\n### 5. CardContent\n\n- **Description**: The `CardContent` component renders a `div` styled as the main content area of the card.\n- **Parameters**:\n  - `className`: A string for additional CSS classes.\n  - `...props`: Other properties valid for a `div` element.\n- **Return Value**: A `div` with:\n  - `data-slot=\"card-content\"`: Custom data attribute for targeting.\n  - `className`: Combines default classes with any additional classes passed.\n  - `{...props}`: Additional properties spread onto the `div`.\n\n### 6. CardFooter\n\n- **Description**: The `CardFooter` component renders a `div` styled as the footer of the card.\n- **Parameters**:\n  - `className`: A string for additional CSS classes.\n  - `...props`: Other properties valid for a `div` element.\n- **Return Value**: A `div` with:\n  - `data-slot=\"card-footer\"`: Custom data attribute for targeting.\n  - `className`: Combines default classes with any additional classes passed.\n  - `{...props}`: Additional properties spread onto the `div`.\n\n## Exports\n\nThe following components are exported from this module for use in other parts of the application:\n\n- `Card`\n- `CardHeader`\n- `CardTitle`\n- `CardDescription`\n- `CardContent`\n- `CardFooter`\n\n## Summary\n\nThe `card.tsx` file defines a set of reusable React components that collectively create a card UI element. Each component is designed to be flexible and customizable through props, allowing developers to easily integrate them into various user interfaces. The use of the `cn` utility function facilitates the management of CSS class names, enhancing the styling capabilities of each component.",
      "distance": 0.30576436972258436
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/components/assistant-ui/thread-list.tsx",
      "linestart": null,
      "lineend": null,
      "summary": "# Documentation for `thread-list.tsx`\n\nThis document provides a comprehensive overview of the `thread-list.tsx` file located in the `helicone/debateai` repository. The file contains several React functional components that work together to create a user interface for displaying and managing a list of threads.\n\n## Imports\n\nThe file imports the following modules and components:\n\n1. **React Types**\n   - `FC`: A type alias for a functional component from the React library.\n\n2. **Primitive Components**\n   - `ThreadListItemPrimitive` and `ThreadListPrimitive`: Components from the `@assistant-ui/react` library that provide base functionality and styling for thread lists and items.\n\n3. **Icons**\n   - `ArchiveIcon` and `PlusIcon`: Icons from the `lucide-react` library used for visual representation of actions (archiving and creating a new thread).\n\n4. **UI Components**\n   - `Button`: A button component from the local UI components directory.\n   - `TooltipIconButton`: A button component that displays a tooltip when hovered, also from the local assistant UI components directory.\n\n## Components\n\n### 1. `ThreadList`\n\n- **Type**: Functional Component (FC)\n- **Description**: Serves as the main container for the thread list interface.\n- **Key Elements**:\n  - Returns a `ThreadListPrimitive.Root` component with a flexbox layout.\n  - Contains two child components: `ThreadListNew` and `ThreadListItems`.\n\n### 2. `ThreadListNew`\n\n- **Type**: Functional Component (FC)\n- **Description**: Renders a button for creating a new thread.\n- **Key Elements**:\n  - Uses `ThreadListPrimitive.New` to wrap the button, indicating it is part of the thread list.\n  - The button is styled with utility classes and includes a `PlusIcon` and the text \"New Thread\".\n\n### 3. `ThreadListItems`\n\n- **Type**: Functional Component (FC)\n- **Description**: Displays the list of existing thread items.\n- **Key Elements**:\n  - Utilizes `ThreadListPrimitive.Items` to render a collection of thread items, passing `ThreadListItem` as a component for each item.\n\n### 4. `ThreadListItem`\n\n- **Type**: Functional Component (FC)\n- **Description**: Represents an individual thread item in the list.\n- **Key Elements**:\n  - Uses `ThreadListItemPrimitive.Root` for the main structure, applying various styling classes for interaction states (active, hover, focus).\n  - Contains a trigger area (`ThreadListItemPrimitive.Trigger`) that displays the thread title and an archive button.\n\n### 5. `ThreadListItemTitle`\n\n- **Type**: Functional Component (FC)\n- **Description**: Renders the title of a thread list item.\n- **Key Elements**:\n  - Returns a paragraph element containing a `ThreadListItemPrimitive.Title`, which displays the title with a fallback text of \"New Chat\".\n\n### 6. `ThreadListItemArchive`\n\n- **Type**: Functional Component (FC)\n- **Description**: Provides an archive button for a thread list item.\n- **Key Elements**:\n  - Wraps a `TooltipIconButton` within `ThreadListItemPrimitive.Archive`, allowing for archiving functionality.\n  - The button includes an `ArchiveIcon` and displays a tooltip with the text \"Archive thread\".\n\n## Component Interaction\n\n- The `ThreadList` component serves as the parent container, organizing the layout and including the functionality to create new threads and display existing ones.\n- `ThreadListNew` allows users to initiate the creation of a new thread.\n- `ThreadListItems` renders a collection of `ThreadListItem` components, each representing an individual thread.\n- Each `ThreadListItem` contains a title and an archive button, allowing users to interact with the threads directly.\n\n## Export\n\nThe `ThreadList` component is exported as a named export, making it available for import in other modules within the application.\n\nThis documentation provides a clear understanding of the structure and functionality of the components within the `thread-list.tsx` file, facilitating easier maintenance and further development.",
      "distance": 0.30537901238734044
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/components/assistant-ui/thread.tsx",
      "linestart": null,
      "lineend": null,
      "summary": "# Documentation for `thread.tsx`\n\nThis document provides a comprehensive overview of the `thread.tsx` file located in the `helicone/debateai` repository. The file contains several React functional components that work together to create a user interface for a messaging thread, including features for displaying messages, composing new messages, and navigating through suggestions.\n\n## Imports\n\nThe file imports various components and utilities from external libraries and local modules:\n\n- **From `@assistant-ui/react`:**\n  - `ActionBarPrimitive`, `BranchPickerPrimitive`, `ComposerPrimitive`, `MessagePrimitive`, `SourceContentPart`, `SourceContentPartProps`, `ThreadPrimitive`: These are primitive components used to build the messaging interface.\n\n- **From `lucide-react`:**\n  - Icons such as `ArrowDownIcon`, `CheckIcon`, `ChevronLeftIcon`, `ChevronRightIcon`, `CopyIcon`, `PencilIcon`, `RefreshCwIcon`, `SendHorizontalIcon`: These are used for various actions within the UI.\n\n- **From local modules:**\n  - `cn`: A utility function for conditional class names.\n  - `Button`: A button component for user interactions.\n  - `MarkdownText`: A component for rendering Markdown text.\n  - `TooltipIconButton`: A button component that displays a tooltip.\n\n## Components\n\n### 1. `SourceUI`\n\n- **Type:** Functional Component\n- **Props:** `SourceContentPartProps`\n- **Description:** Renders a hyperlink to a source URL with a citation number. It extracts the citation number from the URL or generates a hash if not available.\n- **Key Features:**\n  - Validates the presence of a URL.\n  - Extracts or computes a citation number.\n  - Renders an anchor element with appropriate attributes.\n\n### 2. `Thread`\n\n- **Type:** Functional Component\n- **Description:** The main component that structures the messaging thread interface.\n- **Key Features:**\n  - Uses `ThreadPrimitive.Root` to create the main container.\n  - Displays a welcome message via `ThreadWelcome`.\n  - Renders messages using `ThreadPrimitive.Messages` with custom components for user and assistant messages.\n  - Includes a sticky footer with a scroll-to-bottom button and a message composer.\n\n### 3. `ThreadScrollToBottom`\n\n- **Type:** Functional Component\n- **Description:** Provides a button to scroll the thread content to the bottom.\n- **Key Features:**\n  - Uses `ThreadPrimitive.ScrollToBottom` for scrolling functionality.\n  - Displays an `ArrowDownIcon` within a tooltip button.\n\n### 4. `ThreadWelcome`\n\n- **Type:** Functional Component\n- **Description:** Displays a welcome message and suggestions for user interaction.\n- **Key Features:**\n  - Uses `ThreadPrimitive.Empty` to wrap the content.\n  - Includes a prompt asking how the assistant can help.\n\n### 5. `ThreadWelcomeSuggestions`\n\n- **Type:** Functional Component\n- **Description:** Displays suggestion prompts for user interaction.\n- **Key Features:**\n  - Renders multiple `ThreadPrimitive.Suggestion` components with prompts and styles.\n\n### 6. `Composer`\n\n- **Type:** Functional Component\n- **Description:** Provides an input area for composing messages.\n- **Key Features:**\n  - Uses `ComposerPrimitive.Root` for the input container.\n  - Includes an input field and action buttons for sending or canceling messages.\n\n### 7. `ComposerAction`\n\n- **Type:** Functional Component\n- **Description:** Renders action buttons based on the current state of the composer.\n- **Key Features:**\n  - Conditionally displays either a \"Send\" or \"Cancel\" button based on the `running` state.\n\n### 8. `UserMessage`\n\n- **Type:** Functional Component\n- **Description:** Represents a message sent by the user.\n- **Key Features:**\n  - Uses `MessagePrimitive.Root` for the message structure.\n  - Includes a user action bar for editing messages.\n\n### 9. `UserActionBar`\n\n- **Type:** Functional Component\n- **Description:** Provides an action bar for user-specific actions.\n- **Key Features:**\n  - Includes an edit button wrapped in `ActionBarPrimitive.Edit`.\n\n### 10. `EditComposer`\n\n- **Type:** Functional Component\n- **Description:** A composer interface for editing messages.\n- **Key Features:**\n  - Structured layout with an input field and action buttons.\n\n### 11. `AssistantMessage`\n\n- **Type:** Functional Component\n- **Description:** Represents a message sent by the assistant.\n- **Key Features:**\n  - Uses `MessagePrimitive.Root` for the message structure.\n  - Renders message content and includes an action bar.\n\n### 12. `AssistantActionBar`\n\n- **Type:** Functional Component\n- **Description:** Provides action buttons for the assistant's message.\n- **Key Features:**\n  - Includes buttons for copying and refreshing content.\n\n### 13. `BranchPicker`\n\n- **Type:** Functional Component\n- **Description:** Allows navigation through branches in the messaging thread.\n- **Key Features:**\n  - Displays previous and next buttons along with the current branch number.\n\n### 14. `CircleStopIcon`\n\n- **Type:** Functional Component\n- **Description:** Renders an SVG icon representing a stop action.\n- **Key Features:**\n  - Simple SVG structure with a rectangle.\n\n## Exports\n\nThe file exports the following components for use in other parts of the application:\n\n- `Thread`\n- `SourceUI`\n- `ThreadScrollToBottom`\n- `ThreadWelcome`\n- `ThreadWelcomeSuggestions`\n- `Composer`\n- `ComposerAction`\n- `UserMessage`\n- `UserActionBar`\n- `EditComposer`\n- `AssistantMessage`\n- `AssistantActionBar`\n- `BranchPicker`\n- `CircleStopIcon`\n\n## Conclusion\n\nThe `thread.tsx` file provides a comprehensive set of components for creating a messaging thread interface, integrating user and assistant interactions, and managing message composition. Each component is designed to work cohesively, ensuring a smooth user experience.",
      "distance": 0.2963354973892762
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/components/debate-tree-viewer.tsx",
      "linestart": null,
      "lineend": null,
      "summary": "# Documentation for `DebateTreeViewer` Component in TSX\n\n## Overview\nThe `DebateTreeViewer` is a functional React component that visualizes a hierarchical debate tree structure. It allows users to interact with nodes, view associated research data, and manage loading and error states.\n\n## Props\n- **tree**: `DebateNode | null`\n  - Represents the root node of the debate tree. It can either be a `DebateNode` object or `null` if no tree is available.\n  \n- **isLoading**: `boolean | undefined`\n  - An optional property indicating whether the data is currently being loaded (default: `false`).\n  \n- **error**: `string | null | undefined`\n  - An optional property that holds an error message if an error occurs while fetching or processing the debate tree data. It can be a string, `null`, or undefined.\n  \n- **researchData**: `ResearchData | null | undefined`\n  - An optional property containing additional research data relevant to the debate. It can be a `ResearchData` object, `null`, or undefined.\n\n## State Management\n- **selectedNode**: `DebateNode | null`\n  - Stores the currently selected node for detailed viewing.\n  \n- **expandedNodes**: `Set<string>`\n  - A `Set` that tracks which nodes are expanded.\n  \n- **showResearch**: `boolean`\n  - A boolean that controls the visibility of the research data section.\n\n## Key Functions\n\n### `useEffect`\n- Logs the `researchData` whenever it changes.\n\n### `toggleNode`\n- Manages the expansion state of a node. It checks if a node is already expanded and toggles its state accordingly.\n\n### `selectNode`\n- Sets the `selectedNode` state to the node passed as an argument.\n\n### `renderNode`\n- Renders a node and its children recursively. It determines the visual representation based on the node's state (expanded, selected, etc.) and displays relevant information.\n\n## Rendering Logic\nThe component returns a structured layout:\n- **Research Data Section**: A collapsible section displaying analysis, supporting evidence, counter evidence, historical context, summary, and sources.\n- **Loading State**: Displays a spinner and message when loading.\n- **Error State**: Shows an error message if an error occurs.\n- **Tree View**: Displays the debate tree using the `renderNode` function.\n- **Selected Node Details**: Shows details of the selected node, including its score and text content.\n- **Empty State**: Displays a message when no data is available.\n\n## JSX Structure\n- Utilizes various HTML elements and CSS classes for styling and layout, including:\n  - `div`, `button`, `h3`, `p`, `ul`, and `li` for structuring content.\n  - CSS classes for styling, such as `flex`, `rounded`, `bg-gray-100`, and `text-blue-500`.\n\n## Summary\nThe `DebateTreeViewer` component effectively manages and displays a debate tree structure, allowing users to interact with nodes and view associated research data. It handles various states (loading, error, empty) and provides a user-friendly interface for navigating the debate content.\n\n---\n\n# Documentation for `DebateTreeViewerProps` Interface\n\nThe `DebateTreeViewerProps` interface defines the properties required for a component that visualizes a debate tree structure.\n\n### Properties:\n\n- **tree**: \n  - Type: `DebateNode | null`\n  - Description: Represents the root node of the debate tree. It can either be a `DebateNode` object or `null` if no tree is available.\n\n- **isLoading**: \n  - Type: `boolean | undefined`\n  - Description: An optional property that indicates whether the data is currently being loaded. If true, it suggests that the component should display a loading state.\n\n- **error**: \n  - Type: `string | null | undefined`\n  - Description: An optional property that holds an error message if an error occurs while fetching or processing the debate tree data. It can be a string, `null`, or undefined.\n\n- **researchData**: \n  - Type: `ResearchData | null | undefined`\n  - Description: An optional property that contains additional research data relevant to the debate. It can be a `ResearchData` object, `null`, or undefined.\n\nThis interface is used to ensure that the component receives the necessary data and state information to function correctly.\n\n---\n\n# Documentation for `MarkdownRenderer` Component\n\n## Overview\nThe `MarkdownRenderer` is a functional component written in TypeScript JSX (TSX) that renders Markdown content using the `ReactMarkdown` library. It accepts a string of Markdown content and an optional boolean to control the size of the rendered text.\n\n### Props\n- **content**: `string`\n  - The Markdown content to be rendered.\n  \n- **isSmall**: `boolean` (optional)\n  - A flag that determines if the text should be rendered in a smaller size. Defaults to `false`.\n\n### Return Value\nThe component returns a `ReactMarkdown` element that processes the provided Markdown content.\n\n### Key Features\n- **Remark Plugins**: Utilizes the `remarkGfm` plugin to support GitHub Flavored Markdown features.\n  \n- **Custom Components**: The `components` prop allows for the customization of how specific Markdown elements (like headings and links) are rendered.\n\n### Breakdown of Custom Components\nThe `components` prop includes custom rendering for various Markdown elements:\n\n1. **h1**:\n   - Returns an `<h1>` element with dynamic class names based on the `isSmall` prop.\n   - Classes include `font-bold`, `text-sm` or `text-base`, and margin classes `mt-2 mb-1`.\n   - Uses `{...props}` to allow additional properties.\n\n2. **h2**:\n   - Returns an `<h2>` element with similar dynamic class handling as `h1`.\n   - Classes include `font-bold`, `text-xs` or `text-sm`, and margin classes `mt-2 mb-1`.\n   - Also utilizes `{...props}` for further customization.\n\n3. **h3**:\n   - Renders an `<h3>` element with class names that include `font-semibold`, `text-xs` or `text-sm`, and margin classes `mt-2 mb-1`.\n   - Accepts additional properties via `{...props}`.\n\n4. **a**:\n   - Renders an anchor (`<a>`) element with attributes:\n     - `href`: Links to the specified URL.\n     - `target=\"_blank\"`: Opens the link in a new tab.\n     - `rel=\"noopener noreferrer\"`: Enhances security.\n     - `className=\"text-blue-500 hover:underline\"`: Applies styling for color and hover effects.\n   - Accepts additional properties through `{...props}`.\n\n### Summary\nThe `MarkdownRenderer` component effectively transforms Markdown content into styled HTML elements, allowing for customization of headings and links based on the provided props. It leverages the `ReactMarkdown` library and supports GitHub Flavored Markdown through the `remarkGfm` plugin.",
      "remoteUrl": ""
    },
    {
      "repository": "helicone/debateai",
      "remote": "github",
      "branch": "main",
      "filepath": "/components/assistant-ui/tooltip-icon-button.tsx",
      "linestart": null,
      "lineend": null,
      "summary": "# TooltipIconButton Component Documentation\n\nThe `TooltipIconButton` component is a functional React component written in TypeScript (TSX) that combines a button with an associated tooltip. This document provides a detailed overview of its structure, functionality, and interactions between its components.\n\n## Imports\n\nThe component imports the following modules:\n\n- **React Imports**:\n  - `ComponentPropsWithoutRef` and `forwardRef` from the `react` library, which are used for type definitions and ref forwarding.\n\n- **Tooltip Components**:\n  - `Tooltip`, `TooltipContent`, `TooltipProvider`, and `TooltipTrigger` from the `@/components/ui/tooltip` module, which are used to create and manage the tooltip functionality.\n\n- **Button Component**:\n  - `Button` from the `@/components/ui/button` module, which serves as the main interactive element of the component.\n\n- **Utility Function**:\n  - `cn` from the `@/lib/utils` module, which is a utility function for conditionally combining class names.\n\n## Type Definitions\n\n### TooltipIconButtonProps\n\nThe `TooltipIconButtonProps` type extends the properties of the `Button` component by including:\n\n- `tooltip`: A string that specifies the text to be displayed in the tooltip.\n- `side?`: An optional string that determines the position of the tooltip relative to the button. It can be one of the following values: `\"top\"`, `\"bottom\"`, `\"left\"`, or `\"right\"`.\n\n## Component Definition\n\n### TooltipIconButton\n\nThe `TooltipIconButton` is defined using `forwardRef`, allowing it to accept a `ref` that can be forwarded to the underlying button element. The component takes the following props:\n\n- `children`: The content to be displayed inside the button.\n- `tooltip`: The text for the tooltip.\n- `side`: The position of the tooltip (default is `\"bottom\"`).\n- `className`: Additional class names for styling.\n- `...rest`: Any other props that should be passed to the button.\n\n### Component Structure\n\n1. **TooltipProvider**: This component wraps the tooltip functionality, providing the necessary context for the tooltip elements.\n\n2. **Tooltip**: This component encapsulates both the tooltip trigger and the tooltip content.\n\n3. **TooltipTrigger**: This component specifies the element that will trigger the tooltip. The `asChild` prop indicates that the child component (the `Button`) will act as the trigger.\n\n4. **Button**:\n   - The button is styled with a \"ghost\" variant and an \"icon\" size.\n   - The `className` is constructed using the `cn` utility function, combining the default classes `\"size-6 p-1\"` with any additional classes passed via the `className` prop.\n   - The `ref` is forwarded to the button, allowing for direct DOM manipulation if necessary.\n   - The `children` prop is rendered inside the button, allowing for customizable content.\n   - A `span` with the class `\"sr-only\"` is included to provide screen reader accessibility for the tooltip text.\n\n5. **TooltipContent**: This component displays the tooltip text, positioned according to the `side` prop.\n\n## Export\n\nThe `TooltipIconButton` component is exported as a named export, allowing it to be imported and used in other parts of the application.\n\n## Accessibility\n\nThe component includes accessibility features, such as the `sr-only` class on the `span` element, which ensures that the tooltip text is available to screen readers, enhancing the overall user experience for individuals using assistive technologies.\n\n## Summary\n\nThe `TooltipIconButton` component effectively combines a button with a tooltip, enhancing user interaction while maintaining accessibility. It is designed to be flexible and customizable, allowing developers to easily integrate it into their applications.",
      "remoteUrl": ""
    }
  ]
}
