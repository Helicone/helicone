{
  "message": "Based on the provided files, I'll help integrate Helicone into DebateAI. Here are the key changes needed:\n\n1. In `/lib/debate/api-clients.ts` (modify/add lines):\n```typescript\n// Lines 1-3: Add Helicone configuration imports\nimport { HeliconeProxyConfiguration } from '@helicone/core';\nimport { createHeliconeProxy } from '@helicone/client';\nimport { createOpenRouter, createPerplexity } from '@openrouter/ai-sdk';\n\n// Lines 5-12: Add Helicone proxy configuration\nconst heliconeConfig = new HeliconeProxyConfiguration({\n  apiKey: process.env.HELICONE_API_KEY || '',\n  baseUrl: 'https://api.helicone.ai',\n  retryConfig: {\n    maxRetries: 3,\n    initialDelayMs: 1000,\n  },\n});\n\n// Lines 14-23: Modify OpenRouter client with Helicone proxy\nexport const openrouter = createHeliconeProxy(\n  createOpenRouter({\n    baseURL: \"https://openrouter.helicone.ai/api/v1\",\n    apiKey: process.env.OPENROUTER_API_KEY || \"\",\n  }),\n  heliconeConfig,\n  {\n    customProperties: {\n      projectId: 'debateai',\n    },\n  }\n);\n\n// Lines 25-34: Modify Perplexity client with Helicone proxy\nexport const perplexity = createHeliconeProxy(\n  createPerplexity({\n    baseURL: \"https://perplexity.helicone.ai\",\n    apiKey: process.env.PERPLEXITY_API_KEY || \"\",\n  }),\n  heliconeConfig,\n  {\n    customProperties: {\n      projectId: 'debateai',\n    },\n  }\n);\n```\n\n2. In `/lib/debate/simulation.ts` (add lines):\n```typescript\n// Lines 15-25: Add Helicone metadata for tracking\nconst heliconeMetadata = {\n  sessionId: uuidv4(),\n  properties: {\n    simulationType: 'debate',\n    maxDepth: config.maxDepth,\n    branchingFactor: config.branchingFactor,\n    topic: config.topic.topic,\n    stance: config.topic.stance,\n  },\n};\n\n// Lines 180-185: Add to generateText calls\nheaders: {\n  'Helicone-Property-Session-Id': heliconeMetadata.sessionId,\n  'Helicone-Property-Simulation-Type': heliconeMetadata.properties.simulationType,\n  'Helicone-Property-Topic': heliconeMetadata.properties.topic,\n  'Helicone-Property-Stance': heliconeMetadata.properties.stance,\n},\n```\n\n3. Create a new file `/lib/helicone/config.ts`:\n```typescript\n// Lines 1-15: Add Helicone configuration\nexport const heliconeConfig = {\n  apiKey: process.env.HELICONE_API_KEY || '',\n  baseUrl: 'https://api.helicone.ai',\n  retryConfig: {\n    maxRetries: 3,\n    initialDelayMs: 1000,\n  },\n  properties: {\n    projectId: 'debateai',\n    environment: process.env.NODE_ENV || 'development',\n    version: process.env.APP_VERSION || '1.0.0',\n  },\n};\n\n// Lines 17-26: Add Helicone headers helper\nexport const getHeliconeHeaders = (metadata: Record<string, string>) => {\n  return {\n    'Helicone-Auth': `Bearer ${process.env.HELICONE_API_KEY}`,\n    'Helicone-Property-Project-Id': heliconeConfig.properties.projectId,\n    'Helicone-Property-Environment': heliconeConfig.properties.environment,\n    ...Object.entries(metadata).reduce((acc, [key, value]) => ({\n      ...acc,\n      [`Helicone-Property-${key}`]: value,\n    }), {}),\n  };\n};\n```\n\nThese changes will:\n1. Add Helicone proxy configuration for API clients\n2. Include session tracking and metadata for each request\n3. Add retry logic for failed requests\n4. Enable custom properties for better analytics\n5. Provide consistent configuration across the application\n\nThe integration allows for:\n- Request/response logging\n- Cost tracking\n- Latency monitoring\n- Custom property filtering\n- Retry handling\n- Session tracking\n- Environment-specific analytics\n\nMake sure to add the necessary environment variables:\n```env\nHELICONE_API_KEY=your_helicone_api_key\n```"
}
