type JsonValue = string | number | boolean | null | JsonArray | JsonObject;
interface JsonArray extends Array<JsonValue> {}
interface JsonObject { [key: string]: JsonValue; }

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/user-feedback": {
    post: operations["PostUserFeedback"];
  };
  "/v1/evaluator": {
    post: operations["CreateEvaluator"];
  };
  "/v1/evaluator/{evaluatorId}": {
    get: operations["GetEvaluator"];
    put: operations["UpdateEvaluator"];
    delete: operations["DeleteEvaluator"];
  };
  "/v1/evaluator/query": {
    post: operations["QueryEvaluators"];
  };
  "/v1/evaluator/{evaluatorId}/experiments": {
    get: operations["GetExperimentsForEvaluator"];
  };
  "/v1/evaluator/{evaluatorId}/onlineEvaluators": {
    get: operations["GetOnlineEvaluators"];
    post: operations["CreateOnlineEvaluator"];
  };
  "/v1/evaluator/{evaluatorId}/onlineEvaluators/{onlineEvaluatorId}": {
    delete: operations["DeleteOnlineEvaluator"];
  };
  "/v1/evaluator/python/test": {
    post: operations["TestPythonEvaluator"];
  };
  "/v1/evaluator/llm/test": {
    post: operations["TestLLMEvaluator"];
  };
  "/v1/evaluator/lastmile/test": {
    post: operations["TestLastMileEvaluator"];
  };
  "/v1/evaluator/{evaluatorId}/stats": {
    get: operations["GetEvaluatorStats"];
  };
  "/v2/experiment/create/empty": {
    post: operations["CreateEmptyExperiment"];
  };
  "/v2/experiment/create/from-request/{requestId}": {
    post: operations["CreateExperimentFromRequest"];
  };
  "/v2/experiment/new": {
    post: operations["CreateNewExperiment"];
  };
  "/v2/experiment": {
    get: operations["GetExperiments"];
  };
  "/v2/experiment/{experimentId}": {
    get: operations["GetExperimentById"];
    delete: operations["DeleteExperiment"];
  };
  "/v2/experiment/{experimentId}/prompt-version": {
    post: operations["CreateNewPromptVersionForExperiment"];
  };
  "/v2/experiment/{experimentId}/prompt-version/{promptVersionId}": {
    delete: operations["DeletePromptVersion"];
  };
  "/v2/experiment/{experimentId}/prompt-versions": {
    get: operations["GetPromptVersionsForExperiment"];
  };
  "/v2/experiment/{experimentId}/input-keys": {
    get: operations["GetInputKeysForExperiment"];
  };
  "/v2/experiment/{experimentId}/add-manual-row": {
    post: operations["AddManualRowToExperiment"];
  };
  "/v2/experiment/{experimentId}/add-manual-rows-batch": {
    post: operations["AddManualRowsToExperimentBatch"];
  };
  "/v2/experiment/{experimentId}/rows": {
    delete: operations["DeleteExperimentTableRows"];
  };
  "/v2/experiment/{experimentId}/row/insert/batch": {
    post: operations["CreateExperimentTableRowBatch"];
  };
  "/v2/experiment/{experimentId}/row/insert/dataset/{datasetId}": {
    post: operations["CreateExperimentTableRowFromDataset"];
  };
  "/v2/experiment/{experimentId}/row/update": {
    post: operations["UpdateExperimentTableRow"];
  };
  "/v2/experiment/{experimentId}/run-hypothesis": {
    post: operations["RunHypothesis"];
  };
  "/v2/experiment/{experimentId}/evaluators": {
    get: operations["GetExperimentEvaluators"];
    post: operations["CreateExperimentEvaluator"];
  };
  "/v2/experiment/{experimentId}/evaluators/{evaluatorId}": {
    delete: operations["DeleteExperimentEvaluator"];
  };
  "/v2/experiment/{experimentId}/evaluators/run": {
    post: operations["RunExperimentEvaluators"];
  };
  "/v2/experiment/{experimentId}/should-run-evaluators": {
    get: operations["ShouldRunEvaluators"];
  };
  "/v2/experiment/{experimentId}/{promptVersionId}/scores": {
    get: operations["GetExperimentPromptVersionScores"];
  };
  "/v2/experiment/{experimentId}/{requestId}/{scoreKey}": {
    get: operations["GetExperimentScore"];
  };
  "/v1/request/query": {
    post: operations["GetRequests"];
  };
  "/v1/request/query-clickhouse": {
    post: operations["GetRequestsClickhouse"];
  };
  "/v1/request/{requestId}": {
    get: operations["GetRequestById"];
  };
  "/v1/request/query-ids": {
    post: operations["GetRequestsByIds"];
  };
  "/v1/request/{requestId}/feedback": {
    post: operations["FeedbackRequest"];
  };
  "/v1/request/{requestId}/property": {
    put: operations["PutProperty"];
  };
  "/v1/request/{requestId}/assets/{assetId}": {
    post: operations["GetRequestAssetById"];
  };
  "/v1/request/{requestId}/score": {
    post: operations["AddScores"];
  };
  "/v1/prompt/query": {
    post: operations["GetPrompts"];
  };
  "/v1/prompt/{promptId}/query": {
    post: operations["GetPrompt"];
  };
  "/v1/prompt/{promptId}": {
    delete: operations["DeletePrompt"];
  };
  "/v1/prompt/create": {
    post: operations["CreatePrompt"];
  };
  "/v1/prompt/{promptId}/user-defined-id": {
    patch: operations["UpdatePromptUserDefinedId"];
  };
  "/v1/prompt/version/{promptVersionId}/edit-label": {
    post: operations["EditPromptVersionLabel"];
  };
  "/v1/prompt/version/{promptVersionId}/edit-template": {
    post: operations["EditPromptVersionTemplate"];
  };
  "/v1/prompt/version/{promptVersionId}/subversion-from-ui": {
    post: operations["CreateSubversionFromUi"];
  };
  "/v1/prompt/version/{promptVersionId}/subversion": {
    post: operations["CreateSubversion"];
  };
  "/v1/prompt/version/{promptVersionId}/promote": {
    post: operations["PromotePromptVersionToProduction"];
  };
  "/v1/prompt/version/{promptVersionId}/inputs/query": {
    post: operations["GetInputs"];
  };
  "/v1/prompt/{promptId}/experiments": {
    get: operations["GetPromptExperiments"];
  };
  "/v1/prompt/{promptId}/versions/query": {
    post: operations["GetPromptVersions"];
  };
  "/v1/prompt/version/{promptVersionId}": {
    get: operations["GetPromptVersion"];
    delete: operations["DeletePromptVersion"];
  };
  "/v1/prompt/{user_defined_id}/compile": {
    post: operations["GetPromptVersionsCompiled"];
  };
  "/v1/prompt/{user_defined_id}/template": {
    post: operations["GetPromptVersionTemplates"];
  };
  "/v1/settings/query": {
    get: operations["GetSettings"];
  };
  "/v1/stripe/subscription/cost-for-prompts": {
    get: operations["GetCostForPrompts"];
  };
  "/v1/stripe/subscription/cost-for-evals": {
    get: operations["GetCostForEvals"];
  };
  "/v1/stripe/subscription/cost-for-experiments": {
    get: operations["GetCostForExperiments"];
  };
  "/v1/stripe/subscription/free/usage": {
    get: operations["GetFreeUsage"];
  };
  "/v1/stripe/subscription/new-customer/upgrade-to-pro": {
    post: operations["UpgradeToPro"];
  };
  "/v1/stripe/subscription/existing-customer/upgrade-to-pro": {
    post: operations["UpgradeExistingCustomer"];
  };
  "/v1/stripe/subscription/new-customer/upgrade-to-team-bundle": {
    post: operations["UpgradeToTeamBundle"];
  };
  "/v1/stripe/subscription/existing-customer/upgrade-to-team-bundle": {
    post: operations["UpgradeExistingCustomerToTeamBundle"];
  };
  "/v1/stripe/subscription/manage-subscription": {
    post: operations["ManageSubscription"];
  };
  "/v1/stripe/subscription/undo-cancel-subscription": {
    post: operations["UndoCancelSubscription"];
  };
  "/v1/stripe/subscription/add-ons/{productType}": {
    post: operations["AddOns"];
    delete: operations["DeleteAddOns"];
  };
  "/v1/stripe/subscription/preview-invoice": {
    get: operations["PreviewInvoice"];
  };
  "/v1/stripe/subscription/cancel-subscription": {
    post: operations["CancelSubscription"];
  };
  "/v1/stripe/subscription/migrate-to-pro": {
    post: operations["MigrateToPro"];
  };
  "/v1/stripe/subscription": {
    get: operations["GetSubscription"];
  };
  "/v1/stripe/webhook": {
    post: operations["HandleStripeWebhook"];
  };
  "/v1/organization": {
    get: operations["GetOrganizations"];
  };
  "/v1/organization/{organizationId}": {
    get: operations["GetOrganization"];
  };
  "/v1/organization/reseller/{resellerId}": {
    get: operations["GetReseller"];
  };
  "/v1/organization/user/accept_terms": {
    post: operations["AcceptTerms"];
  };
  "/v1/organization/create": {
    post: operations["CreateNewOrganization"];
  };
  "/v1/organization/{organizationId}/update": {
    post: operations["UpdateOrganization"];
  };
  "/v1/organization/onboard": {
    post: operations["OnboardOrganization"];
  };
  "/v1/organization/{organizationId}/add_member": {
    post: operations["AddMemberToOrganization"];
  };
  "/v1/organization/{organizationId}/create_filter": {
    post: operations["CreateOrganizationFilter"];
  };
  "/v1/organization/{organizationId}/update_filter": {
    post: operations["UpdateOrganizationFilter"];
  };
  "/v1/organization/delete": {
    delete: operations["DeleteOrganization"];
  };
  "/v1/organization/{organizationId}/layout": {
    get: operations["GetOrganizationLayout"];
  };
  "/v1/organization/{organizationId}/members": {
    get: operations["GetOrganizationMembers"];
  };
  "/v1/organization/{organizationId}/update_member": {
    post: operations["UpdateOrganizationMember"];
  };
  "/v1/organization/{organizationId}/owner": {
    get: operations["GetOrganizationOwner"];
  };
  "/v1/organization/{organizationId}/remove_member": {
    delete: operations["RemoveMemberFromOrganization"];
  };
  "/v1/organization/setup-demo": {
    post: operations["SetupDemo"];
  };
  "/v1/organization/update_onboarding": {
    post: operations["UpdateOnboardingStatus"];
  };
  "/v1/log/request": {
    post: operations["LogRequests"];
  };
  "/v1/gov-organization/limits/member/{memberId}": {
    get: operations["GetMemberLimits"];
    post: operations["SetMemberLimits"];
  };
  "/v1/gov-organization/my-limits": {
    get: operations["GetMyLimits"];
  };
  "/v1/gov-organization/is-governance-org": {
    get: operations["IsGovernanceOrg"];
  };
  "/v1/key/generateHash": {
    post: operations["GenerateHash"];
  };
  "/v1/dataset/{datasetId}/fine-tune": {
    post: operations["DatasetFineTune"];
  };
  "/v1/fine-tune": {
    post: operations["FineTune"];
  };
  "/v1/fine-tune/{jobId}/stats": {
    get: operations["FineTuneJobStats"];
  };
  "/v1/filter": {
    get: operations["GetFilters"];
    post: operations["CreateFilter"];
  };
  "/v1/filter/{id}": {
    get: operations["GetFilter"];
    delete: operations["DeleteFilter"];
    patch: operations["UpdateFilter"];
  };
  "/v1/demo/completion": {
    post: operations["DemoCompletion"];
  };
  "/v1/alert/query": {
    get: operations["GetAlerts"];
  };
  "/v1/alert/create": {
    post: operations["CreateAlert"];
  };
  "/v1/alert/{alertId}": {
    delete: operations["DeleteAlert"];
  };
  "/v1/alert-banner": {
    get: operations["GetAlertBanners"];
  };
  "/v1/admin/feature-flags": {
    post: operations["UpdateFeatureFlags"];
    delete: operations["DeleteFeatureFlag"];
  };
  "/v1/admin/feature-flags/query": {
    post: operations["GetFeatureFlags"];
  };
  "/v1/admin/orgs/top-usage": {
    post: operations["GetTopOrgsByUsage"];
  };
  "/v1/admin/orgs/top": {
    post: operations["GetTopOrgs"];
  };
  "/v1/admin/admins/query": {
    get: operations["GetAdmins"];
  };
  "/v1/admin/whodis": {
    post: operations["Whodis"];
  };
  "/v1/admin/settings/{name}": {
    get: operations["GetSetting"];
  };
  "/v1/admin/azure/run-test": {
    post: operations["AzureTest"];
  };
  "/v1/admin/settings": {
    post: operations["UpdateSetting"];
  };
  "/v1/admin/orgs/query": {
    post: operations["FindAllOrgs"];
  };
  "/v1/admin/orgs/over-time/query": {
    post: operations["NewOrgsOverTime"];
  };
  "/v1/admin/admins/org/query": {
    post: operations["AddAdminsToOrg"];
  };
  "/v1/admin/alert_banners": {
    post: operations["CreateAlertBanner"];
    patch: operations["UpdateAlertBanner"];
  };
  "/v1/admin/top-orgs-over-time": {
    post: operations["GetTopOrgsOverTime"];
  };
  "/v1/admin/subscription-data": {
    /**
     * @description Get all subscription data, invoices, and discounts for the admin projections page
     * Uses caching to minimize API calls to Stripe
     */
    get: operations["GetSubscriptionData"];
  };
  "/v1/audio/convert-to-wav": {
    post: operations["ConvertToWav"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    EvaluatorResult: {
      id: string;
      created_at: string;
      scoring_type: string;
      llm_template: unknown;
      organization_id: string;
      updated_at: string;
      name: string;
      code_template: unknown;
      last_mile_config: unknown;
    };
    ResultSuccess_EvaluatorResult_: {
      data: components["schemas"]["EvaluatorResult"];
      /** @enum {number|null} */
      error: null;
    };
    ResultError_string_: {
      /** @enum {number|null} */
      data: null;
      error: string;
    };
    "Result_EvaluatorResult.string_": components["schemas"]["ResultSuccess_EvaluatorResult_"] | components["schemas"]["ResultError_string_"];
    CreateEvaluatorParams: {
      scoring_type: string;
      llm_template?: unknown;
      name: string;
      code_template?: unknown;
      last_mile_config?: unknown;
    };
    "ResultSuccess_EvaluatorResult-Array_": {
      data: components["schemas"]["EvaluatorResult"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_EvaluatorResult-Array.string_": components["schemas"]["ResultSuccess_EvaluatorResult-Array_"] | components["schemas"]["ResultError_string_"];
    UpdateEvaluatorParams: {
      scoring_type?: string;
      llm_template?: unknown;
      code_template?: unknown;
      name?: string;
      last_mile_config?: unknown;
    };
    ResultSuccess_null_: {
      /** @enum {number|null} */
      data: null;
      /** @enum {number|null} */
      error: null;
    };
    "Result_null.string_": components["schemas"]["ResultSuccess_null_"] | components["schemas"]["ResultError_string_"];
    EvaluatorExperiment: {
      experiment_name: string;
      experiment_created_at: string;
      experiment_id: string;
    };
    "ResultSuccess_EvaluatorExperiment-Array_": {
      data: components["schemas"]["EvaluatorExperiment"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_EvaluatorExperiment-Array.string_": components["schemas"]["ResultSuccess_EvaluatorExperiment-Array_"] | components["schemas"]["ResultError_string_"];
    OnlineEvaluatorByEvaluatorId: {
      config: unknown;
      id: string;
    };
    "ResultSuccess_OnlineEvaluatorByEvaluatorId-Array_": {
      data: components["schemas"]["OnlineEvaluatorByEvaluatorId"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_OnlineEvaluatorByEvaluatorId-Array.string_": components["schemas"]["ResultSuccess_OnlineEvaluatorByEvaluatorId-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.any_": {
      [key: string]: unknown;
    };
    CreateOnlineEvaluatorParams: {
      config: components["schemas"]["Record_string.any_"];
    };
    "ResultSuccess__output-string--traces-string-Array--statusCode_63_-number__": {
      data: {
        /** Format: double */
        statusCode?: number;
        traces: string[];
        output: string;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__output-string--traces-string-Array--statusCode_63_-number_.string_": components["schemas"]["ResultSuccess__output-string--traces-string-Array--statusCode_63_-number__"] | components["schemas"]["ResultError_string_"];
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.string_": {
      [key: string]: string;
    };
    TestInput: {
      promptTemplate?: string;
      inputs: {
        autoInputs?: components["schemas"]["Record_string.string_"];
        inputs: components["schemas"]["Record_string.string_"];
      };
      outputBody: string;
      inputBody: string;
    };
    EvaluatorScore: {
      score: number | boolean;
    };
    ResultSuccess_EvaluatorScore_: {
      data: components["schemas"]["EvaluatorScore"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_EvaluatorScore.string_": components["schemas"]["ResultSuccess_EvaluatorScore_"] | components["schemas"]["ResultError_string_"];
    EvaluatorScoreResult: components["schemas"]["Result_EvaluatorScore.string_"];
    EvaluatorConfig: {
      evaluator_code_template?: string;
      evaluator_llm_template?: string;
      evaluator_scoring_type: string;
    };
    "ResultSuccess__score-number--input-string--output-string--ground_truth_63_-string__": {
      data: {
        ground_truth?: string;
        output: string;
        input: string;
        /** Format: double */
        score: number;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__score-number--input-string--output-string--ground_truth_63_-string_.string_": components["schemas"]["ResultSuccess__score-number--input-string--output-string--ground_truth_63_-string__"] | components["schemas"]["ResultError_string_"];
    DataEntry: {
      /** @enum {string} */
      _type: "system-prompt";
    } | {
      inputKey: string;
      /** @enum {string} */
      _type: "prompt-input";
    } | ({
      /** @enum {string} */
      content: "jsonify" | "message";
      /** @enum {string} */
      _type: "input-body";
    }) | ({
      /** @enum {string} */
      content: "jsonify" | "message";
      /** @enum {string} */
      _type: "output-body";
    });
    BaseLastMileConfigForm: {
      output: components["schemas"]["DataEntry"];
      input: components["schemas"]["DataEntry"];
      name: string;
    };
    LastMileConfigForm: components["schemas"]["BaseLastMileConfigForm"] & (({
      /** @enum {string} */
      _type: "relevance" | "context_relevance";
    }) | {
      groundTruth: components["schemas"]["DataEntry"];
      /** @enum {string} */
      _type: "faithfulness";
    });
    EvaluatorStats: {
      /** Format: double */
      averageScore: number;
      /** Format: double */
      totalUses: number;
      /** @enum {string} */
      recentTrend: "up" | "down" | "stable";
      scoreDistribution: {
          /** Format: double */
          count: number;
          range: string;
        }[];
      timeSeriesData: {
          /** Format: double */
          value: number;
          date: string;
        }[];
    };
    ResultSuccess_EvaluatorStats_: {
      data: components["schemas"]["EvaluatorStats"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_EvaluatorStats.string_": components["schemas"]["ResultSuccess_EvaluatorStats_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__experimentId-string__": {
      data: {
        experimentId: string;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__experimentId-string_.string_": components["schemas"]["ResultSuccess__experimentId-string__"] | components["schemas"]["ResultError_string_"];
    ExperimentV2: {
      id: string;
      name: string;
      original_prompt_version: string;
      copied_original_prompt_version: string | null;
      input_keys: string[] | null;
      created_at: string;
    };
    "ResultSuccess_ExperimentV2-Array_": {
      data: components["schemas"]["ExperimentV2"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ExperimentV2-Array.string_": components["schemas"]["ResultSuccess_ExperimentV2-Array_"] | components["schemas"]["ResultError_string_"];
    ExperimentV2Output: {
      id: string;
      request_id: string;
      is_original: boolean;
      prompt_version_id: string;
      created_at: string;
      input_record_id: string;
    };
    ExperimentV2Row: {
      id: string;
      inputs: components["schemas"]["Record_string.string_"];
      prompt_version: string;
      requests: components["schemas"]["ExperimentV2Output"][];
      auto_prompt_inputs: unknown[];
    };
    ExtendedExperimentData: {
      id: string;
      name: string;
      original_prompt_version: string;
      copied_original_prompt_version: string | null;
      input_keys: string[] | null;
      created_at: string;
      rows: components["schemas"]["ExperimentV2Row"][];
    };
    ResultSuccess_ExtendedExperimentData_: {
      data: components["schemas"]["ExtendedExperimentData"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ExtendedExperimentData.string_": components["schemas"]["ResultSuccess_ExtendedExperimentData_"] | components["schemas"]["ResultError_string_"];
    PromptVersionResult: {
      id: string;
      /** Format: double */
      minor_version: number;
      /** Format: double */
      major_version: number;
      prompt_v2: string;
      model: string;
      helicone_template: string;
      created_at: string;
      metadata: components["schemas"]["Record_string.any_"];
      parent_prompt_version?: string | null;
      experiment_id?: string | null;
      updated_at?: string;
    };
    ResultSuccess_PromptVersionResult_: {
      data: components["schemas"]["PromptVersionResult"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptVersionResult.string_": components["schemas"]["ResultSuccess_PromptVersionResult_"] | components["schemas"]["ResultError_string_"];
    CreateNewPromptVersionForExperimentParams: {
      newHeliconeTemplate: unknown;
      isMajorVersion?: boolean;
      metadata?: components["schemas"]["Record_string.any_"];
      experimentId?: string;
      bumpForMajorPromptVersionId?: string;
      parentPromptVersionId: string;
    };
Json: JsonObject;
    ExperimentV2PromptVersion: {
      created_at: string | null;
      experiment_id: string | null;
      helicone_template: components["schemas"]["Json"] | null;
      id: string;
      /** Format: double */
      major_version: number;
      metadata: components["schemas"]["Json"] | null;
      /** Format: double */
      minor_version: number;
      model: string | null;
      organization: string;
      prompt_v2: string;
      soft_delete: boolean | null;
    };
    "ResultSuccess_ExperimentV2PromptVersion-Array_": {
      data: components["schemas"]["ExperimentV2PromptVersion"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ExperimentV2PromptVersion-Array.string_": components["schemas"]["ResultSuccess_ExperimentV2PromptVersion-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess_string-Array_": {
      data: string[];
      /** @enum {number|null} */
      error: null;
    };
    "Result_string-Array.string_": components["schemas"]["ResultSuccess_string-Array_"] | components["schemas"]["ResultError_string_"];
    ResultSuccess_string_: {
      data: string;
      /** @enum {number|null} */
      error: null;
    };
    "Result_string.string_": components["schemas"]["ResultSuccess_string_"] | components["schemas"]["ResultError_string_"];
    ResultSuccess_boolean_: {
      data: boolean;
      /** @enum {number|null} */
      error: null;
    };
    "Result_boolean.string_": components["schemas"]["ResultSuccess_boolean_"] | components["schemas"]["ResultError_string_"];
    ScoreV2: {
      valueType: string;
      value: number | string;
      /** Format: double */
      max: number;
      /** Format: double */
      min: number;
    };
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.ScoreV2_": {
      [key: string]: components["schemas"]["ScoreV2"];
    };
    "ResultSuccess_Record_string.ScoreV2__": {
      data: components["schemas"]["Record_string.ScoreV2_"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_Record_string.ScoreV2_.string_": components["schemas"]["ResultSuccess_Record_string.ScoreV2__"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess_ScoreV2-or-null_": {
      data: components["schemas"]["ScoreV2"] | null;
      /** @enum {number|null} */
      error: null;
    };
    "Result_ScoreV2-or-null.string_": components["schemas"]["ResultSuccess_ScoreV2-or-null_"] | components["schemas"]["ResultError_string_"];
    /** @enum {string} */
    ProviderName: "OPENAI" | "ANTHROPIC" | "AZURE" | "LOCAL" | "HELICONE" | "AMDBARTEK" | "ANYSCALE" | "CLOUDFLARE" | "2YFV" | "TOGETHER" | "LEMONFOX" | "FIREWORKS" | "PERPLEXITY" | "GOOGLE" | "OPENROUTER" | "WISDOMINANUTSHELL" | "GROQ" | "COHERE" | "MISTRAL" | "DEEPINFRA" | "QSTASH" | "FIRECRAWL" | "AWS" | "DEEPSEEK" | "X" | "AVIAN" | "NEBIUS" | "NOVITA";
    Provider: components["schemas"]["ProviderName"] | "CUSTOM";
    /** @enum {string} */
    LlmType: "chat" | "completion";
    FunctionCall: {
      name: string;
      arguments: components["schemas"]["Record_string.any_"];
    };
    Message: {
      deleted?: boolean;
      contentArray?: components["schemas"]["Message"][];
      /** Format: double */
      idx?: number;
      detail?: string;
      filename?: string;
      file_id?: string;
      file_data?: string;
      /** @enum {string} */
      type?: "input_image" | "input_text" | "input_file";
      audio_data?: string;
      image_url?: string;
      timestamp?: string;
      tool_call_id?: string;
      tool_calls?: components["schemas"]["FunctionCall"][];
      content?: string;
      name?: string;
      instruction?: string;
      role?: string | ("user" | "assistant" | "system" | "developer");
      id?: string;
      /** @enum {string} */
      _type: "functionCall" | "function" | "image" | "file" | "message" | "autoInput" | "contentArray" | "audio";
    };
    Tool: {
      name: string;
      description: string;
      parameters?: components["schemas"]["Record_string.any_"];
    };
    HeliconeEventTool: {
      /** @enum {string} */
      _type: "tool";
      toolName: string;
      input: unknown;
      [key: string]: unknown;
    };
    HeliconeEventVectorDB: {
      /** @enum {string} */
      _type: "vector_db";
      /** @enum {string} */
      operation: "search" | "insert" | "delete" | "update";
      text?: string;
      vector?: number[];
      /** Format: double */
      topK?: number;
      filter?: Record<string, never>;
      databaseName?: string;
      [key: string]: unknown;
    };
    LLMRequestBody: {
      llm_type?: components["schemas"]["LlmType"];
      provider?: string;
      model?: string;
      messages?: components["schemas"]["Message"][] | null;
      prompt?: string | null;
      instructions?: string | null;
      /** Format: double */
      max_tokens?: number | null;
      /** Format: double */
      temperature?: number | null;
      /** Format: double */
      top_p?: number | null;
      /** Format: double */
      seed?: number | null;
      stream?: boolean | null;
      /** Format: double */
      presence_penalty?: number | null;
      /** Format: double */
      frequency_penalty?: number | null;
      stop?: (string[] | string) | null;
      /** @enum {string|null} */
      reasoning_effort?: "low" | "medium" | "high" | null;
      tools?: components["schemas"]["Tool"][];
      parallel_tool_calls?: boolean | null;
      tool_choice?: {
        name?: string;
        /** @enum {string} */
        type: "none" | "auto" | "any" | "tool";
      };
      response_format?: {
        json_schema?: unknown;
        type: string;
      };
      toolDetails?: components["schemas"]["HeliconeEventTool"];
      vectorDBDetails?: components["schemas"]["HeliconeEventVectorDB"];
      input?: string | string[];
      /** Format: double */
      n?: number | null;
      size?: string;
      quality?: string;
    };
    Response: {
      contentArray?: components["schemas"]["Response"][];
      detail?: string;
      filename?: string;
      file_id?: string;
      file_data?: string;
      /** Format: double */
      idx?: number;
      audio_data?: string;
      image_url?: string;
      timestamp?: string;
      tool_call_id?: string;
      tool_calls?: components["schemas"]["FunctionCall"][];
      text?: string;
      /** @enum {string} */
      type: "input_image" | "input_text" | "input_file";
      name?: string;
      /** @enum {string} */
      role: "user" | "assistant" | "system" | "developer";
      id?: string;
      /** @enum {string} */
      _type: "functionCall" | "function" | "image" | "text" | "file" | "contentArray";
    };
    LLMResponseBody: {
      vectorDBDetailsResponse?: {
        /** @enum {string} */
        _type: "vector_db";
        metadata: {
          timestamp: string;
          destination_parsed?: boolean;
          destination?: string;
        };
        /** Format: double */
        actualSimilarity?: number;
        /** Format: double */
        similarityThreshold?: number;
        message: string;
        status: string;
      };
      toolDetailsResponse?: {
        toolName: string;
        /** @enum {string} */
        _type: "tool";
        metadata: {
          timestamp: string;
        };
        tips: string[];
        message: string;
        status: string;
      };
      error?: {
        heliconeMessage: unknown;
      };
      model?: string | null;
      instructions?: string | null;
      responses?: components["schemas"]["Response"][] | null;
      messages?: components["schemas"]["Message"][] | null;
    };
    LlmSchema: {
      request: components["schemas"]["LLMRequestBody"];
      response?: components["schemas"]["LLMResponseBody"] | null;
    };
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.number_": {
      [key: string]: number;
    };
    HeliconeRequest: {
      response_id: string | null;
      response_created_at: string | null;
      response_body?: unknown;
      /** Format: double */
      response_status: number;
      response_model: string | null;
      request_id: string;
      request_created_at: string;
      request_body: unknown;
      request_path: string;
      request_user_id: string | null;
      request_properties: components["schemas"]["Record_string.string_"] | null;
      request_model: string | null;
      model_override: string | null;
      helicone_user: string | null;
      provider: components["schemas"]["Provider"];
      /** Format: double */
      delay_ms: number | null;
      /** Format: double */
      time_to_first_token: number | null;
      /** Format: double */
      total_tokens: number | null;
      /** Format: double */
      prompt_tokens: number | null;
      /** Format: double */
      prompt_cache_write_tokens: number | null;
      /** Format: double */
      prompt_cache_read_tokens: number | null;
      /** Format: double */
      completion_tokens: number | null;
      /** Format: double */
      prompt_audio_tokens: number | null;
      /** Format: double */
      completion_audio_tokens: number | null;
      prompt_id: string | null;
      feedback_created_at?: string | null;
      feedback_id?: string | null;
      feedback_rating?: boolean | null;
      signed_body_url?: string | null;
      llmSchema: components["schemas"]["LlmSchema"] | null;
      country_code: string | null;
      asset_ids: string[] | null;
      asset_urls: components["schemas"]["Record_string.string_"] | null;
      scores: components["schemas"]["Record_string.number_"] | null;
      /** Format: double */
      costUSD?: number | null;
      properties: components["schemas"]["Record_string.string_"];
      assets: string[];
      target_url: string;
      model: string;
    };
    "ResultSuccess_HeliconeRequest-Array_": {
      data: components["schemas"]["HeliconeRequest"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_HeliconeRequest-Array.string_": components["schemas"]["ResultSuccess_HeliconeRequest-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description Make all properties in T optional */
    Partial_NumberOperators_: {
      /** Format: double */
      "not-equals"?: number;
      /** Format: double */
      equals?: number;
      /** Format: double */
      gte?: number;
      /** Format: double */
      lte?: number;
      /** Format: double */
      lt?: number;
      /** Format: double */
      gt?: number;
    };
    /** @description Make all properties in T optional */
    Partial_TimestampOperators_: {
      gte?: string;
      lte?: string;
      lt?: string;
      gt?: string;
    };
    /** @description Make all properties in T optional */
    Partial_BooleanOperators_: {
      equals?: boolean;
    };
    /** @description Make all properties in T optional */
    Partial_TextOperators_: {
      "not-equals"?: string;
      equals?: string;
      like?: string;
      ilike?: string;
      contains?: string;
      "not-contains"?: string;
    };
    /** @description Make all properties in T optional */
    Partial_FeedbackTableToOperators_: {
      id?: components["schemas"]["Partial_NumberOperators_"];
      created_at?: components["schemas"]["Partial_TimestampOperators_"];
      rating?: components["schemas"]["Partial_BooleanOperators_"];
      response_id?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description Make all properties in T optional */
    Partial_RequestTableToOperators_: {
      prompt?: components["schemas"]["Partial_TextOperators_"];
      created_at?: components["schemas"]["Partial_TimestampOperators_"];
      user_id?: components["schemas"]["Partial_TextOperators_"];
      auth_hash?: components["schemas"]["Partial_TextOperators_"];
      org_id?: components["schemas"]["Partial_TextOperators_"];
      id?: components["schemas"]["Partial_TextOperators_"];
      node_id?: components["schemas"]["Partial_TextOperators_"];
      model?: components["schemas"]["Partial_TextOperators_"];
      modelOverride?: components["schemas"]["Partial_TextOperators_"];
      path?: components["schemas"]["Partial_TextOperators_"];
      prompt_id?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description Make all properties in T optional */
    Partial_ResponseTableToOperators_: {
      body_tokens?: components["schemas"]["Partial_NumberOperators_"];
      body_model?: components["schemas"]["Partial_TextOperators_"];
      body_completion?: components["schemas"]["Partial_TextOperators_"];
      status?: components["schemas"]["Partial_NumberOperators_"];
      model?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description Make all properties in T optional */
    Partial_TimestampOperatorsTyped_: {
      /** Format: date-time */
      gte?: string;
      /** Format: date-time */
      lte?: string;
      /** Format: date-time */
      lt?: string;
      /** Format: date-time */
      gt?: string;
    };
    /** @description Make all properties in T optional */
    Partial_CacheHitsTableToOperators_: {
      organization_id?: components["schemas"]["Partial_TextOperators_"];
      request_id?: components["schemas"]["Partial_TextOperators_"];
      latency?: components["schemas"]["Partial_NumberOperators_"];
      completion_tokens?: components["schemas"]["Partial_NumberOperators_"];
      prompt_tokens?: components["schemas"]["Partial_NumberOperators_"];
      created_at?: components["schemas"]["Partial_TimestampOperatorsTyped_"];
    };
    /** @description Make all properties in T optional */
    Partial_VectorOperators_: {
      contains?: string;
    };
    /** @description Make all properties in T optional */
    Partial_RequestResponseRMTToOperators_: {
      latency?: components["schemas"]["Partial_NumberOperators_"];
      status?: components["schemas"]["Partial_NumberOperators_"];
      request_created_at?: components["schemas"]["Partial_TimestampOperatorsTyped_"];
      response_created_at?: components["schemas"]["Partial_TimestampOperatorsTyped_"];
      model?: components["schemas"]["Partial_TextOperators_"];
      user_id?: components["schemas"]["Partial_TextOperators_"];
      organization_id?: components["schemas"]["Partial_TextOperators_"];
      node_id?: components["schemas"]["Partial_TextOperators_"];
      job_id?: components["schemas"]["Partial_TextOperators_"];
      threat?: components["schemas"]["Partial_BooleanOperators_"];
      request_id?: components["schemas"]["Partial_TextOperators_"];
      prompt_tokens?: components["schemas"]["Partial_NumberOperators_"];
      completion_tokens?: components["schemas"]["Partial_NumberOperators_"];
      total_tokens?: components["schemas"]["Partial_NumberOperators_"];
      target_url?: components["schemas"]["Partial_TextOperators_"];
      properties?: {
        [key: string]: components["schemas"]["Partial_TextOperators_"];
      };
      search_properties?: {
        [key: string]: components["schemas"]["Partial_TextOperators_"];
      };
      scores?: {
        [key: string]: components["schemas"]["Partial_TextOperators_"];
      };
      scores_column?: components["schemas"]["Partial_TextOperators_"];
      request_body?: components["schemas"]["Partial_VectorOperators_"];
      response_body?: components["schemas"]["Partial_VectorOperators_"];
    };
    /** @description Make all properties in T optional */
    Partial_SessionsRequestResponseRMTToOperators_: {
      session_session_id?: components["schemas"]["Partial_TextOperators_"];
      session_session_name?: components["schemas"]["Partial_TextOperators_"];
      session_total_cost?: components["schemas"]["Partial_NumberOperators_"];
      session_total_tokens?: components["schemas"]["Partial_NumberOperators_"];
      session_prompt_tokens?: components["schemas"]["Partial_NumberOperators_"];
      session_completion_tokens?: components["schemas"]["Partial_NumberOperators_"];
      session_total_requests?: components["schemas"]["Partial_NumberOperators_"];
      session_created_at?: components["schemas"]["Partial_TimestampOperatorsTyped_"];
      session_latest_request_created_at?: components["schemas"]["Partial_TimestampOperatorsTyped_"];
    };
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_FilterLeaf.feedback-or-request-or-response-or-properties-or-values-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_": {
      feedback?: components["schemas"]["Partial_FeedbackTableToOperators_"];
      request?: components["schemas"]["Partial_RequestTableToOperators_"];
      response?: components["schemas"]["Partial_ResponseTableToOperators_"];
      properties?: {
        [key: string]: components["schemas"]["Partial_TextOperators_"];
      };
      values?: {
        [key: string]: components["schemas"]["Partial_TextOperators_"];
      };
      cache_hits?: components["schemas"]["Partial_CacheHitsTableToOperators_"];
      request_response_rmt?: components["schemas"]["Partial_RequestResponseRMTToOperators_"];
      sessions_request_response_rmt?: components["schemas"]["Partial_SessionsRequestResponseRMTToOperators_"];
    };
    "FilterLeafSubset_feedback-or-request-or-response-or-properties-or-values-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_": components["schemas"]["Pick_FilterLeaf.feedback-or-request-or-response-or-properties-or-values-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_"];
    RequestFilterNode: components["schemas"]["FilterLeafSubset_feedback-or-request-or-response-or-properties-or-values-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_"] | components["schemas"]["RequestFilterBranch"] | "all";
    RequestFilterBranch: {
      right: components["schemas"]["RequestFilterNode"];
      /** @enum {string} */
      operator: "or" | "and";
      left: components["schemas"]["RequestFilterNode"];
    };
    /** @enum {string} */
    SortDirection: "asc" | "desc";
    SortLeafRequest: {
      /** @enum {boolean} */
      random?: true;
      created_at?: components["schemas"]["SortDirection"];
      cache_created_at?: components["schemas"]["SortDirection"];
      latency?: components["schemas"]["SortDirection"];
      last_active?: components["schemas"]["SortDirection"];
      total_tokens?: components["schemas"]["SortDirection"];
      completion_tokens?: components["schemas"]["SortDirection"];
      prompt_tokens?: components["schemas"]["SortDirection"];
      user_id?: components["schemas"]["SortDirection"];
      body_model?: components["schemas"]["SortDirection"];
      is_cached?: components["schemas"]["SortDirection"];
      request_prompt?: components["schemas"]["SortDirection"];
      response_text?: components["schemas"]["SortDirection"];
      properties?: {
        [key: string]: components["schemas"]["SortDirection"];
      };
      values?: {
        [key: string]: components["schemas"]["SortDirection"];
      };
      cost_usd?: components["schemas"]["SortDirection"];
    };
    RequestQueryParams: {
      filter: components["schemas"]["RequestFilterNode"];
      /** Format: double */
      offset?: number;
      /** Format: double */
      limit?: number;
      sort?: components["schemas"]["SortLeafRequest"];
      isCached?: boolean;
      includeInputs?: boolean;
      isPartOfExperiment?: boolean;
      isScored?: boolean;
    };
    ResultSuccess_HeliconeRequest_: {
      data: components["schemas"]["HeliconeRequest"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_HeliconeRequest.string_": components["schemas"]["ResultSuccess_HeliconeRequest_"] | components["schemas"]["ResultError_string_"];
    HeliconeRequestAsset: {
      assetUrl: string;
    };
    ResultSuccess_HeliconeRequestAsset_: {
      data: components["schemas"]["HeliconeRequestAsset"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_HeliconeRequestAsset.string_": components["schemas"]["ResultSuccess_HeliconeRequestAsset_"] | components["schemas"]["ResultError_string_"];
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.number-or-boolean-or-undefined_": {
      [key: string]: number | boolean;
    };
    Scores: components["schemas"]["Record_string.number-or-boolean-or-undefined_"];
    ScoreRequest: {
      scores: components["schemas"]["Scores"];
    };
    PromptsResult: {
      id: string;
      user_defined_id: string;
      description: string;
      pretty_name: string;
      created_at: string;
      /** Format: double */
      major_version: number;
      metadata?: components["schemas"]["Record_string.any_"];
    };
    "ResultSuccess_PromptsResult-Array_": {
      data: components["schemas"]["PromptsResult"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptsResult-Array.string_": components["schemas"]["ResultSuccess_PromptsResult-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description Make all properties in T optional */
    Partial_PromptToOperators_: {
      id?: components["schemas"]["Partial_TextOperators_"];
      user_defined_id?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_FilterLeaf.prompt_v2_": {
      prompt_v2?: components["schemas"]["Partial_PromptToOperators_"];
    };
    FilterLeafSubset_prompt_v2_: components["schemas"]["Pick_FilterLeaf.prompt_v2_"];
    PromptsFilterNode: components["schemas"]["FilterLeafSubset_prompt_v2_"] | components["schemas"]["PromptsFilterBranch"] | "all";
    PromptsFilterBranch: {
      right: components["schemas"]["PromptsFilterNode"];
      /** @enum {string} */
      operator: "or" | "and";
      left: components["schemas"]["PromptsFilterNode"];
    };
    PromptsQueryParams: {
      filter: components["schemas"]["PromptsFilterNode"];
    };
    PromptResult: {
      id: string;
      user_defined_id: string;
      description: string;
      pretty_name: string;
      /** Format: double */
      major_version: number;
      latest_version_id: string;
      latest_model_used: string;
      created_at: string;
      last_used: string;
      versions: string[];
      metadata?: components["schemas"]["Record_string.any_"];
    };
    ResultSuccess_PromptResult_: {
      data: components["schemas"]["PromptResult"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptResult.string_": components["schemas"]["ResultSuccess_PromptResult_"] | components["schemas"]["ResultError_string_"];
    PromptQueryParams: {
      timeFilter: {
        end: string;
        start: string;
      };
    };
    CreatePromptResponse: {
      id: string;
      prompt_version_id: string;
    };
    ResultSuccess_CreatePromptResponse_: {
      data: components["schemas"]["CreatePromptResponse"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_CreatePromptResponse.string_": components["schemas"]["ResultSuccess_CreatePromptResponse_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__metadata-Record_string.any___": {
      data: {
        metadata: components["schemas"]["Record_string.any_"];
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__metadata-Record_string.any__.string_": components["schemas"]["ResultSuccess__metadata-Record_string.any___"] | components["schemas"]["ResultError_string_"];
    PromptEditSubversionLabelParams: {
      label: string;
    };
    PromptEditSubversionTemplateParams: {
      heliconeTemplate: unknown;
      experimentId?: string;
    };
    PromptCreateSubversionParams: {
      newHeliconeTemplate: unknown;
      isMajorVersion?: boolean;
      metadata?: components["schemas"]["Record_string.any_"];
      experimentId?: string;
      bumpForMajorPromptVersionId?: string;
    };
    PromptInputRecord: {
      id: string;
      inputs: components["schemas"]["Record_string.string_"];
      dataset_row_id?: string;
      source_request: string;
      prompt_version: string;
      created_at: string;
      response_body?: string;
      request_body?: string;
      auto_prompt_inputs: unknown[];
    };
    "ResultSuccess_PromptInputRecord-Array_": {
      data: components["schemas"]["PromptInputRecord"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptInputRecord-Array.string_": components["schemas"]["ResultSuccess_PromptInputRecord-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array_": {
      data: {
          meta: components["schemas"]["Record_string.any_"];
          dataset: string;
          /** Format: double */
          num_hypotheses: number;
          created_at: string;
          id: string;
        }[];
      /** @enum {number|null} */
      error: null;
    };
    "Result__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array.string_": components["schemas"]["ResultSuccess__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess_PromptVersionResult-Array_": {
      data: components["schemas"]["PromptVersionResult"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptVersionResult-Array.string_": components["schemas"]["ResultSuccess_PromptVersionResult-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description Make all properties in T optional */
    Partial_PromptVersionsToOperators_: {
      minor_version?: components["schemas"]["Partial_NumberOperators_"];
      major_version?: components["schemas"]["Partial_NumberOperators_"];
      id?: components["schemas"]["Partial_TextOperators_"];
      prompt_v2?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_FilterLeaf.prompts_versions_": {
      prompts_versions?: components["schemas"]["Partial_PromptVersionsToOperators_"];
    };
    FilterLeafSubset_prompts_versions_: components["schemas"]["Pick_FilterLeaf.prompts_versions_"];
    PromptVersionsFilterNode: components["schemas"]["FilterLeafSubset_prompts_versions_"] | components["schemas"]["PromptVersionsFilterBranch"] | "all";
    PromptVersionsFilterBranch: {
      right: components["schemas"]["PromptVersionsFilterNode"];
      /** @enum {string} */
      operator: "or" | "and";
      left: components["schemas"]["PromptVersionsFilterNode"];
    };
    PromptVersionsQueryParams: {
      filter?: components["schemas"]["PromptVersionsFilterNode"];
      includeExperimentVersions?: boolean;
    };
    PromptVersionResultCompiled: {
      id: string;
      /** Format: double */
      minor_version: number;
      /** Format: double */
      major_version: number;
      prompt_v2: string;
      model: string;
      prompt_compiled: unknown;
    };
    ResultSuccess_PromptVersionResultCompiled_: {
      data: components["schemas"]["PromptVersionResultCompiled"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptVersionResultCompiled.string_": components["schemas"]["ResultSuccess_PromptVersionResultCompiled_"] | components["schemas"]["ResultError_string_"];
    PromptVersiosQueryParamsCompiled: {
      filter?: components["schemas"]["PromptVersionsFilterNode"];
      includeExperimentVersions?: boolean;
      inputs: components["schemas"]["Record_string.string_"];
    };
    PromptVersionResultFilled: {
      id: string;
      /** Format: double */
      minor_version: number;
      /** Format: double */
      major_version: number;
      prompt_v2: string;
      model: string;
      filled_helicone_template: unknown;
    };
    ResultSuccess_PromptVersionResultFilled_: {
      data: components["schemas"]["PromptVersionResultFilled"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptVersionResultFilled.string_": components["schemas"]["ResultSuccess_PromptVersionResultFilled_"] | components["schemas"]["ResultError_string_"];
    UpgradeToProRequest: {
      addons?: {
        evals?: boolean;
        experiments?: boolean;
        prompts?: boolean;
        alerts?: boolean;
      };
      /** Format: double */
      seats?: number;
      /** @enum {string} */
      ui_mode?: "embedded" | "hosted";
    };
    UpgradeToTeamBundleRequest: {
      /** @enum {string} */
      ui_mode?: "embedded" | "hosted";
    };
    LLMUsage: {
      model: string;
      provider: string;
      /** Format: double */
      prompt_tokens: number;
      /** Format: double */
      completion_tokens: number;
      /** Format: double */
      total_count: number;
      /** Format: double */
      amount: number;
      description: string;
      totalCost: {
        /** Format: double */
        prompt_token: number;
        /** Format: double */
        completion_token: number;
      };
    };
    "ResultSuccess__40_Database-at-public_91_Tables_93_-at-organization_91_Row_93_-and-_role-string__41_-Array_": {
      data: (({
          tier: string | null;
          subscription_status: string | null;
          stripe_subscription_item_id: string | null;
          stripe_subscription_id: string | null;
          stripe_metadata: components["schemas"]["Json"];
          stripe_customer_id: string | null;
          soft_delete: boolean;
          size: string | null;
          reseller_id: string | null;
          /** Format: double */
          request_limit: number | null;
          referral: string | null;
          /** Format: double */
          percent_to_log: number | null;
          owner: string;
          organization_type: string;
          org_provider_key: string | null;
          onboarding_status: components["schemas"]["Json"];
          name: string;
          logo_path: string | null;
          limits: components["schemas"]["Json"] | null;
          is_personal: boolean;
          is_main_org: boolean;
          id: string;
          icon: string;
          has_onboarded: boolean;
          governance_settings: components["schemas"]["Json"] | null;
          domain: string | null;
          created_at: string | null;
          color: string;
        }) & {
          role: string;
        })[];
      /** @enum {number|null} */
      error: null;
    };
    "Result__40_Database-at-public_91_Tables_93_-at-organization_91_Row_93_-and-_role-string__41_-Array.string_": components["schemas"]["ResultSuccess__40_Database-at-public_91_Tables_93_-at-organization_91_Row_93_-and-_role-string__41_-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess_Database-at-public_91_Tables_93_-at-organization_91_Row_93__": {
      data: {
        tier: string | null;
        subscription_status: string | null;
        stripe_subscription_item_id: string | null;
        stripe_subscription_id: string | null;
        stripe_metadata: components["schemas"]["Json"];
        stripe_customer_id: string | null;
        soft_delete: boolean;
        size: string | null;
        reseller_id: string | null;
        /** Format: double */
        request_limit: number | null;
        referral: string | null;
        /** Format: double */
        percent_to_log: number | null;
        owner: string;
        organization_type: string;
        org_provider_key: string | null;
        onboarding_status: components["schemas"]["Json"];
        name: string;
        logo_path: string | null;
        limits: components["schemas"]["Json"] | null;
        is_personal: boolean;
        is_main_org: boolean;
        id: string;
        icon: string;
        has_onboarded: boolean;
        governance_settings: components["schemas"]["Json"] | null;
        domain: string | null;
        created_at: string | null;
        color: string;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result_Database-at-public_91_Tables_93_-at-organization_91_Row_93_.string_": components["schemas"]["ResultSuccess_Database-at-public_91_Tables_93_-at-organization_91_Row_93__"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array_": {
      data: {
          tier: string;
          subscription_status: string;
          stripe_subscription_item_id: string;
          stripe_subscription_id: string;
          stripe_metadata: components["schemas"]["Json"];
          stripe_customer_id: string;
          soft_delete: boolean;
          size: string;
          reseller_id: string;
          /** Format: double */
          request_limit: number;
          referral: string;
          /** Format: double */
          percent_to_log: number;
          owner: string;
          organization_type: string;
          org_provider_key: string;
          onboarding_status: components["schemas"]["Json"];
          name: string;
          logo_path: string;
          limits: components["schemas"]["Json"];
          is_personal: boolean;
          is_main_org: boolean;
          id: string;
          icon: string;
          has_onboarded: boolean;
          governance_settings: components["schemas"]["Json"];
          domain: string;
          created_at: string;
          color: string;
        }[];
      /** @enum {number|null} */
      error: null;
    };
    "Result__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array.string_": components["schemas"]["ResultSuccess__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess_Result__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array.string__": {
      data: components["schemas"]["Result__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array.string_"];
      /** @enum {number|null} */
      error: null;
    };
    ResultError_unknown_: {
      /** @enum {number|null} */
      data: null;
      error: unknown;
    };
    "Result_Result__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array.string_.unknown_": components["schemas"]["ResultSuccess_Result__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array.string__"] | components["schemas"]["ResultError_unknown_"];
    NewOrganizationParams: {
      tier?: string | null;
      subscription_status?: string | null;
      stripe_subscription_item_id?: string | null;
      stripe_subscription_id?: string | null;
      stripe_metadata?: components["schemas"]["Json"];
      stripe_customer_id?: string | null;
      soft_delete?: boolean;
      size?: string | null;
      reseller_id?: string | null;
      /** Format: double */
      request_limit?: number | null;
      referral?: string | null;
      /** Format: double */
      percent_to_log?: number | null;
      owner: string;
      organization_type?: string;
      org_provider_key?: string | null;
      onboarding_status?: components["schemas"]["Json"];
      name: string;
      logo_path?: string | null;
      limits?: components["schemas"]["Json"] | null;
      is_personal?: boolean;
      is_main_org?: boolean;
      id?: string;
      icon?: string;
      has_onboarded?: boolean;
      governance_settings?: components["schemas"]["Json"] | null;
      domain?: string | null;
      created_at?: string | null;
      color?: string;
    };
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_NewOrganizationParams.name-or-color-or-icon-or-org_provider_key-or-limits-or-reseller_id-or-organization_type-or-onboarding_status_": {
      name: string;
      color?: string;
      icon?: string;
      org_provider_key?: string;
      limits?: components["schemas"]["Json"];
      reseller_id?: string;
      organization_type?: string;
      onboarding_status?: components["schemas"]["Json"];
    };
    UpdateOrganizationParams: components["schemas"]["Pick_NewOrganizationParams.name-or-color-or-icon-or-org_provider_key-or-limits-or-reseller_id-or-organization_type-or-onboarding_status_"] & {
      variant?: string;
    };
    UIFilterRowTree: components["schemas"]["UIFilterRowNode"] | components["schemas"]["FilterRow"];
    UIFilterRowNode: {
      /** @enum {string} */
      operator: "and" | "or";
      rows: components["schemas"]["UIFilterRowTree"][];
    };
    FilterRow: {
      value: string;
      /** Format: double */
      operatorIdx: number;
      /** Format: double */
      filterMapIdx: number;
    };
    OrganizationFilter: {
      softDelete: boolean;
      createdAt?: string;
      filter: components["schemas"]["UIFilterRowTree"][];
      name: string;
      id: string;
    };
    OrganizationLayout: {
      filters: components["schemas"]["OrganizationFilter"][];
      type: string;
      organization_id: string;
      id: string;
    };
    ResultSuccess_OrganizationLayout_: {
      data: components["schemas"]["OrganizationLayout"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_OrganizationLayout.string_": components["schemas"]["ResultSuccess_OrganizationLayout_"] | components["schemas"]["ResultError_string_"];
    OrganizationMember: {
      org_role: string;
      member: string;
      email: string;
    };
    "ResultSuccess_OrganizationMember-Array_": {
      data: components["schemas"]["OrganizationMember"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_OrganizationMember-Array.string_": components["schemas"]["ResultSuccess_OrganizationMember-Array_"] | components["schemas"]["ResultError_string_"];
    OrganizationOwner: {
      tier: string;
      email: string;
    };
    "ResultSuccess_OrganizationOwner-Array_": {
      data: components["schemas"]["OrganizationOwner"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_OrganizationOwner-Array.string_": components["schemas"]["ResultSuccess_OrganizationOwner-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description Make all properties in T optional */
    "Partial__currentStep-string--selectedTier-string--hasOnboarded-boolean--members-any-Array--addons_58__prompts-boolean--experiments-boolean--evals-boolean___": {
      currentStep?: string;
      selectedTier?: string;
      hasOnboarded?: boolean;
      members?: unknown[];
      addons?: {
        evals: boolean;
        experiments: boolean;
        prompts: boolean;
      };
    };
    OnboardingStatus: components["schemas"]["Partial__currentStep-string--selectedTier-string--hasOnboarded-boolean--members-any-Array--addons_58__prompts-boolean--experiments-boolean--evals-boolean___"];
    HeliconeMeta: {
      heliconeManualAccessKey?: string;
      lytixHost?: string;
      lytixKey?: string;
      posthogHost?: string;
      posthogApiKey?: string;
      webhookEnabled: boolean;
      omitResponseLog: boolean;
      omitRequestLog: boolean;
      modelOverride?: string;
    };
    /**
     * @description Parses a string containing custom JSX-like tags and extracts information to produce two outputs:
     * 1. A version of the string with all JSX tags removed, leaving only the text content.
     * 2. An object representing a template with self-closing JSX tags and a separate mapping of keys to their
     *    corresponding text content.
     *
     * The function specifically targets `<helicone-prompt-input>` tags, which include a `key` attribute and enclosed text content.
     * These tags are transformed or removed based on the desired output structure. The process involves regular expressions
     * to match and manipulate the input string to produce the outputs.
     *
     * Parameters:
     * - input: A string containing the text and JSX-like tags to be parsed.
     *
     * Returns:
     * An object with two properties:
     * 1. stringWithoutJSXTags: A string where all `<helicone-prompt-input>` tags are removed, and only their text content remains.
     * 2. templateWithInputs: An object containing:
     *    - template: A version of the input string where `<helicone-prompt-input>` tags are replaced with self-closing versions,
     *      preserving the `key` attributes but removing the text content.
     *    - inputs: An object mapping the `key` attributes to their corresponding text content, effectively extracting
     *      the data from the original tags.
     *
     * Example Usage:
     * ```ts
     * const input = `
     * The scene is <helicone-prompt-input key="scene" >Harry Potter</helicone-prompt-input>.
     * <helicone-prompt-input key="name" >justin</helicone-prompt-input>  test`;
     *
     * const expectedOutput = parseJSXString(input);
     * console.log(expectedOutput);
     * ```
     * The function is useful for preprocessing strings with embedded custom JSX-like tags, extracting useful data,
     * and preparing templates for further processing or rendering. It demonstrates a practical application of regular
     * expressions for text manipulation in TypeScript, specifically tailored to a custom JSX-like syntax.
     */
    TemplateWithInputs: {
      template: Record<string, never>;
      inputs: {
        [key: string]: string;
      };
      autoInputs: unknown[];
    };
    Log: {
      response: {
        /** Format: double */
        delayMs: number;
        /** Format: date-time */
        responseCreatedAt: string;
        /** Format: double */
        timeToFirstToken?: number;
        /** Format: double */
        bodySize: number;
        /** Format: double */
        status: number;
        id: string;
      };
      request: {
        experimentRowIndex?: string;
        experimentColumnId?: string;
        heliconeTemplate?: components["schemas"]["TemplateWithInputs"];
        isStream: boolean;
        /** Format: date-time */
        requestCreatedAt: string;
        countryCode?: string;
        threat?: boolean;
        path: string;
        /** Format: double */
        bodySize: number;
        provider: components["schemas"]["Provider"];
        targetUrl: string;
        heliconeProxyKeyId?: string;
        /** Format: double */
        heliconeApiKeyId?: number;
        properties: components["schemas"]["Record_string.string_"];
        promptVersion?: string;
        promptId?: string;
        userId: string;
        id: string;
      };
    };
    KafkaMessageContents: {
      log: components["schemas"]["Log"];
      heliconeMeta: components["schemas"]["HeliconeMeta"];
      authorization: string;
    };
    ResultSuccess_any_: {
      data: unknown;
      /** @enum {number|null} */
      error: null;
    };
    ResultSuccess_unknown_: {
      data: unknown;
      /** @enum {number|null} */
      error: null;
    };
    /** @enum {string} */
    KeyPermissions: "w" | "rw";
    GenerateHashQueryParams: {
      apiKey: string;
      governance: boolean;
      keyName: string;
      permissions: components["schemas"]["KeyPermissions"];
    };
    FineTuneResult: {
      error: string;
    } | {
      data: {
        url: string;
        fineTuneJob: string;
      };
      success: boolean;
    };
    FineTuneBodyParams: {
      providerKeyId: string;
    };
    FineTuneBody: {
      providerKeyId: string;
    };
    StoreFilterType: {
      createdAt?: string;
      filter: unknown;
      name: string;
      id?: string;
    };
    "ResultSuccess_StoreFilterType-Array_": {
      data: components["schemas"]["StoreFilterType"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_StoreFilterType-Array.string_": components["schemas"]["ResultSuccess_StoreFilterType-Array_"] | components["schemas"]["ResultError_string_"];
    ResultSuccess_StoreFilterType_: {
      data: components["schemas"]["StoreFilterType"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_StoreFilterType.string_": components["schemas"]["ResultSuccess_StoreFilterType_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__id-string__": {
      data: {
        id: string;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__id-string_.string_": components["schemas"]["ResultSuccess__id-string__"] | components["schemas"]["ResultError_string_"];
    "ChatCompletionTokenLogprob.TopLogprob": {
      /** @description The token. */
      token: string;
      /**
       * @description A list of integers representing the UTF-8 bytes representation of the token.
       * Useful in instances where characters are represented by multiple tokens and
       * their byte representations must be combined to generate the correct text
       * representation. Can be `null` if there is no bytes representation for the token.
       */
      bytes: number[] | null;
      /**
       * Format: double
       * @description The log probability of this token, if it is within the top 20 most likely
       * tokens. Otherwise, the value `-9999.0` is used to signify that the token is very
       * unlikely.
       */
      logprob: number;
    };
    ChatCompletionTokenLogprob: {
      /** @description The token. */
      token: string;
      /**
       * @description A list of integers representing the UTF-8 bytes representation of the token.
       * Useful in instances where characters are represented by multiple tokens and
       * their byte representations must be combined to generate the correct text
       * representation. Can be `null` if there is no bytes representation for the token.
       */
      bytes: number[] | null;
      /**
       * Format: double
       * @description The log probability of this token, if it is within the top 20 most likely
       * tokens. Otherwise, the value `-9999.0` is used to signify that the token is very
       * unlikely.
       */
      logprob: number;
      /**
       * @description List of the most likely tokens and their log probability, at this token
       * position. In rare cases, there may be fewer than the number of requested
       * `top_logprobs` returned.
       */
      top_logprobs: components["schemas"]["ChatCompletionTokenLogprob.TopLogprob"][];
    };
    /** @description Log probability information for the choice. */
    "ChatCompletion.Choice.Logprobs": {
      /** @description A list of message content tokens with log probability information. */
      content: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
      /** @description A list of message refusal tokens with log probability information. */
      refusal: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
    };
    /**
     * @description If the audio output modality is requested, this object contains data about the
     * audio response from the model.
     * [Learn more](https://platform.openai.com/docs/guides/audio).
     */
    ChatCompletionAudio: {
      /** @description Unique identifier for this audio response. */
      id: string;
      /**
       * @description Base64 encoded audio bytes generated by the model, in the format specified in
       * the request.
       */
      data: string;
      /**
       * Format: double
       * @description The Unix timestamp (in seconds) for when this audio response will no longer be
       * accessible on the server for use in multi-turn conversations.
       */
      expires_at: number;
      /** @description Transcript of the audio generated by the model. */
      transcript: string;
    };
    /** @deprecated */
    "ChatCompletionMessage.FunctionCall": {
      /**
       * @description The arguments to call the function with, as generated by the model in JSON
       * format. Note that the model does not always generate valid JSON, and may
       * hallucinate parameters not defined by your function schema. Validate the
       * arguments in your code before calling your function.
       */
      arguments: string;
      /** @description The name of the function to call. */
      name: string;
    };
    /** @description The function that the model called. */
    "ChatCompletionMessageToolCall.Function": {
      /**
       * @description The arguments to call the function with, as generated by the model in JSON
       * format. Note that the model does not always generate valid JSON, and may
       * hallucinate parameters not defined by your function schema. Validate the
       * arguments in your code before calling your function.
       */
      arguments: string;
      /** @description The name of the function to call. */
      name: string;
    };
    ChatCompletionMessageToolCall: {
      /** @description The ID of the tool call. */
      id: string;
      /** @description The function that the model called. */
      function: components["schemas"]["ChatCompletionMessageToolCall.Function"];
      /**
       * @description The type of the tool. Currently, only `function` is supported.
       * @enum {string}
       */
      type: "function";
    };
    /** @description A chat completion message generated by the model. */
    ChatCompletionMessage: {
      /** @description The contents of the message. */
      content: string | null;
      /** @description The refusal message generated by the model. */
      refusal: string | null;
      /**
       * @description The role of the author of this message.
       * @enum {string}
       */
      role: "assistant";
      /**
       * @description If the audio output modality is requested, this object contains data about the
       * audio response from the model.
       * [Learn more](https://platform.openai.com/docs/guides/audio).
       */
      audio?: components["schemas"]["ChatCompletionAudio"] | null;
      /** @deprecated */
      function_call?: components["schemas"]["ChatCompletionMessage.FunctionCall"] | null;
      /** @description The tool calls generated by the model, such as function calls. */
      tool_calls?: components["schemas"]["ChatCompletionMessageToolCall"][];
    };
    "ChatCompletion.Choice": {
      /**
       * @description The reason the model stopped generating tokens. This will be `stop` if the model
       * hit a natural stop point or a provided stop sequence, `length` if the maximum
       * number of tokens specified in the request was reached, `content_filter` if
       * content was omitted due to a flag from our content filters, `tool_calls` if the
       * model called a tool, or `function_call` (deprecated) if the model called a
       * function.
       * @enum {string}
       */
      finish_reason: "stop" | "length" | "tool_calls" | "content_filter" | "function_call";
      /**
       * Format: double
       * @description The index of the choice in the list of choices.
       */
      index: number;
      /** @description Log probability information for the choice. */
      logprobs: components["schemas"]["ChatCompletion.Choice.Logprobs"] | null;
      /** @description A chat completion message generated by the model. */
      message: components["schemas"]["ChatCompletionMessage"];
    };
    /** @description Breakdown of tokens used in a completion. */
    "CompletionUsage.CompletionTokensDetails": {
      /**
       * Format: double
       * @description Audio input tokens generated by the model.
       */
      audio_tokens?: number;
      /**
       * Format: double
       * @description Tokens generated by the model for reasoning.
       */
      reasoning_tokens?: number;
    };
    /** @description Breakdown of tokens used in the prompt. */
    "CompletionUsage.PromptTokensDetails": {
      /**
       * Format: double
       * @description Audio input tokens present in the prompt.
       */
      audio_tokens?: number;
      /**
       * Format: double
       * @description Cached tokens present in the prompt.
       */
      cached_tokens?: number;
    };
    /** @description Usage statistics for the completion request. */
    CompletionUsage: {
      /**
       * Format: double
       * @description Number of tokens in the generated completion.
       */
      completion_tokens: number;
      /**
       * Format: double
       * @description Number of tokens in the prompt.
       */
      prompt_tokens: number;
      /**
       * Format: double
       * @description Total number of tokens used in the request (prompt + completion).
       */
      total_tokens: number;
      /** @description Breakdown of tokens used in a completion. */
      completion_tokens_details?: components["schemas"]["CompletionUsage.CompletionTokensDetails"];
      /** @description Breakdown of tokens used in the prompt. */
      prompt_tokens_details?: components["schemas"]["CompletionUsage.PromptTokensDetails"];
    };
    /**
     * @description Represents a chat completion response returned by model, based on the provided
     * input.
     */
    ChatCompletion: {
      /** @description A unique identifier for the chat completion. */
      id: string;
      /**
       * @description A list of chat completion choices. Can be more than one if `n` is greater
       * than 1.
       */
      choices: components["schemas"]["ChatCompletion.Choice"][];
      /**
       * Format: double
       * @description The Unix timestamp (in seconds) of when the chat completion was created.
       */
      created: number;
      /** @description The model used for the chat completion. */
      model: string;
      /**
       * @description The object type, which is always `chat.completion`.
       * @enum {string}
       */
      object: "chat.completion";
      /**
       * @description The service tier used for processing the request. This field is only included if
       * the `service_tier` parameter is specified in the request.
       * @enum {string|null}
       */
      service_tier?: "scale" | "default" | null;
      /**
       * @description This fingerprint represents the backend configuration that the model runs with.
       *
       * Can be used in conjunction with the `seed` request parameter to understand when
       * backend changes have been made that might impact determinism.
       */
      system_fingerprint?: string;
      /** @description Usage statistics for the completion request. */
      usage?: components["schemas"]["CompletionUsage"];
    };
    ResultSuccess_ChatCompletion_: {
      data: components["schemas"]["ChatCompletion"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ChatCompletion.string_": components["schemas"]["ResultSuccess_ChatCompletion_"] | components["schemas"]["ResultError_string_"];
    /**
     * @description Learn about
     * [text inputs](https://platform.openai.com/docs/guides/text-generation).
     */
    ChatCompletionContentPartText: {
      /** @description The text content. */
      text: string;
      /**
       * @description The type of the content part.
       * @enum {string}
       */
      type: "text";
    };
    ChatCompletionSystemMessageParam: {
      /** @description The contents of the system message. */
      content: string | components["schemas"]["ChatCompletionContentPartText"][];
      /**
       * @description The role of the messages author, in this case `system`.
       * @enum {string}
       */
      role: "system";
      /**
       * @description An optional name for the participant. Provides the model information to
       * differentiate between participants of the same role.
       */
      name?: string;
    };
    "ChatCompletionContentPartImage.ImageURL": {
      /** @description Either a URL of the image or the base64 encoded image data. */
      url: string;
      /**
       * @description Specifies the detail level of the image. Learn more in the
       * [Vision guide](https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding).
       * @enum {string}
       */
      detail?: "auto" | "low" | "high";
    };
    /** @description Learn about [image inputs](https://platform.openai.com/docs/guides/vision). */
    ChatCompletionContentPartImage: {
      image_url: components["schemas"]["ChatCompletionContentPartImage.ImageURL"];
      /**
       * @description The type of the content part.
       * @enum {string}
       */
      type: "image_url";
    };
    "ChatCompletionContentPartInputAudio.InputAudio": {
      /** @description Base64 encoded audio data. */
      data: string;
      /**
       * @description The format of the encoded audio data. Currently supports "wav" and "mp3".
       * @enum {string}
       */
      format: "wav" | "mp3";
    };
    /** @description Learn about [audio inputs](https://platform.openai.com/docs/guides/audio). */
    ChatCompletionContentPartInputAudio: {
      input_audio: components["schemas"]["ChatCompletionContentPartInputAudio.InputAudio"];
      /**
       * @description The type of the content part. Always `input_audio`.
       * @enum {string}
       */
      type: "input_audio";
    };
    /**
     * @description Learn about
     * [text inputs](https://platform.openai.com/docs/guides/text-generation).
     */
    ChatCompletionContentPart: components["schemas"]["ChatCompletionContentPartText"] | components["schemas"]["ChatCompletionContentPartImage"] | components["schemas"]["ChatCompletionContentPartInputAudio"];
    ChatCompletionUserMessageParam: {
      /** @description The contents of the user message. */
      content: string | components["schemas"]["ChatCompletionContentPart"][];
      /**
       * @description The role of the messages author, in this case `user`.
       * @enum {string}
       */
      role: "user";
      /**
       * @description An optional name for the participant. Provides the model information to
       * differentiate between participants of the same role.
       */
      name?: string;
    };
    /**
     * @description Data about a previous audio response from the model.
     * [Learn more](https://platform.openai.com/docs/guides/audio).
     */
    "ChatCompletionAssistantMessageParam.Audio": {
      /** @description Unique identifier for a previous audio response from the model. */
      id: string;
    };
    ChatCompletionContentPartRefusal: {
      /** @description The refusal message generated by the model. */
      refusal: string;
      /**
       * @description The type of the content part.
       * @enum {string}
       */
      type: "refusal";
    };
    /** @deprecated */
    "ChatCompletionAssistantMessageParam.FunctionCall": {
      /**
       * @description The arguments to call the function with, as generated by the model in JSON
       * format. Note that the model does not always generate valid JSON, and may
       * hallucinate parameters not defined by your function schema. Validate the
       * arguments in your code before calling your function.
       */
      arguments: string;
      /** @description The name of the function to call. */
      name: string;
    };
    ChatCompletionAssistantMessageParam: {
      /**
       * @description The role of the messages author, in this case `assistant`.
       * @enum {string}
       */
      role: "assistant";
      /**
       * @description Data about a previous audio response from the model.
       * [Learn more](https://platform.openai.com/docs/guides/audio).
       */
      audio?: components["schemas"]["ChatCompletionAssistantMessageParam.Audio"] | null;
      /**
       * @description The contents of the assistant message. Required unless `tool_calls` or
       * `function_call` is specified.
       */
      content?: (string | ((components["schemas"]["ChatCompletionContentPartText"] | components["schemas"]["ChatCompletionContentPartRefusal"])[])) | null;
      /** @deprecated */
      function_call?: components["schemas"]["ChatCompletionAssistantMessageParam.FunctionCall"] | null;
      /**
       * @description An optional name for the participant. Provides the model information to
       * differentiate between participants of the same role.
       */
      name?: string;
      /** @description The refusal message by the assistant. */
      refusal?: string | null;
      /** @description The tool calls generated by the model, such as function calls. */
      tool_calls?: components["schemas"]["ChatCompletionMessageToolCall"][];
    };
    ChatCompletionToolMessageParam: {
      /** @description The contents of the tool message. */
      content: string | components["schemas"]["ChatCompletionContentPartText"][];
      /**
       * @description The role of the messages author, in this case `tool`.
       * @enum {string}
       */
      role: "tool";
      /** @description Tool call that this message is responding to. */
      tool_call_id: string;
    };
    /** @deprecated */
    ChatCompletionFunctionMessageParam: {
      /** @description The contents of the function message. */
      content: string | null;
      /** @description The name of the function to call. */
      name: string;
      /**
       * @description The role of the messages author, in this case `function`.
       * @enum {string}
       */
      role: "function";
    };
    ChatCompletionMessageParam: components["schemas"]["ChatCompletionSystemMessageParam"] | components["schemas"]["ChatCompletionUserMessageParam"] | components["schemas"]["ChatCompletionAssistantMessageParam"] | components["schemas"]["ChatCompletionToolMessageParam"] | components["schemas"]["ChatCompletionFunctionMessageParam"];
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.unknown_": {
      [key: string]: unknown;
    };
    /**
     * @description The parameters the functions accepts, described as a JSON Schema object. See the
     * [guide](https://platform.openai.com/docs/guides/function-calling) for examples,
     * and the
     * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
     * documentation about the format.
     *
     * Omitting `parameters` defines a function with an empty parameter list.
     */
    FunctionParameters: components["schemas"]["Record_string.unknown_"];
    FunctionDefinition: {
      /**
       * @description The name of the function to be called. Must be a-z, A-Z, 0-9, or contain
       * underscores and dashes, with a maximum length of 64.
       */
      name: string;
      /**
       * @description A description of what the function does, used by the model to choose when and
       * how to call the function.
       */
      description?: string;
      /**
       * @description The parameters the functions accepts, described as a JSON Schema object. See the
       * [guide](https://platform.openai.com/docs/guides/function-calling) for examples,
       * and the
       * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
       * documentation about the format.
       *
       * Omitting `parameters` defines a function with an empty parameter list.
       */
      parameters?: components["schemas"]["FunctionParameters"];
      /**
       * @description Whether to enable strict schema adherence when generating the function call. If
       * set to true, the model will follow the exact schema defined in the `parameters`
       * field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn
       * more about Structured Outputs in the
       * [function calling guide](docs/guides/function-calling).
       */
      strict?: boolean | null;
    };
    ChatCompletionTool: {
      function: components["schemas"]["FunctionDefinition"];
      /**
       * @description The type of the tool. Currently, only `function` is supported.
       * @enum {string}
       */
      type: "function";
    };
    "ChatCompletionNamedToolChoice.Function": {
      /** @description The name of the function to call. */
      name: string;
    };
    /**
     * @description Specifies a tool the model should use. Use to force the model to call a specific
     * function.
     */
    ChatCompletionNamedToolChoice: {
      function: components["schemas"]["ChatCompletionNamedToolChoice.Function"];
      /**
       * @description The type of the tool. Currently, only `function` is supported.
       * @enum {string}
       */
      type: "function";
    };
    /**
     * @description Controls which (if any) tool is called by the model. `none` means the model will
     * not call any tool and instead generates a message. `auto` means the model can
     * pick between generating a message or calling one or more tools. `required` means
     * the model must call one or more tools. Specifying a particular tool via
     * `{"type": "function", "function": {"name": "my_function"}}` forces the model to
     * call that tool.
     *
     * `none` is the default when no tools are present. `auto` is the default if tools
     * are present.
     */
    ChatCompletionToolChoiceOption: components["schemas"]["ChatCompletionNamedToolChoice"] | ("none" | "auto" | "required");
    AlertResponse: {
      alerts: ({
          updated_at: string | null;
          /** Format: double */
          time_window: number;
          /** Format: double */
          time_block_duration: number;
          /** Format: double */
          threshold: number;
          status: string;
          soft_delete: boolean;
          slack_channels: string[];
          org_id: string;
          name: string;
          /** Format: double */
          minimum_request_count: number | null;
          metric: string;
          id: string;
          emails: string[];
          created_at: string | null;
        })[];
      history: ({
          updated_at: string | null;
          triggered_value: string;
          status: string;
          soft_delete: boolean;
          org_id: string;
          id: string;
          created_at: string | null;
          alert_start_time: string;
          alert_name: string;
          alert_metric: string;
          alert_id: string;
          alert_end_time: string | null;
        })[];
    };
    ResultSuccess_AlertResponse_: {
      data: components["schemas"]["AlertResponse"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_AlertResponse.string_": components["schemas"]["ResultSuccess_AlertResponse_"] | components["schemas"]["ResultError_string_"];
    AlertRequest: {
      name: string;
      metric: string;
      /** Format: double */
      threshold: number;
      time_window: string;
      emails: string[];
      slack_channels: string[];
      /** Format: double */
      minimum_request_count?: number;
    };
    "ResultSuccess__active-boolean--created_at-string--id-number--message-string--title-string--updated_at-string_-Array_": {
      data: {
          updated_at: string;
          title: string;
          message: string;
          /** Format: double */
          id: number;
          created_at: string;
          active: boolean;
        }[];
      /** @enum {number|null} */
      error: null;
    };
    "Result__active-boolean--created_at-string--id-number--message-string--title-string--updated_at-string_-Array.string_": components["schemas"]["ResultSuccess__active-boolean--created_at-string--id-number--message-string--title-string--updated_at-string_-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__organization_id-string--name-string--flags-string-Array_-Array_": {
      data: {
          flags: string[];
          name: string;
          organization_id: string;
        }[];
      /** @enum {number|null} */
      error: null;
    };
    "Result__organization_id-string--name-string--flags-string-Array_-Array.string_": components["schemas"]["ResultSuccess__organization_id-string--name-string--flags-string-Array_-Array_"] | components["schemas"]["ResultError_string_"];
    KafkaSettings: {
      /** Format: double */
      miniBatchSize: number;
    };
    AzureExperiment: {
      azureBaseUri: string;
      azureApiVersion: string;
      azureDeploymentName: string;
      azureApiKey: string;
    };
    ApiKey: {
      apiKey: string;
    };
    Setting: components["schemas"]["KafkaSettings"] | components["schemas"]["AzureExperiment"] | components["schemas"]["ApiKey"];
    /** @enum {string} */
    SettingName: "kafka:dlq" | "kafka:log" | "kafka:score" | "kafka:dlq:score" | "kafka:dlq:eu" | "kafka:log:eu" | "kafka:orgs-to-dlq" | "azure:experiment" | "openai:apiKey" | "anthropic:apiKey" | "openrouter:apiKey";
    /**
     * @description The URL interface represents an object providing static methods used for creating object URLs.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL)
     * `URL` class is a global reference for `import { URL } from 'node:url'`
     * https://nodejs.org/api/url.html#the-whatwg-url-api
     */
    "url.URL": string;
    /** @description The Application object. */
    "stripe.Stripe.Application": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "application";
      /** @description Always true for a deleted object */
      deleted?: unknown;
      /** @description The name of the application. */
      name: string | null;
    };
    /** @description The DeletedApplication object. */
    "stripe.Stripe.DeletedApplication": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "application";
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      deleted: true;
      /** @description The name of the application. */
      name: string | null;
    };
    "stripe.Stripe.Account.BusinessProfile.AnnualRevenue": {
      /**
       * Format: double
       * @description A non-negative integer representing the amount in the [smallest currency unit](https://stripe.com/currencies#zero-decimal).
       */
      amount: number | null;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string | null;
      /** @description The close-out date of the preceding fiscal year in ISO 8601 format. E.g. 2023-12-31 for the 31st of December, 2023. */
      fiscal_year_end: string | null;
    };
    "stripe.Stripe.Account.BusinessProfile.MonthlyEstimatedRevenue": {
      /**
       * Format: double
       * @description A non-negative integer representing how much to charge in the [smallest currency unit](https://stripe.com/currencies#zero-decimal).
       */
      amount: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
    };
    /** @description The Address object. */
    "stripe.Stripe.Address": {
      /** @description City/District/Suburb/Town/Village. */
      city: string | null;
      /** @description 2-letter country code. */
      country: string | null;
      /** @description Address line 1 (Street address/PO Box/Company name). */
      line1: string | null;
      /** @description Address line 2 (Apartment/Suite/Unit/Building). */
      line2: string | null;
      /** @description ZIP or postal code. */
      postal_code: string | null;
      /** @description State/County/Province/Region. */
      state: string | null;
    };
    "stripe.Stripe.Account.BusinessProfile": {
      /** @description The applicant's gross annual revenue for its preceding fiscal year. */
      annual_revenue: components["schemas"]["stripe.Stripe.Account.BusinessProfile.AnnualRevenue"] | null;
      /**
       * Format: double
       * @description An estimated upper bound of employees, contractors, vendors, etc. currently working for the business.
       */
      estimated_worker_count: number | null;
      /** @description [The merchant category code for the account](https://stripe.com/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide. */
      mcc: string | null;
      monthly_estimated_revenue?: components["schemas"]["stripe.Stripe.Account.BusinessProfile.MonthlyEstimatedRevenue"];
      /** @description The customer-facing business name. */
      name: string | null;
      /** @description Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes. */
      product_description?: string | null;
      /** @description A publicly available mailing address for sending support issues to. */
      support_address: components["schemas"]["stripe.Stripe.Address"] | null;
      /** @description A publicly available email address for sending support issues to. */
      support_email: string | null;
      /** @description A publicly available phone number to call with support issues. */
      support_phone: string | null;
      /** @description A publicly available website for handling support issues. */
      support_url: string | null;
      /** @description The business's publicly available website. */
      url: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Account.BusinessType": "company" | "government_entity" | "individual" | "non_profit";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.AcssDebitPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.AffirmPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.AfterpayClearpayPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.AmazonPayPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.AuBecsDebitPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.BacsDebitPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.BancontactPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.BankTransferPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.BlikPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.BoletoPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.CardIssuing": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.CardPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.CartesBancairesPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.CashappPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.EpsPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.FpxPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.GbBankTransferPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.GiropayPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.GrabpayPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.IdealPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.IndiaInternationalPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.JcbPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.JpBankTransferPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.KlarnaPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.KonbiniPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.LegacyPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.LinkPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.MobilepayPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.MultibancoPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.MxBankTransferPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.OxxoPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.P24Payments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.PaynowPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.PromptpayPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.RevolutPayPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.SepaBankTransferPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.SepaDebitPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.SofortPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.SwishPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.TaxReportingUs1099K": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.TaxReportingUs1099Misc": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.Transfers": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.Treasury": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.TwintPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.UsBankAccountAchPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.UsBankTransferPayments": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Account.Capabilities.ZipPayments": "active" | "inactive" | "pending";
    "stripe.Stripe.Account.Capabilities": {
      /** @description The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges. */
      acss_debit_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.AcssDebitPayments"];
      /** @description The status of the Affirm capability of the account, or whether the account can directly process Affirm charges. */
      affirm_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.AffirmPayments"];
      /** @description The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges. */
      afterpay_clearpay_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.AfterpayClearpayPayments"];
      /** @description The status of the AmazonPay capability of the account, or whether the account can directly process AmazonPay payments. */
      amazon_pay_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.AmazonPayPayments"];
      /** @description The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges. */
      au_becs_debit_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.AuBecsDebitPayments"];
      /** @description The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges. */
      bacs_debit_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.BacsDebitPayments"];
      /** @description The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges. */
      bancontact_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.BancontactPayments"];
      /** @description The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges. */
      bank_transfer_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.BankTransferPayments"];
      /** @description The status of the blik payments capability of the account, or whether the account can directly process blik charges. */
      blik_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.BlikPayments"];
      /** @description The status of the boleto payments capability of the account, or whether the account can directly process boleto charges. */
      boleto_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.BoletoPayments"];
      /** @description The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards */
      card_issuing?: components["schemas"]["stripe.Stripe.Account.Capabilities.CardIssuing"];
      /** @description The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges. */
      card_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.CardPayments"];
      /** @description The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency. */
      cartes_bancaires_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.CartesBancairesPayments"];
      /** @description The status of the Cash App Pay capability of the account, or whether the account can directly process Cash App Pay payments. */
      cashapp_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.CashappPayments"];
      /** @description The status of the EPS payments capability of the account, or whether the account can directly process EPS charges. */
      eps_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.EpsPayments"];
      /** @description The status of the FPX payments capability of the account, or whether the account can directly process FPX charges. */
      fpx_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.FpxPayments"];
      /** @description The status of the GB customer_balance payments (GBP currency) capability of the account, or whether the account can directly process GB customer_balance charges. */
      gb_bank_transfer_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.GbBankTransferPayments"];
      /** @description The status of the giropay payments capability of the account, or whether the account can directly process giropay charges. */
      giropay_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.GiropayPayments"];
      /** @description The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges. */
      grabpay_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.GrabpayPayments"];
      /** @description The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges. */
      ideal_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.IdealPayments"];
      /** @description The status of the india_international_payments capability of the account, or whether the account can process international charges (non INR) in India. */
      india_international_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.IndiaInternationalPayments"];
      /** @description The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency. */
      jcb_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.JcbPayments"];
      /** @description The status of the Japanese customer_balance payments (JPY currency) capability of the account, or whether the account can directly process Japanese customer_balance charges. */
      jp_bank_transfer_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.JpBankTransferPayments"];
      /** @description The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges. */
      klarna_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.KlarnaPayments"];
      /** @description The status of the konbini payments capability of the account, or whether the account can directly process konbini charges. */
      konbini_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.KonbiniPayments"];
      /** @description The status of the legacy payments capability of the account. */
      legacy_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.LegacyPayments"];
      /** @description The status of the link_payments capability of the account, or whether the account can directly process Link charges. */
      link_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.LinkPayments"];
      /** @description The status of the MobilePay capability of the account, or whether the account can directly process MobilePay charges. */
      mobilepay_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.MobilepayPayments"];
      /** @description The status of the Multibanco payments capability of the account, or whether the account can directly process Multibanco charges. */
      multibanco_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.MultibancoPayments"];
      /** @description The status of the Mexican customer_balance payments (MXN currency) capability of the account, or whether the account can directly process Mexican customer_balance charges. */
      mx_bank_transfer_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.MxBankTransferPayments"];
      /** @description The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges. */
      oxxo_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.OxxoPayments"];
      /** @description The status of the P24 payments capability of the account, or whether the account can directly process P24 charges. */
      p24_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.P24Payments"];
      /** @description The status of the paynow payments capability of the account, or whether the account can directly process paynow charges. */
      paynow_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.PaynowPayments"];
      /** @description The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges. */
      promptpay_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.PromptpayPayments"];
      /** @description The status of the RevolutPay capability of the account, or whether the account can directly process RevolutPay payments. */
      revolut_pay_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.RevolutPayPayments"];
      /** @description The status of the SEPA customer_balance payments (EUR currency) capability of the account, or whether the account can directly process SEPA customer_balance charges. */
      sepa_bank_transfer_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.SepaBankTransferPayments"];
      /** @description The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges. */
      sepa_debit_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.SepaDebitPayments"];
      /** @description The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges. */
      sofort_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.SofortPayments"];
      /** @description The status of the Swish capability of the account, or whether the account can directly process Swish payments. */
      swish_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.SwishPayments"];
      /** @description The status of the tax reporting 1099-K (US) capability of the account. */
      tax_reporting_us_1099_k?: components["schemas"]["stripe.Stripe.Account.Capabilities.TaxReportingUs1099K"];
      /** @description The status of the tax reporting 1099-MISC (US) capability of the account. */
      tax_reporting_us_1099_misc?: components["schemas"]["stripe.Stripe.Account.Capabilities.TaxReportingUs1099Misc"];
      /** @description The status of the transfers capability of the account, or whether your platform can transfer funds to the account. */
      transfers?: components["schemas"]["stripe.Stripe.Account.Capabilities.Transfers"];
      /** @description The status of the banking capability, or whether the account can have bank accounts. */
      treasury?: components["schemas"]["stripe.Stripe.Account.Capabilities.Treasury"];
      /** @description The status of the TWINT capability of the account, or whether the account can directly process TWINT charges. */
      twint_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.TwintPayments"];
      /** @description The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges. */
      us_bank_account_ach_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.UsBankAccountAchPayments"];
      /** @description The status of the US customer_balance payments (USD currency) capability of the account, or whether the account can directly process US customer_balance charges. */
      us_bank_transfer_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.UsBankTransferPayments"];
      /** @description The status of the Zip capability of the account, or whether the account can directly process Zip charges. */
      zip_payments?: components["schemas"]["stripe.Stripe.Account.Capabilities.ZipPayments"];
    };
    "stripe.Stripe.Account.Company.AddressKana": {
      /** @description City/Ward. */
      city: string | null;
      /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
      country: string | null;
      /** @description Block/Building number. */
      line1: string | null;
      /** @description Building details. */
      line2: string | null;
      /** @description ZIP or postal code. */
      postal_code: string | null;
      /** @description Prefecture. */
      state: string | null;
      /** @description Town/cho-me. */
      town: string | null;
    };
    "stripe.Stripe.Account.Company.AddressKanji": {
      /** @description City/Ward. */
      city: string | null;
      /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
      country: string | null;
      /** @description Block/Building number. */
      line1: string | null;
      /** @description Building details. */
      line2: string | null;
      /** @description ZIP or postal code. */
      postal_code: string | null;
      /** @description Prefecture. */
      state: string | null;
      /** @description Town/cho-me. */
      town: string | null;
    };
    "stripe.Stripe.Account.Company.OwnershipDeclaration": {
      /**
       * Format: double
       * @description The Unix timestamp marking when the beneficial owner attestation was made.
       */
      date: number | null;
      /** @description The IP address from which the beneficial owner attestation was made. */
      ip: string | null;
      /** @description The user-agent string from the browser where the beneficial owner attestation was made. */
      user_agent: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Account.Company.Structure": "free_zone_establishment" | "free_zone_llc" | "government_instrumentality" | "governmental_unit" | "incorporated_non_profit" | "incorporated_partnership" | "limited_liability_partnership" | "llc" | "multi_member_llc" | "private_company" | "private_corporation" | "private_partnership" | "public_company" | "public_corporation" | "public_partnership" | "registered_charity" | "single_member_llc" | "sole_establishment" | "sole_proprietorship" | "tax_exempt_government_instrumentality" | "unincorporated_association" | "unincorporated_non_profit" | "unincorporated_partnership";
    /**
     * @description This object represents files hosted on Stripe's servers. You can upload
     * files with the [create file](https://stripe.com/docs/api#create_file) request
     * (for example, when uploading dispute evidence). Stripe also
     * creates files independently (for example, the results of a [Sigma scheduled
     * query](https://stripe.com/docs/api#scheduled_queries)).
     *
     * Related guide: [File upload guide](https://stripe.com/docs/file-upload)
     */
    "stripe.Stripe.File": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "file";
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /**
       * Format: double
       * @description The file expires and isn't available at this time in epoch seconds.
       */
      expires_at: number | null;
      /** @description The suitable name for saving the file to a filesystem. */
      filename: string | null;
      /** @description A list of [file links](https://stripe.com/docs/api#file_links) that point at this file. */
      links?: components["schemas"]["stripe.Stripe.ApiList_stripe.Stripe.FileLink_"] | null;
      /** @description The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file. */
      purpose: components["schemas"]["stripe.Stripe.File.Purpose"];
      /**
       * Format: double
       * @description The size of the file object in bytes.
       */
      size: number;
      /** @description A suitable title for the document. */
      title: string | null;
      /** @description The returned file type (for example, `csv`, `pdf`, `jpg`, or `png`). */
      type: string | null;
      /** @description Use your live secret API key to download the file from this URL. */
      url: string | null;
    };
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    "stripe.Stripe.Metadata": {
      [key: string]: string;
    };
    /**
     * @description To share the contents of a `File` object with non-Stripe users, you can
     * create a `FileLink`. `FileLink`s contain a URL that you can use to
     * retrieve the contents of the file without authentication.
     */
    "stripe.Stripe.FileLink": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "file_link";
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Returns if the link is already expired. */
      expired: boolean;
      /**
       * Format: double
       * @description Time that the link expires.
       */
      expires_at: number | null;
      /** @description The file object this link points to. */
      file: string | components["schemas"]["stripe.Stripe.File"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description The publicly accessible URL to download the file. */
      url: string | null;
    };
    /**
     * @description A container for paginated lists of objects.
     * The array of objects is on the `.data` property,
     * and `.has_more` indicates whether there are additional objects beyond the end of this list.
     *
     * Learn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)
     * or, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.
     */
    "stripe.Stripe.ApiList_stripe.Stripe.FileLink_": {
      /** @enum {string} */
      object: "list";
      data: components["schemas"]["stripe.Stripe.FileLink"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      has_more: boolean;
      /** @description The URL where this list can be accessed. */
      url: string;
    };
    /** @enum {string} */
    "stripe.Stripe.File.Purpose": "account_requirement" | "additional_verification" | "business_icon" | "business_logo" | "customer_signature" | "dispute_evidence" | "document_provider_identity_document" | "finance_report_run" | "identity_document" | "identity_document_downloadable" | "issuing_regulatory_reporting" | "pci_document" | "selfie" | "sigma_scheduled_query" | "tax_document_user_upload" | "terminal_reader_splashscreen";
    "stripe.Stripe.Account.Company.Verification.Document": {
      /** @description The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
      back: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description A user-displayable string describing the verification state of this document. */
      details: string | null;
      /** @description One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document. */
      details_code: string | null;
      /** @description The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
      front: (string | components["schemas"]["stripe.Stripe.File"]) | null;
    };
    "stripe.Stripe.Account.Company.Verification": {
      document: components["schemas"]["stripe.Stripe.Account.Company.Verification.Document"];
    };
    "stripe.Stripe.Account.Company": {
      address?: components["schemas"]["stripe.Stripe.Address"];
      /** @description The Kana variation of the company's primary address (Japan only). */
      address_kana?: components["schemas"]["stripe.Stripe.Account.Company.AddressKana"] | null;
      /** @description The Kanji variation of the company's primary address (Japan only). */
      address_kanji?: components["schemas"]["stripe.Stripe.Account.Company.AddressKanji"] | null;
      /** @description Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided). */
      directors_provided?: boolean;
      /** @description Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided. */
      executives_provided?: boolean;
      /** @description The export license ID number of the company, also referred as Import Export Code (India only). */
      export_license_id?: string;
      /** @description The purpose code to use for export transactions (India only). */
      export_purpose_code?: string;
      /** @description The company's legal name. */
      name?: string | null;
      /** @description The Kana variation of the company's legal name (Japan only). */
      name_kana?: string | null;
      /** @description The Kanji variation of the company's legal name (Japan only). */
      name_kanji?: string | null;
      /** @description Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together). */
      owners_provided?: boolean;
      /** @description This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct. */
      ownership_declaration?: components["schemas"]["stripe.Stripe.Account.Company.OwnershipDeclaration"] | null;
      /** @description The company's phone number (used for verification). */
      phone?: string | null;
      /** @description The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details. */
      structure?: components["schemas"]["stripe.Stripe.Account.Company.Structure"];
      /** @description Whether the company's business ID number was provided. */
      tax_id_provided?: boolean;
      /** @description The jurisdiction in which the `tax_id` is registered (Germany-based companies only). */
      tax_id_registrar?: string;
      /** @description Whether the company's business VAT number was provided. */
      vat_id_provided?: boolean;
      /** @description Information on the verification state of the company. */
      verification?: components["schemas"]["stripe.Stripe.Account.Company.Verification"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Account.Controller.Fees.Payer": "account" | "application" | "application_custom" | "application_express";
    "stripe.Stripe.Account.Controller.Fees": {
      /** @description A value indicating the responsible payer of a bundle of Stripe fees for pricing-control eligible products on this account. Learn more about [fee behavior on connected accounts](https://docs.stripe.com/connect/direct-charges-fee-payer-behavior). */
      payer: components["schemas"]["stripe.Stripe.Account.Controller.Fees.Payer"];
    };
    /** @enum {string} */
    "stripe.Stripe.Account.Controller.Losses.Payments": "application" | "stripe";
    "stripe.Stripe.Account.Controller.Losses": {
      /** @description A value indicating who is liable when this account can't pay back negative balances from payments. */
      payments: components["schemas"]["stripe.Stripe.Account.Controller.Losses.Payments"];
    };
    /** @enum {string} */
    "stripe.Stripe.Account.Controller.RequirementCollection": "application" | "stripe";
    /** @enum {string} */
    "stripe.Stripe.Account.Controller.StripeDashboard.Type": "express" | "full" | "none";
    "stripe.Stripe.Account.Controller.StripeDashboard": {
      /** @description A value indicating the Stripe dashboard this account has access to independent of the Connect application. */
      type: components["schemas"]["stripe.Stripe.Account.Controller.StripeDashboard.Type"];
    };
    /** @enum {string} */
    "stripe.Stripe.Account.Controller.Type": "account" | "application";
    "stripe.Stripe.Account.Controller": {
      fees?: components["schemas"]["stripe.Stripe.Account.Controller.Fees"];
      /** @description `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null. */
      is_controller?: boolean;
      losses?: components["schemas"]["stripe.Stripe.Account.Controller.Losses"];
      /** @description A value indicating responsibility for collecting requirements on this account. Only returned when the Connect application retrieving the resource controls the account. */
      requirement_collection?: components["schemas"]["stripe.Stripe.Account.Controller.RequirementCollection"];
      stripe_dashboard?: components["schemas"]["stripe.Stripe.Account.Controller.StripeDashboard"];
      /** @description The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself. */
      type: components["schemas"]["stripe.Stripe.Account.Controller.Type"];
    };
    /**
     * @description This is an object representing a Stripe account. You can retrieve it to see
     * properties on the account like its current requirements or if the account is
     * enabled to make live charges or receive payouts.
     *
     * For accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection)
     * is `application`, which includes Custom accounts, the properties below are always
     * returned.
     *
     * For accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection)
     * is `stripe`, which includes Standard and Express accounts, some properties are only returned
     * until you create an [Account Link](https://stripe.com/api/account_links) or [Account Session](https://stripe.com/api/account_sessions)
     * to start Connect Onboarding. Learn about the [differences between accounts](https://stripe.com/connect/accounts).
     */
    "stripe.Stripe.Account": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "account";
      /** @description Business information about the account. */
      business_profile?: components["schemas"]["stripe.Stripe.Account.BusinessProfile"] | null;
      /** @description The business type. After you create an [Account Link](https://stripe.com/api/account_links) or [Account Session](https://stripe.com/api/account_sessions), this property is only returned for accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
      business_type?: components["schemas"]["stripe.Stripe.Account.BusinessType"] | null;
      capabilities?: components["schemas"]["stripe.Stripe.Account.Capabilities"];
      /** @description Whether the account can create live charges. */
      charges_enabled: boolean;
      company?: components["schemas"]["stripe.Stripe.Account.Company"];
      controller?: components["schemas"]["stripe.Stripe.Account.Controller"];
      /** @description The account's country. */
      country?: string;
      /**
       * Format: double
       * @description Time at which the account was connected. Measured in seconds since the Unix epoch.
       */
      created?: number;
      /** @description Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
      default_currency?: string;
      /** @description Always true for a deleted object */
      deleted?: unknown;
      /** @description Whether account details have been submitted. Accounts with Stripe Dashboard access, which includes Standard accounts, cannot receive payouts before this is true. Accounts where this is false should be directed to [an onboarding flow](https://stripe.com/connect/onboarding) to finish submitting account details. */
      details_submitted: boolean;
      /** @description An email address associated with the account. It's not used for authentication and Stripe doesn't market to this field without explicit approval from the platform. */
      email: string | null;
      /** @description External accounts (bank accounts and debit cards) currently attached to this account. External accounts are only returned for requests where `controller[is_controller]` is true. */
      external_accounts?: components["schemas"]["stripe.Stripe.ApiList_stripe.Stripe.ExternalAccount_"];
      future_requirements?: components["schemas"]["stripe.Stripe.Account.FutureRequirements"];
      /**
       * @description This is an object representing a person associated with a Stripe account.
       *
       * A platform cannot access a person for an account where [account.controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, after creating an Account Link or Account Session to start Connect onboarding.
       *
       * See the [Standard onboarding](https://stripe.com/connect/standard-accounts) or [Express onboarding](https://stripe.com/connect/express-accounts) documentation for information about prefilling information and account onboarding steps. Learn more about [handling identity verification with the API](https://stripe.com/connect/handling-api-verification#person-information).
       */
      individual?: components["schemas"]["stripe.Stripe.Person"];
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata?: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description Whether Stripe can send payouts to this account. */
      payouts_enabled: boolean;
      requirements?: components["schemas"]["stripe.Stripe.Account.Requirements"];
      /** @description Options for customizing how the account functions within Stripe. */
      settings?: components["schemas"]["stripe.Stripe.Account.Settings"] | null;
      tos_acceptance?: components["schemas"]["stripe.Stripe.Account.TosAcceptance"];
      /** @description The Stripe account type. Can be `standard`, `express`, `custom`, or `none`. */
      type: components["schemas"]["stripe.Stripe.Account.Type"];
    };
    /** @enum {string} */
    "stripe.Stripe.BankAccount.AvailablePayoutMethod": "instant" | "standard";
    /** @enum {string} */
    "stripe.Stripe.CashBalance.Settings.ReconciliationMode": "automatic" | "manual";
    "stripe.Stripe.CashBalance.Settings": {
      /** @description The configuration for how funds that land in the customer cash balance are reconciled. */
      reconciliation_mode: components["schemas"]["stripe.Stripe.CashBalance.Settings.ReconciliationMode"];
      /** @description A flag to indicate if reconciliation mode returned is the user's default or is specific to this customer cash balance */
      using_merchant_default: boolean;
    };
    /** @description A customer's `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account. */
    "stripe.Stripe.CashBalance": {
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "cash_balance";
      /** @description A hash of all cash balances available to this customer. You cannot delete a customer with any cash balances, even if the balance is 0. Amounts are represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      available: {
        [key: string]: number;
      } | null;
      /** @description The ID of the customer whose cash balance this object represents. */
      customer: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      settings: components["schemas"]["stripe.Stripe.CashBalance.Settings"];
    };
    /**
     * @description These bank accounts are payment methods on `Customer` objects.
     *
     * On the other hand [External Accounts](https://stripe.com/api#external_accounts) are transfer
     * destinations on `Account` objects for connected accounts.
     * They can be bank accounts or debit cards as well, and are documented in the links above.
     *
     * Related guide: [Bank debits and transfers](https://stripe.com/payments/bank-debits-transfers)
     */
    "stripe.Stripe.BankAccount": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "bank_account";
      /** @description The ID of the account that the bank account is associated with. */
      account?: (string | components["schemas"]["stripe.Stripe.Account"]) | null;
      /** @description The name of the person or business that owns the bank account. */
      account_holder_name: string | null;
      /** @description The type of entity that holds the account. This can be either `individual` or `company`. */
      account_holder_type: string | null;
      /** @description The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
      account_type: string | null;
      /** @description A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout. */
      available_payout_methods?: components["schemas"]["stripe.Stripe.BankAccount.AvailablePayoutMethod"][] | null;
      /** @description Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
      bank_name: string | null;
      /** @description Two-letter ISO code representing the country the bank account is located in. */
      country: string;
      /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
      currency: string;
      /** @description The ID of the customer that the bank account is associated with. */
      customer?: (string | components["schemas"]["stripe.Stripe.Customer"] | components["schemas"]["stripe.Stripe.DeletedCustomer"]) | null;
      /** @description Whether this bank account is the default external account for its currency. */
      default_for_currency?: boolean | null;
      /** @description Always true for a deleted object */
      deleted?: unknown;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: string | null;
      /** @description Information about the [upcoming new requirements for the bank account](https://stripe.com/docs/connect/custom-accounts/future-requirements), including what information needs to be collected, and by when. */
      future_requirements?: components["schemas"]["stripe.Stripe.BankAccount.FutureRequirements"] | null;
      /** @description The last four digits of the bank account number. */
      last4: string;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata?: components["schemas"]["stripe.Stripe.Metadata"] | null;
      /** @description Information about the requirements for the bank account, including what information needs to be collected. */
      requirements?: components["schemas"]["stripe.Stripe.BankAccount.Requirements"] | null;
      /** @description The routing transit number for the bank account. */
      routing_number: string | null;
      /**
       * @description For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn't enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a payout sent to this bank account fails, we'll set the status to `errored` and will not continue to send [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) until the bank details are updated.
       *
       * For external accounts, possible values are `new`, `errored` and `verification_failed`. If a payout fails, the status is set to `errored` and scheduled payouts are stopped until account details are updated. In the US and India, if we can't [verify the owner of the bank account](https://support.stripe.com/questions/bank-account-ownership-verification), we'll set the status to `verification_failed`. Other validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply.
       */
      status: string;
    };
    /** @enum {string} */
    "stripe.Stripe.Card.AvailablePayoutMethod": "instant" | "standard";
    /**
     * @description This object represents a customer of your business. Use it to create recurring charges and track payments that belong to the same customer.
     *
     * Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment)
     */
    "stripe.Stripe.Customer": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "customer";
      /** @description The customer's address. */
      address?: components["schemas"]["stripe.Stripe.Address"] | null;
      /**
       * Format: double
       * @description The current balance, if any, that's stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that's added to their next invoice. The balance only considers amounts that Stripe hasn't successfully applied to any invoice. It doesn't reflect unpaid invoices. This balance is only taken into account after invoices finalize.
       */
      balance: number;
      /** @description The current funds being held by Stripe on behalf of the customer. You can apply these funds towards payment intents when the source is "cash_balance". The `settings[reconciliation_mode]` field describes if these funds apply to these payment intents manually or automatically. */
      cash_balance?: components["schemas"]["stripe.Stripe.CashBalance"] | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes. */
      currency?: string | null;
      /**
       * @description ID of the default payment source for the customer.
       *
       * If you use payment methods created through the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
       */
      default_source: (string | components["schemas"]["stripe.Stripe.CustomerSource"]) | null;
      /** @description Always true for a deleted object */
      deleted?: unknown;
      /**
       * @description Tracks the most recent state change on any invoice belonging to the customer. Paying an invoice or marking it uncollectible via the API will set this field to false. An automatic payment failure or passing the `invoice.due_date` will set this field to `true`.
       *
       * If an invoice becomes uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't reset to `false`.
       *
       * If you care whether the customer has paid their most recent subscription invoice, use `subscription.status` instead. Paying or marking uncollectible any customer invoice regardless of whether it is the latest invoice for a subscription will always set this field to `false`.
       */
      delinquent?: boolean | null;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      description: string | null;
      /** @description Describes the current discount active on the customer, if there is one. */
      discount?: components["schemas"]["stripe.Stripe.Discount"] | null;
      /** @description The customer's email address. */
      email: string | null;
      /** @description The current multi-currency balances, if any, that's stored on the customer. If positive in a currency, the customer has a credit to apply to their next invoice denominated in that currency. If negative, the customer has an amount owed that's added to their next invoice denominated in that currency. These balances don't apply to unpaid invoices. They solely track amounts that Stripe hasn't successfully applied to any invoice. Stripe only applies a balance in a specific currency to an invoice after that invoice (which is in the same currency) finalizes. */
      invoice_credit_balance?: {
        [key: string]: number;
      };
      /** @description The prefix for the customer used to generate unique invoice numbers. */
      invoice_prefix?: string | null;
      invoice_settings: components["schemas"]["stripe.Stripe.Customer.InvoiceSettings"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description The customer's full name or business name. */
      name?: string | null;
      /**
       * Format: double
       * @description The suffix of the customer's next invoice number (for example, 0001). When the account uses account level sequencing, this parameter is ignored in API requests and the field omitted in API responses.
       */
      next_invoice_sequence?: number;
      /** @description The customer's phone number. */
      phone?: string | null;
      /** @description The customer's preferred locales (languages), ordered by preference. */
      preferred_locales?: string[] | null;
      /** @description Mailing and shipping address for the customer. Appears on invoices emailed to this customer. */
      shipping: components["schemas"]["stripe.Stripe.Customer.Shipping"] | null;
      /** @description The customer's payment sources, if any. */
      sources?: components["schemas"]["stripe.Stripe.ApiList_stripe.Stripe.CustomerSource_"];
      /** @description The customer's current subscriptions, if any. */
      subscriptions?: components["schemas"]["stripe.Stripe.ApiList_stripe.Stripe.Subscription_"];
      tax?: components["schemas"]["stripe.Stripe.Customer.Tax"];
      /** @description Describes the customer's tax exemption status, which is `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the following text: **"Reverse charge"**. */
      tax_exempt?: components["schemas"]["stripe.Stripe.Customer.TaxExempt"] | null;
      /** @description The customer's tax IDs. */
      tax_ids?: components["schemas"]["stripe.Stripe.ApiList_stripe.Stripe.TaxId_"];
      /** @description ID of the test clock that this customer belongs to. */
      test_clock?: (string | components["schemas"]["stripe.Stripe.TestHelpers.TestClock"]) | null;
    };
    /** @description The DeletedCustomer object. */
    "stripe.Stripe.DeletedCustomer": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "customer";
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      deleted: true;
    };
    "stripe.Stripe.Card.Networks": {
      /** @description The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card. */
      preferred: string | null;
    };
    /**
     * @description You can store multiple cards on a customer in order to charge the customer
     * later. You can also store multiple debit cards on a recipient in order to
     * transfer to those cards later.
     *
     * Related guide: [Card payments with Sources](https://stripe.com/docs/sources/cards)
     */
    "stripe.Stripe.Card": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "card";
      /** @description The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. This property is only available for accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
      account?: (string | components["schemas"]["stripe.Stripe.Account"]) | null;
      /** @description City/District/Suburb/Town/Village. */
      address_city: string | null;
      /** @description Billing address country, if provided when creating card. */
      address_country: string | null;
      /** @description Address line 1 (Street address/PO Box/Company name). */
      address_line1: string | null;
      /** @description If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_line1_check: string | null;
      /** @description Address line 2 (Apartment/Suite/Unit/Building). */
      address_line2: string | null;
      /** @description State/County/Province/Region. */
      address_state: string | null;
      /** @description ZIP or postal code. */
      address_zip: string | null;
      /** @description If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_zip_check: string | null;
      /** @description A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout. */
      available_payout_methods?: components["schemas"]["stripe.Stripe.Card.AvailablePayoutMethod"][] | null;
      /** @description Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `Girocard`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
      brand: string;
      /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      country: string | null;
      /** @description Three-letter [ISO code for currency](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. Must be a [supported currency](https://docs.stripe.com/currencies). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. This property is only available for accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
      currency?: string | null;
      /** @description The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead. */
      customer?: (string | components["schemas"]["stripe.Stripe.Customer"] | components["schemas"]["stripe.Stripe.DeletedCustomer"]) | null;
      /** @description If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
      cvc_check: string | null;
      /** @description Whether this card is the default external account for its currency. This property is only available for accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
      default_for_currency?: boolean | null;
      /** @description Always true for a deleted object */
      deleted?: unknown;
      /** @description A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.) */
      description?: string;
      /** @description (For tokenized numbers only.) The last four digits of the device account number. */
      dynamic_last4: string | null;
      /**
       * Format: double
       * @description Two-digit number representing the card's expiration month.
       */
      exp_month: number;
      /**
       * Format: double
       * @description Four-digit number representing the card's expiration year.
       */
      exp_year: number;
      /**
       * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
       *
       * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
       */
      fingerprint?: string | null;
      /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      funding: string;
      /** @description Issuer identification number of the card. (For internal use only and not typically available in standard API requests.) */
      iin?: string;
      /** @description The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.) */
      issuer?: string;
      /** @description The last four digits of the card. */
      last4: string;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      /** @description Cardholder name. */
      name: string | null;
      networks?: components["schemas"]["stripe.Stripe.Card.Networks"];
      /** @description For external accounts that are cards, possible values are `new` and `errored`. If a payout fails, the status is set to `errored` and [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) are stopped until account details are updated. */
      status?: string | null;
      /** @description If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
      tokenization_method: string | null;
    };
    "stripe.Stripe.Source.AchCreditTransfer": {
      account_number?: string | null;
      bank_name?: string | null;
      fingerprint?: string | null;
      refund_account_holder_name?: string | null;
      refund_account_holder_type?: string | null;
      refund_routing_number?: string | null;
      routing_number?: string | null;
      swift_code?: string | null;
    };
    "stripe.Stripe.Source.AchDebit": {
      bank_name?: string | null;
      country?: string | null;
      fingerprint?: string | null;
      last4?: string | null;
      routing_number?: string | null;
      type?: string | null;
    };
    "stripe.Stripe.Source.AcssDebit": {
      bank_address_city?: string | null;
      bank_address_line_1?: string | null;
      bank_address_line_2?: string | null;
      bank_address_postal_code?: string | null;
      bank_name?: string | null;
      category?: string | null;
      country?: string | null;
      fingerprint?: string | null;
      last4?: string | null;
      routing_number?: string | null;
    };
    "stripe.Stripe.Source.Alipay": {
      data_string?: string | null;
      native_url?: string | null;
      statement_descriptor?: string | null;
    };
    "stripe.Stripe.Source.AuBecsDebit": {
      bsb_number?: string | null;
      fingerprint?: string | null;
      last4?: string | null;
    };
    "stripe.Stripe.Source.Bancontact": {
      bank_code?: string | null;
      bank_name?: string | null;
      bic?: string | null;
      iban_last4?: string | null;
      preferred_language?: string | null;
      statement_descriptor?: string | null;
    };
    "stripe.Stripe.Source.Card": {
      address_line1_check?: string | null;
      address_zip_check?: string | null;
      brand?: string | null;
      country?: string | null;
      cvc_check?: string | null;
      description?: string;
      dynamic_last4?: string | null;
      /** Format: double */
      exp_month?: number | null;
      /** Format: double */
      exp_year?: number | null;
      fingerprint?: string;
      funding?: string | null;
      iin?: string;
      issuer?: string;
      last4?: string | null;
      name?: string | null;
      three_d_secure?: string;
      tokenization_method?: string | null;
    };
    "stripe.Stripe.Source.CardPresent": {
      application_cryptogram?: string;
      application_preferred_name?: string;
      authorization_code?: string | null;
      authorization_response_code?: string;
      brand?: string | null;
      country?: string | null;
      cvm_type?: string;
      data_type?: string | null;
      dedicated_file_name?: string;
      description?: string;
      emv_auth_data?: string;
      evidence_customer_signature?: string | null;
      evidence_transaction_certificate?: string | null;
      /** Format: double */
      exp_month?: number | null;
      /** Format: double */
      exp_year?: number | null;
      fingerprint?: string;
      funding?: string | null;
      iin?: string;
      issuer?: string;
      last4?: string | null;
      pos_device_id?: string | null;
      pos_entry_mode?: string;
      read_method?: string | null;
      reader?: string | null;
      terminal_verification_results?: string;
      transaction_status_information?: string;
    };
    "stripe.Stripe.Source.CodeVerification": {
      /**
       * Format: double
       * @description The number of attempts remaining to authenticate the source object with a verification code.
       */
      attempts_remaining: number;
      /** @description The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0). */
      status: string;
    };
    "stripe.Stripe.Source.Eps": {
      reference?: string | null;
      statement_descriptor?: string | null;
    };
    "stripe.Stripe.Source.Giropay": {
      bank_code?: string | null;
      bank_name?: string | null;
      bic?: string | null;
      statement_descriptor?: string | null;
    };
    "stripe.Stripe.Source.Ideal": {
      bank?: string | null;
      bic?: string | null;
      iban_last4?: string | null;
      statement_descriptor?: string | null;
    };
    "stripe.Stripe.Source.Klarna": {
      background_image_url?: string;
      client_token?: string | null;
      first_name?: string;
      last_name?: string;
      locale?: string;
      logo_url?: string;
      page_title?: string;
      pay_later_asset_urls_descriptive?: string;
      pay_later_asset_urls_standard?: string;
      pay_later_name?: string;
      pay_later_redirect_url?: string;
      pay_now_asset_urls_descriptive?: string;
      pay_now_asset_urls_standard?: string;
      pay_now_name?: string;
      pay_now_redirect_url?: string;
      pay_over_time_asset_urls_descriptive?: string;
      pay_over_time_asset_urls_standard?: string;
      pay_over_time_name?: string;
      pay_over_time_redirect_url?: string;
      payment_method_categories?: string;
      purchase_country?: string;
      purchase_type?: string;
      redirect_url?: string;
      /** Format: double */
      shipping_delay?: number;
      shipping_first_name?: string;
      shipping_last_name?: string;
    };
    "stripe.Stripe.Source.Multibanco": {
      entity?: string | null;
      reference?: string | null;
      refund_account_holder_address_city?: string | null;
      refund_account_holder_address_country?: string | null;
      refund_account_holder_address_line1?: string | null;
      refund_account_holder_address_line2?: string | null;
      refund_account_holder_address_postal_code?: string | null;
      refund_account_holder_address_state?: string | null;
      refund_account_holder_name?: string | null;
      refund_iban?: string | null;
    };
    "stripe.Stripe.Source.Owner": {
      /** @description Owner's address. */
      address: components["schemas"]["stripe.Stripe.Address"] | null;
      /** @description Owner's email address. */
      email: string | null;
      /** @description Owner's full name. */
      name: string | null;
      /** @description Owner's phone number (including extension). */
      phone: string | null;
      /** @description Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      verified_address: components["schemas"]["stripe.Stripe.Address"] | null;
      /** @description Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      verified_email: string | null;
      /** @description Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      verified_name: string | null;
      /** @description Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      verified_phone: string | null;
    };
    "stripe.Stripe.Source.P24": {
      reference?: string | null;
    };
    "stripe.Stripe.Source.Receiver": {
      /** @description The address of the receiver source. This is the value that should be communicated to the customer to send their funds to. */
      address: string | null;
      /**
       * Format: double
       * @description The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency.
       */
      amount_charged: number;
      /**
       * Format: double
       * @description The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency.
       */
      amount_received: number;
      /**
       * Format: double
       * @description The total amount that was returned to the customer. The amount returned is expressed in the source's currency.
       */
      amount_returned: number;
      /** @description Type of refund attribute method, one of `email`, `manual`, or `none`. */
      refund_attributes_method: string;
      /** @description Type of refund attribute status, one of `missing`, `requested`, or `available`. */
      refund_attributes_status: string;
    };
    "stripe.Stripe.Source.Redirect": {
      /** @description The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`. */
      failure_reason: string | null;
      /** @description The URL you provide to redirect the customer to after they authenticated their payment. */
      return_url: string;
      /** @description The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused). */
      status: string;
      /** @description The URL provided to you to redirect a customer to as part of a `redirect` authentication flow. */
      url: string;
    };
    "stripe.Stripe.Source.SepaCreditTransfer": {
      bank_name?: string | null;
      bic?: string | null;
      iban?: string | null;
      refund_account_holder_address_city?: string | null;
      refund_account_holder_address_country?: string | null;
      refund_account_holder_address_line1?: string | null;
      refund_account_holder_address_line2?: string | null;
      refund_account_holder_address_postal_code?: string | null;
      refund_account_holder_address_state?: string | null;
      refund_account_holder_name?: string | null;
      refund_iban?: string | null;
    };
    "stripe.Stripe.Source.SepaDebit": {
      bank_code?: string | null;
      branch_code?: string | null;
      country?: string | null;
      fingerprint?: string | null;
      last4?: string | null;
      mandate_reference?: string | null;
      mandate_url?: string | null;
    };
    "stripe.Stripe.Source.Sofort": {
      bank_code?: string | null;
      bank_name?: string | null;
      bic?: string | null;
      country?: string | null;
      iban_last4?: string | null;
      preferred_language?: string | null;
      statement_descriptor?: string | null;
    };
    "stripe.Stripe.Source.SourceOrder.Item": {
      /**
       * Format: double
       * @description The amount (price) for this order item.
       */
      amount: number | null;
      /** @description This currency of this order item. Required when `amount` is present. */
      currency: string | null;
      /** @description Human-readable description for this order item. */
      description: string | null;
      /** @description The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU). */
      parent: string | null;
      /**
       * Format: double
       * @description The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered.
       */
      quantity?: number;
      /** @description The type of this order item. Must be `sku`, `tax`, or `shipping`. */
      type: string | null;
    };
    "stripe.Stripe.Source.SourceOrder.Shipping": {
      address?: components["schemas"]["stripe.Stripe.Address"];
      /** @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
      carrier?: string | null;
      /** @description Recipient name. */
      name?: string;
      /** @description Recipient phone (including extension). */
      phone?: string | null;
      /** @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
      tracking_number?: string | null;
    };
    "stripe.Stripe.Source.SourceOrder": {
      /**
       * Format: double
       * @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
       */
      amount: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description The email address of the customer placing the order. */
      email?: string;
      /** @description List of items constituting the order. */
      items: components["schemas"]["stripe.Stripe.Source.SourceOrder.Item"][] | null;
      shipping?: components["schemas"]["stripe.Stripe.Source.SourceOrder.Shipping"];
    };
    "stripe.Stripe.Source.ThreeDSecure": {
      address_line1_check?: string | null;
      address_zip_check?: string | null;
      authenticated?: boolean | null;
      brand?: string | null;
      card?: string | null;
      country?: string | null;
      customer?: string | null;
      cvc_check?: string | null;
      description?: string;
      dynamic_last4?: string | null;
      /** Format: double */
      exp_month?: number | null;
      /** Format: double */
      exp_year?: number | null;
      fingerprint?: string;
      funding?: string | null;
      iin?: string;
      issuer?: string;
      last4?: string | null;
      name?: string | null;
      three_d_secure?: string;
      tokenization_method?: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Source.Type": "ach_credit_transfer" | "ach_debit" | "acss_debit" | "alipay" | "au_becs_debit" | "bancontact" | "card" | "card_present" | "eps" | "giropay" | "ideal" | "klarna" | "multibanco" | "p24" | "sepa_credit_transfer" | "sepa_debit" | "sofort" | "three_d_secure" | "wechat";
    "stripe.Stripe.Source.Wechat": {
      prepay_id?: string;
      qr_code_url?: string | null;
      statement_descriptor?: string;
    };
    /**
     * @description `Source` objects allow you to accept a variety of payment methods. They
     * represent a customer's payment instrument, and can be used with the Stripe API
     * just like a `Card` object: once chargeable, they can be charged, or can be
     * attached to customers.
     *
     * Stripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).
     * We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).
     * This newer API provides access to our latest features and payment method types.
     *
     * Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
     */
    "stripe.Stripe.Source": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "source";
      ach_credit_transfer?: components["schemas"]["stripe.Stripe.Source.AchCreditTransfer"];
      ach_debit?: components["schemas"]["stripe.Stripe.Source.AchDebit"];
      acss_debit?: components["schemas"]["stripe.Stripe.Source.AcssDebit"];
      alipay?: components["schemas"]["stripe.Stripe.Source.Alipay"];
      /**
       * Format: double
       * @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
       */
      amount: number | null;
      au_becs_debit?: components["schemas"]["stripe.Stripe.Source.AuBecsDebit"];
      bancontact?: components["schemas"]["stripe.Stripe.Source.Bancontact"];
      card?: components["schemas"]["stripe.Stripe.Source.Card"];
      card_present?: components["schemas"]["stripe.Stripe.Source.CardPresent"];
      /** @description The client secret of the source. Used for client-side retrieval using a publishable key. */
      client_secret: string;
      code_verification?: components["schemas"]["stripe.Stripe.Source.CodeVerification"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources. */
      currency: string | null;
      /** @description The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer. */
      customer?: string;
      eps?: components["schemas"]["stripe.Stripe.Source.Eps"];
      /** @description The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
      flow: string;
      giropay?: components["schemas"]["stripe.Stripe.Source.Giropay"];
      ideal?: components["schemas"]["stripe.Stripe.Source.Ideal"];
      klarna?: components["schemas"]["stripe.Stripe.Source.Klarna"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      multibanco?: components["schemas"]["stripe.Stripe.Source.Multibanco"];
      /** @description Information about the owner of the payment instrument that may be used or required by particular source types. */
      owner: components["schemas"]["stripe.Stripe.Source.Owner"] | null;
      p24?: components["schemas"]["stripe.Stripe.Source.P24"];
      receiver?: components["schemas"]["stripe.Stripe.Source.Receiver"];
      redirect?: components["schemas"]["stripe.Stripe.Source.Redirect"];
      sepa_credit_transfer?: components["schemas"]["stripe.Stripe.Source.SepaCreditTransfer"];
      sepa_debit?: components["schemas"]["stripe.Stripe.Source.SepaDebit"];
      sofort?: components["schemas"]["stripe.Stripe.Source.Sofort"];
      source_order?: components["schemas"]["stripe.Stripe.Source.SourceOrder"];
      /** @description Extra information about a source. This will appear on your customer's statement every time you charge the source. */
      statement_descriptor: string | null;
      /** @description The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge. */
      status: string;
      three_d_secure?: components["schemas"]["stripe.Stripe.Source.ThreeDSecure"];
      /** @description The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used. */
      type: components["schemas"]["stripe.Stripe.Source.Type"];
      /** @description Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
      usage: string | null;
      wechat?: components["schemas"]["stripe.Stripe.Source.Wechat"];
    };
    "stripe.Stripe.CustomerSource": components["schemas"]["stripe.Stripe.Account"] | components["schemas"]["stripe.Stripe.BankAccount"] | components["schemas"]["stripe.Stripe.Card"] | components["schemas"]["stripe.Stripe.Source"];
    "stripe.Stripe.Coupon.AppliesTo": {
      /** @description A list of product IDs this coupon applies to */
      products: string[];
    };
    "stripe.Stripe.Coupon.CurrencyOptions": {
      /**
       * Format: double
       * @description Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
       */
      amount_off: number;
    };
    /** @enum {string} */
    "stripe.Stripe.Coupon.Duration": "forever" | "once" | "repeating";
    /**
     * @description A coupon contains information about a percent-off or amount-off discount you
     * might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
     * [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
     */
    "stripe.Stripe.Coupon": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "coupon";
      /**
       * Format: double
       * @description Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
       */
      amount_off: number | null;
      applies_to?: components["schemas"]["stripe.Stripe.Coupon.AppliesTo"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off. */
      currency: string | null;
      /** @description Coupons defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
      currency_options?: {
        [key: string]: components["schemas"]["stripe.Stripe.Coupon.CurrencyOptions"];
      };
      /** @description Always true for a deleted object */
      deleted?: unknown;
      /** @description One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount. */
      duration: components["schemas"]["stripe.Stripe.Coupon.Duration"];
      /**
       * Format: double
       * @description If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
       */
      duration_in_months: number | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /**
       * Format: double
       * @description Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
       */
      max_redemptions: number | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      /** @description Name of the coupon displayed to customers on for instance invoices or receipts. */
      name: string | null;
      /**
       * Format: double
       * @description Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $ (or local equivalent)100 invoice $ (or local equivalent)50 instead.
       */
      percent_off: number | null;
      /**
       * Format: double
       * @description Date after which the coupon can no longer be redeemed.
       */
      redeem_by: number | null;
      /**
       * Format: double
       * @description Number of times this coupon has been applied to a customer.
       */
      times_redeemed: number;
      /** @description Taking account of the above properties, whether this coupon can still be applied to a customer. */
      valid: boolean;
    };
    "stripe.Stripe.PromotionCode.Restrictions.CurrencyOptions": {
      /**
       * Format: double
       * @description Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
       */
      minimum_amount: number;
    };
    "stripe.Stripe.PromotionCode.Restrictions": {
      /** @description Promotion code restrictions defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
      currency_options?: {
        [key: string]: components["schemas"]["stripe.Stripe.PromotionCode.Restrictions.CurrencyOptions"];
      };
      /** @description A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices */
      first_time_transaction: boolean;
      /**
       * Format: double
       * @description Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
       */
      minimum_amount: number | null;
      /** @description Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount */
      minimum_amount_currency: string | null;
    };
    /**
     * @description A Promotion Code represents a customer-redeemable code for a [coupon](https://stripe.com/docs/api#coupons). It can be used to
     * create multiple codes for a single coupon.
     */
    "stripe.Stripe.PromotionCode": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "promotion_code";
      /** @description Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid. */
      active: boolean;
      /** @description The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer. */
      code: string;
      /**
       * @description A coupon contains information about a percent-off or amount-off discount you
       * might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
       * [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
       */
      coupon: components["schemas"]["stripe.Stripe.Coupon"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description The customer that this promotion code can be used by. */
      customer: (string | components["schemas"]["stripe.Stripe.Customer"] | components["schemas"]["stripe.Stripe.DeletedCustomer"]) | null;
      /**
       * Format: double
       * @description Date at which the promotion code can no longer be redeemed.
       */
      expires_at: number | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /**
       * Format: double
       * @description Maximum number of times this promotion code can be redeemed.
       */
      max_redemptions: number | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      restrictions: components["schemas"]["stripe.Stripe.PromotionCode.Restrictions"];
      /**
       * Format: double
       * @description Number of times this promotion code has been used.
       */
      times_redeemed: number;
    };
    /**
     * @description A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
     * It contains information about when the discount began, when it will end, and what it is applied to.
     *
     * Related guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)
     */
    "stripe.Stripe.Discount": {
      /** @description The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "discount";
      /** @description The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
      checkout_session: string | null;
      /**
       * @description A coupon contains information about a percent-off or amount-off discount you
       * might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
       * [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
       */
      coupon: components["schemas"]["stripe.Stripe.Coupon"];
      /** @description The ID of the customer associated with this discount. */
      customer: (string | components["schemas"]["stripe.Stripe.Customer"] | components["schemas"]["stripe.Stripe.DeletedCustomer"]) | null;
      /** @description Always true for a deleted object */
      deleted?: unknown;
      /**
       * Format: double
       * @description If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.
       */
      end: number | null;
      /** @description The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
      invoice: string | null;
      /** @description The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
      invoice_item: string | null;
      /** @description The promotion code applied to create this discount. */
      promotion_code: (string | components["schemas"]["stripe.Stripe.PromotionCode"]) | null;
      /**
       * Format: double
       * @description Date that the coupon was applied.
       */
      start: number;
      /** @description The subscription that this coupon is applied to, if it is applied to a particular subscription. */
      subscription: string | null;
      /** @description The subscription item that this coupon is applied to, if it is applied to a particular subscription item. */
      subscription_item: string | null;
    };
    "stripe.Stripe.Customer.InvoiceSettings.CustomField": {
      /** @description The name of the custom field. */
      name: string;
      /** @description The value of the custom field. */
      value: string;
    };
    "stripe.Stripe.PaymentMethod.AcssDebit": {
      /** @description Name of the bank associated with the bank account. */
      bank_name: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: string | null;
      /** @description Institution number of the bank account. */
      institution_number: string | null;
      /** @description Last four digits of the bank account number. */
      last4: string | null;
      /** @description Transit number of the bank account. */
      transit_number: string | null;
    };
    "stripe.Stripe.PaymentMethod.Affirm": Record<string, never>;
    "stripe.Stripe.PaymentMethod.AfterpayClearpay": Record<string, never>;
    "stripe.Stripe.PaymentMethod.Alipay": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.AllowRedisplay": "always" | "limited" | "unspecified";
    "stripe.Stripe.PaymentMethod.AmazonPay": Record<string, never>;
    "stripe.Stripe.PaymentMethod.AuBecsDebit": {
      /** @description Six-digit number identifying bank and branch associated with this bank account. */
      bsb_number: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: string | null;
      /** @description Last four digits of the bank account number. */
      last4: string | null;
    };
    "stripe.Stripe.PaymentMethod.BacsDebit": {
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: string | null;
      /** @description Last four digits of the bank account number. */
      last4: string | null;
      /** @description Sort code of the bank account. (e.g., `10-20-30`) */
      sort_code: string | null;
    };
    "stripe.Stripe.PaymentMethod.Bancontact": Record<string, never>;
    "stripe.Stripe.PaymentMethod.BillingDetails": {
      /** @description Billing address. */
      address: components["schemas"]["stripe.Stripe.Address"] | null;
      /** @description Email address. */
      email: string | null;
      /** @description Full name. */
      name: string | null;
      /** @description Billing phone number (including extension). */
      phone: string | null;
    };
    "stripe.Stripe.PaymentMethod.Blik": Record<string, never>;
    "stripe.Stripe.PaymentMethod.Boleto": {
      /** @description Uniquely identifies the customer tax id (CNPJ or CPF) */
      tax_id: string;
    };
    "stripe.Stripe.PaymentMethod.Card.Checks": {
      /** @description If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_line1_check: string | null;
      /** @description If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_postal_code_check: string | null;
      /** @description If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      cvc_check: string | null;
    };
    "stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Offline": {
      /**
       * Format: double
       * @description Time at which the payment was collected while offline
       */
      stored_at: number | null;
      /**
       * @description The method used to process this payment method offline. Only deferred is allowed.
       * @enum {string|null}
       */
      type: "deferred" | null;
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.ReadMethod": "contact_emv" | "contactless_emv" | "contactless_magstripe_mode" | "magnetic_stripe_fallback" | "magnetic_stripe_track2";
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Receipt.AccountType": "checking" | "credit" | "prepaid" | "unknown";
    "stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Receipt": {
      /** @description The type of account being debited or credited */
      account_type?: components["schemas"]["stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Receipt.AccountType"];
      /** @description EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
      application_cryptogram: string | null;
      /** @description Mnenomic of the Application Identifier. */
      application_preferred_name: string | null;
      /** @description Identifier for this transaction. */
      authorization_code: string | null;
      /** @description EMV tag 8A. A code returned by the card issuer. */
      authorization_response_code: string | null;
      /** @description Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`. */
      cardholder_verification_method: string | null;
      /** @description EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
      dedicated_file_name: string | null;
      /** @description The outcome of a series of EMV functions performed by the card reader. */
      terminal_verification_results: string | null;
      /** @description An indication of various EMV functions performed during the transaction. */
      transaction_status_information: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Wallet.Type": "apple_pay" | "google_pay" | "samsung_pay" | "unknown";
    "stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Wallet": {
      /** @description The type of mobile wallet, one of `apple_pay`, `google_pay`, `samsung_pay`, or `unknown`. */
      type: components["schemas"]["stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Wallet.Type"];
    };
    "stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent": {
      /**
       * Format: double
       * @description The authorized amount
       */
      amount_authorized: number | null;
      /** @description Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      brand: string | null;
      /** @description The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card. */
      brand_product: string | null;
      /**
       * Format: double
       * @description When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured.
       */
      capture_before?: number;
      /** @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
      cardholder_name: string | null;
      /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      country: string | null;
      /** @description A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.) */
      description?: string | null;
      /** @description Authorization response cryptogram. */
      emv_auth_data: string | null;
      /**
       * Format: double
       * @description Two-digit number representing the card's expiration month.
       */
      exp_month: number;
      /**
       * Format: double
       * @description Four-digit number representing the card's expiration year.
       */
      exp_year: number;
      /**
       * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
       *
       * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
       */
      fingerprint: string | null;
      /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      funding: string | null;
      /** @description ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
      generated_card: string | null;
      /** @description Issuer identification number of the card. (For internal use only and not typically available in standard API requests.) */
      iin?: string | null;
      /** @description Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support). */
      incremental_authorization_supported: boolean;
      /** @description The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.) */
      issuer?: string | null;
      /** @description The last four digits of the card. */
      last4: string | null;
      /** @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      network: string | null;
      /** @description This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. The first three digits of the Trace ID is the Financial Network Code, the next 6 digits is the Banknet Reference Number, and the last 4 digits represent the date (MM/DD). This field will be available for successful Visa, Mastercard, or American Express transactions and always null for other card brands. */
      network_transaction_id: string | null;
      /** @description Details about payments collected offline. */
      offline: components["schemas"]["stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Offline"] | null;
      /** @description Defines whether the authorized amount can be over-captured or not */
      overcapture_supported: boolean;
      /** @description EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
      preferred_locales: string[] | null;
      /** @description How card details were read in this transaction. */
      read_method: components["schemas"]["stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.ReadMethod"] | null;
      /** @description A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
      receipt: components["schemas"]["stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Receipt"] | null;
      wallet?: components["schemas"]["stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent.Wallet"];
    };
    "stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails": {
      card_present?: components["schemas"]["stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails.CardPresent"];
      /** @description The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`. */
      type: string;
    };
    /** @enum {string} */
    "stripe.Stripe.SetupAttempt.FlowDirection": "inbound" | "outbound";
    /**
     * @description PaymentMethod objects represent your customer's payment instruments.
     * You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
     * Customer objects to store instrument details for future payments.
     *
     * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
     */
    "stripe.Stripe.PaymentMethod": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "payment_method";
      acss_debit?: components["schemas"]["stripe.Stripe.PaymentMethod.AcssDebit"];
      affirm?: components["schemas"]["stripe.Stripe.PaymentMethod.Affirm"];
      afterpay_clearpay?: components["schemas"]["stripe.Stripe.PaymentMethod.AfterpayClearpay"];
      alipay?: components["schemas"]["stripe.Stripe.PaymentMethod.Alipay"];
      /** @description This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”. */
      allow_redisplay?: components["schemas"]["stripe.Stripe.PaymentMethod.AllowRedisplay"];
      amazon_pay?: components["schemas"]["stripe.Stripe.PaymentMethod.AmazonPay"];
      au_becs_debit?: components["schemas"]["stripe.Stripe.PaymentMethod.AuBecsDebit"];
      bacs_debit?: components["schemas"]["stripe.Stripe.PaymentMethod.BacsDebit"];
      bancontact?: components["schemas"]["stripe.Stripe.PaymentMethod.Bancontact"];
      billing_details: components["schemas"]["stripe.Stripe.PaymentMethod.BillingDetails"];
      blik?: components["schemas"]["stripe.Stripe.PaymentMethod.Blik"];
      boleto?: components["schemas"]["stripe.Stripe.PaymentMethod.Boleto"];
      card?: components["schemas"]["stripe.Stripe.PaymentMethod.Card"];
      card_present?: components["schemas"]["stripe.Stripe.PaymentMethod.CardPresent"];
      cashapp?: components["schemas"]["stripe.Stripe.PaymentMethod.Cashapp"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer. */
      customer: (string | components["schemas"]["stripe.Stripe.Customer"]) | null;
      customer_balance?: components["schemas"]["stripe.Stripe.PaymentMethod.CustomerBalance"];
      eps?: components["schemas"]["stripe.Stripe.PaymentMethod.Eps"];
      fpx?: components["schemas"]["stripe.Stripe.PaymentMethod.Fpx"];
      giropay?: components["schemas"]["stripe.Stripe.PaymentMethod.Giropay"];
      grabpay?: components["schemas"]["stripe.Stripe.PaymentMethod.Grabpay"];
      ideal?: components["schemas"]["stripe.Stripe.PaymentMethod.Ideal"];
      interac_present?: components["schemas"]["stripe.Stripe.PaymentMethod.InteracPresent"];
      klarna?: components["schemas"]["stripe.Stripe.PaymentMethod.Klarna"];
      konbini?: components["schemas"]["stripe.Stripe.PaymentMethod.Konbini"];
      link?: components["schemas"]["stripe.Stripe.PaymentMethod.Link"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      mobilepay?: components["schemas"]["stripe.Stripe.PaymentMethod.Mobilepay"];
      multibanco?: components["schemas"]["stripe.Stripe.PaymentMethod.Multibanco"];
      oxxo?: components["schemas"]["stripe.Stripe.PaymentMethod.Oxxo"];
      p24?: components["schemas"]["stripe.Stripe.PaymentMethod.P24"];
      paynow?: components["schemas"]["stripe.Stripe.PaymentMethod.Paynow"];
      paypal?: components["schemas"]["stripe.Stripe.PaymentMethod.Paypal"];
      pix?: components["schemas"]["stripe.Stripe.PaymentMethod.Pix"];
      promptpay?: components["schemas"]["stripe.Stripe.PaymentMethod.Promptpay"];
      /** @description Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information. */
      radar_options?: components["schemas"]["stripe.Stripe.PaymentMethod.RadarOptions"];
      revolut_pay?: components["schemas"]["stripe.Stripe.PaymentMethod.RevolutPay"];
      sepa_debit?: components["schemas"]["stripe.Stripe.PaymentMethod.SepaDebit"];
      sofort?: components["schemas"]["stripe.Stripe.PaymentMethod.Sofort"];
      swish?: components["schemas"]["stripe.Stripe.PaymentMethod.Swish"];
      twint?: components["schemas"]["stripe.Stripe.PaymentMethod.Twint"];
      /** @description The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. */
      type: components["schemas"]["stripe.Stripe.PaymentMethod.Type"];
      us_bank_account?: components["schemas"]["stripe.Stripe.PaymentMethod.UsBankAccount"];
      wechat_pay?: components["schemas"]["stripe.Stripe.PaymentMethod.WechatPay"];
      zip?: components["schemas"]["stripe.Stripe.PaymentMethod.Zip"];
    };
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.AcssDebit": Record<string, never>;
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.AmazonPay": Record<string, never>;
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.AuBecsDebit": Record<string, never>;
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.BacsDebit": Record<string, never>;
    "stripe.Stripe.Mandate.CustomerAcceptance.Offline": Record<string, never>;
    "stripe.Stripe.Mandate.CustomerAcceptance.Online": {
      /** @description The customer accepts the mandate from this IP address. */
      ip_address: string | null;
      /** @description The customer accepts the mandate using the user agent of the browser. */
      user_agent: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Mandate.CustomerAcceptance.Type": "offline" | "online";
    "stripe.Stripe.Mandate.CustomerAcceptance": {
      /**
       * Format: double
       * @description The time that the customer accepts the mandate.
       */
      accepted_at: number | null;
      offline?: components["schemas"]["stripe.Stripe.Mandate.CustomerAcceptance.Offline"];
      online?: components["schemas"]["stripe.Stripe.Mandate.CustomerAcceptance.Online"];
      /** @description The mandate includes the type of customer acceptance information, such as: `online` or `offline`. */
      type: components["schemas"]["stripe.Stripe.Mandate.CustomerAcceptance.Type"];
    };
    "stripe.Stripe.Mandate.MultiUse": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit.DefaultFor": "invoice" | "subscription";
    /** @enum {string} */
    "stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit.PaymentSchedule": "combined" | "interval" | "sporadic";
    /** @enum {string} */
    "stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit.TransactionType": "business" | "personal";
    "stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit": {
      /** @description List of Stripe products where this mandate can be selected automatically. */
      default_for?: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit.DefaultFor"][];
      /** @description Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
      interval_description: string | null;
      /** @description Payment schedule for the mandate. */
      payment_schedule: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit.PaymentSchedule"];
      /** @description Transaction type of the mandate. */
      transaction_type: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit.TransactionType"];
    };
    "stripe.Stripe.Mandate.PaymentMethodDetails.AmazonPay": Record<string, never>;
    "stripe.Stripe.Mandate.PaymentMethodDetails.AuBecsDebit": {
      /** @description The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
      url: string;
    };
    /** @enum {string} */
    "stripe.Stripe.Mandate.PaymentMethodDetails.BacsDebit.NetworkStatus": "accepted" | "pending" | "refused" | "revoked";
    /** @enum {string} */
    "stripe.Stripe.Mandate.PaymentMethodDetails.BacsDebit.RevocationReason": "account_closed" | "bank_account_restricted" | "bank_ownership_changed" | "could_not_process" | "debit_not_authorized";
    "stripe.Stripe.Mandate.PaymentMethodDetails.BacsDebit": {
      /** @description The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`. */
      network_status: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.BacsDebit.NetworkStatus"];
      /** @description The unique reference identifying the mandate on the Bacs network. */
      reference: string;
      /** @description When the mandate is revoked on the Bacs network this field displays the reason for the revocation. */
      revocation_reason: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.BacsDebit.RevocationReason"] | null;
      /** @description The URL that will contain the mandate that the customer has signed. */
      url: string;
    };
    "stripe.Stripe.Mandate.PaymentMethodDetails.Card": Record<string, never>;
    "stripe.Stripe.Mandate.PaymentMethodDetails.Cashapp": Record<string, never>;
    "stripe.Stripe.Mandate.PaymentMethodDetails.Link": Record<string, never>;
    "stripe.Stripe.Mandate.PaymentMethodDetails.Paypal": {
      /** @description The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer. */
      billing_agreement_id: string | null;
      /** @description PayPal account PayerID. This identifier uniquely identifies the PayPal customer. */
      payer_id: string | null;
    };
    "stripe.Stripe.Mandate.PaymentMethodDetails.RevolutPay": Record<string, never>;
    "stripe.Stripe.Mandate.PaymentMethodDetails.SepaDebit": {
      /** @description The unique reference of the mandate. */
      reference: string;
      /** @description The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
      url: string;
    };
    "stripe.Stripe.Mandate.PaymentMethodDetails.UsBankAccount": {
      /**
       * @description Mandate collection method
       * @enum {string}
       */
      collection_method?: "paper";
    };
    "stripe.Stripe.Mandate.PaymentMethodDetails": {
      acss_debit?: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.AcssDebit"];
      amazon_pay?: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.AmazonPay"];
      au_becs_debit?: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.AuBecsDebit"];
      bacs_debit?: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.BacsDebit"];
      card?: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.Card"];
      cashapp?: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.Cashapp"];
      link?: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.Link"];
      paypal?: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.Paypal"];
      revolut_pay?: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.RevolutPay"];
      sepa_debit?: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.SepaDebit"];
      /** @description This mandate corresponds with a specific payment method type. The `payment_method_details` includes an additional hash with the same name and contains mandate information that's specific to that payment method. */
      type: string;
      us_bank_account?: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails.UsBankAccount"];
    };
    "stripe.Stripe.Mandate.SingleUse": {
      /**
       * Format: double
       * @description The amount of the payment on a single use mandate.
       */
      amount: number;
      /** @description The currency of the payment on a single use mandate. */
      currency: string;
    };
    /** @enum {string} */
    "stripe.Stripe.Mandate.Status": "active" | "inactive" | "pending";
    /** @enum {string} */
    "stripe.Stripe.Mandate.Type": "multi_use" | "single_use";
    /** @description A Mandate is a record of the permission that your customer gives you to debit their payment method. */
    "stripe.Stripe.Mandate": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "mandate";
      customer_acceptance: components["schemas"]["stripe.Stripe.Mandate.CustomerAcceptance"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      multi_use?: components["schemas"]["stripe.Stripe.Mandate.MultiUse"];
      /** @description The account (if any) that the mandate is intended for. */
      on_behalf_of?: string;
      /** @description ID of the payment method associated with this mandate. */
      payment_method: string | components["schemas"]["stripe.Stripe.PaymentMethod"];
      payment_method_details: components["schemas"]["stripe.Stripe.Mandate.PaymentMethodDetails"];
      single_use?: components["schemas"]["stripe.Stripe.Mandate.SingleUse"];
      /** @description The mandate status indicates whether or not you can use it to initiate a payment. */
      status: components["schemas"]["stripe.Stripe.Mandate.Status"];
      /** @description The type of the mandate. */
      type: components["schemas"]["stripe.Stripe.Mandate.Type"];
    };
    /** @enum {string} */
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Bancontact.PreferredLanguage": "de" | "en" | "fr" | "nl";
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Bancontact": {
      /** @description Bank code of bank associated with the bank account. */
      bank_code: string | null;
      /** @description Name of the bank associated with the bank account. */
      bank_name: string | null;
      /** @description Bank Identifier Code of the bank associated with the bank account. */
      bic: string | null;
      /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
      generated_sepa_debit: (string | components["schemas"]["stripe.Stripe.PaymentMethod"]) | null;
      /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
      generated_sepa_debit_mandate: (string | components["schemas"]["stripe.Stripe.Mandate"]) | null;
      /** @description Last four characters of the IBAN. */
      iban_last4: string | null;
      /**
       * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
       * Can be one of `en`, `de`, `fr`, or `nl`
       */
      preferred_language: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Bancontact.PreferredLanguage"] | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by Bancontact directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      verified_name: string | null;
    };
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Boleto": Record<string, never>;
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Checks": {
      /** @description If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_line1_check: string | null;
      /** @description If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_postal_code_check: string | null;
      /** @description If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      cvc_check: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.AuthenticationFlow": "challenge" | "frictionless";
    /** @enum {string} */
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.ElectronicCommerceIndicator": "01" | "02" | "05" | "06" | "07";
    /** @enum {string} */
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.Result": "attempt_acknowledged" | "authenticated" | "exempted" | "failed" | "not_supported" | "processing_error";
    /** @enum {string} */
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.ResultReason": "abandoned" | "bypassed" | "canceled" | "card_not_enrolled" | "network_not_supported" | "protocol_error" | "rejected";
    /** @enum {string} */
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.Version": "1.0.2" | "2.1.0" | "2.2.0";
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure": {
      /**
       * @description For authenticated transactions: how the customer was authenticated by
       * the issuing bank.
       */
      authentication_flow: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.AuthenticationFlow"] | null;
      /**
       * @description The Electronic Commerce Indicator (ECI). A protocol-level field
       * indicating what degree of authentication was performed.
       */
      electronic_commerce_indicator: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.ElectronicCommerceIndicator"] | null;
      /** @description Indicates the outcome of 3D Secure authentication. */
      result: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.Result"] | null;
      /**
       * @description Additional information about why 3D Secure succeeded or failed based
       * on the `result`.
       */
      result_reason: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.ResultReason"] | null;
      /**
       * @description The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID
       * (dsTransId) for this payment.
       */
      transaction_id: string | null;
      /** @description The version of 3D Secure that was used. */
      version: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure.Version"] | null;
    };
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet.ApplePay": Record<string, never>;
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet.GooglePay": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet.Type": "apple_pay" | "google_pay" | "link";
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet": {
      apple_pay?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet.ApplePay"];
      google_pay?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet.GooglePay"];
      /** @description The type of the card wallet, one of `apple_pay`, `google_pay`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
      type: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet.Type"];
    };
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card": {
      /** @description Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      brand: string | null;
      /** @description Check results by Card networks on Card address and CVC at the time of authorization */
      checks: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Checks"] | null;
      /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      country: string | null;
      /** @description A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.) */
      description?: string | null;
      /**
       * Format: double
       * @description Two-digit number representing the card's expiration month.
       */
      exp_month: number | null;
      /**
       * Format: double
       * @description Four-digit number representing the card's expiration year.
       */
      exp_year: number | null;
      /**
       * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
       *
       * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
       */
      fingerprint?: string | null;
      /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      funding: string | null;
      /** @description Issuer identification number of the card. (For internal use only and not typically available in standard API requests.) */
      iin?: string | null;
      /** @description The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.) */
      issuer?: string | null;
      /** @description The last four digits of the card. */
      last4: string | null;
      /** @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      network: string | null;
      /** @description Populated if this authorization used 3D Secure authentication. */
      three_d_secure: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.ThreeDSecure"] | null;
      /** @description If this Card is part of a card wallet, this contains the details of the card wallet. */
      wallet: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card.Wallet"] | null;
    };
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.CardPresent.Offline": {
      /**
       * Format: double
       * @description Time at which the payment was collected while offline
       */
      stored_at: number | null;
      /**
       * @description The method used to process this payment method offline. Only deferred is allowed.
       * @enum {string|null}
       */
      type: "deferred" | null;
    };
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.CardPresent": {
      /** @description The ID of the Card PaymentMethod which was generated by this SetupAttempt. */
      generated_card: (string | components["schemas"]["stripe.Stripe.PaymentMethod"]) | null;
      /** @description Details about payments collected offline. */
      offline: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.CardPresent.Offline"] | null;
    };
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Cashapp": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Ideal.Bank": "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "n26" | "nn" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
    /** @enum {string} */
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Ideal.Bic": "ABNANL2A" | "ASNBNL21" | "BITSNL2A" | "BUNQNL2A" | "FVLBNL22" | "HANDNL2A" | "INGBNL2A" | "KNABNL2H" | "MOYONL21" | "NNBANL2G" | "NTSBDEB1" | "RABONL2U" | "RBRBNL21" | "REVOIE23" | "REVOLT21" | "SNSBNL2A" | "TRIONL2U";
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Ideal": {
      /** @description The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`. */
      bank: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Ideal.Bank"] | null;
      /** @description The Bank Identifier Code of the customer's bank. */
      bic: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Ideal.Bic"] | null;
      /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
      generated_sepa_debit: (string | components["schemas"]["stripe.Stripe.PaymentMethod"]) | null;
      /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
      generated_sepa_debit_mandate: (string | components["schemas"]["stripe.Stripe.Mandate"]) | null;
      /** @description Last four characters of the IBAN. */
      iban_last4: string | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by iDEAL directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      verified_name: string | null;
    };
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Klarna": Record<string, never>;
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Link": Record<string, never>;
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Paypal": Record<string, never>;
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.RevolutPay": Record<string, never>;
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.SepaDebit": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Sofort.PreferredLanguage": "de" | "en" | "fr" | "nl";
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.Sofort": {
      /** @description Bank code of bank associated with the bank account. */
      bank_code: string | null;
      /** @description Name of the bank associated with the bank account. */
      bank_name: string | null;
      /** @description Bank Identifier Code of the bank associated with the bank account. */
      bic: string | null;
      /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
      generated_sepa_debit: (string | components["schemas"]["stripe.Stripe.PaymentMethod"]) | null;
      /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
      generated_sepa_debit_mandate: (string | components["schemas"]["stripe.Stripe.Mandate"]) | null;
      /** @description Last four characters of the IBAN. */
      iban_last4: string | null;
      /**
       * @description Preferred language of the Sofort authorization page that the customer is redirected to.
       * Can be one of `en`, `de`, `fr`, or `nl`
       */
      preferred_language: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Sofort.PreferredLanguage"] | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by Sofort directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      verified_name: string | null;
    };
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails.UsBankAccount": Record<string, never>;
    "stripe.Stripe.SetupAttempt.PaymentMethodDetails": {
      acss_debit?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.AcssDebit"];
      amazon_pay?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.AmazonPay"];
      au_becs_debit?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.AuBecsDebit"];
      bacs_debit?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.BacsDebit"];
      bancontact?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Bancontact"];
      boleto?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Boleto"];
      card?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Card"];
      card_present?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.CardPresent"];
      cashapp?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Cashapp"];
      ideal?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Ideal"];
      klarna?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Klarna"];
      link?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Link"];
      paypal?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Paypal"];
      revolut_pay?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.RevolutPay"];
      sepa_debit?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.SepaDebit"];
      sofort?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.Sofort"];
      /** @description The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method. */
      type: string;
      us_bank_account?: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails.UsBankAccount"];
    };
    /** @enum {string} */
    "stripe.Stripe.SetupAttempt.SetupError.Code": "account_closed" | "account_country_invalid_address" | "account_error_country_change_requires_additional_steps" | "account_information_mismatch" | "account_invalid" | "account_number_invalid" | "acss_debit_session_incomplete" | "alipay_upgrade_required" | "amount_too_large" | "amount_too_small" | "api_key_expired" | "application_fees_not_allowed" | "authentication_required" | "balance_insufficient" | "balance_invalid_parameter" | "bank_account_bad_routing_numbers" | "bank_account_declined" | "bank_account_exists" | "bank_account_restricted" | "bank_account_unusable" | "bank_account_unverified" | "bank_account_verification_failed" | "billing_invalid_mandate" | "bitcoin_upgrade_required" | "capture_charge_authorization_expired" | "capture_unauthorized_payment" | "card_decline_rate_limit_exceeded" | "card_declined" | "cardholder_phone_number_required" | "charge_already_captured" | "charge_already_refunded" | "charge_disputed" | "charge_exceeds_source_limit" | "charge_exceeds_transaction_limit" | "charge_expired_for_capture" | "charge_invalid_parameter" | "charge_not_refundable" | "clearing_code_unsupported" | "country_code_invalid" | "country_unsupported" | "coupon_expired" | "customer_max_payment_methods" | "customer_max_subscriptions" | "customer_tax_location_invalid" | "debit_not_authorized" | "email_invalid" | "expired_card" | "financial_connections_account_inactive" | "financial_connections_no_successful_transaction_refresh" | "forwarding_api_inactive" | "forwarding_api_invalid_parameter" | "forwarding_api_upstream_connection_error" | "forwarding_api_upstream_connection_timeout" | "idempotency_key_in_use" | "incorrect_address" | "incorrect_cvc" | "incorrect_number" | "incorrect_zip" | "instant_payouts_config_disabled" | "instant_payouts_currency_disabled" | "instant_payouts_limit_exceeded" | "instant_payouts_unsupported" | "insufficient_funds" | "intent_invalid_state" | "intent_verification_method_missing" | "invalid_card_type" | "invalid_characters" | "invalid_charge_amount" | "invalid_cvc" | "invalid_expiry_month" | "invalid_expiry_year" | "invalid_mandate_reference_prefix_format" | "invalid_number" | "invalid_source_usage" | "invalid_tax_location" | "invoice_no_customer_line_items" | "invoice_no_payment_method_types" | "invoice_no_subscription_line_items" | "invoice_not_editable" | "invoice_on_behalf_of_not_editable" | "invoice_payment_intent_requires_action" | "invoice_upcoming_none" | "livemode_mismatch" | "lock_timeout" | "missing" | "no_account" | "not_allowed_on_standard_account" | "out_of_inventory" | "ownership_declaration_not_allowed" | "parameter_invalid_empty" | "parameter_invalid_integer" | "parameter_invalid_string_blank" | "parameter_invalid_string_empty" | "parameter_missing" | "parameter_unknown" | "parameters_exclusive" | "payment_intent_action_required" | "payment_intent_authentication_failure" | "payment_intent_incompatible_payment_method" | "payment_intent_invalid_parameter" | "payment_intent_konbini_rejected_confirmation_number" | "payment_intent_mandate_invalid" | "payment_intent_payment_attempt_expired" | "payment_intent_payment_attempt_failed" | "payment_intent_unexpected_state" | "payment_method_bank_account_already_verified" | "payment_method_bank_account_blocked" | "payment_method_billing_details_address_missing" | "payment_method_configuration_failures" | "payment_method_currency_mismatch" | "payment_method_customer_decline" | "payment_method_invalid_parameter" | "payment_method_invalid_parameter_testmode" | "payment_method_microdeposit_failed" | "payment_method_microdeposit_verification_amounts_invalid" | "payment_method_microdeposit_verification_amounts_mismatch" | "payment_method_microdeposit_verification_attempts_exceeded" | "payment_method_microdeposit_verification_descriptor_code_mismatch" | "payment_method_microdeposit_verification_timeout" | "payment_method_not_available" | "payment_method_provider_decline" | "payment_method_provider_timeout" | "payment_method_unactivated" | "payment_method_unexpected_state" | "payment_method_unsupported_type" | "payout_reconciliation_not_ready" | "payouts_limit_exceeded" | "payouts_not_allowed" | "platform_account_required" | "platform_api_key_expired" | "postal_code_invalid" | "processing_error" | "product_inactive" | "progressive_onboarding_limit_exceeded" | "rate_limit" | "refer_to_customer" | "refund_disputed_payment" | "resource_already_exists" | "resource_missing" | "return_intent_already_processed" | "routing_number_invalid" | "secret_key_required" | "sepa_unsupported_account" | "setup_attempt_failed" | "setup_intent_authentication_failure" | "setup_intent_invalid_parameter" | "setup_intent_mandate_invalid" | "setup_intent_setup_attempt_expired" | "setup_intent_unexpected_state" | "shipping_address_invalid" | "shipping_calculation_failed" | "sku_inactive" | "state_unsupported" | "status_transition_invalid" | "stripe_tax_inactive" | "tax_id_invalid" | "taxes_calculation_failed" | "terminal_location_country_unsupported" | "terminal_reader_busy" | "terminal_reader_hardware_fault" | "terminal_reader_invalid_location_for_activation" | "terminal_reader_invalid_location_for_payment" | "terminal_reader_offline" | "terminal_reader_timeout" | "testmode_charges_only" | "tls_version_unsupported" | "token_already_used" | "token_card_network_invalid" | "token_in_use" | "transfer_source_balance_parameters_mismatch" | "transfers_not_allowed" | "url_invalid";
    "stripe.Stripe.PaymentIntent.AmountDetails.Tip": {
      /**
       * Format: double
       * @description Portion of the amount that corresponds to a tip.
       */
      amount?: number;
    };
    "stripe.Stripe.PaymentIntent.AmountDetails": {
      tip?: components["schemas"]["stripe.Stripe.PaymentIntent.AmountDetails.Tip"];
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.AutomaticPaymentMethods.AllowRedirects": "always" | "never";
    "stripe.Stripe.PaymentIntent.AutomaticPaymentMethods": {
      /**
       * @description Controls whether this PaymentIntent will accept redirect-based payment methods.
       *
       * Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the payment.
       */
      allow_redirects?: components["schemas"]["stripe.Stripe.PaymentIntent.AutomaticPaymentMethods.AllowRedirects"];
      /** @description Automatically calculates compatible payment methods */
      enabled: boolean;
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.CancellationReason": "abandoned" | "automatic" | "duplicate" | "failed_invoice" | "fraudulent" | "requested_by_customer" | "void_invoice";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.CaptureMethod": "automatic" | "automatic_async" | "manual";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.ConfirmationMethod": "automatic" | "manual";
    /** @enum {string} */
    "stripe.Stripe.TaxId.Owner.Type": "account" | "application" | "customer" | "self";
    "stripe.Stripe.TaxId.Owner": {
      /** @description The account being referenced when `type` is `account`. */
      account?: string | components["schemas"]["stripe.Stripe.Account"];
      /** @description The Connect Application being referenced when `type` is `application`. */
      application?: string | components["schemas"]["stripe.Stripe.Application"];
      /** @description The customer being referenced when `type` is `customer`. */
      customer?: string | components["schemas"]["stripe.Stripe.Customer"];
      /** @description Type of owner referenced. */
      type: components["schemas"]["stripe.Stripe.TaxId.Owner.Type"];
    };
    /** @enum {string} */
    "stripe.Stripe.TaxId.Type": "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bh_vat" | "bo_tin" | "br_cnpj" | "br_cpf" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_uid" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "de_stn" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hr_oib" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "kz_bin" | "li_uid" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "ng_tin" | "no_vat" | "no_voec" | "nz_gst" | "om_vat" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "ua_vat" | "unknown" | "us_ein" | "uy_ruc" | "ve_rif" | "vn_tin" | "za_vat";
    /** @enum {string} */
    "stripe.Stripe.TaxId.Verification.Status": "pending" | "unavailable" | "unverified" | "verified";
    "stripe.Stripe.TaxId.Verification": {
      /** @description Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`. */
      status: components["schemas"]["stripe.Stripe.TaxId.Verification.Status"];
      /** @description Verified address. */
      verified_address: string | null;
      /** @description Verified name. */
      verified_name: string | null;
    };
    /**
     * @description You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers) or account.
     * Customer and account tax IDs get displayed on related invoices and credit notes.
     *
     * Related guides: [Customer tax identification numbers](https://stripe.com/docs/billing/taxes/tax-ids), [Account tax IDs](https://stripe.com/docs/invoicing/connect#account-tax-ids)
     */
    "stripe.Stripe.TaxId": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "tax_id";
      /** @description Two-letter ISO code representing the country of the tax ID. */
      country: string | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description ID of the customer. */
      customer: (string | components["schemas"]["stripe.Stripe.Customer"]) | null;
      /** @description Always true for a deleted object */
      deleted?: unknown;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description The account or customer the tax ID belongs to. */
      owner: components["schemas"]["stripe.Stripe.TaxId.Owner"] | null;
      /** @description Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hr_oib`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`. Note that some legacy tax IDs have type `unknown` */
      type: components["schemas"]["stripe.Stripe.TaxId.Type"];
      /** @description Value of the tax ID. */
      value: string;
      /** @description Tax ID verification information. */
      verification: components["schemas"]["stripe.Stripe.TaxId.Verification"] | null;
    };
    /** @description The DeletedTaxId object. */
    "stripe.Stripe.DeletedTaxId": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "tax_id";
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      deleted: true;
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.AutomaticTax.Liability.Type": "account" | "self";
    "stripe.Stripe.Invoice.AutomaticTax.Liability": {
      /** @description The connected account being referenced when `type` is `account`. */
      account?: string | components["schemas"]["stripe.Stripe.Account"];
      /** @description Type of the account referenced. */
      type: components["schemas"]["stripe.Stripe.Invoice.AutomaticTax.Liability.Type"];
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.AutomaticTax.Status": "complete" | "failed" | "requires_location_inputs";
    "stripe.Stripe.Invoice.AutomaticTax": {
      /** @description Whether Stripe automatically computes tax on this invoice. Note that incompatible invoice items (invoice items with manually specified [tax rates](https://stripe.com/docs/api/tax_rates), negative amounts, or `tax_behavior=unspecified`) cannot be added to automatic tax invoices. */
      enabled: boolean;
      /** @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
      liability: components["schemas"]["stripe.Stripe.Invoice.AutomaticTax.Liability"] | null;
      /** @description The status of the most recent automated tax calculation for this invoice. */
      status: components["schemas"]["stripe.Stripe.Invoice.AutomaticTax.Status"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.BillingReason": "automatic_pending_invoice_item_invoice" | "manual" | "quote_accept" | "subscription" | "subscription_create" | "subscription_cycle" | "subscription_threshold" | "subscription_update" | "upcoming";
    "stripe.Stripe.BalanceTransaction.FeeDetail": {
      /**
       * Format: double
       * @description Amount of the fee, in cents.
       */
      amount: number;
      /** @description ID of the Connect application that earned the fee. */
      application: string | null;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      description: string | null;
      /** @description Type of the fee, one of: `application_fee`, `payment_method_passthrough_fee`, `stripe_fee` or `tax`. */
      type: string;
    };
    /** @description The ApplicationFee object. */
    "stripe.Stripe.ApplicationFee": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "application_fee";
      /** @description ID of the Stripe account this fee was taken from. */
      account: string | components["schemas"]["stripe.Stripe.Account"];
      /**
       * Format: double
       * @description Amount earned, in cents (or local equivalent).
       */
      amount: number;
      /**
       * Format: double
       * @description Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the fee if a partial refund was issued)
       */
      amount_refunded: number;
      /** @description ID of the Connect application that earned the fee. */
      application: string | components["schemas"]["stripe.Stripe.Application"];
      /** @description Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds). */
      balance_transaction: (string | components["schemas"]["stripe.Stripe.BalanceTransaction"]) | null;
      /** @description ID of the charge that the application fee was taken from. */
      charge: string | components["schemas"]["stripe.Stripe.Charge"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description Polymorphic source of the application fee. Includes the ID of the object the application fee was created from. */
      fee_source: components["schemas"]["stripe.Stripe.ApplicationFee.FeeSource"] | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter. */
      originating_transaction: (string | components["schemas"]["stripe.Stripe.Charge"]) | null;
      /** @description Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false. */
      refunded: boolean;
      /** @description A list of refunds that have been applied to the fee. */
      refunds: components["schemas"]["stripe.Stripe.ApiList_stripe.Stripe.FeeRefund_"];
    };
    /**
     * @description The `Charge` object represents a single attempt to move money into your Stripe account.
     * PaymentIntent confirmation is the most common way to create Charges, but transferring
     * money to a different Stripe account through Connect also creates Charges.
     * Some legacy payment flows create Charges directly, which is not recommended for new integrations.
     */
    "stripe.Stripe.Charge": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "charge";
      /**
       * Format: double
       * @description Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
       */
      amount: number;
      /**
       * Format: double
       * @description Amount in cents (or local equivalent) captured (can be less than the amount attribute on the charge if a partial capture was made).
       */
      amount_captured: number;
      /**
       * Format: double
       * @description Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the charge if a partial refund was issued).
       */
      amount_refunded: number;
      /** @description ID of the Connect application that created the charge. */
      application: (string | components["schemas"]["stripe.Stripe.Application"]) | null;
      /** @description The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details. */
      application_fee: (string | components["schemas"]["stripe.Stripe.ApplicationFee"]) | null;
      /**
       * Format: double
       * @description The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details.
       */
      application_fee_amount: number | null;
      /** @description Authorization code on the charge. */
      authorization_code?: string;
      /** @description ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes). */
      balance_transaction: (string | components["schemas"]["stripe.Stripe.BalanceTransaction"]) | null;
      billing_details: components["schemas"]["stripe.Stripe.Charge.BillingDetails"];
      /** @description The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. This value only exists for card payments. */
      calculated_statement_descriptor: string | null;
      /** @description If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured. */
      captured: boolean;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description ID of the customer this charge is for if one exists. */
      customer: (string | components["schemas"]["stripe.Stripe.Customer"] | components["schemas"]["stripe.Stripe.DeletedCustomer"]) | null;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      description: string | null;
      /** @description Whether the charge has been disputed. */
      disputed: boolean;
      /** @description ID of the balance transaction that describes the reversal of the balance on your account due to payment failure. */
      failure_balance_transaction: (string | components["schemas"]["stripe.Stripe.BalanceTransaction"]) | null;
      /** @description Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/error-codes) for a list of codes). */
      failure_code: string | null;
      /** @description Message to user further explaining reason for charge failure if available. */
      failure_message: string | null;
      /** @description Information on fraud assessments for the charge. */
      fraud_details: components["schemas"]["stripe.Stripe.Charge.FraudDetails"] | null;
      /** @description ID of the invoice this charge is for if one exists. */
      invoice: (string | components["schemas"]["stripe.Stripe.Invoice"]) | null;
      level3?: components["schemas"]["stripe.Stripe.Charge.Level3"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers) for details. */
      on_behalf_of: (string | components["schemas"]["stripe.Stripe.Account"]) | null;
      /** @description Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details. */
      outcome: components["schemas"]["stripe.Stripe.Charge.Outcome"] | null;
      /** @description `true` if the charge succeeded, or was successfully authorized for later capture. */
      paid: boolean;
      /** @description ID of the PaymentIntent associated with this charge, if one exists. */
      payment_intent: (string | components["schemas"]["stripe.Stripe.PaymentIntent"]) | null;
      /** @description ID of the payment method used in this charge. */
      payment_method: string | null;
      /** @description Details about the payment method at the time of the transaction. */
      payment_method_details: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails"] | null;
      /** @description Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information. */
      radar_options?: components["schemas"]["stripe.Stripe.Charge.RadarOptions"];
      /** @description This is the email address that the receipt for this charge was sent to. */
      receipt_email: string | null;
      /** @description This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent. */
      receipt_number: string | null;
      /** @description This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt. */
      receipt_url: string | null;
      /** @description Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false. */
      refunded: boolean;
      /** @description A list of refunds that have been applied to the charge. */
      refunds?: components["schemas"]["stripe.Stripe.ApiList_stripe.Stripe.Refund_"] | null;
      /** @description ID of the review associated with this charge if one exists. */
      review: (string | components["schemas"]["stripe.Stripe.Review"]) | null;
      /** @description Shipping information for the charge. */
      shipping: components["schemas"]["stripe.Stripe.Charge.Shipping"] | null;
      /** @description This is a legacy field that will be removed in the future. It contains the Source, Card, or BankAccount object used for the charge. For details about the payment method used for this charge, refer to `payment_method` or `payment_method_details` instead. */
      source: components["schemas"]["stripe.Stripe.CustomerSource"] | null;
      /** @description The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://docs.stripe.com/connect/destination-charges) for details. */
      source_transfer: (string | components["schemas"]["stripe.Stripe.Transfer"]) | null;
      /**
       * @description For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
       *
       * For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix.
       */
      statement_descriptor: string | null;
      /** @description Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor. */
      statement_descriptor_suffix: string | null;
      /** @description The status of the payment is either `succeeded`, `pending`, or `failed`. */
      status: components["schemas"]["stripe.Stripe.Charge.Status"];
      /** @description ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter). */
      transfer?: string | components["schemas"]["stripe.Stripe.Transfer"];
      /** @description An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
      transfer_data: components["schemas"]["stripe.Stripe.Charge.TransferData"] | null;
      /** @description A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details. */
      transfer_group: string | null;
    };
    /** @description The ConnectCollectionTransfer object. */
    "stripe.Stripe.ConnectCollectionTransfer": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "connect_collection_transfer";
      /**
       * Format: double
       * @description Amount transferred, in cents (or local equivalent).
       */
      amount: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description ID of the account that funds are being collected for. */
      destination: string | components["schemas"]["stripe.Stripe.Account"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
    };
    /**
     * @description Balance transactions represent funds moving through your Stripe account.
     * Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.
     *
     * Related guide: [Balance transaction types](https://stripe.com/docs/reports/balance-transaction-types)
     */
    "stripe.Stripe.BalanceTransaction": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "balance_transaction";
      /**
       * Format: double
       * @description Gross amount of this transaction (in cents (or local equivalent)). A positive value represents funds charged to another party, and a negative value represents funds sent to another party.
       */
      amount: number;
      /**
       * Format: double
       * @description The date that the transaction's net funds become available in the Stripe balance.
       */
      available_on: number;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      description: string | null;
      /**
       * Format: double
       * @description If applicable, this transaction uses an exchange rate. If money converts from currency A to currency B, then the `amount` in currency A, multipled by the `exchange_rate`, equals the `amount` in currency B. For example, if you charge a customer 10.00 EUR, the PaymentIntent's `amount` is `1000` and `currency` is `eur`. If this converts to 12.34 USD in your Stripe account, the BalanceTransaction's `amount` is `1234`, its `currency` is `usd`, and the `exchange_rate` is `1.234`.
       */
      exchange_rate: number | null;
      /**
       * Format: double
       * @description Fees (in cents (or local equivalent)) paid for this transaction. Represented as a positive integer when assessed.
       */
      fee: number;
      /** @description Detailed breakdown of fees (in cents (or local equivalent)) paid for this transaction. */
      fee_details: components["schemas"]["stripe.Stripe.BalanceTransaction.FeeDetail"][];
      /**
       * Format: double
       * @description Net impact to a Stripe balance (in cents (or local equivalent)). A positive value represents incrementing a Stripe balance, and a negative value decrementing a Stripe balance. You can calculate the net impact of a transaction on a balance by `amount` - `fee`
       */
      net: number;
      /** @description Learn more about how [reporting categories](https://stripe.com/docs/reports/reporting-categories) can help you understand balance transactions from an accounting perspective. */
      reporting_category: string;
      /** @description This transaction relates to the Stripe object. */
      source: (string | components["schemas"]["stripe.Stripe.BalanceTransactionSource"]) | null;
      /** @description The transaction's net funds status in the Stripe balance, which are either `available` or `pending`. */
      status: string;
      /** @description Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. Learn more about [balance transaction types and what they represent](https://stripe.com/docs/reports/balance-transaction-types). To classify transactions for accounting purposes, consider `reporting_category` instead. */
      type: components["schemas"]["stripe.Stripe.BalanceTransaction.Type"];
    };
    /**
     * @description Customers with certain payments enabled have a cash balance, representing funds that were paid
     * by the customer to a merchant, but have not yet been allocated to a payment. Cash Balance Transactions
     * represent when funds are moved into or out of this balance. This includes funding by the customer, allocation
     * to payments, and refunds to the customer.
     */
    "stripe.Stripe.CustomerCashBalanceTransaction": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "customer_cash_balance_transaction";
      adjusted_for_overdraft?: components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction.AdjustedForOverdraft"];
      applied_to_payment?: components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction.AppliedToPayment"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description The customer whose available cash balance changed as a result of this transaction. */
      customer: string | components["schemas"]["stripe.Stripe.Customer"];
      /**
       * Format: double
       * @description The total available cash balance for the specified currency after this transaction was applied. Represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
       */
      ending_balance: number;
      funded?: components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction.Funded"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /**
       * Format: double
       * @description The amount by which the cash balance changed, represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). A positive value represents funds being added to the cash balance, a negative value represents funds being removed from the cash balance.
       */
      net_amount: number;
      refunded_from_payment?: components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction.RefundedFromPayment"];
      transferred_to_balance?: components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction.TransferredToBalance"];
      /** @description The type of the cash balance transaction. New types may be added in future. See [Customer Balance](https://stripe.com/docs/payments/customer-balance#types) to learn more about these types. */
      type: components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction.Type"];
      unapplied_from_payment?: components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction.UnappliedFromPayment"];
    };
    "stripe.Stripe.CustomerCashBalanceTransaction.AdjustedForOverdraft": {
      /** @description The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds taken out of your Stripe balance. */
      balance_transaction: string | components["schemas"]["stripe.Stripe.BalanceTransaction"];
      /** @description The [Cash Balance Transaction](https://stripe.com/docs/api/cash_balance_transactions/object) that brought the customer balance negative, triggering the clawback of funds. */
      linked_transaction: string | components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction"];
    };
    /**
     * @description A PaymentIntent guides you through the process of collecting a payment from your customer.
     * We recommend that you create exactly one PaymentIntent for each order or
     * customer session in your system. You can reference the PaymentIntent later to
     * see the history of payment attempts for a particular session.
     *
     * A PaymentIntent transitions through
     * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
     * throughout its lifetime as it interfaces with Stripe.js to perform
     * authentication flows and ultimately creates at most one successful charge.
     *
     * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
     */
    "stripe.Stripe.PaymentIntent": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "payment_intent";
      /**
       * Format: double
       * @description Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
       */
      amount: number;
      /**
       * Format: double
       * @description Amount that can be captured from this PaymentIntent.
       */
      amount_capturable: number;
      amount_details?: components["schemas"]["stripe.Stripe.PaymentIntent.AmountDetails"];
      /**
       * Format: double
       * @description Amount that this PaymentIntent collects.
       */
      amount_received: number;
      /** @description ID of the Connect application that created the PaymentIntent. */
      application: (string | components["schemas"]["stripe.Stripe.Application"]) | null;
      /**
       * Format: double
       * @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
       */
      application_fee_amount: number | null;
      /** @description Settings to configure compatible payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) */
      automatic_payment_methods: components["schemas"]["stripe.Stripe.PaymentIntent.AutomaticPaymentMethods"] | null;
      /**
       * Format: double
       * @description Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
       */
      canceled_at: number | null;
      /** @description Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`). */
      cancellation_reason: components["schemas"]["stripe.Stripe.PaymentIntent.CancellationReason"] | null;
      /** @description Controls when the funds will be captured from the customer's account. */
      capture_method: components["schemas"]["stripe.Stripe.PaymentIntent.CaptureMethod"];
      /**
       * @description The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.
       *
       * The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
       *
       * Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
       */
      client_secret: string | null;
      /** @description Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment. */
      confirmation_method: components["schemas"]["stripe.Stripe.PaymentIntent.ConfirmationMethod"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /**
       * @description ID of the Customer this PaymentIntent belongs to, if one exists.
       *
       * Payment methods attached to other Customers cannot be used with this PaymentIntent.
       *
       * If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
       */
      customer: (string | components["schemas"]["stripe.Stripe.Customer"] | components["schemas"]["stripe.Stripe.DeletedCustomer"]) | null;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      description: string | null;
      /** @description ID of the invoice that created this PaymentIntent, if it exists. */
      invoice: (string | components["schemas"]["stripe.Stripe.Invoice"]) | null;
      /** @description The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason. */
      last_payment_error: components["schemas"]["stripe.Stripe.PaymentIntent.LastPaymentError"] | null;
      /** @description ID of the latest [Charge object](https://stripe.com/docs/api/charges) created by this PaymentIntent. This property is `null` until PaymentIntent confirmation is attempted. */
      latest_charge: (string | components["schemas"]["stripe.Stripe.Charge"]) | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata). */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source. */
      next_action: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction"] | null;
      /** @description The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
      on_behalf_of: (string | components["schemas"]["stripe.Stripe.Account"]) | null;
      /** @description ID of the payment method used in this PaymentIntent. */
      payment_method: (string | components["schemas"]["stripe.Stripe.PaymentMethod"]) | null;
      /** @description Information about the payment method configuration used for this PaymentIntent. */
      payment_method_configuration_details: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodConfigurationDetails"] | null;
      /** @description Payment-method-specific configuration for this PaymentIntent. */
      payment_method_options: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions"] | null;
      /** @description The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
      payment_method_types: string[];
      /** @description If present, this property tells you about the processing state of the payment. */
      processing: components["schemas"]["stripe.Stripe.PaymentIntent.Processing"] | null;
      /** @description Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
      receipt_email: string | null;
      /** @description ID of the review associated with this PaymentIntent, if any. */
      review: (string | components["schemas"]["stripe.Stripe.Review"]) | null;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage: components["schemas"]["stripe.Stripe.PaymentIntent.SetupFutureUsage"] | null;
      /** @description Shipping information for this PaymentIntent. */
      shipping: components["schemas"]["stripe.Stripe.PaymentIntent.Shipping"] | null;
      /** @description This is a legacy field that will be removed in the future. It is the ID of the Source object that is associated with this PaymentIntent, if one was supplied. */
      source: (string | components["schemas"]["stripe.Stripe.CustomerSource"] | components["schemas"]["stripe.Stripe.DeletedCustomerSource"]) | null;
      /**
       * @description Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
       *
       * Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
       */
      statement_descriptor: string | null;
      /** @description Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. */
      statement_descriptor_suffix: string | null;
      /** @description Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses). */
      status: components["schemas"]["stripe.Stripe.PaymentIntent.Status"];
      /** @description The data that automatically creates a Transfer after the payment finalizes. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
      transfer_data: components["schemas"]["stripe.Stripe.PaymentIntent.TransferData"] | null;
      /** @description A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers). */
      transfer_group: string | null;
    };
    "stripe.Stripe.CustomerCashBalanceTransaction.AppliedToPayment": {
      /** @description The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were applied to. */
      payment_intent: string | components["schemas"]["stripe.Stripe.PaymentIntent"];
    };
    "stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.EuBankTransfer": {
      /** @description The BIC of the bank of the sender of the funding. */
      bic: string | null;
      /** @description The last 4 digits of the IBAN of the sender of the funding. */
      iban_last4: string | null;
      /** @description The full name of the sender, as supplied by the sending bank. */
      sender_name: string | null;
    };
    "stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.GbBankTransfer": {
      /** @description The last 4 digits of the account number of the sender of the funding. */
      account_number_last4: string | null;
      /** @description The full name of the sender, as supplied by the sending bank. */
      sender_name: string | null;
      /** @description The sort code of the bank of the sender of the funding */
      sort_code: string | null;
    };
    "stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.JpBankTransfer": {
      /** @description The name of the bank of the sender of the funding. */
      sender_bank: string | null;
      /** @description The name of the bank branch of the sender of the funding. */
      sender_branch: string | null;
      /** @description The full name of the sender, as supplied by the sending bank. */
      sender_name: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.Type": "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
    /** @enum {string} */
    "stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.UsBankTransfer.Network": "ach" | "domestic_wire_us" | "swift";
    "stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.UsBankTransfer": {
      /** @description The banking network used for this funding. */
      network?: components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.UsBankTransfer.Network"];
      /** @description The full name of the sender, as supplied by the sending bank. */
      sender_name: string | null;
    };
    "stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer": {
      eu_bank_transfer?: components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.EuBankTransfer"];
      gb_bank_transfer?: components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.GbBankTransfer"];
      jp_bank_transfer?: components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.JpBankTransfer"];
      /** @description The user-supplied reference field on the bank transfer. */
      reference: string | null;
      /** @description The funding method type used to fund the customer balance. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`. */
      type: components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.Type"];
      us_bank_transfer?: components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer.UsBankTransfer"];
    };
    "stripe.Stripe.CustomerCashBalanceTransaction.Funded": {
      bank_transfer: components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction.Funded.BankTransfer"];
    };
    "stripe.Stripe.Refund.DestinationDetails.Affirm": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.AfterpayClearpay": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.Alipay": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.AmazonPay": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.AuBankTransfer": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.Blik": {
      /** @description The reference assigned to the refund. */
      reference: string | null;
      /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
      reference_status: string | null;
    };
    "stripe.Stripe.Refund.DestinationDetails.BrBankTransfer": {
      /** @description The reference assigned to the refund. */
      reference: string | null;
      /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
      reference_status: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Refund.DestinationDetails.Card.Type": "pending" | "refund" | "reversal";
    "stripe.Stripe.Refund.DestinationDetails.Card": {
      /** @description Value of the reference number assigned to the refund. */
      reference?: string;
      /** @description Status of the reference number on the refund. This can be `pending`, `available` or `unavailable`. */
      reference_status?: string;
      /** @description Type of the reference number assigned to the refund. */
      reference_type?: string;
      /** @description The type of refund. This can be `refund`, `reversal`, or `pending`. */
      type: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Card.Type"];
    };
    "stripe.Stripe.Refund.DestinationDetails.Cashapp": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.CustomerCashBalance": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.Eps": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.EuBankTransfer": {
      /** @description The reference assigned to the refund. */
      reference: string | null;
      /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
      reference_status: string | null;
    };
    "stripe.Stripe.Refund.DestinationDetails.GbBankTransfer": {
      /** @description The reference assigned to the refund. */
      reference: string | null;
      /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
      reference_status: string | null;
    };
    "stripe.Stripe.Refund.DestinationDetails.Giropay": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.Grabpay": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.JpBankTransfer": {
      /** @description The reference assigned to the refund. */
      reference: string | null;
      /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
      reference_status: string | null;
    };
    "stripe.Stripe.Refund.DestinationDetails.Klarna": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.Multibanco": {
      /** @description The reference assigned to the refund. */
      reference: string | null;
      /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
      reference_status: string | null;
    };
    "stripe.Stripe.Refund.DestinationDetails.MxBankTransfer": {
      /** @description The reference assigned to the refund. */
      reference: string | null;
      /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
      reference_status: string | null;
    };
    "stripe.Stripe.Refund.DestinationDetails.P24": {
      /** @description The reference assigned to the refund. */
      reference: string | null;
      /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
      reference_status: string | null;
    };
    "stripe.Stripe.Refund.DestinationDetails.Paynow": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.Paypal": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.Pix": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.Revolut": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.Sofort": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.Swish": {
      /** @description The reference assigned to the refund. */
      reference: string | null;
      /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
      reference_status: string | null;
    };
    "stripe.Stripe.Refund.DestinationDetails.ThBankTransfer": {
      /** @description The reference assigned to the refund. */
      reference: string | null;
      /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
      reference_status: string | null;
    };
    "stripe.Stripe.Refund.DestinationDetails.UsBankTransfer": {
      /** @description The reference assigned to the refund. */
      reference: string | null;
      /** @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
      reference_status: string | null;
    };
    "stripe.Stripe.Refund.DestinationDetails.WechatPay": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails.Zip": Record<string, never>;
    "stripe.Stripe.Refund.DestinationDetails": {
      affirm?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Affirm"];
      afterpay_clearpay?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.AfterpayClearpay"];
      alipay?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Alipay"];
      amazon_pay?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.AmazonPay"];
      au_bank_transfer?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.AuBankTransfer"];
      blik?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Blik"];
      br_bank_transfer?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.BrBankTransfer"];
      card?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Card"];
      cashapp?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Cashapp"];
      customer_cash_balance?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.CustomerCashBalance"];
      eps?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Eps"];
      eu_bank_transfer?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.EuBankTransfer"];
      gb_bank_transfer?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.GbBankTransfer"];
      giropay?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Giropay"];
      grabpay?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Grabpay"];
      jp_bank_transfer?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.JpBankTransfer"];
      klarna?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Klarna"];
      multibanco?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Multibanco"];
      mx_bank_transfer?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.MxBankTransfer"];
      p24?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.P24"];
      paynow?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Paynow"];
      paypal?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Paypal"];
      pix?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Pix"];
      revolut?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Revolut"];
      sofort?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Sofort"];
      swish?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Swish"];
      th_bank_transfer?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.ThBankTransfer"];
      /** @description The type of transaction-specific details of the payment method used in the refund (e.g., `card`). An additional hash is included on `destination_details` with a name matching this value. It contains information specific to the refund transaction. */
      type: string;
      us_bank_transfer?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.UsBankTransfer"];
      wechat_pay?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.WechatPay"];
      zip?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails.Zip"];
    };
    "stripe.Stripe.Refund.NextAction.DisplayDetails.EmailSent": {
      /**
       * Format: double
       * @description The timestamp when the email was sent.
       */
      email_sent_at: number;
      /** @description The recipient's email address. */
      email_sent_to: string;
    };
    "stripe.Stripe.Refund.NextAction.DisplayDetails": {
      email_sent: components["schemas"]["stripe.Stripe.Refund.NextAction.DisplayDetails.EmailSent"];
      /**
       * Format: double
       * @description The expiry timestamp.
       */
      expires_at: number;
    };
    "stripe.Stripe.Refund.NextAction": {
      /** @description Contains the refund details. */
      display_details: components["schemas"]["stripe.Stripe.Refund.NextAction.DisplayDetails"] | null;
      /** @description Type of the next action to perform. */
      type: string;
    };
    /** @enum {string} */
    "stripe.Stripe.Refund.Reason": "duplicate" | "expired_uncaptured_charge" | "fraudulent" | "requested_by_customer";
    /**
     * @description Refund objects allow you to refund a previously created charge that isn't
     * refunded yet. Funds are refunded to the credit or debit card that's
     * initially charged.
     *
     * Related guide: [Refunds](https://stripe.com/docs/refunds)
     */
    "stripe.Stripe.Refund": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "refund";
      /**
       * Format: double
       * @description Amount, in cents (or local equivalent).
       */
      amount: number;
      /** @description Balance transaction that describes the impact on your account balance. */
      balance_transaction: (string | components["schemas"]["stripe.Stripe.BalanceTransaction"]) | null;
      /** @description ID of the charge that's refunded. */
      charge: (string | components["schemas"]["stripe.Stripe.Charge"]) | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only). */
      description?: string;
      destination_details?: components["schemas"]["stripe.Stripe.Refund.DestinationDetails"];
      /** @description After the refund fails, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction. */
      failure_balance_transaction?: string | components["schemas"]["stripe.Stripe.BalanceTransaction"];
      /** @description Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`. */
      failure_reason?: string;
      /** @description For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions. */
      instructions_email?: string;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      next_action?: components["schemas"]["stripe.Stripe.Refund.NextAction"];
      /** @description ID of the PaymentIntent that's refunded. */
      payment_intent: (string | components["schemas"]["stripe.Stripe.PaymentIntent"]) | null;
      /** @description Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`). */
      reason: components["schemas"]["stripe.Stripe.Refund.Reason"] | null;
      /** @description This is the transaction number that appears on email receipts sent for this refund. */
      receipt_number: string | null;
      /** @description The transfer reversal that's associated with the refund. Only present if the charge came from another Stripe account. */
      source_transfer_reversal: (string | components["schemas"]["stripe.Stripe.TransferReversal"]) | null;
      /** @description Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds). */
      status: string | null;
      /** @description This refers to the transfer reversal object if the accompanying transfer reverses. This is only applicable if the charge was created using the destination parameter. */
      transfer_reversal: (string | components["schemas"]["stripe.Stripe.TransferReversal"]) | null;
    };
    /**
     * @description [Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
     * connected account, either entirely or partially, and can also specify whether
     * to refund any related application fees. Transfer reversals add to the
     * platform's balance and subtract from the destination account's balance.
     *
     * Reversing a transfer that was made for a [destination
     * charge](https://stripe.com/docs/connect/destination-charges) is allowed only up to the amount of
     * the charge. It is possible to reverse a
     * [transfer_group](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options)
     * transfer only if the destination account has enough balance to cover the
     * reversal.
     *
     * Related guide: [Reverse transfers](https://stripe.com/docs/connect/separate-charges-and-transfers#reverse-transfers)
     */
    "stripe.Stripe.TransferReversal": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "transfer_reversal";
      /**
       * Format: double
       * @description Amount, in cents (or local equivalent).
       */
      amount: number;
      /** @description Balance transaction that describes the impact on your account balance. */
      balance_transaction: (string | components["schemas"]["stripe.Stripe.BalanceTransaction"]) | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description Linked payment refund for the transfer reversal. */
      destination_payment_refund: (string | components["schemas"]["stripe.Stripe.Refund"]) | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      /** @description ID of the refund responsible for the transfer reversal. */
      source_refund: (string | components["schemas"]["stripe.Stripe.Refund"]) | null;
      /** @description ID of the transfer that was reversed. */
      transfer: string | components["schemas"]["stripe.Stripe.Transfer"];
    };
    /**
     * @description A container for paginated lists of objects.
     * The array of objects is on the `.data` property,
     * and `.has_more` indicates whether there are additional objects beyond the end of this list.
     *
     * Learn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)
     * or, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.
     */
    "stripe.Stripe.ApiList_stripe.Stripe.TransferReversal_": {
      /** @enum {string} */
      object: "list";
      data: components["schemas"]["stripe.Stripe.TransferReversal"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      has_more: boolean;
      /** @description The URL where this list can be accessed. */
      url: string;
    };
    /**
     * @description A `Transfer` object is created when you move funds between Stripe accounts as
     * part of Connect.
     *
     * Before April 6, 2017, transfers also represented movement of funds from a
     * Stripe account to a card or bank account. This behavior has since been split
     * out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
     * information, read about the
     * [transfer/payout split](https://stripe.com/docs/transfer-payout-split).
     *
     * Related guide: [Creating separate charges and transfers](https://stripe.com/docs/connect/separate-charges-and-transfers)
     */
    "stripe.Stripe.Transfer": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "transfer";
      /**
       * Format: double
       * @description Amount in cents (or local equivalent) to be transferred.
       */
      amount: number;
      /**
       * Format: double
       * @description Amount in cents (or local equivalent) reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
       */
      amount_reversed: number;
      /** @description Balance transaction that describes the impact of this transfer on your account balance. */
      balance_transaction: (string | components["schemas"]["stripe.Stripe.BalanceTransaction"]) | null;
      /**
       * Format: double
       * @description Time that this record of the transfer was first created.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      description: string | null;
      /** @description ID of the Stripe account the transfer was sent to. */
      destination: (string | components["schemas"]["stripe.Stripe.Account"]) | null;
      /** @description If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer. */
      destination_payment?: string | components["schemas"]["stripe.Stripe.Charge"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description A list of reversals that have been applied to the transfer. */
      reversals: components["schemas"]["stripe.Stripe.ApiList_stripe.Stripe.TransferReversal_"];
      /** @description Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false. */
      reversed: boolean;
      /** @description ID of the charge that was used to fund the transfer. If null, the transfer was funded from the available balance. */
      source_transaction: (string | components["schemas"]["stripe.Stripe.Charge"]) | null;
      /** @description The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`. */
      source_type?: string;
      /** @description A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details. */
      transfer_group: string | null;
    };
    "stripe.Stripe.CustomerCashBalanceTransaction.RefundedFromPayment": {
      /** @description The [Refund](https://stripe.com/docs/api/refunds/object) that moved these funds into the customer's cash balance. */
      refund: string | components["schemas"]["stripe.Stripe.Refund"];
    };
    "stripe.Stripe.CustomerCashBalanceTransaction.TransferredToBalance": {
      /** @description The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds transferred to your Stripe balance. */
      balance_transaction: string | components["schemas"]["stripe.Stripe.BalanceTransaction"];
    };
    /** @enum {string} */
    "stripe.Stripe.CustomerCashBalanceTransaction.Type": "adjusted_for_overdraft" | "applied_to_payment" | "funded" | "funding_reversed" | "refunded_from_payment" | "return_canceled" | "return_initiated" | "transferred_to_balance" | "unapplied_from_payment";
    "stripe.Stripe.CustomerCashBalanceTransaction.UnappliedFromPayment": {
      /** @description The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were unapplied from. */
      payment_intent: string | components["schemas"]["stripe.Stripe.PaymentIntent"];
    };
    "stripe.Stripe.Dispute.Evidence": {
      /** @description Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity. */
      access_activity_log: string | null;
      /** @description The billing address provided by the customer. */
      billing_address: string | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer. */
      cancellation_policy: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description An explanation of how and when the customer was shown your refund policy prior to purchase. */
      cancellation_policy_disclosure: string | null;
      /** @description A justification for why the customer's subscription was not canceled. */
      cancellation_rebuttal: string | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service. */
      customer_communication: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description The email address of the customer. */
      customer_email_address: string | null;
      /** @description The name of the customer. */
      customer_name: string | null;
      /** @description The IP address that the customer used when making the purchase. */
      customer_purchase_ip: string | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature. */
      customer_signature: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate. */
      duplicate_charge_documentation: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate. */
      duplicate_charge_explanation: string | null;
      /** @description The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge. */
      duplicate_charge_id: string | null;
      /** @description A description of the product or service that was sold. */
      product_description: string | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge. */
      receipt: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer. */
      refund_policy: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description Documentation demonstrating that the customer was shown your refund policy prior to purchase. */
      refund_policy_disclosure: string | null;
      /** @description A justification for why the customer is not entitled to a refund. */
      refund_refusal_explanation: string | null;
      /** @description The date on which the customer received or began receiving the purchased service, in a clear human-readable format. */
      service_date: string | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement. */
      service_documentation: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description The address to which a physical product was shipped. You should try to include as complete address information as possible. */
      shipping_address: string | null;
      /** @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas. */
      shipping_carrier: string | null;
      /** @description The date on which a physical product began its route to the shipping address, in a clear human-readable format. */
      shipping_date: string | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible. */
      shipping_documentation: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
      shipping_tracking_number: string | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements. */
      uncategorized_file: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description Any additional evidence or statements. */
      uncategorized_text: string | null;
    };
    "stripe.Stripe.Dispute.EvidenceDetails": {
      /**
       * Format: double
       * @description Date by which evidence must be submitted in order to successfully challenge dispute. Will be 0 if the customer's bank or credit card company doesn't allow a response for this particular dispute.
       */
      due_by: number | null;
      /** @description Whether evidence has been staged for this dispute. */
      has_evidence: boolean;
      /** @description Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed. */
      past_due: boolean;
      /**
       * Format: double
       * @description The number of times evidence has been submitted. Typically, you may only submit evidence once.
       */
      submission_count: number;
    };
    /** @enum {string} */
    "stripe.Stripe.Dispute.PaymentMethodDetails.AmazonPay.DisputeType": "chargeback" | "claim";
    "stripe.Stripe.Dispute.PaymentMethodDetails.AmazonPay": {
      /** @description The AmazonPay dispute type, chargeback or claim */
      dispute_type: components["schemas"]["stripe.Stripe.Dispute.PaymentMethodDetails.AmazonPay.DisputeType"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Dispute.PaymentMethodDetails.Card.CaseType": "chargeback" | "inquiry";
    "stripe.Stripe.Dispute.PaymentMethodDetails.Card": {
      /** @description Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      brand: string;
      /** @description The type of dispute opened. Different case types may have varying fees and financial impact. */
      case_type: components["schemas"]["stripe.Stripe.Dispute.PaymentMethodDetails.Card.CaseType"];
      /** @description The card network's specific dispute reason code, which maps to one of Stripe's primary dispute categories to simplify response guidance. The [Network code map](https://stripe.com/docs/disputes/categories#network-code-map) lists all available dispute reason codes by network. */
      network_reason_code: string | null;
    };
    "stripe.Stripe.Dispute.PaymentMethodDetails.Klarna": {
      /** @description The reason for the dispute as defined by Klarna */
      reason_code: string | null;
    };
    "stripe.Stripe.Dispute.PaymentMethodDetails.Paypal": {
      /** @description The ID of the dispute in PayPal. */
      case_id: string | null;
      /** @description The reason for the dispute as defined by PayPal */
      reason_code: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Dispute.PaymentMethodDetails.Type": "amazon_pay" | "card" | "klarna" | "paypal";
    "stripe.Stripe.Dispute.PaymentMethodDetails": {
      amazon_pay?: components["schemas"]["stripe.Stripe.Dispute.PaymentMethodDetails.AmazonPay"];
      card?: components["schemas"]["stripe.Stripe.Dispute.PaymentMethodDetails.Card"];
      klarna?: components["schemas"]["stripe.Stripe.Dispute.PaymentMethodDetails.Klarna"];
      paypal?: components["schemas"]["stripe.Stripe.Dispute.PaymentMethodDetails.Paypal"];
      /** @description Payment method type. */
      type: components["schemas"]["stripe.Stripe.Dispute.PaymentMethodDetails.Type"];
    };
    /** @enum {string} */
    "stripe.Stripe.Dispute.Status": "lost" | "needs_response" | "under_review" | "warning_closed" | "warning_needs_response" | "warning_under_review" | "won";
    /**
     * @description A dispute occurs when a customer questions your charge with their card issuer.
     * When this happens, you have the opportunity to respond to the dispute with
     * evidence that shows that the charge is legitimate.
     *
     * Related guide: [Disputes and fraud](https://stripe.com/docs/disputes)
     */
    "stripe.Stripe.Dispute": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "dispute";
      /**
       * Format: double
       * @description Disputed amount. Usually the amount of the charge, but it can differ (usually because of currency fluctuation or because only part of the order is disputed).
       */
      amount: number;
      /** @description List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute. */
      balance_transactions: components["schemas"]["stripe.Stripe.BalanceTransaction"][];
      /** @description ID of the charge that's disputed. */
      charge: string | components["schemas"]["stripe.Stripe.Charge"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      evidence: components["schemas"]["stripe.Stripe.Dispute.Evidence"];
      evidence_details: components["schemas"]["stripe.Stripe.Dispute.EvidenceDetails"];
      /** @description If true, it's still possible to refund the disputed payment. After the payment has been fully refunded, no further funds are withdrawn from your Stripe account as a result of this dispute. */
      is_charge_refundable: boolean;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description Network-dependent reason code for the dispute. */
      network_reason_code?: string | null;
      /** @description ID of the PaymentIntent that's disputed. */
      payment_intent: (string | components["schemas"]["stripe.Stripe.PaymentIntent"]) | null;
      payment_method_details?: components["schemas"]["stripe.Stripe.Dispute.PaymentMethodDetails"];
      /** @description Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Learn more about [dispute reasons](https://stripe.com/docs/disputes/categories). */
      reason: string;
      /** @description Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, or `lost`. */
      status: components["schemas"]["stripe.Stripe.Dispute.Status"];
    };
    /**
     * @description `Application Fee Refund` objects allow you to refund an application fee that
     * has previously been created but not yet refunded. Funds will be refunded to
     * the Stripe account from which the fee was originally collected.
     *
     * Related guide: [Refunding application fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee)
     */
    "stripe.Stripe.FeeRefund": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "fee_refund";
      /**
       * Format: double
       * @description Amount, in cents (or local equivalent).
       */
      amount: number;
      /** @description Balance transaction that describes the impact on your account balance. */
      balance_transaction: (string | components["schemas"]["stripe.Stripe.BalanceTransaction"]) | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description ID of the application fee that was refunded. */
      fee: string | components["schemas"]["stripe.Stripe.ApplicationFee"];
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
    };
    "stripe.Stripe.Issuing.Authorization.AmountDetails": {
      /**
       * Format: double
       * @description The fee charged by the ATM for the cash withdrawal.
       */
      atm_fee: number | null;
      /**
       * Format: double
       * @description The amount of cash requested by the cardholder.
       */
      cashback_amount: number | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Authorization.AuthorizationMethod": "chip" | "contactless" | "keyed_in" | "online" | "swipe";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.CancellationReason": "design_rejected" | "lost" | "stolen";
    "stripe.Stripe.Issuing.Cardholder.Billing": {
      address: components["schemas"]["stripe.Stripe.Address"];
    };
    "stripe.Stripe.Issuing.Cardholder.Company": {
      /** @description Whether the company's business ID number was provided. */
      tax_id_provided: boolean;
    };
    "stripe.Stripe.Issuing.Cardholder.Individual.CardIssuing.UserTermsAcceptance": {
      /**
       * Format: double
       * @description The Unix timestamp marking when the cardholder accepted the Authorized User Terms.
       */
      date: number | null;
      /** @description The IP address from which the cardholder accepted the Authorized User Terms. */
      ip: string | null;
      /** @description The user agent of the browser from which the cardholder accepted the Authorized User Terms. */
      user_agent: string | null;
    };
    "stripe.Stripe.Issuing.Cardholder.Individual.CardIssuing": {
      /** @description Information about cardholder acceptance of Celtic [Authorized User Terms](https://stripe.com/docs/issuing/cards#accept-authorized-user-terms). Required for cards backed by a Celtic program. */
      user_terms_acceptance: components["schemas"]["stripe.Stripe.Issuing.Cardholder.Individual.CardIssuing.UserTermsAcceptance"] | null;
    };
    "stripe.Stripe.Issuing.Cardholder.Individual.Dob": {
      /**
       * Format: double
       * @description The day of birth, between 1 and 31.
       */
      day: number | null;
      /**
       * Format: double
       * @description The month of birth, between 1 and 12.
       */
      month: number | null;
      /**
       * Format: double
       * @description The four-digit year of birth.
       */
      year: number | null;
    };
    "stripe.Stripe.Issuing.Cardholder.Individual.Verification.Document": {
      /** @description The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
      back: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
      front: (string | components["schemas"]["stripe.Stripe.File"]) | null;
    };
    "stripe.Stripe.Issuing.Cardholder.Individual.Verification": {
      /** @description An identifying document, either a passport or local ID card. */
      document: components["schemas"]["stripe.Stripe.Issuing.Cardholder.Individual.Verification.Document"] | null;
    };
    "stripe.Stripe.Issuing.Cardholder.Individual": {
      /** @description Information related to the card_issuing program for this cardholder. */
      card_issuing?: components["schemas"]["stripe.Stripe.Issuing.Cardholder.Individual.CardIssuing"] | null;
      /** @description The date of birth of this cardholder. */
      dob: components["schemas"]["stripe.Stripe.Issuing.Cardholder.Individual.Dob"] | null;
      /** @description The first name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters. */
      first_name: string | null;
      /** @description The last name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters. */
      last_name: string | null;
      /** @description Government-issued ID document for this cardholder. */
      verification: components["schemas"]["stripe.Stripe.Issuing.Cardholder.Individual.Verification"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Cardholder.PreferredLocale": "de" | "en" | "es" | "fr" | "it";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Cardholder.Requirements.DisabledReason": "listed" | "rejected.listed" | "requirements.past_due" | "under_review";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Cardholder.Requirements.PastDue": "company.tax_id" | "individual.card_issuing.user_terms_acceptance.date" | "individual.card_issuing.user_terms_acceptance.ip" | "individual.dob.day" | "individual.dob.month" | "individual.dob.year" | "individual.first_name" | "individual.last_name" | "individual.verification.document";
    "stripe.Stripe.Issuing.Cardholder.Requirements": {
      /** @description If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason. */
      disabled_reason: components["schemas"]["stripe.Stripe.Issuing.Cardholder.Requirements.DisabledReason"] | null;
      /** @description Array of fields that need to be collected in order to verify and re-enable the cardholder. */
      past_due: components["schemas"]["stripe.Stripe.Issuing.Cardholder.Requirements.PastDue"][] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Cardholder.SpendingControls.AllowedCategory": "ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Cardholder.SpendingControls.BlockedCategory": "ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Cardholder.SpendingControls.SpendingLimit.Category": "ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Cardholder.SpendingControls.SpendingLimit.Interval": "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
    "stripe.Stripe.Issuing.Cardholder.SpendingControls.SpendingLimit": {
      /**
       * Format: double
       * @description Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
       */
      amount: number;
      /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
      categories: components["schemas"]["stripe.Stripe.Issuing.Cardholder.SpendingControls.SpendingLimit.Category"][] | null;
      /** @description Interval (or event) to which the amount applies. */
      interval: components["schemas"]["stripe.Stripe.Issuing.Cardholder.SpendingControls.SpendingLimit.Interval"];
    };
    "stripe.Stripe.Issuing.Cardholder.SpendingControls": {
      /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
      allowed_categories: components["schemas"]["stripe.Stripe.Issuing.Cardholder.SpendingControls.AllowedCategory"][] | null;
      /** @description Array of strings containing representing countries from which authorizations will be allowed. Authorizations from merchants in all other countries will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `blocked_merchant_countries`. Provide an empty value to unset this control. */
      allowed_merchant_countries: string[] | null;
      /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
      blocked_categories: components["schemas"]["stripe.Stripe.Issuing.Cardholder.SpendingControls.BlockedCategory"][] | null;
      /** @description Array of strings containing representing countries from which authorizations will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `allowed_merchant_countries`. Provide an empty value to unset this control. */
      blocked_merchant_countries: string[] | null;
      /** @description Limit spending with amount-based rules that apply across this cardholder's cards. */
      spending_limits: components["schemas"]["stripe.Stripe.Issuing.Cardholder.SpendingControls.SpendingLimit"][] | null;
      /** @description Currency of the amounts within `spending_limits`. */
      spending_limits_currency: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Cardholder.Status": "active" | "blocked" | "inactive";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Cardholder.Type": "company" | "individual";
    /**
     * @description An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
     *
     * Related guide: [How to create a cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
     */
    "stripe.Stripe.Issuing.Cardholder": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "issuing.cardholder";
      billing: components["schemas"]["stripe.Stripe.Issuing.Cardholder.Billing"];
      /** @description Additional information about a `company` cardholder. */
      company: components["schemas"]["stripe.Stripe.Issuing.Cardholder.Company"] | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description The cardholder's email address. */
      email: string | null;
      /** @description Additional information about an `individual` cardholder. */
      individual: components["schemas"]["stripe.Stripe.Issuing.Cardholder.Individual"] | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description The cardholder's name. This will be printed on cards issued to them. */
      name: string;
      /** @description The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details. */
      phone_number: string | null;
      /**
       * @description The cardholder's preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.
       *  This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.
       */
      preferred_locales: components["schemas"]["stripe.Stripe.Issuing.Cardholder.PreferredLocale"][] | null;
      requirements: components["schemas"]["stripe.Stripe.Issuing.Cardholder.Requirements"];
      /** @description Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details. */
      spending_controls: components["schemas"]["stripe.Stripe.Issuing.Cardholder.SpendingControls"] | null;
      /** @description Specifies whether to permit authorizations on this cardholder's cards. */
      status: components["schemas"]["stripe.Stripe.Issuing.Cardholder.Status"];
      /** @description One of `individual` or `company`. See [Choose a cardholder type](https://stripe.com/docs/issuing/other/choose-cardholder) for more details. */
      type: components["schemas"]["stripe.Stripe.Issuing.Cardholder.Type"];
    };
    "stripe.Stripe.Issuing.PersonalizationDesign.CarrierText": {
      /** @description The footer body text of the carrier letter. */
      footer_body: string | null;
      /** @description The footer title text of the carrier letter. */
      footer_title: string | null;
      /** @description The header body text of the carrier letter. */
      header_body: string | null;
      /** @description The header title text of the carrier letter. */
      header_title: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.PhysicalBundle.Features.CardLogo": "optional" | "required" | "unsupported";
    /** @enum {string} */
    "stripe.Stripe.Issuing.PhysicalBundle.Features.CarrierText": "optional" | "required" | "unsupported";
    /** @enum {string} */
    "stripe.Stripe.Issuing.PhysicalBundle.Features.SecondLine": "optional" | "required" | "unsupported";
    "stripe.Stripe.Issuing.PhysicalBundle.Features": {
      /** @description The policy for how to use card logo images in a card design with this physical bundle. */
      card_logo: components["schemas"]["stripe.Stripe.Issuing.PhysicalBundle.Features.CardLogo"];
      /** @description The policy for how to use carrier letter text in a card design with this physical bundle. */
      carrier_text: components["schemas"]["stripe.Stripe.Issuing.PhysicalBundle.Features.CarrierText"];
      /** @description The policy for how to use a second line on a card with this physical bundle. */
      second_line: components["schemas"]["stripe.Stripe.Issuing.PhysicalBundle.Features.SecondLine"];
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.PhysicalBundle.Status": "active" | "inactive" | "review";
    /** @enum {string} */
    "stripe.Stripe.Issuing.PhysicalBundle.Type": "custom" | "standard";
    /** @description A Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card. */
    "stripe.Stripe.Issuing.PhysicalBundle": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "issuing.physical_bundle";
      features: components["schemas"]["stripe.Stripe.Issuing.PhysicalBundle.Features"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Friendly display name. */
      name: string;
      /** @description Whether this physical bundle can be used to create cards. */
      status: components["schemas"]["stripe.Stripe.Issuing.PhysicalBundle.Status"];
      /** @description Whether this physical bundle is a standard Stripe offering or custom-made for you. */
      type: components["schemas"]["stripe.Stripe.Issuing.PhysicalBundle.Type"];
    };
    "stripe.Stripe.Issuing.PersonalizationDesign.Preferences": {
      /** @description Whether we use this personalization design to create cards when one isn't specified. A connected account uses the Connect platform's default design if no personalization design is set as the default design. */
      is_default: boolean;
      /** @description Whether this personalization design is used to create cards when one is not specified and a default for this connected account does not exist. */
      is_platform_default: boolean | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.PersonalizationDesign.RejectionReasons.CardLogo": "geographic_location" | "inappropriate" | "network_name" | "non_binary_image" | "non_fiat_currency" | "other" | "other_entity" | "promotional_material";
    /** @enum {string} */
    "stripe.Stripe.Issuing.PersonalizationDesign.RejectionReasons.CarrierText": "geographic_location" | "inappropriate" | "network_name" | "non_fiat_currency" | "other" | "other_entity" | "promotional_material";
    "stripe.Stripe.Issuing.PersonalizationDesign.RejectionReasons": {
      /** @description The reason(s) the card logo was rejected. */
      card_logo: components["schemas"]["stripe.Stripe.Issuing.PersonalizationDesign.RejectionReasons.CardLogo"][] | null;
      /** @description The reason(s) the carrier text was rejected. */
      carrier_text: components["schemas"]["stripe.Stripe.Issuing.PersonalizationDesign.RejectionReasons.CarrierText"][] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.PersonalizationDesign.Status": "active" | "inactive" | "rejected" | "review";
    /** @description A Personalization Design is a logical grouping of a Physical Bundle, card logo, and carrier text that represents a product line. */
    "stripe.Stripe.Issuing.PersonalizationDesign": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "issuing.personalization_design";
      /** @description The file for the card logo to use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`. */
      card_logo: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description Hash containing carrier text, for use with physical bundles that support carrier text. */
      carrier_text: components["schemas"]["stripe.Stripe.Issuing.PersonalizationDesign.CarrierText"] | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters. */
      lookup_key: string | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description Friendly display name. */
      name: string | null;
      /** @description The physical bundle object belonging to this personalization design. */
      physical_bundle: string | components["schemas"]["stripe.Stripe.Issuing.PhysicalBundle"];
      preferences: components["schemas"]["stripe.Stripe.Issuing.PersonalizationDesign.Preferences"];
      rejection_reasons: components["schemas"]["stripe.Stripe.Issuing.PersonalizationDesign.RejectionReasons"];
      /** @description Whether this personalization design can be used to create cards. */
      status: components["schemas"]["stripe.Stripe.Issuing.PersonalizationDesign.Status"];
    };
    /** @description You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders. */
    "stripe.Stripe.Issuing.Card": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "issuing.card";
      /** @description The brand of the card. */
      brand: string;
      /** @description The reason why the card was canceled. */
      cancellation_reason: components["schemas"]["stripe.Stripe.Issuing.Card.CancellationReason"] | null;
      /**
       * @description An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
       *
       * Related guide: [How to create a cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
       */
      cardholder: components["schemas"]["stripe.Stripe.Issuing.Cardholder"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK. */
      currency: string;
      /** @description The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
      cvc?: string;
      /**
       * Format: double
       * @description The expiration month of the card.
       */
      exp_month: number;
      /**
       * Format: double
       * @description The expiration year of the card.
       */
      exp_year: number;
      /** @description The financial account this card is attached to. */
      financial_account?: string | null;
      /** @description The last 4 digits of the card number. */
      last4: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
      number?: string;
      /** @description The personalization design object belonging to this card. */
      personalization_design: (string | components["schemas"]["stripe.Stripe.Issuing.PersonalizationDesign"]) | null;
      /** @description The latest card that replaces this card, if any. */
      replaced_by: (string | components["schemas"]["stripe.Stripe.Issuing.Card"]) | null;
      /** @description The card this card replaces, if any. */
      replacement_for: (string | components["schemas"]["stripe.Stripe.Issuing.Card"]) | null;
      /** @description The reason why the previous card needed to be replaced. */
      replacement_reason: components["schemas"]["stripe.Stripe.Issuing.Card.ReplacementReason"] | null;
      /** @description Where and how the card will be shipped. */
      shipping: components["schemas"]["stripe.Stripe.Issuing.Card.Shipping"] | null;
      spending_controls: components["schemas"]["stripe.Stripe.Issuing.Card.SpendingControls"];
      /** @description Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`. */
      status: components["schemas"]["stripe.Stripe.Issuing.Card.Status"];
      /** @description The type of the card. */
      type: components["schemas"]["stripe.Stripe.Issuing.Card.Type"];
      /** @description Information relating to digital wallets (like Apple Pay and Google Pay). */
      wallets: components["schemas"]["stripe.Stripe.Issuing.Card.Wallets"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.ReplacementReason": "damaged" | "expired" | "lost" | "stolen";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.Shipping.AddressValidation.Mode": "disabled" | "normalization_only" | "validation_and_normalization";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.Shipping.AddressValidation.Result": "indeterminate" | "likely_deliverable" | "likely_undeliverable";
    "stripe.Stripe.Issuing.Card.Shipping.AddressValidation": {
      /** @description The address validation capabilities to use. */
      mode: components["schemas"]["stripe.Stripe.Issuing.Card.Shipping.AddressValidation.Mode"];
      /** @description The normalized shipping address. */
      normalized_address: components["schemas"]["stripe.Stripe.Address"] | null;
      /** @description The validation result for the shipping address. */
      result: components["schemas"]["stripe.Stripe.Issuing.Card.Shipping.AddressValidation.Result"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.Shipping.Carrier": "dhl" | "fedex" | "royal_mail" | "usps";
    "stripe.Stripe.Issuing.Card.Shipping.Customs": {
      /** @description A registration number used for customs in Europe. See [https://www.gov.uk/eori](https://www.gov.uk/eori) for the UK and [https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en](https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en) for the EU. */
      eori_number: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.Shipping.Service": "express" | "priority" | "standard";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.Shipping.Status": "canceled" | "delivered" | "failure" | "pending" | "returned" | "shipped" | "submitted";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.Shipping.Type": "bulk" | "individual";
    "stripe.Stripe.Issuing.Card.Shipping": {
      address: components["schemas"]["stripe.Stripe.Address"];
      /** @description Address validation details for the shipment. */
      address_validation: components["schemas"]["stripe.Stripe.Issuing.Card.Shipping.AddressValidation"] | null;
      /** @description The delivery company that shipped a card. */
      carrier: components["schemas"]["stripe.Stripe.Issuing.Card.Shipping.Carrier"] | null;
      /** @description Additional information that may be required for clearing customs. */
      customs: components["schemas"]["stripe.Stripe.Issuing.Card.Shipping.Customs"] | null;
      /**
       * Format: double
       * @description A unix timestamp representing a best estimate of when the card will be delivered.
       */
      eta: number | null;
      /** @description Recipient name. */
      name: string;
      /** @description The phone number of the receiver of the shipment. Our courier partners will use this number to contact you in the event of card delivery issues. For individual shipments to the EU/UK, if this field is empty, we will provide them with the phone number provided when the cardholder was initially created. */
      phone_number: string | null;
      /** @description Whether a signature is required for card delivery. This feature is only supported for US users. Standard shipping service does not support signature on delivery. The default value for standard shipping service is false and for express and priority services is true. */
      require_signature: boolean | null;
      /** @description Shipment service, such as `standard` or `express`. */
      service: components["schemas"]["stripe.Stripe.Issuing.Card.Shipping.Service"];
      /** @description The delivery status of the card. */
      status: components["schemas"]["stripe.Stripe.Issuing.Card.Shipping.Status"] | null;
      /** @description A tracking number for a card shipment. */
      tracking_number: string | null;
      /** @description A link to the shipping carrier's site where you can view detailed information about a card shipment. */
      tracking_url: string | null;
      /** @description Packaging options. */
      type: components["schemas"]["stripe.Stripe.Issuing.Card.Shipping.Type"];
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.SpendingControls.AllowedCategory": "ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.SpendingControls.BlockedCategory": "ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.SpendingControls.SpendingLimit.Category": "ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.SpendingControls.SpendingLimit.Interval": "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
    "stripe.Stripe.Issuing.Card.SpendingControls.SpendingLimit": {
      /**
       * Format: double
       * @description Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
       */
      amount: number;
      /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
      categories: components["schemas"]["stripe.Stripe.Issuing.Card.SpendingControls.SpendingLimit.Category"][] | null;
      /** @description Interval (or event) to which the amount applies. */
      interval: components["schemas"]["stripe.Stripe.Issuing.Card.SpendingControls.SpendingLimit.Interval"];
    };
    "stripe.Stripe.Issuing.Card.SpendingControls": {
      /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
      allowed_categories: components["schemas"]["stripe.Stripe.Issuing.Card.SpendingControls.AllowedCategory"][] | null;
      /** @description Array of strings containing representing countries from which authorizations will be allowed. Authorizations from merchants in all other countries will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `blocked_merchant_countries`. Provide an empty value to unset this control. */
      allowed_merchant_countries: string[] | null;
      /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
      blocked_categories: components["schemas"]["stripe.Stripe.Issuing.Card.SpendingControls.BlockedCategory"][] | null;
      /** @description Array of strings containing representing countries from which authorizations will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `allowed_merchant_countries`. Provide an empty value to unset this control. */
      blocked_merchant_countries: string[] | null;
      /** @description Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain). */
      spending_limits: components["schemas"]["stripe.Stripe.Issuing.Card.SpendingControls.SpendingLimit"][] | null;
      /** @description Currency of the amounts within `spending_limits`. Always the same as the currency of the card. */
      spending_limits_currency: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.Status": "active" | "canceled" | "inactive";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.Type": "physical" | "virtual";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.Wallets.ApplePay.IneligibleReason": "missing_agreement" | "missing_cardholder_contact" | "unsupported_region";
    "stripe.Stripe.Issuing.Card.Wallets.ApplePay": {
      /** @description Apple Pay Eligibility */
      eligible: boolean;
      /** @description Reason the card is ineligible for Apple Pay */
      ineligible_reason: components["schemas"]["stripe.Stripe.Issuing.Card.Wallets.ApplePay.IneligibleReason"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Card.Wallets.GooglePay.IneligibleReason": "missing_agreement" | "missing_cardholder_contact" | "unsupported_region";
    "stripe.Stripe.Issuing.Card.Wallets.GooglePay": {
      /** @description Google Pay Eligibility */
      eligible: boolean;
      /** @description Reason the card is ineligible for Google Pay */
      ineligible_reason: components["schemas"]["stripe.Stripe.Issuing.Card.Wallets.GooglePay.IneligibleReason"] | null;
    };
    "stripe.Stripe.Issuing.Card.Wallets": {
      apple_pay: components["schemas"]["stripe.Stripe.Issuing.Card.Wallets.ApplePay"];
      google_pay: components["schemas"]["stripe.Stripe.Issuing.Card.Wallets.GooglePay"];
      /** @description Unique identifier for a card used with digital wallets */
      primary_account_identifier: string | null;
    };
    "stripe.Stripe.Issuing.Authorization.Fleet.CardholderPromptData": {
      /**
       * @deprecated
       * @description [Deprecated] An alphanumeric ID, though typical point of sales only support numeric entry. The card program can be configured to prompt for a vehicle ID, driver ID, or generic ID.
       */
      alphanumeric_id: string | null;
      /** @description Driver ID. */
      driver_id: string | null;
      /**
       * Format: double
       * @description Odometer reading.
       */
      odometer: number | null;
      /** @description An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type. */
      unspecified_id: string | null;
      /** @description User ID. */
      user_id: string | null;
      /** @description Vehicle number. */
      vehicle_number: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Authorization.Fleet.PurchaseType": "fuel_and_non_fuel_purchase" | "fuel_purchase" | "non_fuel_purchase";
    "stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown.Fuel": {
      /** @description Gross fuel amount that should equal Fuel Quantity multiplied by Fuel Unit Cost, inclusive of taxes. */
      gross_amount_decimal: string | null;
    };
    "stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown.NonFuel": {
      /** @description Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes. */
      gross_amount_decimal: string | null;
    };
    "stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown.Tax": {
      /** @description Amount of state or provincial Sales Tax included in the transaction amount. `null` if not reported by merchant or not subject to tax. */
      local_amount_decimal: string | null;
      /** @description Amount of national Sales Tax or VAT included in the transaction amount. `null` if not reported by merchant or not subject to tax. */
      national_amount_decimal: string | null;
    };
    "stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown": {
      /** @description Breakdown of fuel portion of the purchase. */
      fuel: components["schemas"]["stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown.Fuel"] | null;
      /** @description Breakdown of non-fuel portion of the purchase. */
      non_fuel: components["schemas"]["stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown.NonFuel"] | null;
      /** @description Information about tax included in this transaction. */
      tax: components["schemas"]["stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown.Tax"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Authorization.Fleet.ServiceType": "full_service" | "non_fuel_transaction" | "self_service";
    "stripe.Stripe.Issuing.Authorization.Fleet": {
      /** @description Answers to prompts presented to the cardholder at the point of sale. Prompted fields vary depending on the configuration of your physical fleet cards. Typical points of sale support only numeric entry. */
      cardholder_prompt_data: components["schemas"]["stripe.Stripe.Issuing.Authorization.Fleet.CardholderPromptData"] | null;
      /** @description The type of purchase. */
      purchase_type: components["schemas"]["stripe.Stripe.Issuing.Authorization.Fleet.PurchaseType"] | null;
      /** @description More information about the total amount. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed. This information is not guaranteed to be accurate as some merchants may provide unreliable data. */
      reported_breakdown: components["schemas"]["stripe.Stripe.Issuing.Authorization.Fleet.ReportedBreakdown"] | null;
      /** @description The type of fuel service. */
      service_type: components["schemas"]["stripe.Stripe.Issuing.Authorization.Fleet.ServiceType"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Authorization.Fuel.Type": "diesel" | "other" | "unleaded_plus" | "unleaded_regular" | "unleaded_super";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Authorization.Fuel.Unit": "charging_minute" | "imperial_gallon" | "kilogram" | "kilowatt_hour" | "liter" | "other" | "pound" | "us_gallon";
    "stripe.Stripe.Issuing.Authorization.Fuel": {
      /** @description [Conexxus Payment System Product Code](https://www.conexxus.org/conexxus-payment-system-product-codes) identifying the primary fuel product purchased. */
      industry_product_code: string | null;
      /** @description The quantity of `unit`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places. */
      quantity_decimal: string | null;
      /** @description The type of fuel that was purchased. */
      type: components["schemas"]["stripe.Stripe.Issuing.Authorization.Fuel.Type"] | null;
      /** @description The units for `quantity_decimal`. */
      unit: components["schemas"]["stripe.Stripe.Issuing.Authorization.Fuel.Unit"] | null;
      /** @description The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places. */
      unit_cost_decimal: string | null;
    };
    "stripe.Stripe.Issuing.Authorization.MerchantData": {
      /** @description A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values. */
      category: string;
      /** @description The merchant category code for the seller's business */
      category_code: string;
      /** @description City where the seller is located */
      city: string | null;
      /** @description Country where the seller is located */
      country: string | null;
      /** @description Name of the seller */
      name: string | null;
      /** @description Identifier assigned to the seller by the card network. Different card networks may assign different network_id fields to the same merchant. */
      network_id: string;
      /** @description Postal code where the seller is located */
      postal_code: string | null;
      /** @description State where the seller is located */
      state: string | null;
      /** @description An ID assigned by the seller to the location of the sale. */
      terminal_id: string | null;
      /** @description URL provided by the merchant on a 3DS request */
      url: string | null;
    };
    "stripe.Stripe.Issuing.Authorization.NetworkData": {
      /** @description Identifier assigned to the acquirer by the card network. Sometimes this value is not provided by the network; in this case, the value will be `null`. */
      acquiring_institution_id: string | null;
      /** @description The System Trace Audit Number (STAN) is a 6-digit identifier assigned by the acquirer. Prefer `network_data.transaction_id` if present, unless you have special requirements. */
      system_trace_audit_number: string | null;
      /** @description Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions. */
      transaction_id: string | null;
    };
    "stripe.Stripe.Issuing.Authorization.PendingRequest.AmountDetails": {
      /**
       * Format: double
       * @description The fee charged by the ATM for the cash withdrawal.
       */
      atm_fee: number | null;
      /**
       * Format: double
       * @description The amount of cash requested by the cardholder.
       */
      cashback_amount: number | null;
    };
    "stripe.Stripe.Issuing.Authorization.PendingRequest": {
      /**
       * Format: double
       * @description The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
       */
      amount: number;
      /** @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      amount_details: components["schemas"]["stripe.Stripe.Issuing.Authorization.PendingRequest.AmountDetails"] | null;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization. */
      is_amount_controllable: boolean;
      /**
       * Format: double
       * @description The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
       */
      merchant_amount: number;
      /** @description The local currency the merchant is requesting to authorize. */
      merchant_currency: string;
      /**
       * Format: double
       * @description The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99.
       */
      network_risk_score: number | null;
    };
    "stripe.Stripe.Issuing.Authorization.RequestHistory.AmountDetails": {
      /**
       * Format: double
       * @description The fee charged by the ATM for the cash withdrawal.
       */
      atm_fee: number | null;
      /**
       * Format: double
       * @description The amount of cash requested by the cardholder.
       */
      cashback_amount: number | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Authorization.RequestHistory.Reason": "account_disabled" | "card_active" | "card_canceled" | "card_expired" | "card_inactive" | "cardholder_blocked" | "cardholder_inactive" | "cardholder_verification_required" | "insecure_authorization_method" | "insufficient_funds" | "not_allowed" | "pin_blocked" | "spending_controls" | "suspected_fraud" | "verification_failed" | "webhook_approved" | "webhook_declined" | "webhook_error" | "webhook_timeout";
    "stripe.Stripe.Issuing.Authorization.RequestHistory": {
      /**
       * Format: double
       * @description The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved.
       */
      amount: number;
      /** @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      amount_details: components["schemas"]["stripe.Stripe.Issuing.Authorization.RequestHistory.AmountDetails"] | null;
      /** @description Whether this request was approved. */
      approved: boolean;
      /** @description A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter "S", followed by a six-digit number. For example, "S498162". Please note that the code is not guaranteed to be unique across authorizations. */
      authorization_code: string | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /**
       * Format: double
       * @description The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
       */
      merchant_amount: number;
      /** @description The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      merchant_currency: string;
      /**
       * Format: double
       * @description The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99.
       */
      network_risk_score: number | null;
      /** @description When an authorization is approved or declined by you or by Stripe, this field provides additional detail on the reason for the outcome. */
      reason: components["schemas"]["stripe.Stripe.Issuing.Authorization.RequestHistory.Reason"];
      /** @description If the `request_history.reason` is `webhook_error` because the direct webhook response is invalid (for example, parsing errors or missing parameters), we surface a more detailed error message via this field. */
      reason_message: string | null;
      /**
       * Format: double
       * @description Time when the card network received an authorization request from the acquirer in UTC. Referred to by networks as transmission time.
       */
      requested_at: number | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Authorization.Status": "closed" | "pending" | "reversed";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Token.Network": "mastercard" | "visa";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Token.NetworkData.Device.Type": "other" | "phone" | "watch";
    "stripe.Stripe.Issuing.Token.NetworkData.Device": {
      /** @description An obfuscated ID derived from the device ID. */
      device_fingerprint?: string;
      /** @description The IP address of the device at provisioning time. */
      ip_address?: string;
      /** @description The geographic latitude/longitude coordinates of the device at provisioning time. The format is [+-]decimal/[+-]decimal. */
      location?: string;
      /** @description The name of the device used for tokenization. */
      name?: string;
      /** @description The phone number of the device used for tokenization. */
      phone_number?: string;
      /** @description The type of device used for tokenization. */
      type?: components["schemas"]["stripe.Stripe.Issuing.Token.NetworkData.Device.Type"];
    };
    "stripe.Stripe.Issuing.Token.NetworkData.Mastercard": {
      /** @description A unique reference ID from MasterCard to represent the card account number. */
      card_reference_id?: string;
      /** @description The network-unique identifier for the token. */
      token_reference_id: string;
      /** @description The ID of the entity requesting tokenization, specific to MasterCard. */
      token_requestor_id: string;
      /** @description The name of the entity requesting tokenization, if known. This is directly provided from MasterCard. */
      token_requestor_name?: string;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Token.NetworkData.Type": "mastercard" | "visa";
    "stripe.Stripe.Issuing.Token.NetworkData.Visa": {
      /** @description A unique reference ID from Visa to represent the card account number. */
      card_reference_id: string;
      /** @description The network-unique identifier for the token. */
      token_reference_id: string;
      /** @description The ID of the entity requesting tokenization, specific to Visa. */
      token_requestor_id: string;
      /** @description Degree of risk associated with the token between `01` and `99`, with higher number indicating higher risk. A `00` value indicates the token was not scored by Visa. */
      token_risk_score?: string;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.CardNumberSource": "app" | "manual" | "on_file" | "other";
    "stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.CardholderAddress": {
      /** @description The street address of the cardholder tokenizing the card. */
      line1: string;
      /** @description The postal code of the cardholder tokenizing the card. */
      postal_code: string;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.ReasonCode": "account_card_too_new" | "account_recently_changed" | "account_too_new" | "account_too_new_since_launch" | "additional_device" | "data_expired" | "defer_id_v_decision" | "device_recently_lost" | "good_activity_history" | "has_suspended_tokens" | "high_risk" | "inactive_account" | "long_account_tenure" | "low_account_score" | "low_device_score" | "low_phone_number_score" | "network_service_error" | "outside_home_territory" | "provisioning_cardholder_mismatch" | "provisioning_device_and_cardholder_mismatch" | "provisioning_device_mismatch" | "same_device_no_prior_authentication" | "same_device_successful_prior_authentication" | "software_update" | "suspicious_activity" | "too_many_different_cardholders" | "too_many_recent_attempts" | "too_many_recent_tokens";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.SuggestedDecision": "approve" | "decline" | "require_auth";
    "stripe.Stripe.Issuing.Token.NetworkData.WalletProvider": {
      /** @description The wallet provider-given account ID of the digital wallet the token belongs to. */
      account_id?: string;
      /**
       * Format: double
       * @description An evaluation on the trustworthiness of the wallet account between 1 and 5. A higher score indicates more trustworthy.
       */
      account_trust_score?: number;
      /** @description The method used for tokenizing a card. */
      card_number_source?: components["schemas"]["stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.CardNumberSource"];
      cardholder_address?: components["schemas"]["stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.CardholderAddress"];
      /** @description The name of the cardholder tokenizing the card. */
      cardholder_name?: string;
      /**
       * Format: double
       * @description An evaluation on the trustworthiness of the device. A higher score indicates more trustworthy.
       */
      device_trust_score?: number;
      /** @description The hashed email address of the cardholder's account with the wallet provider. */
      hashed_account_email_address?: string;
      /** @description The reasons for suggested tokenization given by the card network. */
      reason_codes?: components["schemas"]["stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.ReasonCode"][];
      /** @description The recommendation on responding to the tokenization request. */
      suggested_decision?: components["schemas"]["stripe.Stripe.Issuing.Token.NetworkData.WalletProvider.SuggestedDecision"];
      /** @description The version of the standard for mapping reason codes followed by the wallet provider. */
      suggested_decision_version?: string;
    };
    "stripe.Stripe.Issuing.Token.NetworkData": {
      device?: components["schemas"]["stripe.Stripe.Issuing.Token.NetworkData.Device"];
      mastercard?: components["schemas"]["stripe.Stripe.Issuing.Token.NetworkData.Mastercard"];
      /** @description The network that the token is associated with. An additional hash is included with a name matching this value, containing tokenization data specific to the card network. */
      type: components["schemas"]["stripe.Stripe.Issuing.Token.NetworkData.Type"];
      visa?: components["schemas"]["stripe.Stripe.Issuing.Token.NetworkData.Visa"];
      wallet_provider?: components["schemas"]["stripe.Stripe.Issuing.Token.NetworkData.WalletProvider"];
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Token.Status": "active" | "deleted" | "requested" | "suspended";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Token.WalletProvider": "apple_pay" | "google_pay" | "samsung_pay";
    /** @description An issuing token object is created when an issued card is added to a digital wallet. As a [card issuer](https://stripe.com/docs/issuing), you can [view and manage these tokens](https://stripe.com/docs/issuing/controls/token-management) through Stripe. */
    "stripe.Stripe.Issuing.Token": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "issuing.token";
      /** @description Card associated with this token. */
      card: string | components["schemas"]["stripe.Stripe.Issuing.Card"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description The hashed ID derived from the device ID from the card network associated with the token. */
      device_fingerprint: string | null;
      /** @description The last four digits of the token. */
      last4?: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description The token service provider / card network associated with the token. */
      network: components["schemas"]["stripe.Stripe.Issuing.Token.Network"];
      network_data?: components["schemas"]["stripe.Stripe.Issuing.Token.NetworkData"];
      /**
       * Format: double
       * @description Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch.
       */
      network_updated_at: number;
      /** @description The usage state of the token. */
      status: components["schemas"]["stripe.Stripe.Issuing.Token.Status"];
      /** @description The digital wallet for this token, if one was used. */
      wallet_provider?: components["schemas"]["stripe.Stripe.Issuing.Token.WalletProvider"];
    };
    "stripe.Stripe.Issuing.Transaction.AmountDetails": {
      /**
       * Format: double
       * @description The fee charged by the ATM for the cash withdrawal.
       */
      atm_fee: number | null;
      /**
       * Format: double
       * @description The amount of cash requested by the cardholder.
       */
      cashback_amount: number | null;
    };
    /**
     * @description When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
     * object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
     * purchase to be completed successfully.
     *
     * Related guide: [Issued card authorizations](https://stripe.com/docs/issuing/purchases/authorizations)
     */
    "stripe.Stripe.Issuing.Authorization": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "issuing.authorization";
      /**
       * Format: double
       * @description The total amount that was authorized or rejected. This amount is in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `amount` should be the same as `merchant_amount`, unless `currency` and `merchant_currency` are different.
       */
      amount: number;
      /** @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      amount_details: components["schemas"]["stripe.Stripe.Issuing.Authorization.AmountDetails"] | null;
      /** @description Whether the authorization has been approved. */
      approved: boolean;
      /** @description How the card details were provided. */
      authorization_method: components["schemas"]["stripe.Stripe.Issuing.Authorization.AuthorizationMethod"];
      /** @description List of balance transactions associated with this authorization. */
      balance_transactions: components["schemas"]["stripe.Stripe.BalanceTransaction"][];
      /** @description You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders. */
      card: components["schemas"]["stripe.Stripe.Issuing.Card"];
      /** @description The cardholder to whom this authorization belongs. */
      cardholder: (string | components["schemas"]["stripe.Stripe.Issuing.Cardholder"]) | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description The currency of the cardholder. This currency can be different from the currency presented at authorization and the `merchant_currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description Fleet-specific information for authorizations using Fleet cards. */
      fleet: components["schemas"]["stripe.Stripe.Issuing.Authorization.Fleet"] | null;
      /** @description Information about fuel that was purchased with this transaction. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed. */
      fuel: components["schemas"]["stripe.Stripe.Issuing.Authorization.Fuel"] | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /**
       * Format: double
       * @description The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `merchant_amount` should be the same as `amount`, unless `merchant_currency` and `currency` are different.
       */
      merchant_amount: number;
      /** @description The local currency that was presented to the cardholder for the authorization. This currency can be different from the cardholder currency and the `currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      merchant_currency: string;
      merchant_data: components["schemas"]["stripe.Stripe.Issuing.Authorization.MerchantData"];
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description Details about the authorization, such as identifiers, set by the card network. */
      network_data: components["schemas"]["stripe.Stripe.Issuing.Authorization.NetworkData"] | null;
      /** @description The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook. */
      pending_request: components["schemas"]["stripe.Stripe.Issuing.Authorization.PendingRequest"] | null;
      /** @description History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined. */
      request_history: components["schemas"]["stripe.Stripe.Issuing.Authorization.RequestHistory"][];
      /** @description The current status of the authorization in its lifecycle. */
      status: components["schemas"]["stripe.Stripe.Issuing.Authorization.Status"];
      /** @description [Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this authorization. If a network token was not used for this authorization, this field will be null. */
      token?: (string | components["schemas"]["stripe.Stripe.Issuing.Token"]) | null;
      /** @description List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization. */
      transactions: components["schemas"]["stripe.Stripe.Issuing.Transaction"][];
      /** @description [Treasury](https://stripe.com/docs/api/treasury) details related to this authorization if it was created on a [FinancialAccount](https://stripe.com/docs/api/treasury/financial_accounts). */
      treasury?: components["schemas"]["stripe.Stripe.Issuing.Authorization.Treasury"] | null;
      verification_data: components["schemas"]["stripe.Stripe.Issuing.Authorization.VerificationData"];
      /** @description The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized. */
      wallet: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Dispute.Evidence.Canceled.ProductType": "merchandise" | "service";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Dispute.Evidence.Canceled.ReturnStatus": "merchant_rejected" | "successful";
    "stripe.Stripe.Issuing.Dispute.Evidence.Canceled": {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      additional_documentation: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /**
       * Format: double
       * @description Date when order was canceled.
       */
      canceled_at: number | null;
      /** @description Whether the cardholder was provided with a cancellation policy. */
      cancellation_policy_provided: boolean | null;
      /** @description Reason for canceling the order. */
      cancellation_reason: string | null;
      /**
       * Format: double
       * @description Date when the cardholder expected to receive the product.
       */
      expected_at: number | null;
      /** @description Explanation of why the cardholder is disputing this transaction. */
      explanation: string | null;
      /** @description Description of the merchandise or service that was purchased. */
      product_description: string | null;
      /** @description Whether the product was a merchandise or service. */
      product_type: components["schemas"]["stripe.Stripe.Issuing.Dispute.Evidence.Canceled.ProductType"] | null;
      /** @description Result of cardholder's attempt to return the product. */
      return_status: components["schemas"]["stripe.Stripe.Issuing.Dispute.Evidence.Canceled.ReturnStatus"] | null;
      /**
       * Format: double
       * @description Date when the product was returned or attempted to be returned.
       */
      returned_at: number | null;
    };
    "stripe.Stripe.Issuing.Dispute.Evidence.Duplicate": {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      additional_documentation: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for. */
      card_statement: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash. */
      cash_receipt: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product. */
      check_image: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description Explanation of why the cardholder is disputing this transaction. */
      explanation: string | null;
      /** @description Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one. */
      original_transaction: string | null;
    };
    "stripe.Stripe.Issuing.Dispute.Evidence.Fraudulent": {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      additional_documentation: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description Explanation of why the cardholder is disputing this transaction. */
      explanation: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Dispute.Evidence.MerchandiseNotAsDescribed.ReturnStatus": "merchant_rejected" | "successful";
    "stripe.Stripe.Issuing.Dispute.Evidence.MerchandiseNotAsDescribed": {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      additional_documentation: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description Explanation of why the cardholder is disputing this transaction. */
      explanation: string | null;
      /**
       * Format: double
       * @description Date when the product was received.
       */
      received_at: number | null;
      /** @description Description of the cardholder's attempt to return the product. */
      return_description: string | null;
      /** @description Result of cardholder's attempt to return the product. */
      return_status: components["schemas"]["stripe.Stripe.Issuing.Dispute.Evidence.MerchandiseNotAsDescribed.ReturnStatus"] | null;
      /**
       * Format: double
       * @description Date when the product was returned or attempted to be returned.
       */
      returned_at: number | null;
    };
    "stripe.Stripe.Issuing.Dispute.Evidence.NoValidAuthorization": {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      additional_documentation: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description Explanation of why the cardholder is disputing this transaction. */
      explanation: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Dispute.Evidence.NotReceived.ProductType": "merchandise" | "service";
    "stripe.Stripe.Issuing.Dispute.Evidence.NotReceived": {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      additional_documentation: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /**
       * Format: double
       * @description Date when the cardholder expected to receive the product.
       */
      expected_at: number | null;
      /** @description Explanation of why the cardholder is disputing this transaction. */
      explanation: string | null;
      /** @description Description of the merchandise or service that was purchased. */
      product_description: string | null;
      /** @description Whether the product was a merchandise or service. */
      product_type: components["schemas"]["stripe.Stripe.Issuing.Dispute.Evidence.NotReceived.ProductType"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Dispute.Evidence.Other.ProductType": "merchandise" | "service";
    "stripe.Stripe.Issuing.Dispute.Evidence.Other": {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      additional_documentation: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description Explanation of why the cardholder is disputing this transaction. */
      explanation: string | null;
      /** @description Description of the merchandise or service that was purchased. */
      product_description: string | null;
      /** @description Whether the product was a merchandise or service. */
      product_type: components["schemas"]["stripe.Stripe.Issuing.Dispute.Evidence.Other.ProductType"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Dispute.Evidence.Reason": "canceled" | "duplicate" | "fraudulent" | "merchandise_not_as_described" | "no_valid_authorization" | "not_received" | "other" | "service_not_as_described";
    "stripe.Stripe.Issuing.Dispute.Evidence.ServiceNotAsDescribed": {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      additional_documentation: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /**
       * Format: double
       * @description Date when order was canceled.
       */
      canceled_at: number | null;
      /** @description Reason for canceling the order. */
      cancellation_reason: string | null;
      /** @description Explanation of why the cardholder is disputing this transaction. */
      explanation: string | null;
      /**
       * Format: double
       * @description Date when the product was received.
       */
      received_at: number | null;
    };
    "stripe.Stripe.Issuing.Dispute.Evidence": {
      canceled?: components["schemas"]["stripe.Stripe.Issuing.Dispute.Evidence.Canceled"];
      duplicate?: components["schemas"]["stripe.Stripe.Issuing.Dispute.Evidence.Duplicate"];
      fraudulent?: components["schemas"]["stripe.Stripe.Issuing.Dispute.Evidence.Fraudulent"];
      merchandise_not_as_described?: components["schemas"]["stripe.Stripe.Issuing.Dispute.Evidence.MerchandiseNotAsDescribed"];
      no_valid_authorization?: components["schemas"]["stripe.Stripe.Issuing.Dispute.Evidence.NoValidAuthorization"];
      not_received?: components["schemas"]["stripe.Stripe.Issuing.Dispute.Evidence.NotReceived"];
      other?: components["schemas"]["stripe.Stripe.Issuing.Dispute.Evidence.Other"];
      /** @description The reason for filing the dispute. Its value will match the field containing the evidence. */
      reason: components["schemas"]["stripe.Stripe.Issuing.Dispute.Evidence.Reason"];
      service_not_as_described?: components["schemas"]["stripe.Stripe.Issuing.Dispute.Evidence.ServiceNotAsDescribed"];
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Dispute.LossReason": "cardholder_authentication_issuer_liability" | "eci5_token_transaction_with_tavv" | "excess_disputes_in_timeframe" | "has_not_met_the_minimum_dispute_amount_requirements" | "invalid_duplicate_dispute" | "invalid_incorrect_amount_dispute" | "invalid_no_authorization" | "invalid_use_of_disputes" | "merchandise_delivered_or_shipped" | "merchandise_or_service_as_described" | "not_cancelled" | "other" | "refund_issued" | "submitted_beyond_allowable_time_limit" | "transaction_3ds_required" | "transaction_approved_after_prior_fraud_dispute" | "transaction_authorized" | "transaction_electronically_read" | "transaction_qualifies_for_visa_easy_payment_service" | "transaction_unattended";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Dispute.Status": "expired" | "lost" | "submitted" | "unsubmitted" | "won";
    /**
     * @description Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
     * your Stripe account, such as a completed purchase or refund, is represented by an Issuing
     * `Transaction` object.
     *
     * Related guide: [Issued card transactions](https://stripe.com/docs/issuing/purchases/transactions)
     */
    "stripe.Stripe.Issuing.Transaction": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "issuing.transaction";
      /**
       * Format: double
       * @description The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
       */
      amount: number;
      /** @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      amount_details: components["schemas"]["stripe.Stripe.Issuing.Transaction.AmountDetails"] | null;
      /** @description The `Authorization` object that led to this transaction. */
      authorization: (string | components["schemas"]["stripe.Stripe.Issuing.Authorization"]) | null;
      /** @description ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction. */
      balance_transaction: (string | components["schemas"]["stripe.Stripe.BalanceTransaction"]) | null;
      /** @description The card used to make this transaction. */
      card: string | components["schemas"]["stripe.Stripe.Issuing.Card"];
      /** @description The cardholder to whom this transaction belongs. */
      cardholder: (string | components["schemas"]["stripe.Stripe.Issuing.Cardholder"]) | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description If you've disputed the transaction, the ID of the dispute. */
      dispute: (string | components["schemas"]["stripe.Stripe.Issuing.Dispute"]) | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /**
       * Format: double
       * @description The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.
       */
      merchant_amount: number;
      /** @description The currency with which the merchant is taking payment. */
      merchant_currency: string;
      merchant_data: components["schemas"]["stripe.Stripe.Issuing.Transaction.MerchantData"];
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description Details about the transaction, such as processing dates, set by the card network. */
      network_data: components["schemas"]["stripe.Stripe.Issuing.Transaction.NetworkData"] | null;
      /** @description Additional purchase information that is optionally provided by the merchant. */
      purchase_details?: components["schemas"]["stripe.Stripe.Issuing.Transaction.PurchaseDetails"] | null;
      /** @description [Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this transaction. If a network token was not used for this transaction, this field will be null. */
      token?: (string | components["schemas"]["stripe.Stripe.Issuing.Token"]) | null;
      /** @description [Treasury](https://stripe.com/docs/api/treasury) details related to this transaction if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts */
      treasury?: components["schemas"]["stripe.Stripe.Issuing.Transaction.Treasury"] | null;
      /** @description The nature of the transaction. */
      type: components["schemas"]["stripe.Stripe.Issuing.Transaction.Type"];
      /** @description The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. */
      wallet: components["schemas"]["stripe.Stripe.Issuing.Transaction.Wallet"] | null;
    };
    "stripe.Stripe.Issuing.Dispute.Treasury": {
      /** @description The Treasury [DebitReversal](https://stripe.com/docs/api/treasury/debit_reversals) representing this Issuing dispute */
      debit_reversal: string | null;
      /** @description The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) that is being disputed. */
      received_debit: string;
    };
    /**
     * @description As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.
     *
     * Related guide: [Issuing disputes](https://stripe.com/docs/issuing/purchases/disputes)
     */
    "stripe.Stripe.Issuing.Dispute": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "issuing.dispute";
      /**
       * Format: double
       * @description Disputed amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation).
       */
      amount: number;
      /** @description List of balance transactions associated with the dispute. */
      balance_transactions?: components["schemas"]["stripe.Stripe.BalanceTransaction"][] | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description The currency the `transaction` was made in. */
      currency: string;
      evidence: components["schemas"]["stripe.Stripe.Issuing.Dispute.Evidence"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description The enum that describes the dispute loss outcome. If the dispute is not lost, this field will be absent. New enum values may be added in the future, so be sure to handle unknown values. */
      loss_reason?: components["schemas"]["stripe.Stripe.Issuing.Dispute.LossReason"];
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description Current status of the dispute. */
      status: components["schemas"]["stripe.Stripe.Issuing.Dispute.Status"];
      /** @description The transaction being disputed. */
      transaction: string | components["schemas"]["stripe.Stripe.Issuing.Transaction"];
      /** @description [Treasury](https://stripe.com/docs/api/treasury) details related to this dispute if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts */
      treasury?: components["schemas"]["stripe.Stripe.Issuing.Dispute.Treasury"] | null;
    };
    "stripe.Stripe.Issuing.Transaction.MerchantData": {
      /** @description A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values. */
      category: string;
      /** @description The merchant category code for the seller's business */
      category_code: string;
      /** @description City where the seller is located */
      city: string | null;
      /** @description Country where the seller is located */
      country: string | null;
      /** @description Name of the seller */
      name: string | null;
      /** @description Identifier assigned to the seller by the card network. Different card networks may assign different network_id fields to the same merchant. */
      network_id: string;
      /** @description Postal code where the seller is located */
      postal_code: string | null;
      /** @description State where the seller is located */
      state: string | null;
      /** @description An ID assigned by the seller to the location of the sale. */
      terminal_id: string | null;
      /** @description URL provided by the merchant on a 3DS request */
      url: string | null;
    };
    "stripe.Stripe.Issuing.Transaction.NetworkData": {
      /** @description A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter "S", followed by a six-digit number. For example, "S498162". Please note that the code is not guaranteed to be unique across authorizations. */
      authorization_code: string | null;
      /** @description The date the transaction was processed by the card network. This can be different from the date the seller recorded the transaction depending on when the acquirer submits the transaction to the network. */
      processing_date: string | null;
      /** @description Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions. */
      transaction_id: string | null;
    };
    "stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.CardholderPromptData": {
      /** @description Driver ID. */
      driver_id: string | null;
      /**
       * Format: double
       * @description Odometer reading.
       */
      odometer: number | null;
      /** @description An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type. */
      unspecified_id: string | null;
      /** @description User ID. */
      user_id: string | null;
      /** @description Vehicle number. */
      vehicle_number: string | null;
    };
    "stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown.Fuel": {
      /** @description Gross fuel amount that should equal Fuel Volume multipled by Fuel Unit Cost, inclusive of taxes. */
      gross_amount_decimal: string | null;
    };
    "stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown.NonFuel": {
      /** @description Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes. */
      gross_amount_decimal: string | null;
    };
    "stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown.Tax": {
      /** @description Amount of state or provincial Sales Tax included in the transaction amount. Null if not reported by merchant or not subject to tax. */
      local_amount_decimal: string | null;
      /** @description Amount of national Sales Tax or VAT included in the transaction amount. Null if not reported by merchant or not subject to tax. */
      national_amount_decimal: string | null;
    };
    "stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown": {
      /** @description Breakdown of fuel portion of the purchase. */
      fuel: components["schemas"]["stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown.Fuel"] | null;
      /** @description Breakdown of non-fuel portion of the purchase. */
      non_fuel: components["schemas"]["stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown.NonFuel"] | null;
      /** @description Information about tax included in this transaction. */
      tax: components["schemas"]["stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown.Tax"] | null;
    };
    "stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet": {
      /** @description Answers to prompts presented to cardholder at point of sale. */
      cardholder_prompt_data: components["schemas"]["stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.CardholderPromptData"] | null;
      /** @description The type of purchase. One of `fuel_purchase`, `non_fuel_purchase`, or `fuel_and_non_fuel_purchase`. */
      purchase_type: string | null;
      /** @description More information about the total amount. This information is not guaranteed to be accurate as some merchants may provide unreliable data. */
      reported_breakdown: components["schemas"]["stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet.ReportedBreakdown"] | null;
      /** @description The type of fuel service. One of `non_fuel_transaction`, `full_service`, or `self_service`. */
      service_type: string | null;
    };
    "stripe.Stripe.Issuing.Transaction.PurchaseDetails.Flight.Segment": {
      /** @description The three-letter IATA airport code of the flight's destination. */
      arrival_airport_code: string | null;
      /** @description The airline carrier code. */
      carrier: string | null;
      /** @description The three-letter IATA airport code that the flight departed from. */
      departure_airport_code: string | null;
      /** @description The flight number. */
      flight_number: string | null;
      /** @description The flight's service class. */
      service_class: string | null;
      /** @description Whether a stopover is allowed on this flight. */
      stopover_allowed: boolean | null;
    };
    "stripe.Stripe.Issuing.Transaction.PurchaseDetails.Flight": {
      /**
       * Format: double
       * @description The time that the flight departed.
       */
      departure_at: number | null;
      /** @description The name of the passenger. */
      passenger_name: string | null;
      /** @description Whether the ticket is refundable. */
      refundable: boolean | null;
      /** @description The legs of the trip. */
      segments: components["schemas"]["stripe.Stripe.Issuing.Transaction.PurchaseDetails.Flight.Segment"][] | null;
      /** @description The travel agency that issued the ticket. */
      travel_agency: string | null;
    };
    "stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fuel": {
      /** @description [Conexxus Payment System Product Code](https://www.conexxus.org/conexxus-payment-system-product-codes) identifying the primary fuel product purchased. */
      industry_product_code: string | null;
      /** @description The quantity of `unit`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places. */
      quantity_decimal: string | null;
      /** @description The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`. */
      type: string;
      /** @description The units for `quantity_decimal`. One of `charging_minute`, `imperial_gallon`, `kilogram`, `kilowatt_hour`, `liter`, `pound`, `us_gallon`, or `other`. */
      unit: string;
      /** @description The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places. */
      unit_cost_decimal: string;
    };
    "stripe.Stripe.Issuing.Transaction.PurchaseDetails.Lodging": {
      /**
       * Format: double
       * @description The time of checking into the lodging.
       */
      check_in_at: number | null;
      /**
       * Format: double
       * @description The number of nights stayed at the lodging.
       */
      nights: number | null;
    };
    "stripe.Stripe.Issuing.Transaction.PurchaseDetails.Receipt": {
      /** @description The description of the item. The maximum length of this field is 26 characters. */
      description: string | null;
      /**
       * Format: double
       * @description The quantity of the item.
       */
      quantity: number | null;
      /**
       * Format: double
       * @description The total for this line item in cents.
       */
      total: number | null;
      /**
       * Format: double
       * @description The unit cost of the item in cents.
       */
      unit_cost: number | null;
    };
    "stripe.Stripe.Issuing.Transaction.PurchaseDetails": {
      /** @description Fleet-specific information for transactions using Fleet cards. */
      fleet: components["schemas"]["stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fleet"] | null;
      /** @description Information about the flight that was purchased with this transaction. */
      flight: components["schemas"]["stripe.Stripe.Issuing.Transaction.PurchaseDetails.Flight"] | null;
      /** @description Information about fuel that was purchased with this transaction. */
      fuel: components["schemas"]["stripe.Stripe.Issuing.Transaction.PurchaseDetails.Fuel"] | null;
      /** @description Information about lodging that was purchased with this transaction. */
      lodging: components["schemas"]["stripe.Stripe.Issuing.Transaction.PurchaseDetails.Lodging"] | null;
      /** @description The line items in the purchase. */
      receipt: components["schemas"]["stripe.Stripe.Issuing.Transaction.PurchaseDetails.Receipt"][] | null;
      /** @description A merchant-specific order number. */
      reference: string | null;
    };
    "stripe.Stripe.Issuing.Transaction.Treasury": {
      /** @description The Treasury [ReceivedCredit](https://stripe.com/docs/api/treasury/received_credits) representing this Issuing transaction if it is a refund */
      received_credit: string | null;
      /** @description The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) representing this Issuing transaction if it is a capture */
      received_debit: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Transaction.Type": "capture" | "refund";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Transaction.Wallet": "apple_pay" | "google_pay" | "samsung_pay";
    "stripe.Stripe.Issuing.Authorization.Treasury": {
      /** @description The array of [ReceivedCredits](https://stripe.com/docs/api/treasury/received_credits) associated with this authorization */
      received_credits: string[];
      /** @description The array of [ReceivedDebits](https://stripe.com/docs/api/treasury/received_debits) associated with this authorization */
      received_debits: string[];
      /** @description The Treasury [Transaction](https://stripe.com/docs/api/treasury/transactions) associated with this authorization */
      transaction: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Authorization.VerificationData.AddressLine1Check": "match" | "mismatch" | "not_provided";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Authorization.VerificationData.AddressPostalCodeCheck": "match" | "mismatch" | "not_provided";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Authorization.VerificationData.AuthenticationExemption.ClaimedBy": "acquirer" | "issuer";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Authorization.VerificationData.AuthenticationExemption.Type": "low_value_transaction" | "transaction_risk_analysis" | "unknown";
    "stripe.Stripe.Issuing.Authorization.VerificationData.AuthenticationExemption": {
      /** @description The entity that requested the exemption, either the acquiring merchant or the Issuing user. */
      claimed_by: components["schemas"]["stripe.Stripe.Issuing.Authorization.VerificationData.AuthenticationExemption.ClaimedBy"];
      /** @description The specific exemption claimed for this authorization. */
      type: components["schemas"]["stripe.Stripe.Issuing.Authorization.VerificationData.AuthenticationExemption.Type"];
    };
    /** @enum {string} */
    "stripe.Stripe.Issuing.Authorization.VerificationData.CvcCheck": "match" | "mismatch" | "not_provided";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Authorization.VerificationData.ExpiryCheck": "match" | "mismatch" | "not_provided";
    /** @enum {string} */
    "stripe.Stripe.Issuing.Authorization.VerificationData.ThreeDSecure.Result": "attempt_acknowledged" | "authenticated" | "failed" | "required";
    "stripe.Stripe.Issuing.Authorization.VerificationData.ThreeDSecure": {
      /** @description The outcome of the 3D Secure authentication request. */
      result: components["schemas"]["stripe.Stripe.Issuing.Authorization.VerificationData.ThreeDSecure.Result"];
    };
    "stripe.Stripe.Issuing.Authorization.VerificationData": {
      /** @description Whether the cardholder provided an address first line and if it matched the cardholder's `billing.address.line1`. */
      address_line1_check: components["schemas"]["stripe.Stripe.Issuing.Authorization.VerificationData.AddressLine1Check"];
      /** @description Whether the cardholder provided a postal code and if it matched the cardholder's `billing.address.postal_code`. */
      address_postal_code_check: components["schemas"]["stripe.Stripe.Issuing.Authorization.VerificationData.AddressPostalCodeCheck"];
      /** @description The exemption applied to this authorization. */
      authentication_exemption: components["schemas"]["stripe.Stripe.Issuing.Authorization.VerificationData.AuthenticationExemption"] | null;
      /** @description Whether the cardholder provided a CVC and if it matched Stripe's record. */
      cvc_check: components["schemas"]["stripe.Stripe.Issuing.Authorization.VerificationData.CvcCheck"];
      /** @description Whether the cardholder provided an expiry date and if it matched Stripe's record. */
      expiry_check: components["schemas"]["stripe.Stripe.Issuing.Authorization.VerificationData.ExpiryCheck"];
      /** @description The postal code submitted as part of the authorization used for postal code verification. */
      postal_code: string | null;
      /** @description 3D Secure details. */
      three_d_secure: components["schemas"]["stripe.Stripe.Issuing.Authorization.VerificationData.ThreeDSecure"] | null;
    };
    "stripe.Stripe.ExternalAccount": components["schemas"]["stripe.Stripe.BankAccount"] | components["schemas"]["stripe.Stripe.Card"];
    /** @description The DeletedBankAccount object. */
    "stripe.Stripe.DeletedBankAccount": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "bank_account";
      /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
      currency?: string | null;
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      deleted: true;
    };
    /** @description The DeletedCard object. */
    "stripe.Stripe.DeletedCard": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "card";
      /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
      currency?: string | null;
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      deleted: true;
    };
    "stripe.Stripe.DeletedExternalAccount": components["schemas"]["stripe.Stripe.DeletedBankAccount"] | components["schemas"]["stripe.Stripe.DeletedCard"];
    /**
     * @description A `Payout` object is created when you receive funds from Stripe, or when you
     * initiate a payout to either a bank account or debit card of a [connected
     * Stripe account](https://stripe.com/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
     * and list all payouts. Payouts are made on [varying
     * schedules](https://stripe.com/docs/connect/manage-payout-schedule), depending on your country and
     * industry.
     *
     * Related guide: [Receiving payouts](https://stripe.com/docs/payouts)
     */
    "stripe.Stripe.Payout": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "payout";
      /**
       * Format: double
       * @description The amount (in cents (or local equivalent)) that transfers to your bank account or debit card.
       */
      amount: number;
      /** @description The application fee (if any) for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details. */
      application_fee: (string | components["schemas"]["stripe.Stripe.ApplicationFee"]) | null;
      /**
       * Format: double
       * @description The amount of the application fee (if any) requested for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details.
       */
      application_fee_amount: number | null;
      /**
       * Format: double
       * @description Date that you can expect the payout to arrive in the bank. This factors in delays to account for weekends or bank holidays.
       */
      arrival_date: number;
      /** @description Returns `true` if the payout is created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule) and `false` if it's [requested manually](https://stripe.com/docs/payouts#manual-payouts). */
      automatic: boolean;
      /** @description ID of the balance transaction that describes the impact of this payout on your account balance. */
      balance_transaction: (string | components["schemas"]["stripe.Stripe.BalanceTransaction"]) | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      description: string | null;
      /** @description ID of the bank account or card the payout is sent to. */
      destination: (string | components["schemas"]["stripe.Stripe.ExternalAccount"] | components["schemas"]["stripe.Stripe.DeletedExternalAccount"]) | null;
      /** @description If the payout fails or cancels, this is the ID of the balance transaction that reverses the initial balance transaction and returns the funds from the failed payout back in your balance. */
      failure_balance_transaction: (string | components["schemas"]["stripe.Stripe.BalanceTransaction"]) | null;
      /** @description Error code that provides a reason for a payout failure, if available. View our [list of failure codes](https://stripe.com/docs/api#payout_failures). */
      failure_code: string | null;
      /** @description Message that provides the reason for a payout failure, if available. */
      failure_message: string | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      /** @description The method used to send this payout, which can be `standard` or `instant`. `instant` is supported for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks). */
      method: string;
      /** @description If the payout reverses another, this is the ID of the original payout. */
      original_payout: (string | components["schemas"]["stripe.Stripe.Payout"]) | null;
      /** @description If `completed`, you can use the [Balance Transactions API](https://stripe.com/docs/api/balance_transactions/list#balance_transaction_list-payout) to list all balance transactions that are paid out in this payout. */
      reconciliation_status: components["schemas"]["stripe.Stripe.Payout.ReconciliationStatus"];
      /** @description If the payout reverses, this is the ID of the payout that reverses this payout. */
      reversed_by: (string | components["schemas"]["stripe.Stripe.Payout"]) | null;
      /** @description The source balance this payout came from, which can be one of the following: `card`, `fpx`, or `bank_account`. */
      source_type: string;
      /** @description Extra information about a payout that displays on the user's bank statement. */
      statement_descriptor: string | null;
      /** @description Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it's submitted to the bank, when it becomes `in_transit`. The status changes to `paid` if the transaction succeeds, or to `failed` or `canceled` (within 5 business days). Some payouts that fail might initially show as `paid`, then change to `failed`. */
      status: string;
      /** @description Can be `bank_account` or `card`. */
      type: components["schemas"]["stripe.Stripe.Payout.Type"];
    };
    /** @enum {string} */
    "stripe.Stripe.Payout.ReconciliationStatus": "completed" | "in_progress" | "not_applicable";
    /** @enum {string} */
    "stripe.Stripe.Payout.Type": "bank_account" | "card";
    /** @description The ReserveTransaction object. */
    "stripe.Stripe.ReserveTransaction": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "reserve_transaction";
      /** Format: double */
      amount: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      description: string | null;
    };
    /** @description The TaxDeductedAtSource object. */
    "stripe.Stripe.TaxDeductedAtSource": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "tax_deducted_at_source";
      /**
       * Format: double
       * @description The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
       */
      period_end: number;
      /**
       * Format: double
       * @description The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
       */
      period_start: number;
      /** @description The TAN that was supplied to Stripe when TDS was assessed */
      tax_deduction_account_number: string;
    };
    /** @enum {string} */
    "stripe.Stripe.Topup.Status": "canceled" | "failed" | "pending" | "reversed" | "succeeded";
    /**
     * @description To top up your Stripe balance, you create a top-up object. You can retrieve
     * individual top-ups, as well as list all top-ups. Top-ups are identified by a
     * unique, random ID.
     *
     * Related guide: [Topping up your platform account](https://stripe.com/docs/connect/top-ups)
     */
    "stripe.Stripe.Topup": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "topup";
      /**
       * Format: double
       * @description Amount transferred.
       */
      amount: number;
      /** @description ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up. */
      balance_transaction: (string | components["schemas"]["stripe.Stripe.BalanceTransaction"]) | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      description: string | null;
      /**
       * Format: double
       * @description Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.
       */
      expected_availability_date: number | null;
      /** @description Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
      failure_code: string | null;
      /** @description Message to user further explaining reason for top-up failure if available. */
      failure_message: string | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description The source field is deprecated. It might not always be present in the API response. */
      source: components["schemas"]["stripe.Stripe.Source"] | null;
      /** @description Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter. */
      statement_descriptor: string | null;
      /** @description The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`. */
      status: components["schemas"]["stripe.Stripe.Topup.Status"];
      /** @description A string that identifies this top-up as part of a group. */
      transfer_group: string | null;
    };
    "stripe.Stripe.BalanceTransactionSource": components["schemas"]["stripe.Stripe.ApplicationFee"] | components["schemas"]["stripe.Stripe.Charge"] | components["schemas"]["stripe.Stripe.ConnectCollectionTransfer"] | components["schemas"]["stripe.Stripe.CustomerCashBalanceTransaction"] | components["schemas"]["stripe.Stripe.Dispute"] | components["schemas"]["stripe.Stripe.FeeRefund"] | components["schemas"]["stripe.Stripe.Issuing.Authorization"] | components["schemas"]["stripe.Stripe.Issuing.Dispute"] | components["schemas"]["stripe.Stripe.Issuing.Transaction"] | components["schemas"]["stripe.Stripe.Payout"] | components["schemas"]["stripe.Stripe.Refund"] | components["schemas"]["stripe.Stripe.ReserveTransaction"] | components["schemas"]["stripe.Stripe.TaxDeductedAtSource"] | components["schemas"]["stripe.Stripe.Topup"] | components["schemas"]["stripe.Stripe.Transfer"] | components["schemas"]["stripe.Stripe.TransferReversal"];
    /** @enum {string} */
    "stripe.Stripe.BalanceTransaction.Type": "adjustment" | "advance" | "advance_funding" | "anticipation_repayment" | "application_fee" | "application_fee_refund" | "charge" | "climate_order_purchase" | "climate_order_refund" | "connect_collection_transfer" | "contribution" | "issuing_authorization_hold" | "issuing_authorization_release" | "issuing_dispute" | "issuing_transaction" | "obligation_outbound" | "obligation_reversal_inbound" | "payment" | "payment_failure_refund" | "payment_network_reserve_hold" | "payment_network_reserve_release" | "payment_refund" | "payment_reversal" | "payment_unreconciled" | "payout" | "payout_cancel" | "payout_failure" | "refund" | "refund_failure" | "reserve_transaction" | "reserved_funds" | "stripe_fee" | "stripe_fx_fee" | "tax_fee" | "topup" | "topup_reversal" | "transfer" | "transfer_cancel" | "transfer_failure" | "transfer_refund";
    /** @enum {string} */
    "stripe.Stripe.ApplicationFee.FeeSource.Type": "charge" | "payout";
    "stripe.Stripe.ApplicationFee.FeeSource": {
      /** @description Charge ID that created this application fee. */
      charge?: string;
      /** @description Payout ID that created this application fee. */
      payout?: string;
      /** @description Type of object that created the application fee, either `charge` or `payout`. */
      type: components["schemas"]["stripe.Stripe.ApplicationFee.FeeSource.Type"];
    };
    /**
     * @description A container for paginated lists of objects.
     * The array of objects is on the `.data` property,
     * and `.has_more` indicates whether there are additional objects beyond the end of this list.
     *
     * Learn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)
     * or, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.
     */
    "stripe.Stripe.ApiList_stripe.Stripe.FeeRefund_": {
      /** @enum {string} */
      object: "list";
      data: components["schemas"]["stripe.Stripe.FeeRefund"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      has_more: boolean;
      /** @description The URL where this list can be accessed. */
      url: string;
    };
    "stripe.Stripe.Charge.BillingDetails": {
      /** @description Billing address. */
      address: components["schemas"]["stripe.Stripe.Address"] | null;
      /** @description Email address. */
      email: string | null;
      /** @description Full name. */
      name: string | null;
      /** @description Billing phone number (including extension). */
      phone: string | null;
    };
    "stripe.Stripe.Charge.FraudDetails": {
      /** @description Assessments from Stripe. If set, the value is `fraudulent`. */
      stripe_report?: string;
      /** @description Assessments reported by you. If set, possible values of are `safe` and `fraudulent`. */
      user_report?: string;
    };
    /**
     * @description Invoices are statements of amounts owed by a customer, and are either
     * generated one-off, or generated periodically from a subscription.
     *
     * They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
     * that may be caused by subscription upgrades/downgrades (if necessary).
     *
     * If your invoice is configured to be billed through automatic charges,
     * Stripe automatically finalizes your invoice and attempts payment. Note
     * that finalizing the invoice,
     * [when automatic](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection), does
     * not happen immediately as the invoice is created. Stripe waits
     * until one hour after the last webhook was successfully sent (or the last
     * webhook timed out after failing). If you (and the platforms you may have
     * connected to) have no webhooks configured, Stripe waits one hour after
     * creation to finalize the invoice.
     *
     * If your invoice is configured to be billed by sending an email, then based on your
     * [email settings](https://dashboard.stripe.com/account/billing/automatic),
     * Stripe will email the invoice to your customer and await payment. These
     * emails can contain a link to a hosted page to pay the invoice.
     *
     * Stripe applies any customer credit on the account before determining the
     * amount due for the invoice (i.e., the amount that will be actually
     * charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
     * per currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts), the
     * invoice is automatically marked paid, and we add the amount due to the
     * customer's credit balance which is applied to the next invoice.
     *
     * More details on the customer's credit balance are
     * [here](https://stripe.com/docs/billing/customer/balance).
     *
     * Related guide: [Send invoices to customers](https://stripe.com/docs/billing/invoices/sending)
     */
    "stripe.Stripe.Invoice": {
      /** @description Unique identifier for the object. This property is always present unless the invoice is an upcoming invoice. See [Retrieve an upcoming invoice](https://stripe.com/docs/api/invoices/upcoming) for more details. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "invoice";
      /** @description The country of the business associated with this invoice, most often the business creating the invoice. */
      account_country: string | null;
      /** @description The public name of the business associated with this invoice, most often the business creating the invoice. */
      account_name: string | null;
      /** @description The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
      account_tax_ids: ((string | components["schemas"]["stripe.Stripe.TaxId"] | components["schemas"]["stripe.Stripe.DeletedTaxId"])[]) | null;
      /**
       * Format: double
       * @description Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
       */
      amount_due: number;
      /**
       * Format: double
       * @description The amount, in cents (or local equivalent), that was paid.
       */
      amount_paid: number;
      /**
       * Format: double
       * @description The difference between amount_due and amount_paid, in cents (or local equivalent).
       */
      amount_remaining: number;
      /**
       * Format: double
       * @description This is the sum of all the shipping amounts.
       */
      amount_shipping: number;
      /** @description ID of the Connect Application that created the invoice. */
      application: (string | components["schemas"]["stripe.Stripe.Application"] | components["schemas"]["stripe.Stripe.DeletedApplication"]) | null;
      /**
       * Format: double
       * @description The fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
       */
      application_fee_amount: number | null;
      /**
       * Format: double
       * @description Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. If a failure is returned with a non-retryable return code, the invoice can no longer be retried unless a new payment method is obtained. Retries will continue to be scheduled, and attempt_count will continue to increment, but retries will only be executed if a new payment method is obtained.
       */
      attempt_count: number;
      /** @description Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users. */
      attempted: boolean;
      /** @description Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action. */
      auto_advance?: boolean;
      automatic_tax: components["schemas"]["stripe.Stripe.Invoice.AutomaticTax"];
      /**
       * Format: double
       * @description The time when this invoice is currently scheduled to be automatically finalized. The field will be `null` if the invoice is not scheduled to finalize in the future. If the invoice is not in the draft state, this field will always be `null` - see `finalized_at` for the time when an already-finalized invoice was finalized.
       */
      automatically_finalizes_at: number | null;
      /**
       * @description Indicates the reason why the invoice was created.
       *
       * * `manual`: Unrelated to a subscription, for example, created via the invoice editor.
       * * `subscription`: No longer in use. Applies to subscriptions from before May 2018 where no distinction was made between updates, cycles, and thresholds.
       * * `subscription_create`: A new subscription was created.
       * * `subscription_cycle`: A subscription advanced into a new period.
       * * `subscription_threshold`: A subscription reached a billing threshold.
       * * `subscription_update`: A subscription was updated.
       * * `upcoming`: Reserved for simulated invoices, per the upcoming invoice endpoint.
       */
      billing_reason: components["schemas"]["stripe.Stripe.Invoice.BillingReason"] | null;
      /** @description ID of the latest charge generated for this invoice, if any. */
      charge: (string | components["schemas"]["stripe.Stripe.Charge"]) | null;
      /** @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. */
      collection_method: components["schemas"]["stripe.Stripe.Invoice.CollectionMethod"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description Custom fields displayed on the invoice. */
      custom_fields: components["schemas"]["stripe.Stripe.Invoice.CustomField"][] | null;
      /** @description The ID of the customer who will be billed. */
      customer: (string | components["schemas"]["stripe.Stripe.Customer"] | components["schemas"]["stripe.Stripe.DeletedCustomer"]) | null;
      /** @description The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated. */
      customer_address: components["schemas"]["stripe.Stripe.Address"] | null;
      /** @description The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated. */
      customer_email: string | null;
      /** @description The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated. */
      customer_name: string | null;
      /** @description The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated. */
      customer_phone: string | null;
      /** @description The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated. */
      customer_shipping: components["schemas"]["stripe.Stripe.Invoice.CustomerShipping"] | null;
      /** @description The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated. */
      customer_tax_exempt: components["schemas"]["stripe.Stripe.Invoice.CustomerTaxExempt"] | null;
      /** @description The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated. */
      customer_tax_ids?: components["schemas"]["stripe.Stripe.Invoice.CustomerTaxId"][] | null;
      /** @description ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
      default_payment_method: (string | components["schemas"]["stripe.Stripe.PaymentMethod"]) | null;
      /** @description ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
      default_source: (string | components["schemas"]["stripe.Stripe.CustomerSource"]) | null;
      /** @description The tax rates applied to this invoice, if any. */
      default_tax_rates: components["schemas"]["stripe.Stripe.TaxRate"][];
      /** @description Always true for a deleted object */
      deleted?: unknown;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
      description: string | null;
      /** @description Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts. */
      discount: components["schemas"]["stripe.Stripe.Discount"] | null;
      /** @description The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
      discounts: (string | components["schemas"]["stripe.Stripe.Discount"] | components["schemas"]["stripe.Stripe.DeletedDiscount"])[];
      /**
       * Format: double
       * @description The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
       */
      due_date: number | null;
      /**
       * Format: double
       * @description The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt.
       */
      effective_at: number | null;
      /**
       * Format: double
       * @description Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
       */
      ending_balance: number | null;
      /** @description Footer displayed on the invoice. */
      footer: string | null;
      /** @description Details of the invoice that was cloned. See the [revision documentation](https://stripe.com/docs/invoicing/invoice-revisions) for more details. */
      from_invoice: components["schemas"]["stripe.Stripe.Invoice.FromInvoice"] | null;
      /** @description The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null. */
      hosted_invoice_url?: string | null;
      /** @description The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null. */
      invoice_pdf?: string | null;
      issuer: components["schemas"]["stripe.Stripe.Invoice.Issuer"];
      /** @description The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized. */
      last_finalization_error: components["schemas"]["stripe.Stripe.Invoice.LastFinalizationError"] | null;
      /** @description The ID of the most recent non-draft revision of this invoice */
      latest_revision: (string | components["schemas"]["stripe.Stripe.Invoice"]) | null;
      /** @description The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order. */
      lines: components["schemas"]["stripe.Stripe.ApiList_stripe.Stripe.InvoiceLineItem_"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      /**
       * Format: double
       * @description The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
       */
      next_payment_attempt: number | null;
      /** @description A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified. */
      number: string | null;
      /** @description The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
      on_behalf_of: (string | components["schemas"]["stripe.Stripe.Account"]) | null;
      /** @description Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance. */
      paid: boolean;
      /** @description Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe. */
      paid_out_of_band: boolean;
      /** @description The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent. */
      payment_intent: (string | components["schemas"]["stripe.Stripe.PaymentIntent"]) | null;
      payment_settings: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings"];
      /**
       * Format: double
       * @description End of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.
       */
      period_end: number;
      /**
       * Format: double
       * @description Start of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.
       */
      period_start: number;
      /**
       * Format: double
       * @description Total amount of all post-payment credit notes issued for this invoice.
       */
      post_payment_credit_notes_amount: number;
      /**
       * Format: double
       * @description Total amount of all pre-payment credit notes issued for this invoice.
       */
      pre_payment_credit_notes_amount: number;
      /** @description The quote this invoice was generated from. */
      quote: (string | components["schemas"]["stripe.Stripe.Quote"]) | null;
      /** @description This is the transaction number that appears on email receipts sent for this invoice. */
      receipt_number: string | null;
      /** @description The rendering-related settings that control how the invoice is displayed on customer-facing surfaces such as PDF and Hosted Invoice Page. */
      rendering: components["schemas"]["stripe.Stripe.Invoice.Rendering"] | null;
      /** @description The details of the cost of shipping, including the ShippingRate applied on the invoice. */
      shipping_cost: components["schemas"]["stripe.Stripe.Invoice.ShippingCost"] | null;
      /** @description Shipping details for the invoice. The Invoice PDF will use the `shipping_details` value if it is set, otherwise the PDF will render the shipping address from the customer. */
      shipping_details: components["schemas"]["stripe.Stripe.Invoice.ShippingDetails"] | null;
      /**
       * Format: double
       * @description Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. For revision invoices, this also includes any customer balance that was applied to the original invoice.
       */
      starting_balance: number;
      /** @description Extra information about an invoice for the customer's credit card statement. */
      statement_descriptor: string | null;
      /** @description The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) */
      status: components["schemas"]["stripe.Stripe.Invoice.Status"] | null;
      status_transitions: components["schemas"]["stripe.Stripe.Invoice.StatusTransitions"];
      /** @description The subscription that this invoice was prepared for, if any. */
      subscription: (string | components["schemas"]["stripe.Stripe.Subscription"]) | null;
      /** @description Details about the subscription that created this invoice. */
      subscription_details: components["schemas"]["stripe.Stripe.Invoice.SubscriptionDetails"] | null;
      /**
       * Format: double
       * @description Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
       */
      subscription_proration_date?: number;
      /**
       * Format: double
       * @description Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or exclusive tax is applied. Item discounts are already incorporated
       */
      subtotal: number;
      /**
       * Format: double
       * @description The integer amount in cents (or local equivalent) representing the subtotal of the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated
       */
      subtotal_excluding_tax: number | null;
      /**
       * Format: double
       * @description The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.
       */
      tax: number | null;
      /** @description ID of the test clock this invoice belongs to. */
      test_clock: (string | components["schemas"]["stripe.Stripe.TestHelpers.TestClock"]) | null;
      threshold_reason?: components["schemas"]["stripe.Stripe.Invoice.ThresholdReason"];
      /**
       * Format: double
       * @description Total after discounts and taxes.
       */
      total: number;
      /** @description The aggregate amounts calculated per discount across all line items. */
      total_discount_amounts: components["schemas"]["stripe.Stripe.Invoice.TotalDiscountAmount"][] | null;
      /**
       * Format: double
       * @description The integer amount in cents (or local equivalent) representing the total amount of the invoice including all discounts but excluding all tax.
       */
      total_excluding_tax: number | null;
      /** @description The aggregate amounts calculated per tax rate for all line items. */
      total_tax_amounts: components["schemas"]["stripe.Stripe.Invoice.TotalTaxAmount"][];
      /** @description The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice. */
      transfer_data: components["schemas"]["stripe.Stripe.Invoice.TransferData"] | null;
      /**
       * Format: double
       * @description Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
       */
      webhooks_delivered_at: number | null;
    };
    "stripe.Stripe.Charge.Level3.LineItem": {
      /** Format: double */
      discount_amount: number | null;
      product_code: string;
      product_description: string;
      /** Format: double */
      quantity: number | null;
      /** Format: double */
      tax_amount: number | null;
      /** Format: double */
      unit_cost: number | null;
    };
    "stripe.Stripe.Charge.Level3": {
      customer_reference?: string;
      line_items: components["schemas"]["stripe.Stripe.Charge.Level3.LineItem"][];
      merchant_reference: string;
      shipping_address_zip?: string;
      /** Format: double */
      shipping_amount?: number;
      shipping_from_zip?: string;
    };
    "stripe.Stripe.Charge.Outcome.Rule": {
      /** @description The action taken on the payment. */
      action: string;
      /** @description Unique identifier for the object. */
      id: string;
      /** @description The predicate to evaluate the payment against. */
      predicate: string;
    };
    "stripe.Stripe.Charge.Outcome": {
      /** @description Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement. */
      network_status: string | null;
      /** @description An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details. */
      reason: string | null;
      /** @description Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar. */
      risk_level?: string;
      /**
       * Format: double
       * @description Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.
       */
      risk_score?: number;
      /** @description The ID of the Radar rule that matched the payment, if applicable. */
      rule?: string | components["schemas"]["stripe.Stripe.Charge.Outcome.Rule"];
      /** @description A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer. */
      seller_message: string | null;
      /** @description Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details. */
      type: string;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.AchCreditTransfer": {
      /** @description Account number to transfer funds to. */
      account_number: string | null;
      /** @description Name of the bank associated with the routing number. */
      bank_name: string | null;
      /** @description Routing transit number for the bank account to transfer funds to. */
      routing_number: string | null;
      /** @description SWIFT code of the bank associated with the routing number. */
      swift_code: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.AchDebit.AccountHolderType": "company" | "individual";
    "stripe.Stripe.Charge.PaymentMethodDetails.AchDebit": {
      /** @description Type of entity that holds the account. This can be either `individual` or `company`. */
      account_holder_type: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.AchDebit.AccountHolderType"] | null;
      /** @description Name of the bank associated with the bank account. */
      bank_name: string | null;
      /** @description Two-letter ISO code representing the country the bank account is located in. */
      country: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: string | null;
      /** @description Last four digits of the bank account number. */
      last4: string | null;
      /** @description Routing transit number of the bank account. */
      routing_number: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.AcssDebit": {
      /** @description Name of the bank associated with the bank account. */
      bank_name: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: string | null;
      /** @description Institution number of the bank account */
      institution_number: string | null;
      /** @description Last four digits of the bank account number. */
      last4: string | null;
      /** @description ID of the mandate used to make this payment. */
      mandate?: string;
      /** @description Transit number of the bank account. */
      transit_number: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Affirm": {
      /** @description The Affirm transaction ID associated with this payment. */
      transaction_id: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.AfterpayClearpay": {
      /** @description The Afterpay order ID associated with this payment intent. */
      order_id: string | null;
      /** @description Order identifier shown to the merchant in Afterpay's online portal. */
      reference: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Alipay": {
      /** @description Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same. */
      buyer_id?: string;
      /** @description Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same. */
      fingerprint: string | null;
      /** @description Transaction ID of this particular Alipay transaction. */
      transaction_id: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.AmazonPay": Record<string, never>;
    "stripe.Stripe.Charge.PaymentMethodDetails.AuBecsDebit": {
      /** @description Bank-State-Branch number of the bank account. */
      bsb_number: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: string | null;
      /** @description Last four digits of the bank account number. */
      last4: string | null;
      /** @description ID of the mandate used to make this payment. */
      mandate?: string;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.BacsDebit": {
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: string | null;
      /** @description Last four digits of the bank account number. */
      last4: string | null;
      /** @description ID of the mandate used to make this payment. */
      mandate: string | null;
      /** @description Sort code of the bank account. (e.g., `10-20-30`) */
      sort_code: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Bancontact.PreferredLanguage": "de" | "en" | "fr" | "nl";
    "stripe.Stripe.Charge.PaymentMethodDetails.Bancontact": {
      /** @description Bank code of bank associated with the bank account. */
      bank_code: string | null;
      /** @description Name of the bank associated with the bank account. */
      bank_name: string | null;
      /** @description Bank Identifier Code of the bank associated with the bank account. */
      bic: string | null;
      /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
      generated_sepa_debit: (string | components["schemas"]["stripe.Stripe.PaymentMethod"]) | null;
      /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
      generated_sepa_debit_mandate: (string | components["schemas"]["stripe.Stripe.Mandate"]) | null;
      /** @description Last four characters of the IBAN. */
      iban_last4: string | null;
      /**
       * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
       * Can be one of `en`, `de`, `fr`, or `nl`
       */
      preferred_language: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Bancontact.PreferredLanguage"] | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by Bancontact directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      verified_name: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Blik": {
      /** @description A unique and immutable identifier assigned by BLIK to every buyer. */
      buyer_id: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Boleto": {
      /** @description The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers) */
      tax_id: string;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Checks": {
      /** @description If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_line1_check: string | null;
      /** @description If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_postal_code_check: string | null;
      /** @description If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      cvc_check: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.ExtendedAuthorization.Status": "disabled" | "enabled";
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.ExtendedAuthorization": {
      /** @description Indicates whether or not the capture window is extended beyond the standard authorization. */
      status: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.ExtendedAuthorization.Status"];
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.IncrementalAuthorization.Status": "available" | "unavailable";
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.IncrementalAuthorization": {
      /** @description Indicates whether or not the incremental authorization feature is supported. */
      status: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.IncrementalAuthorization.Status"];
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Installments.Plan": {
      /**
       * Format: double
       * @description For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card.
       */
      count: number | null;
      /**
       * @description For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
       * One of `month`.
       * @enum {string|null}
       */
      interval: "month" | null;
      /**
       * @description Type of installment plan, one of `fixed_count`.
       * @enum {string}
       */
      type: "fixed_count";
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Installments": {
      /** @description Installment plan selected for the payment. */
      plan: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Installments.Plan"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Multicapture.Status": "available" | "unavailable";
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Multicapture": {
      /** @description Indicates whether or not multiple captures are supported. */
      status: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Multicapture.Status"];
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.NetworkToken": {
      /** @description Indicates if Stripe used a network token, either user provided or Stripe managed when processing the transaction. */
      used: boolean;
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Overcapture.Status": "available" | "unavailable";
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Overcapture": {
      /**
       * Format: double
       * @description The maximum amount that can be captured.
       */
      maximum_amount_capturable: number;
      /** @description Indicates whether or not the authorized amount can be over-captured. */
      status: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Overcapture.Status"];
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.AuthenticationFlow": "challenge" | "frictionless";
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.ElectronicCommerceIndicator": "01" | "02" | "05" | "06" | "07";
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.ExemptionIndicator": "low_risk" | "none";
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.Result": "attempt_acknowledged" | "authenticated" | "exempted" | "failed" | "not_supported" | "processing_error";
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.ResultReason": "abandoned" | "bypassed" | "canceled" | "card_not_enrolled" | "network_not_supported" | "protocol_error" | "rejected";
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.Version": "1.0.2" | "2.1.0" | "2.2.0";
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure": {
      /**
       * @description For authenticated transactions: how the customer was authenticated by
       * the issuing bank.
       */
      authentication_flow: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.AuthenticationFlow"] | null;
      /**
       * @description The Electronic Commerce Indicator (ECI). A protocol-level field
       * indicating what degree of authentication was performed.
       */
      electronic_commerce_indicator: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.ElectronicCommerceIndicator"] | null;
      /** @description The exemption requested via 3DS and accepted by the issuer at authentication time. */
      exemption_indicator: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.ExemptionIndicator"] | null;
      /**
       * @description Whether Stripe requested the value of `exemption_indicator` in the transaction. This will depend on
       * the outcome of Stripe's internal risk assessment.
       */
      exemption_indicator_applied?: boolean;
      /** @description Indicates the outcome of 3D Secure authentication. */
      result: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.Result"] | null;
      /**
       * @description Additional information about why 3D Secure succeeded or failed based
       * on the `result`.
       */
      result_reason: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.ResultReason"] | null;
      /**
       * @description The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID
       * (dsTransId) for this payment.
       */
      transaction_id: string | null;
      /** @description The version of 3D Secure that was used. */
      version: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure.Version"] | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.AmexExpressCheckout": Record<string, never>;
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.ApplePay": Record<string, never>;
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.GooglePay": Record<string, never>;
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.Link": Record<string, never>;
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.Masterpass": {
      /** @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      billing_address: components["schemas"]["stripe.Stripe.Address"] | null;
      /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      email: string | null;
      /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      name: string | null;
      /** @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      shipping_address: components["schemas"]["stripe.Stripe.Address"] | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.SamsungPay": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.Type": "amex_express_checkout" | "apple_pay" | "google_pay" | "link" | "masterpass" | "samsung_pay" | "visa_checkout";
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.VisaCheckout": {
      /** @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      billing_address: components["schemas"]["stripe.Stripe.Address"] | null;
      /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      email: string | null;
      /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      name: string | null;
      /** @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      shipping_address: components["schemas"]["stripe.Stripe.Address"] | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet": {
      amex_express_checkout?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.AmexExpressCheckout"];
      apple_pay?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.ApplePay"];
      /** @description (For tokenized numbers only.) The last four digits of the device account number. */
      dynamic_last4: string | null;
      google_pay?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.GooglePay"];
      link?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.Link"];
      masterpass?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.Masterpass"];
      samsung_pay?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.SamsungPay"];
      /** @description The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
      type: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.Type"];
      visa_checkout?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet.VisaCheckout"];
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Card": {
      /**
       * Format: double
       * @description The authorized amount.
       */
      amount_authorized: number | null;
      /** @description Authorization code on the charge. */
      authorization_code: string | null;
      /** @description Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      brand: string | null;
      /**
       * Format: double
       * @description When using manual capture, a future timestamp at which the charge will be automatically refunded if uncaptured.
       */
      capture_before?: number;
      /** @description Check results by Card networks on Card address and CVC at time of payment. */
      checks: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Checks"] | null;
      /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      country: string | null;
      /** @description A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.) */
      description?: string | null;
      /**
       * Format: double
       * @description Two-digit number representing the card's expiration month.
       */
      exp_month: number;
      /**
       * Format: double
       * @description Four-digit number representing the card's expiration year.
       */
      exp_year: number;
      extended_authorization?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.ExtendedAuthorization"];
      /**
       * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
       *
       * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
       */
      fingerprint?: string | null;
      /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      funding: string | null;
      /** @description Issuer identification number of the card. (For internal use only and not typically available in standard API requests.) */
      iin?: string | null;
      incremental_authorization?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.IncrementalAuthorization"];
      /**
       * @description Installment details for this payment (Mexico only).
       *
       * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
       */
      installments: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Installments"] | null;
      /** @description The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.) */
      issuer?: string | null;
      /** @description The last four digits of the card. */
      last4: string | null;
      /** @description ID of the mandate used to make this payment or created by it. */
      mandate: string | null;
      /** @description True if this payment was marked as MOTO and out of scope for SCA. */
      moto?: boolean | null;
      multicapture?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Multicapture"];
      /** @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      network: string | null;
      /** @description If this card has network token credentials, this contains the details of the network token credentials. */
      network_token?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.NetworkToken"] | null;
      overcapture?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Overcapture"];
      /** @description Populated if this transaction used 3D Secure authentication. */
      three_d_secure: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.ThreeDSecure"] | null;
      /** @description If this Card is part of a card wallet, this contains the details of the card wallet. */
      wallet: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card.Wallet"] | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Offline": {
      /**
       * Format: double
       * @description Time at which the payment was collected while offline
       */
      stored_at: number | null;
      /**
       * @description The method used to process this payment method offline. Only deferred is allowed.
       * @enum {string|null}
       */
      type: "deferred" | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.ReadMethod": "contact_emv" | "contactless_emv" | "contactless_magstripe_mode" | "magnetic_stripe_fallback" | "magnetic_stripe_track2";
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Receipt.AccountType": "checking" | "credit" | "prepaid" | "unknown";
    "stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Receipt": {
      /** @description The type of account being debited or credited */
      account_type?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Receipt.AccountType"];
      /** @description EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
      application_cryptogram: string | null;
      /** @description Mnenomic of the Application Identifier. */
      application_preferred_name: string | null;
      /** @description Identifier for this transaction. */
      authorization_code: string | null;
      /** @description EMV tag 8A. A code returned by the card issuer. */
      authorization_response_code: string | null;
      /** @description Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`. */
      cardholder_verification_method: string | null;
      /** @description EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
      dedicated_file_name: string | null;
      /** @description The outcome of a series of EMV functions performed by the card reader. */
      terminal_verification_results: string | null;
      /** @description An indication of various EMV functions performed during the transaction. */
      transaction_status_information: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Wallet.Type": "apple_pay" | "google_pay" | "samsung_pay" | "unknown";
    "stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Wallet": {
      /** @description The type of mobile wallet, one of `apple_pay`, `google_pay`, `samsung_pay`, or `unknown`. */
      type: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Wallet.Type"];
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.CardPresent": {
      /**
       * Format: double
       * @description The authorized amount
       */
      amount_authorized: number | null;
      /** @description Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      brand: string | null;
      /** @description The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card. */
      brand_product: string | null;
      /**
       * Format: double
       * @description When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured.
       */
      capture_before?: number;
      /** @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
      cardholder_name: string | null;
      /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      country: string | null;
      /** @description A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.) */
      description?: string | null;
      /** @description Authorization response cryptogram. */
      emv_auth_data: string | null;
      /**
       * Format: double
       * @description Two-digit number representing the card's expiration month.
       */
      exp_month: number;
      /**
       * Format: double
       * @description Four-digit number representing the card's expiration year.
       */
      exp_year: number;
      /**
       * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
       *
       * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
       */
      fingerprint: string | null;
      /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      funding: string | null;
      /** @description ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
      generated_card: string | null;
      /** @description Issuer identification number of the card. (For internal use only and not typically available in standard API requests.) */
      iin?: string | null;
      /** @description Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support). */
      incremental_authorization_supported: boolean;
      /** @description The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.) */
      issuer?: string | null;
      /** @description The last four digits of the card. */
      last4: string | null;
      /** @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      network: string | null;
      /** @description This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. The first three digits of the Trace ID is the Financial Network Code, the next 6 digits is the Banknet Reference Number, and the last 4 digits represent the date (MM/DD). This field will be available for successful Visa, Mastercard, or American Express transactions and always null for other card brands. */
      network_transaction_id: string | null;
      /** @description Details about payments collected offline. */
      offline: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Offline"] | null;
      /** @description Defines whether the authorized amount can be over-captured or not */
      overcapture_supported: boolean;
      /** @description EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
      preferred_locales: string[] | null;
      /** @description How card details were read in this transaction. */
      read_method: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.ReadMethod"] | null;
      /** @description A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
      receipt: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Receipt"] | null;
      wallet?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.CardPresent.Wallet"];
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Cashapp": {
      /** @description A unique and immutable identifier assigned by Cash App to every buyer. */
      buyer_id: string | null;
      /** @description A public identifier for buyers using Cash App. */
      cashtag: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.CustomerBalance": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Eps.Bank": "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
    "stripe.Stripe.Charge.PaymentMethodDetails.Eps": {
      /** @description The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`. */
      bank: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Eps.Bank"] | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by EPS directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       * EPS rarely provides this information so the attribute is usually empty.
       */
      verified_name: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Fpx.AccountHolderType": "company" | "individual";
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Fpx.Bank": "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
    "stripe.Stripe.Charge.PaymentMethodDetails.Fpx": {
      /** @description Account holder type, if provided. Can be one of `individual` or `company`. */
      account_holder_type: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Fpx.AccountHolderType"] | null;
      /** @description The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`. */
      bank: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Fpx.Bank"];
      /** @description Unique transaction id generated by FPX for every request from the merchant */
      transaction_id: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Giropay": {
      /** @description Bank code of bank associated with the bank account. */
      bank_code: string | null;
      /** @description Name of the bank associated with the bank account. */
      bank_name: string | null;
      /** @description Bank Identifier Code of the bank associated with the bank account. */
      bic: string | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by Giropay directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       * Giropay rarely provides this information so the attribute is usually empty.
       */
      verified_name: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Grabpay": {
      /** @description Unique transaction id generated by GrabPay */
      transaction_id: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Ideal.Bank": "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "n26" | "nn" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Ideal.Bic": "ABNANL2A" | "ASNBNL21" | "BITSNL2A" | "BUNQNL2A" | "FVLBNL22" | "HANDNL2A" | "INGBNL2A" | "KNABNL2H" | "MOYONL21" | "NNBANL2G" | "NTSBDEB1" | "RABONL2U" | "RBRBNL21" | "REVOIE23" | "REVOLT21" | "SNSBNL2A" | "TRIONL2U";
    "stripe.Stripe.Charge.PaymentMethodDetails.Ideal": {
      /** @description The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`. */
      bank: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Ideal.Bank"] | null;
      /** @description The Bank Identifier Code of the customer's bank. */
      bic: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Ideal.Bic"] | null;
      /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
      generated_sepa_debit: (string | components["schemas"]["stripe.Stripe.PaymentMethod"]) | null;
      /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
      generated_sepa_debit_mandate: (string | components["schemas"]["stripe.Stripe.Mandate"]) | null;
      /** @description Last four characters of the IBAN. */
      iban_last4: string | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by iDEAL directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      verified_name: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent.ReadMethod": "contact_emv" | "contactless_emv" | "contactless_magstripe_mode" | "magnetic_stripe_fallback" | "magnetic_stripe_track2";
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent.Receipt.AccountType": "checking" | "savings" | "unknown";
    "stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent.Receipt": {
      /** @description The type of account being debited or credited */
      account_type?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent.Receipt.AccountType"];
      /** @description EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
      application_cryptogram: string | null;
      /** @description Mnenomic of the Application Identifier. */
      application_preferred_name: string | null;
      /** @description Identifier for this transaction. */
      authorization_code: string | null;
      /** @description EMV tag 8A. A code returned by the card issuer. */
      authorization_response_code: string | null;
      /** @description Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`. */
      cardholder_verification_method: string | null;
      /** @description EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
      dedicated_file_name: string | null;
      /** @description The outcome of a series of EMV functions performed by the card reader. */
      terminal_verification_results: string | null;
      /** @description An indication of various EMV functions performed during the transaction. */
      transaction_status_information: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent": {
      /** @description Card brand. Can be `interac`, `mastercard` or `visa`. */
      brand: string | null;
      /** @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
      cardholder_name: string | null;
      /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      country: string | null;
      /** @description A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.) */
      description?: string | null;
      /** @description Authorization response cryptogram. */
      emv_auth_data: string | null;
      /**
       * Format: double
       * @description Two-digit number representing the card's expiration month.
       */
      exp_month: number;
      /**
       * Format: double
       * @description Four-digit number representing the card's expiration year.
       */
      exp_year: number;
      /**
       * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
       *
       * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
       */
      fingerprint: string | null;
      /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      funding: string | null;
      /** @description ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
      generated_card: string | null;
      /** @description Issuer identification number of the card. (For internal use only and not typically available in standard API requests.) */
      iin?: string | null;
      /** @description The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.) */
      issuer?: string | null;
      /** @description The last four digits of the card. */
      last4: string | null;
      /** @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      network: string | null;
      /** @description This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. The first three digits of the Trace ID is the Financial Network Code, the next 6 digits is the Banknet Reference Number, and the last 4 digits represent the date (MM/DD). This field will be available for successful Visa, Mastercard, or American Express transactions and always null for other card brands. */
      network_transaction_id: string | null;
      /** @description EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
      preferred_locales: string[] | null;
      /** @description How card details were read in this transaction. */
      read_method: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent.ReadMethod"] | null;
      /** @description A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
      receipt: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent.Receipt"] | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Klarna.PayerDetails.Address": {
      /** @description The payer address country */
      country: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Klarna.PayerDetails": {
      /** @description The payer's address */
      address: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Klarna.PayerDetails.Address"] | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Klarna": {
      /** @description The payer details for this transaction. */
      payer_details: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Klarna.PayerDetails"] | null;
      /**
       * @description The Klarna payment method used for this transaction.
       * Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`
       */
      payment_method_category: string | null;
      /**
       * @description Preferred language of the Klarna authorization page that the customer is redirected to.
       * Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, `en-FR`, `cs-CZ`, `en-CZ`, `ro-RO`, `en-RO`, `el-GR`, `en-GR`, `en-AU`, `en-NZ`, `en-CA`, `fr-CA`, `pl-PL`, `en-PL`, `pt-PT`, `en-PT`, `de-CH`, `fr-CH`, `it-CH`, or `en-CH`
       */
      preferred_locale: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Konbini.Store.Chain": "familymart" | "lawson" | "ministop" | "seicomart";
    "stripe.Stripe.Charge.PaymentMethodDetails.Konbini.Store": {
      /** @description The name of the convenience store chain where the payment was completed. */
      chain: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Konbini.Store.Chain"] | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Konbini": {
      /** @description If the payment succeeded, this contains the details of the convenience store where the payment was completed. */
      store: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Konbini.Store"] | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Link": {
      /**
       * @description Two-letter ISO code representing the funding source country beneath the Link payment.
       * You could use this attribute to get a sense of international fees.
       */
      country: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Mobilepay.Card": {
      /** @description Brand of the card used in the transaction */
      brand: string | null;
      /** @description Two-letter ISO code representing the country of the card */
      country: string | null;
      /**
       * Format: double
       * @description Two digit number representing the card's expiration month
       */
      exp_month: number | null;
      /**
       * Format: double
       * @description Two digit number representing the card's expiration year
       */
      exp_year: number | null;
      /** @description The last 4 digits of the card */
      last4: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Mobilepay": {
      /** @description Internal card details */
      card: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Mobilepay.Card"] | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Multibanco": {
      /** @description Entity number associated with this Multibanco payment. */
      entity: string | null;
      /** @description Reference number associated with this Multibanco payment. */
      reference: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Oxxo": {
      /** @description OXXO reference number */
      number: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.P24.Bank": "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "velobank" | "volkswagen_bank";
    "stripe.Stripe.Charge.PaymentMethodDetails.P24": {
      /** @description The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `velobank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`. */
      bank: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.P24.Bank"] | null;
      /** @description Unique reference for this Przelewy24 payment. */
      reference: string | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by Przelewy24 directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       * Przelewy24 rarely provides this information so the attribute is usually empty.
       */
      verified_name: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Paynow": {
      /** @description Reference number associated with this PayNow payment */
      reference: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Paypal.SellerProtection.DisputeCategory": "fraudulent" | "product_not_received";
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Paypal.SellerProtection.Status": "eligible" | "not_eligible" | "partially_eligible";
    "stripe.Stripe.Charge.PaymentMethodDetails.Paypal.SellerProtection": {
      /** @description An array of conditions that are covered for the transaction, if applicable. */
      dispute_categories: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Paypal.SellerProtection.DisputeCategory"][] | null;
      /** @description Indicates whether the transaction is eligible for PayPal's seller protection. */
      status: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Paypal.SellerProtection.Status"];
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Paypal": {
      /**
       * @description Owner's email. Values are provided by PayPal directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      payer_email: string | null;
      /** @description PayPal account PayerID. This identifier uniquely identifies the PayPal customer. */
      payer_id: string | null;
      /**
       * @description Owner's full name. Values provided by PayPal directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      payer_name: string | null;
      /** @description The level of protection offered as defined by PayPal Seller Protection for Merchants, for this transaction. */
      seller_protection: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Paypal.SellerProtection"] | null;
      /** @description A unique ID generated by PayPal for this transaction. */
      transaction_id: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Pix": {
      /** @description Unique transaction id generated by BCB */
      bank_transaction_id?: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Promptpay": {
      /** @description Bill reference generated by PromptPay */
      reference: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.RevolutPay": Record<string, never>;
    "stripe.Stripe.Charge.PaymentMethodDetails.SepaCreditTransfer": {
      /** @description Name of the bank associated with the bank account. */
      bank_name: string | null;
      /** @description Bank Identifier Code of the bank associated with the bank account. */
      bic: string | null;
      /** @description IBAN of the bank account to transfer funds to. */
      iban: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.SepaDebit": {
      /** @description Bank code of bank associated with the bank account. */
      bank_code: string | null;
      /** @description Branch code of bank associated with the bank account. */
      branch_code: string | null;
      /** @description Two-letter ISO code representing the country the bank account is located in. */
      country: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: string | null;
      /** @description Last four characters of the IBAN. */
      last4: string | null;
      /** @description Find the ID of the mandate used for this payment under the [payment_method_details.sepa_debit.mandate](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-sepa_debit-mandate) property on the Charge. Use this mandate ID to [retrieve the Mandate](https://stripe.com/docs/api/mandates/retrieve). */
      mandate: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.Sofort.PreferredLanguage": "de" | "en" | "es" | "fr" | "it" | "nl" | "pl";
    "stripe.Stripe.Charge.PaymentMethodDetails.Sofort": {
      /** @description Bank code of bank associated with the bank account. */
      bank_code: string | null;
      /** @description Name of the bank associated with the bank account. */
      bank_name: string | null;
      /** @description Bank Identifier Code of the bank associated with the bank account. */
      bic: string | null;
      /** @description Two-letter ISO code representing the country the bank account is located in. */
      country: string | null;
      /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
      generated_sepa_debit: (string | components["schemas"]["stripe.Stripe.PaymentMethod"]) | null;
      /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
      generated_sepa_debit_mandate: (string | components["schemas"]["stripe.Stripe.Mandate"]) | null;
      /** @description Last four characters of the IBAN. */
      iban_last4: string | null;
      /**
       * @description Preferred language of the SOFORT authorization page that the customer is redirected to.
       * Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
       */
      preferred_language: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Sofort.PreferredLanguage"] | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by SOFORT directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      verified_name: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.StripeAccount": Record<string, never>;
    "stripe.Stripe.Charge.PaymentMethodDetails.Swish": {
      /** @description Uniquely identifies the payer's Swish account. You can use this attribute to check whether two Swish transactions were paid for by the same payer */
      fingerprint: string | null;
      /** @description Payer bank reference number for the payment */
      payment_reference: string | null;
      /** @description The last four digits of the Swish account phone number */
      verified_phone_last4: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Twint": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.UsBankAccount.AccountHolderType": "company" | "individual";
    /** @enum {string} */
    "stripe.Stripe.Charge.PaymentMethodDetails.UsBankAccount.AccountType": "checking" | "savings";
    "stripe.Stripe.Charge.PaymentMethodDetails.UsBankAccount": {
      /** @description Account holder type: individual or company. */
      account_holder_type: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.UsBankAccount.AccountHolderType"] | null;
      /** @description Account type: checkings or savings. Defaults to checking if omitted. */
      account_type: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.UsBankAccount.AccountType"] | null;
      /** @description Name of the bank associated with the bank account. */
      bank_name: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: string | null;
      /** @description Last four digits of the bank account number. */
      last4: string | null;
      /** @description ID of the mandate used to make this payment. */
      mandate?: string | components["schemas"]["stripe.Stripe.Mandate"];
      /** @description Reference number to locate ACH payments with customer's bank. */
      payment_reference: string | null;
      /** @description Routing number of the bank account. */
      routing_number: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Wechat": Record<string, never>;
    "stripe.Stripe.Charge.PaymentMethodDetails.WechatPay": {
      /** @description Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same. */
      fingerprint: string | null;
      /** @description Transaction ID of this particular WeChat Pay transaction. */
      transaction_id: string | null;
    };
    "stripe.Stripe.Charge.PaymentMethodDetails.Zip": Record<string, never>;
    "stripe.Stripe.Charge.PaymentMethodDetails": {
      ach_credit_transfer?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.AchCreditTransfer"];
      ach_debit?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.AchDebit"];
      acss_debit?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.AcssDebit"];
      affirm?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Affirm"];
      afterpay_clearpay?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.AfterpayClearpay"];
      alipay?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Alipay"];
      amazon_pay?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.AmazonPay"];
      au_becs_debit?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.AuBecsDebit"];
      bacs_debit?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.BacsDebit"];
      bancontact?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Bancontact"];
      blik?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Blik"];
      boleto?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Boleto"];
      card?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Card"];
      card_present?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.CardPresent"];
      cashapp?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Cashapp"];
      customer_balance?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.CustomerBalance"];
      eps?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Eps"];
      fpx?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Fpx"];
      giropay?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Giropay"];
      grabpay?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Grabpay"];
      ideal?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Ideal"];
      interac_present?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.InteracPresent"];
      klarna?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Klarna"];
      konbini?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Konbini"];
      link?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Link"];
      mobilepay?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Mobilepay"];
      multibanco?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Multibanco"];
      oxxo?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Oxxo"];
      p24?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.P24"];
      paynow?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Paynow"];
      paypal?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Paypal"];
      pix?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Pix"];
      promptpay?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Promptpay"];
      revolut_pay?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.RevolutPay"];
      sepa_credit_transfer?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.SepaCreditTransfer"];
      sepa_debit?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.SepaDebit"];
      sofort?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Sofort"];
      stripe_account?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.StripeAccount"];
      swish?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Swish"];
      twint?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Twint"];
      /**
       * @description The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
       * An additional hash is included on `payment_method_details` with a name matching this value.
       * It contains information specific to the payment method.
       */
      type: string;
      us_bank_account?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.UsBankAccount"];
      wechat?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Wechat"];
      wechat_pay?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.WechatPay"];
      zip?: components["schemas"]["stripe.Stripe.Charge.PaymentMethodDetails.Zip"];
    };
    "stripe.Stripe.Charge.RadarOptions": {
      /** @description A [Radar Session](https://stripe.com/docs/radar/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments. */
      session?: string;
    };
    /**
     * @description A container for paginated lists of objects.
     * The array of objects is on the `.data` property,
     * and `.has_more` indicates whether there are additional objects beyond the end of this list.
     *
     * Learn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)
     * or, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.
     */
    "stripe.Stripe.ApiList_stripe.Stripe.Refund_": {
      /** @enum {string} */
      object: "list";
      data: components["schemas"]["stripe.Stripe.Refund"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      has_more: boolean;
      /** @description The URL where this list can be accessed. */
      url: string;
    };
    /** @enum {string} */
    "stripe.Stripe.Review.ClosedReason": "approved" | "disputed" | "redacted" | "refunded" | "refunded_as_fraud";
    "stripe.Stripe.Review.IpAddressLocation": {
      /** @description The city where the payment originated. */
      city: string | null;
      /** @description Two-letter ISO code representing the country where the payment originated. */
      country: string | null;
      /**
       * Format: double
       * @description The geographic latitude where the payment originated.
       */
      latitude: number | null;
      /**
       * Format: double
       * @description The geographic longitude where the payment originated.
       */
      longitude: number | null;
      /** @description The state/county/province/region where the payment originated. */
      region: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Review.OpenedReason": "manual" | "rule";
    "stripe.Stripe.Review.Session": {
      /** @description The browser used in this browser session (e.g., `Chrome`). */
      browser: string | null;
      /** @description Information about the device used for the browser session (e.g., `Samsung SM-G930T`). */
      device: string | null;
      /** @description The platform for the browser session (e.g., `Macintosh`). */
      platform: string | null;
      /** @description The version for the browser session (e.g., `61.0.3163.100`). */
      version: string | null;
    };
    /**
     * @description Reviews can be used to supplement automated fraud detection with human expertise.
     *
     * Learn more about [Radar](https://stripe.com/radar) and reviewing payments
     * [here](https://stripe.com/docs/radar/reviews).
     */
    "stripe.Stripe.Review": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "review";
      /** @description The ZIP or postal code of the card used, if applicable. */
      billing_zip: string | null;
      /** @description The charge associated with this review. */
      charge: (string | components["schemas"]["stripe.Stripe.Charge"]) | null;
      /** @description The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`. */
      closed_reason: components["schemas"]["stripe.Stripe.Review.ClosedReason"] | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description The IP address where the payment originated. */
      ip_address: string | null;
      /** @description Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address. */
      ip_address_location: components["schemas"]["stripe.Stripe.Review.IpAddressLocation"] | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description If `true`, the review needs action. */
      open: boolean;
      /** @description The reason the review was opened. One of `rule` or `manual`. */
      opened_reason: components["schemas"]["stripe.Stripe.Review.OpenedReason"];
      /** @description The PaymentIntent ID associated with this review, if one exists. */
      payment_intent?: string | components["schemas"]["stripe.Stripe.PaymentIntent"];
      /** @description The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`. */
      reason: string;
      /** @description Information related to the browsing session of the user who initiated the payment. */
      session: components["schemas"]["stripe.Stripe.Review.Session"] | null;
    };
    "stripe.Stripe.Charge.Shipping": {
      address?: components["schemas"]["stripe.Stripe.Address"];
      /** @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
      carrier?: string | null;
      /** @description Recipient name. */
      name?: string;
      /** @description Recipient phone (including extension). */
      phone?: string | null;
      /** @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
      tracking_number?: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Charge.Status": "failed" | "pending" | "succeeded";
    "stripe.Stripe.Charge.TransferData": {
      /**
       * Format: double
       * @description The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account.
       */
      amount: number | null;
      /** @description ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request. */
      destination: string | components["schemas"]["stripe.Stripe.Account"];
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.CollectionMethod": "charge_automatically" | "send_invoice";
    "stripe.Stripe.Invoice.CustomField": {
      /** @description The name of the custom field. */
      name: string;
      /** @description The value of the custom field. */
      value: string;
    };
    "stripe.Stripe.Invoice.CustomerShipping": {
      address?: components["schemas"]["stripe.Stripe.Address"];
      /** @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
      carrier?: string | null;
      /** @description Recipient name. */
      name?: string;
      /** @description Recipient phone (including extension). */
      phone?: string | null;
      /** @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
      tracking_number?: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.CustomerTaxExempt": "exempt" | "none" | "reverse";
    /** @enum {string} */
    "stripe.Stripe.Invoice.CustomerTaxId.Type": "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bh_vat" | "bo_tin" | "br_cnpj" | "br_cpf" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_uid" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "de_stn" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hr_oib" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "kz_bin" | "li_uid" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "ng_tin" | "no_vat" | "no_voec" | "nz_gst" | "om_vat" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "ua_vat" | "unknown" | "us_ein" | "uy_ruc" | "ve_rif" | "vn_tin" | "za_vat";
    "stripe.Stripe.Invoice.CustomerTaxId": {
      /** @description The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, or `unknown` */
      type: components["schemas"]["stripe.Stripe.Invoice.CustomerTaxId.Type"];
      /** @description The value of the tax ID. */
      value: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.TaxRate.JurisdictionLevel": "city" | "country" | "county" | "district" | "multiple" | "state";
    /** @enum {string} */
    "stripe.Stripe.TaxRate.TaxType": "amusement_tax" | "communications_tax" | "gst" | "hst" | "igst" | "jct" | "lease_tax" | "pst" | "qst" | "rst" | "sales_tax" | "vat";
    /**
     * @description Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
     *
     * Related guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)
     */
    "stripe.Stripe.TaxRate": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "tax_rate";
      /** @description Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set. */
      active: boolean;
      /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
      country: string | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
      description: string | null;
      /** @description The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page. */
      display_name: string;
      /**
       * Format: double
       * @description Actual/effective tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true,
       * this percentage reflects the rate actually used to calculate tax based on the product's taxability
       * and whether the user is registered to collect taxes in the corresponding jurisdiction.
       */
      effective_percentage: number | null;
      /** @description This specifies if the tax rate is inclusive or exclusive. */
      inclusive: boolean;
      /** @description The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer's invoice. */
      jurisdiction: string | null;
      /** @description The level of the jurisdiction that imposes this tax rate. Will be `null` for manually defined tax rates. */
      jurisdiction_level: components["schemas"]["stripe.Stripe.TaxRate.JurisdictionLevel"] | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      /**
       * Format: double
       * @description Tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true, this percentage includes the statutory tax rate of non-taxable jurisdictions.
       */
      percentage: number;
      /** @description [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States. */
      state: string | null;
      /** @description The high-level tax type, such as `vat` or `sales_tax`. */
      tax_type: components["schemas"]["stripe.Stripe.TaxRate.TaxType"] | null;
    };
    /** @description The DeletedDiscount object. */
    "stripe.Stripe.DeletedDiscount": {
      /** @description The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "discount";
      /** @description The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
      checkout_session: string | null;
      /**
       * @description A coupon contains information about a percent-off or amount-off discount you
       * might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
       * [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
       */
      coupon: components["schemas"]["stripe.Stripe.Coupon"];
      /** @description The ID of the customer associated with this discount. */
      customer: (string | components["schemas"]["stripe.Stripe.Customer"] | components["schemas"]["stripe.Stripe.DeletedCustomer"]) | null;
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      deleted: true;
      /** @description The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
      invoice: string | null;
      /** @description The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
      invoice_item: string | null;
      /** @description The promotion code applied to create this discount. */
      promotion_code: (string | components["schemas"]["stripe.Stripe.PromotionCode"]) | null;
      /**
       * Format: double
       * @description Date that the coupon was applied.
       */
      start: number;
      /** @description The subscription that this coupon is applied to, if it is applied to a particular subscription. */
      subscription: string | null;
      /** @description The subscription item that this coupon is applied to, if it is applied to a particular subscription item. */
      subscription_item: string | null;
    };
    "stripe.Stripe.Invoice.FromInvoice": {
      /** @description The relation between this invoice and the cloned invoice */
      action: string;
      /** @description The invoice that was cloned. */
      invoice: string | components["schemas"]["stripe.Stripe.Invoice"];
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.Issuer.Type": "account" | "self";
    "stripe.Stripe.Invoice.Issuer": {
      /** @description The connected account being referenced when `type` is `account`. */
      account?: string | components["schemas"]["stripe.Stripe.Account"];
      /** @description Type of the account referenced. */
      type: components["schemas"]["stripe.Stripe.Invoice.Issuer.Type"];
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.LastFinalizationError.Code": "account_closed" | "account_country_invalid_address" | "account_error_country_change_requires_additional_steps" | "account_information_mismatch" | "account_invalid" | "account_number_invalid" | "acss_debit_session_incomplete" | "alipay_upgrade_required" | "amount_too_large" | "amount_too_small" | "api_key_expired" | "application_fees_not_allowed" | "authentication_required" | "balance_insufficient" | "balance_invalid_parameter" | "bank_account_bad_routing_numbers" | "bank_account_declined" | "bank_account_exists" | "bank_account_restricted" | "bank_account_unusable" | "bank_account_unverified" | "bank_account_verification_failed" | "billing_invalid_mandate" | "bitcoin_upgrade_required" | "capture_charge_authorization_expired" | "capture_unauthorized_payment" | "card_decline_rate_limit_exceeded" | "card_declined" | "cardholder_phone_number_required" | "charge_already_captured" | "charge_already_refunded" | "charge_disputed" | "charge_exceeds_source_limit" | "charge_exceeds_transaction_limit" | "charge_expired_for_capture" | "charge_invalid_parameter" | "charge_not_refundable" | "clearing_code_unsupported" | "country_code_invalid" | "country_unsupported" | "coupon_expired" | "customer_max_payment_methods" | "customer_max_subscriptions" | "customer_tax_location_invalid" | "debit_not_authorized" | "email_invalid" | "expired_card" | "financial_connections_account_inactive" | "financial_connections_no_successful_transaction_refresh" | "forwarding_api_inactive" | "forwarding_api_invalid_parameter" | "forwarding_api_upstream_connection_error" | "forwarding_api_upstream_connection_timeout" | "idempotency_key_in_use" | "incorrect_address" | "incorrect_cvc" | "incorrect_number" | "incorrect_zip" | "instant_payouts_config_disabled" | "instant_payouts_currency_disabled" | "instant_payouts_limit_exceeded" | "instant_payouts_unsupported" | "insufficient_funds" | "intent_invalid_state" | "intent_verification_method_missing" | "invalid_card_type" | "invalid_characters" | "invalid_charge_amount" | "invalid_cvc" | "invalid_expiry_month" | "invalid_expiry_year" | "invalid_mandate_reference_prefix_format" | "invalid_number" | "invalid_source_usage" | "invalid_tax_location" | "invoice_no_customer_line_items" | "invoice_no_payment_method_types" | "invoice_no_subscription_line_items" | "invoice_not_editable" | "invoice_on_behalf_of_not_editable" | "invoice_payment_intent_requires_action" | "invoice_upcoming_none" | "livemode_mismatch" | "lock_timeout" | "missing" | "no_account" | "not_allowed_on_standard_account" | "out_of_inventory" | "ownership_declaration_not_allowed" | "parameter_invalid_empty" | "parameter_invalid_integer" | "parameter_invalid_string_blank" | "parameter_invalid_string_empty" | "parameter_missing" | "parameter_unknown" | "parameters_exclusive" | "payment_intent_action_required" | "payment_intent_authentication_failure" | "payment_intent_incompatible_payment_method" | "payment_intent_invalid_parameter" | "payment_intent_konbini_rejected_confirmation_number" | "payment_intent_mandate_invalid" | "payment_intent_payment_attempt_expired" | "payment_intent_payment_attempt_failed" | "payment_intent_unexpected_state" | "payment_method_bank_account_already_verified" | "payment_method_bank_account_blocked" | "payment_method_billing_details_address_missing" | "payment_method_configuration_failures" | "payment_method_currency_mismatch" | "payment_method_customer_decline" | "payment_method_invalid_parameter" | "payment_method_invalid_parameter_testmode" | "payment_method_microdeposit_failed" | "payment_method_microdeposit_verification_amounts_invalid" | "payment_method_microdeposit_verification_amounts_mismatch" | "payment_method_microdeposit_verification_attempts_exceeded" | "payment_method_microdeposit_verification_descriptor_code_mismatch" | "payment_method_microdeposit_verification_timeout" | "payment_method_not_available" | "payment_method_provider_decline" | "payment_method_provider_timeout" | "payment_method_unactivated" | "payment_method_unexpected_state" | "payment_method_unsupported_type" | "payout_reconciliation_not_ready" | "payouts_limit_exceeded" | "payouts_not_allowed" | "platform_account_required" | "platform_api_key_expired" | "postal_code_invalid" | "processing_error" | "product_inactive" | "progressive_onboarding_limit_exceeded" | "rate_limit" | "refer_to_customer" | "refund_disputed_payment" | "resource_already_exists" | "resource_missing" | "return_intent_already_processed" | "routing_number_invalid" | "secret_key_required" | "sepa_unsupported_account" | "setup_attempt_failed" | "setup_intent_authentication_failure" | "setup_intent_invalid_parameter" | "setup_intent_mandate_invalid" | "setup_intent_setup_attempt_expired" | "setup_intent_unexpected_state" | "shipping_address_invalid" | "shipping_calculation_failed" | "sku_inactive" | "state_unsupported" | "status_transition_invalid" | "stripe_tax_inactive" | "tax_id_invalid" | "taxes_calculation_failed" | "terminal_location_country_unsupported" | "terminal_reader_busy" | "terminal_reader_hardware_fault" | "terminal_reader_invalid_location_for_activation" | "terminal_reader_invalid_location_for_payment" | "terminal_reader_offline" | "terminal_reader_timeout" | "testmode_charges_only" | "tls_version_unsupported" | "token_already_used" | "token_card_network_invalid" | "token_in_use" | "transfer_source_balance_parameters_mismatch" | "transfers_not_allowed" | "url_invalid";
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.AutomaticPaymentMethods.AllowRedirects": "always" | "never";
    "stripe.Stripe.SetupIntent.AutomaticPaymentMethods": {
      /**
       * @description Controls whether this SetupIntent will accept redirect-based payment methods.
       *
       * Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/setup_intents/confirm) this SetupIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the setup.
       */
      allow_redirects?: components["schemas"]["stripe.Stripe.SetupIntent.AutomaticPaymentMethods.AllowRedirects"];
      /** @description Automatically calculates compatible payment methods */
      enabled: boolean | null;
    };
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.CancellationReason": "abandoned" | "duplicate" | "requested_by_customer";
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.FlowDirection": "inbound" | "outbound";
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.LastSetupError.Code": "account_closed" | "account_country_invalid_address" | "account_error_country_change_requires_additional_steps" | "account_information_mismatch" | "account_invalid" | "account_number_invalid" | "acss_debit_session_incomplete" | "alipay_upgrade_required" | "amount_too_large" | "amount_too_small" | "api_key_expired" | "application_fees_not_allowed" | "authentication_required" | "balance_insufficient" | "balance_invalid_parameter" | "bank_account_bad_routing_numbers" | "bank_account_declined" | "bank_account_exists" | "bank_account_restricted" | "bank_account_unusable" | "bank_account_unverified" | "bank_account_verification_failed" | "billing_invalid_mandate" | "bitcoin_upgrade_required" | "capture_charge_authorization_expired" | "capture_unauthorized_payment" | "card_decline_rate_limit_exceeded" | "card_declined" | "cardholder_phone_number_required" | "charge_already_captured" | "charge_already_refunded" | "charge_disputed" | "charge_exceeds_source_limit" | "charge_exceeds_transaction_limit" | "charge_expired_for_capture" | "charge_invalid_parameter" | "charge_not_refundable" | "clearing_code_unsupported" | "country_code_invalid" | "country_unsupported" | "coupon_expired" | "customer_max_payment_methods" | "customer_max_subscriptions" | "customer_tax_location_invalid" | "debit_not_authorized" | "email_invalid" | "expired_card" | "financial_connections_account_inactive" | "financial_connections_no_successful_transaction_refresh" | "forwarding_api_inactive" | "forwarding_api_invalid_parameter" | "forwarding_api_upstream_connection_error" | "forwarding_api_upstream_connection_timeout" | "idempotency_key_in_use" | "incorrect_address" | "incorrect_cvc" | "incorrect_number" | "incorrect_zip" | "instant_payouts_config_disabled" | "instant_payouts_currency_disabled" | "instant_payouts_limit_exceeded" | "instant_payouts_unsupported" | "insufficient_funds" | "intent_invalid_state" | "intent_verification_method_missing" | "invalid_card_type" | "invalid_characters" | "invalid_charge_amount" | "invalid_cvc" | "invalid_expiry_month" | "invalid_expiry_year" | "invalid_mandate_reference_prefix_format" | "invalid_number" | "invalid_source_usage" | "invalid_tax_location" | "invoice_no_customer_line_items" | "invoice_no_payment_method_types" | "invoice_no_subscription_line_items" | "invoice_not_editable" | "invoice_on_behalf_of_not_editable" | "invoice_payment_intent_requires_action" | "invoice_upcoming_none" | "livemode_mismatch" | "lock_timeout" | "missing" | "no_account" | "not_allowed_on_standard_account" | "out_of_inventory" | "ownership_declaration_not_allowed" | "parameter_invalid_empty" | "parameter_invalid_integer" | "parameter_invalid_string_blank" | "parameter_invalid_string_empty" | "parameter_missing" | "parameter_unknown" | "parameters_exclusive" | "payment_intent_action_required" | "payment_intent_authentication_failure" | "payment_intent_incompatible_payment_method" | "payment_intent_invalid_parameter" | "payment_intent_konbini_rejected_confirmation_number" | "payment_intent_mandate_invalid" | "payment_intent_payment_attempt_expired" | "payment_intent_payment_attempt_failed" | "payment_intent_unexpected_state" | "payment_method_bank_account_already_verified" | "payment_method_bank_account_blocked" | "payment_method_billing_details_address_missing" | "payment_method_configuration_failures" | "payment_method_currency_mismatch" | "payment_method_customer_decline" | "payment_method_invalid_parameter" | "payment_method_invalid_parameter_testmode" | "payment_method_microdeposit_failed" | "payment_method_microdeposit_verification_amounts_invalid" | "payment_method_microdeposit_verification_amounts_mismatch" | "payment_method_microdeposit_verification_attempts_exceeded" | "payment_method_microdeposit_verification_descriptor_code_mismatch" | "payment_method_microdeposit_verification_timeout" | "payment_method_not_available" | "payment_method_provider_decline" | "payment_method_provider_timeout" | "payment_method_unactivated" | "payment_method_unexpected_state" | "payment_method_unsupported_type" | "payout_reconciliation_not_ready" | "payouts_limit_exceeded" | "payouts_not_allowed" | "platform_account_required" | "platform_api_key_expired" | "postal_code_invalid" | "processing_error" | "product_inactive" | "progressive_onboarding_limit_exceeded" | "rate_limit" | "refer_to_customer" | "refund_disputed_payment" | "resource_already_exists" | "resource_missing" | "return_intent_already_processed" | "routing_number_invalid" | "secret_key_required" | "sepa_unsupported_account" | "setup_attempt_failed" | "setup_intent_authentication_failure" | "setup_intent_invalid_parameter" | "setup_intent_mandate_invalid" | "setup_intent_setup_attempt_expired" | "setup_intent_unexpected_state" | "shipping_address_invalid" | "shipping_calculation_failed" | "sku_inactive" | "state_unsupported" | "status_transition_invalid" | "stripe_tax_inactive" | "tax_id_invalid" | "taxes_calculation_failed" | "terminal_location_country_unsupported" | "terminal_reader_busy" | "terminal_reader_hardware_fault" | "terminal_reader_invalid_location_for_activation" | "terminal_reader_invalid_location_for_payment" | "terminal_reader_offline" | "terminal_reader_timeout" | "testmode_charges_only" | "tls_version_unsupported" | "token_already_used" | "token_card_network_invalid" | "token_in_use" | "transfer_source_balance_parameters_mismatch" | "transfers_not_allowed" | "url_invalid";
    /**
     * @description A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
     * For example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
     * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
     *
     * Create a SetupIntent when you're ready to collect your customer's payment credentials.
     * Don't maintain long-lived, unconfirmed SetupIntents because they might not be valid.
     * The SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides
     * you through the setup process.
     *
     * Successful SetupIntents result in payment credentials that are optimized for future payments.
     * For example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through
     * [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection
     * to streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).
     * If you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),
     * it automatically attaches the resulting payment method to that Customer after successful setup.
     * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
     * PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.
     *
     * By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.
     *
     * Related guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)
     */
    "stripe.Stripe.SetupIntent": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "setup_intent";
      /** @description ID of the Connect application that created the SetupIntent. */
      application: (string | components["schemas"]["stripe.Stripe.Application"]) | null;
      /**
       * @description If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
       *
       * It can only be used for this Stripe Account's own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
       */
      attach_to_self?: boolean;
      /** @description Settings for dynamic payment methods compatible with this Setup Intent */
      automatic_payment_methods: components["schemas"]["stripe.Stripe.SetupIntent.AutomaticPaymentMethods"] | null;
      /** @description Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`. */
      cancellation_reason: components["schemas"]["stripe.Stripe.SetupIntent.CancellationReason"] | null;
      /**
       * @description The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
       *
       * The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
       */
      client_secret: string | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /**
       * @description ID of the Customer this SetupIntent belongs to, if one exists.
       *
       * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
       */
      customer: (string | components["schemas"]["stripe.Stripe.Customer"] | components["schemas"]["stripe.Stripe.DeletedCustomer"]) | null;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      description: string | null;
      /**
       * @description Indicates the directions of money movement for which this payment method is intended to be used.
       *
       * Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
       */
      flow_directions: components["schemas"]["stripe.Stripe.SetupIntent.FlowDirection"][] | null;
      /** @description The error encountered in the previous SetupIntent confirmation. */
      last_setup_error: components["schemas"]["stripe.Stripe.SetupIntent.LastSetupError"] | null;
      /** @description The most recent SetupAttempt for this SetupIntent. */
      latest_attempt: (string | components["schemas"]["stripe.Stripe.SetupAttempt"]) | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description ID of the multi use Mandate generated by the SetupIntent. */
      mandate: (string | components["schemas"]["stripe.Stripe.Mandate"]) | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      /** @description If present, this property tells you what actions you need to take in order for your customer to continue payment setup. */
      next_action: components["schemas"]["stripe.Stripe.SetupIntent.NextAction"] | null;
      /** @description The account (if any) for which the setup is intended. */
      on_behalf_of: (string | components["schemas"]["stripe.Stripe.Account"]) | null;
      /** @description ID of the payment method used with this SetupIntent. If the payment method is `card_present` and isn't a digital wallet, then the [generated_card](https://docs.stripe.com/api/setup_attempts/object#setup_attempt_object-payment_method_details-card_present-generated_card) associated with the `latest_attempt` is attached to the Customer instead. */
      payment_method: (string | components["schemas"]["stripe.Stripe.PaymentMethod"]) | null;
      /** @description Information about the payment method configuration used for this Setup Intent. */
      payment_method_configuration_details: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodConfigurationDetails"] | null;
      /** @description Payment method-specific configuration for this SetupIntent. */
      payment_method_options: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions"] | null;
      /** @description The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. */
      payment_method_types: string[];
      /** @description ID of the single_use Mandate generated by the SetupIntent. */
      single_use_mandate: (string | components["schemas"]["stripe.Stripe.Mandate"]) | null;
      /** @description [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`. */
      status: components["schemas"]["stripe.Stripe.SetupIntent.Status"];
      /**
       * @description Indicates how the payment method is intended to be used in the future.
       *
       * Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
       */
      usage: string;
    };
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.LastSetupError.Type": "api_error" | "card_error" | "idempotency_error" | "invalid_request_error";
    "stripe.Stripe.SetupIntent.LastSetupError": {
      /** @description For card errors, the ID of the failed charge. */
      charge?: string;
      /** @description For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
      code?: components["schemas"]["stripe.Stripe.SetupIntent.LastSetupError.Code"];
      /** @description For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
      decline_code?: string;
      /** @description A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
      doc_url?: string;
      /** @description A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
      message?: string;
      /** @description If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
      param?: string;
      /**
       * @description A PaymentIntent guides you through the process of collecting a payment from your customer.
       * We recommend that you create exactly one PaymentIntent for each order or
       * customer session in your system. You can reference the PaymentIntent later to
       * see the history of payment attempts for a particular session.
       *
       * A PaymentIntent transitions through
       * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
       * throughout its lifetime as it interfaces with Stripe.js to perform
       * authentication flows and ultimately creates at most one successful charge.
       *
       * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
       */
      payment_intent?: components["schemas"]["stripe.Stripe.PaymentIntent"];
      /**
       * @description PaymentMethod objects represent your customer's payment instruments.
       * You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
       * Customer objects to store instrument details for future payments.
       *
       * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
       */
      payment_method?: components["schemas"]["stripe.Stripe.PaymentMethod"];
      /** @description If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors. */
      payment_method_type?: string;
      /** @description A URL to the request log entry in your dashboard. */
      request_log_url?: string;
      /**
       * @description A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
       * For example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
       * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
       *
       * Create a SetupIntent when you're ready to collect your customer's payment credentials.
       * Don't maintain long-lived, unconfirmed SetupIntents because they might not be valid.
       * The SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides
       * you through the setup process.
       *
       * Successful SetupIntents result in payment credentials that are optimized for future payments.
       * For example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through
       * [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection
       * to streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).
       * If you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),
       * it automatically attaches the resulting payment method to that Customer after successful setup.
       * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
       * PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.
       *
       * By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.
       *
       * Related guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)
       */
      setup_intent?: components["schemas"]["stripe.Stripe.SetupIntent"];
      source?: components["schemas"]["stripe.Stripe.CustomerSource"];
      /** @description The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error` */
      type: components["schemas"]["stripe.Stripe.SetupIntent.LastSetupError.Type"];
    };
    /**
     * @description A SetupAttempt describes one attempted confirmation of a SetupIntent,
     * whether that confirmation is successful or unsuccessful. You can use
     * SetupAttempts to inspect details of a specific attempt at setting up a
     * payment method using a SetupIntent.
     */
    "stripe.Stripe.SetupAttempt": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "setup_attempt";
      /** @description The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation. */
      application: (string | components["schemas"]["stripe.Stripe.Application"]) | null;
      /**
       * @description If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
       *
       * It can only be used for this Stripe Account's own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
       */
      attach_to_self?: boolean;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation. */
      customer: (string | components["schemas"]["stripe.Stripe.Customer"] | components["schemas"]["stripe.Stripe.DeletedCustomer"]) | null;
      /**
       * @description Indicates the directions of money movement for which this payment method is intended to be used.
       *
       * Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
       */
      flow_directions: components["schemas"]["stripe.Stripe.SetupAttempt.FlowDirection"][] | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation. */
      on_behalf_of: (string | components["schemas"]["stripe.Stripe.Account"]) | null;
      /** @description ID of the payment method used with this SetupAttempt. */
      payment_method: string | components["schemas"]["stripe.Stripe.PaymentMethod"];
      payment_method_details: components["schemas"]["stripe.Stripe.SetupAttempt.PaymentMethodDetails"];
      /** @description The error encountered during this attempt to confirm the SetupIntent, if any. */
      setup_error: components["schemas"]["stripe.Stripe.SetupAttempt.SetupError"] | null;
      /** @description ID of the SetupIntent that this attempt belongs to. */
      setup_intent: string | components["schemas"]["stripe.Stripe.SetupIntent"];
      /** @description Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`. */
      status: string;
      /** @description The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`. */
      usage: string;
    };
    "stripe.Stripe.SetupIntent.NextAction.CashappHandleRedirectOrDisplayQrCode.QrCode": {
      /**
       * Format: double
       * @description The date (unix timestamp) when the QR code expires.
       */
      expires_at: number;
      /** @description The image_url_png string used to render QR code */
      image_url_png: string;
      /** @description The image_url_svg string used to render QR code */
      image_url_svg: string;
    };
    "stripe.Stripe.SetupIntent.NextAction.CashappHandleRedirectOrDisplayQrCode": {
      /** @description The URL to the hosted Cash App Pay instructions page, which allows customers to view the QR code, and supports QR code refreshing on expiration. */
      hosted_instructions_url: string;
      /** @description The url for mobile redirect based auth */
      mobile_auth_url: string;
      qr_code: components["schemas"]["stripe.Stripe.SetupIntent.NextAction.CashappHandleRedirectOrDisplayQrCode.QrCode"];
    };
    "stripe.Stripe.SetupIntent.NextAction.RedirectToUrl": {
      /** @description If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
      return_url: string | null;
      /** @description The URL you must redirect your customer to in order to authenticate. */
      url: string | null;
    };
    "stripe.Stripe.SetupIntent.NextAction.UseStripeSdk": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.NextAction.VerifyWithMicrodeposits.MicrodepositType": "amounts" | "descriptor_code";
    "stripe.Stripe.SetupIntent.NextAction.VerifyWithMicrodeposits": {
      /**
       * Format: double
       * @description The timestamp when the microdeposits are expected to land.
       */
      arrival_date: number;
      /** @description The URL for the hosted verification page, which allows customers to verify their bank account. */
      hosted_verification_url: string;
      /** @description The type of the microdeposit sent to the customer. Used to distinguish between different verification methods. */
      microdeposit_type: components["schemas"]["stripe.Stripe.SetupIntent.NextAction.VerifyWithMicrodeposits.MicrodepositType"] | null;
    };
    "stripe.Stripe.SetupIntent.NextAction": {
      cashapp_handle_redirect_or_display_qr_code?: components["schemas"]["stripe.Stripe.SetupIntent.NextAction.CashappHandleRedirectOrDisplayQrCode"];
      redirect_to_url?: components["schemas"]["stripe.Stripe.SetupIntent.NextAction.RedirectToUrl"];
      /** @description Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`. */
      type: string;
      /** @description When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
      use_stripe_sdk?: components["schemas"]["stripe.Stripe.SetupIntent.NextAction.UseStripeSdk"];
      verify_with_microdeposits?: components["schemas"]["stripe.Stripe.SetupIntent.NextAction.VerifyWithMicrodeposits"];
    };
    "stripe.Stripe.SetupIntent.PaymentMethodConfigurationDetails": {
      /** @description ID of the payment method configuration used. */
      id: string;
      /** @description ID of the parent payment method configuration used. */
      parent: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.Currency": "cad" | "usd";
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions.DefaultFor": "invoice" | "subscription";
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions.PaymentSchedule": "combined" | "interval" | "sporadic";
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType": "business" | "personal";
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions": {
      /** @description A URL for custom mandate text */
      custom_mandate_url?: string;
      /** @description List of Stripe products where this mandate can be selected automatically. */
      default_for?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions.DefaultFor"][];
      /** @description Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
      interval_description: string | null;
      /** @description Payment schedule for the mandate. */
      payment_schedule: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions.PaymentSchedule"] | null;
      /** @description Transaction type of the mandate. */
      transaction_type: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.VerificationMethod": "automatic" | "instant" | "microdeposits";
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit": {
      /** @description Currency supported by the bank account */
      currency: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.Currency"] | null;
      mandate_options?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.MandateOptions"];
      /** @description Bank account verification method. */
      verification_method?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit.VerificationMethod"];
    };
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.AmazonPay": Record<string, never>;
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.BacsDebit.MandateOptions": Record<string, never>;
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.BacsDebit": {
      mandate_options?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.BacsDebit.MandateOptions"];
    };
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.MandateOptions.AmountType": "fixed" | "maximum";
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.MandateOptions.Interval": "day" | "month" | "sporadic" | "week" | "year";
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.MandateOptions": {
      /**
       * Format: double
       * @description Amount to be charged for future payments.
       */
      amount: number;
      /** @description One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param. */
      amount_type: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.MandateOptions.AmountType"];
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description A description of the mandate or subscription that is meant to be displayed to the customer. */
      description: string | null;
      /**
       * Format: double
       * @description End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
       */
      end_date: number | null;
      /** @description Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`. */
      interval: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.MandateOptions.Interval"];
      /**
       * Format: double
       * @description The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.
       */
      interval_count: number | null;
      /** @description Unique identifier for the mandate or subscription. */
      reference: string;
      /**
       * Format: double
       * @description Start date of the mandate or subscription. Start date should not be lesser than yesterday.
       */
      start_date: number;
      /** @description Specifies the type of mandates supported. Possible values are `india`. */
      supported_types: "india"[] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.Network": "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa";
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.RequestThreeDSecure": "any" | "automatic" | "challenge";
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.Card": {
      /** @description Configuration options for setting up an eMandate for cards issued in India. */
      mandate_options: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.MandateOptions"] | null;
      /** @description Selected network to process this SetupIntent on. Depends on the available networks of the card attached to the setup intent. Can be only set confirm-time. */
      network: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.Network"] | null;
      /** @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
      request_three_d_secure: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.Card.RequestThreeDSecure"] | null;
    };
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.CardPresent": Record<string, never>;
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.Link": {
      /**
       * @deprecated
       * @description [Deprecated] This is a legacy parameter that no longer has any function.
       */
      persistent_token: string | null;
    };
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.Paypal": {
      /** @description The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer. */
      billing_agreement_id: string | null;
    };
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.SepaDebit.MandateOptions": Record<string, never>;
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.SepaDebit": {
      mandate_options?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.SepaDebit.MandateOptions"];
    };
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory": "checking" | "savings";
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters": {
      /** @description The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`. */
      account_subcategories?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory"][];
    };
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission": "balances" | "ownership" | "payment_method" | "transactions";
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch": "balances" | "ownership" | "transactions";
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections": {
      filters?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters"];
      /** @description The list of permissions to request. The `payment_method` permission must be included. */
      permissions?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission"][];
      /** @description Data features requested to be retrieved upon account creation. */
      prefetch: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch"][] | null;
      /** @description For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app. */
      return_url?: string;
    };
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.MandateOptions": {
      /**
       * @description Mandate collection method
       * @enum {string}
       */
      collection_method?: "paper";
    };
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.VerificationMethod": "automatic" | "instant" | "microdeposits";
    "stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount": {
      financial_connections?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections"];
      mandate_options?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.MandateOptions"];
      /** @description Bank account verification method. */
      verification_method?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount.VerificationMethod"];
    };
    "stripe.Stripe.SetupIntent.PaymentMethodOptions": {
      acss_debit?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.AcssDebit"];
      amazon_pay?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.AmazonPay"];
      bacs_debit?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.BacsDebit"];
      card?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.Card"];
      card_present?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.CardPresent"];
      link?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.Link"];
      paypal?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.Paypal"];
      sepa_debit?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.SepaDebit"];
      us_bank_account?: components["schemas"]["stripe.Stripe.SetupIntent.PaymentMethodOptions.UsBankAccount"];
    };
    /** @enum {string} */
    "stripe.Stripe.SetupIntent.Status": "canceled" | "processing" | "requires_action" | "requires_confirmation" | "requires_payment_method" | "succeeded";
    /** @enum {string} */
    "stripe.Stripe.Invoice.LastFinalizationError.Type": "api_error" | "card_error" | "idempotency_error" | "invalid_request_error";
    "stripe.Stripe.Invoice.LastFinalizationError": {
      /** @description For card errors, the ID of the failed charge. */
      charge?: string;
      /** @description For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
      code?: components["schemas"]["stripe.Stripe.Invoice.LastFinalizationError.Code"];
      /** @description For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
      decline_code?: string;
      /** @description A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
      doc_url?: string;
      /** @description A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
      message?: string;
      /** @description If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
      param?: string;
      /**
       * @description A PaymentIntent guides you through the process of collecting a payment from your customer.
       * We recommend that you create exactly one PaymentIntent for each order or
       * customer session in your system. You can reference the PaymentIntent later to
       * see the history of payment attempts for a particular session.
       *
       * A PaymentIntent transitions through
       * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
       * throughout its lifetime as it interfaces with Stripe.js to perform
       * authentication flows and ultimately creates at most one successful charge.
       *
       * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
       */
      payment_intent?: components["schemas"]["stripe.Stripe.PaymentIntent"];
      /**
       * @description PaymentMethod objects represent your customer's payment instruments.
       * You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
       * Customer objects to store instrument details for future payments.
       *
       * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
       */
      payment_method?: components["schemas"]["stripe.Stripe.PaymentMethod"];
      /** @description If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors. */
      payment_method_type?: string;
      /** @description A URL to the request log entry in your dashboard. */
      request_log_url?: string;
      /**
       * @description A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
       * For example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
       * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
       *
       * Create a SetupIntent when you're ready to collect your customer's payment credentials.
       * Don't maintain long-lived, unconfirmed SetupIntents because they might not be valid.
       * The SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides
       * you through the setup process.
       *
       * Successful SetupIntents result in payment credentials that are optimized for future payments.
       * For example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through
       * [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection
       * to streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).
       * If you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),
       * it automatically attaches the resulting payment method to that Customer after successful setup.
       * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
       * PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.
       *
       * By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.
       *
       * Related guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)
       */
      setup_intent?: components["schemas"]["stripe.Stripe.SetupIntent"];
      source?: components["schemas"]["stripe.Stripe.CustomerSource"];
      /** @description The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error` */
      type: components["schemas"]["stripe.Stripe.Invoice.LastFinalizationError.Type"];
    };
    "stripe.Stripe.InvoiceLineItem.DiscountAmount": {
      /**
       * Format: double
       * @description The amount, in cents (or local equivalent), of the discount.
       */
      amount: number;
      /** @description The discount that was applied to get this discount amount. */
      discount: string | components["schemas"]["stripe.Stripe.Discount"] | components["schemas"]["stripe.Stripe.DeletedDiscount"];
    };
    "stripe.Stripe.InvoiceItem.Period": {
      /**
       * Format: double
       * @description The end of the period, which must be greater than or equal to the start. This value is inclusive.
       */
      end: number;
      /**
       * Format: double
       * @description The start of the period. This value is inclusive.
       */
      start: number;
    };
    /** @enum {string} */
    "stripe.Stripe.Plan.AggregateUsage": "last_during_period" | "last_ever" | "max" | "sum";
    /** @enum {string} */
    "stripe.Stripe.Plan.BillingScheme": "per_unit" | "tiered";
    /** @enum {string} */
    "stripe.Stripe.Plan.Interval": "day" | "month" | "week" | "year";
    /** @enum {string} */
    "stripe.Stripe.Price.BillingScheme": "per_unit" | "tiered";
    "stripe.Stripe.Price.CurrencyOptions.CustomUnitAmount": {
      /**
       * Format: double
       * @description The maximum unit amount the customer can specify for this item.
       */
      maximum: number | null;
      /**
       * Format: double
       * @description The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
       */
      minimum: number | null;
      /**
       * Format: double
       * @description The starting unit amount which can be updated by the customer.
       */
      preset: number | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Price.CurrencyOptions.TaxBehavior": "exclusive" | "inclusive" | "unspecified";
    "stripe.Stripe.Price.CurrencyOptions.Tier": {
      /**
       * Format: double
       * @description Price for the entire tier.
       */
      flat_amount: number | null;
      /** @description Same as `flat_amount`, but contains a decimal value with at most 12 decimal places. */
      flat_amount_decimal: string | null;
      /**
       * Format: double
       * @description Per unit price for units relevant to the tier.
       */
      unit_amount: number | null;
      /** @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
      unit_amount_decimal: string | null;
      /**
       * Format: double
       * @description Up to and including to this quantity will be contained in the tier.
       */
      up_to: number | null;
    };
    "stripe.Stripe.Price.CurrencyOptions": {
      /** @description When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links. */
      custom_unit_amount: components["schemas"]["stripe.Stripe.Price.CurrencyOptions.CustomUnitAmount"] | null;
      /** @description Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
      tax_behavior: components["schemas"]["stripe.Stripe.Price.CurrencyOptions.TaxBehavior"] | null;
      /** @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
      tiers?: components["schemas"]["stripe.Stripe.Price.CurrencyOptions.Tier"][];
      /**
       * Format: double
       * @description The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
       */
      unit_amount: number | null;
      /** @description The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`. */
      unit_amount_decimal: string | null;
    };
    "stripe.Stripe.Price.CustomUnitAmount": {
      /**
       * Format: double
       * @description The maximum unit amount the customer can specify for this item.
       */
      maximum: number | null;
      /**
       * Format: double
       * @description The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
       */
      minimum: number | null;
      /**
       * Format: double
       * @description The starting unit amount which can be updated by the customer.
       */
      preset: number | null;
    };
    /**
     * @description Products describe the specific goods or services you offer to your customers.
     * For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
     * They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Payment Links, Checkout, and Subscriptions.
     *
     * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),
     * [share a Payment Link](https://stripe.com/docs/payment-links),
     * [accept payments with Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),
     * and more about [Products and Prices](https://stripe.com/docs/products-prices/overview)
     */
    "stripe.Stripe.Product": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "product";
      /** @description Whether the product is currently available for purchase. */
      active: boolean;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product. */
      default_price?: (string | components["schemas"]["stripe.Stripe.Price"]) | null;
      /** @description Always true for a deleted object */
      deleted?: unknown;
      /** @description The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
      description: string | null;
      /** @description A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
      images: string[];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table). */
      marketing_features: components["schemas"]["stripe.Stripe.Product.MarketingFeature"][];
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description The product's name, meant to be displayable to the customer. */
      name: string;
      /** @description The dimensions of this product for shipping purposes. */
      package_dimensions: components["schemas"]["stripe.Stripe.Product.PackageDimensions"] | null;
      /** @description Whether this product is shipped (i.e., physical goods). */
      shippable: boolean | null;
      /** @description Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. Only used for subscription payments. */
      statement_descriptor?: string | null;
      /** @description A [tax code](https://stripe.com/docs/tax/tax-categories) ID. */
      tax_code: (string | components["schemas"]["stripe.Stripe.TaxCode"]) | null;
      /** @description The type of the product. The product is either of type `good`, which is eligible for use with Orders and SKUs, or `service`, which is eligible for use with Subscriptions and Plans. */
      type: components["schemas"]["stripe.Stripe.Product.Type"];
      /** @description A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal. */
      unit_label?: string | null;
      /**
       * Format: double
       * @description Time at which the object was last updated. Measured in seconds since the Unix epoch.
       */
      updated: number;
      /** @description A URL of a publicly-accessible webpage for this product. */
      url: string | null;
    };
    /** @description The DeletedProduct object. */
    "stripe.Stripe.DeletedProduct": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "product";
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      deleted: true;
    };
    /** @enum {string} */
    "stripe.Stripe.Price.Recurring.AggregateUsage": "last_during_period" | "last_ever" | "max" | "sum";
    /** @enum {string} */
    "stripe.Stripe.Price.Recurring.Interval": "day" | "month" | "week" | "year";
    /** @enum {string} */
    "stripe.Stripe.Price.Recurring.UsageType": "licensed" | "metered";
    "stripe.Stripe.Price.Recurring": {
      /** @description Specifies a usage aggregation strategy for prices of `usage_type=metered`. Defaults to `sum`. */
      aggregate_usage: components["schemas"]["stripe.Stripe.Price.Recurring.AggregateUsage"] | null;
      /** @description The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
      interval: components["schemas"]["stripe.Stripe.Price.Recurring.Interval"];
      /**
       * Format: double
       * @description The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
       */
      interval_count: number;
      /** @description The meter tracking the usage of a metered price */
      meter: string | null;
      /**
       * Format: double
       * @description Default number of trial days when subscribing a customer to this price using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
       */
      trial_period_days: number | null;
      /** @description Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. */
      usage_type: components["schemas"]["stripe.Stripe.Price.Recurring.UsageType"];
    };
    /** @enum {string} */
    "stripe.Stripe.Price.TaxBehavior": "exclusive" | "inclusive" | "unspecified";
    "stripe.Stripe.Price.Tier": {
      /**
       * Format: double
       * @description Price for the entire tier.
       */
      flat_amount: number | null;
      /** @description Same as `flat_amount`, but contains a decimal value with at most 12 decimal places. */
      flat_amount_decimal: string | null;
      /**
       * Format: double
       * @description Per unit price for units relevant to the tier.
       */
      unit_amount: number | null;
      /** @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
      unit_amount_decimal: string | null;
      /**
       * Format: double
       * @description Up to and including to this quantity will be contained in the tier.
       */
      up_to: number | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Price.TiersMode": "graduated" | "volume";
    /** @enum {string} */
    "stripe.Stripe.Price.TransformQuantity.Round": "down" | "up";
    "stripe.Stripe.Price.TransformQuantity": {
      /**
       * Format: double
       * @description Divide usage by this number.
       */
      divide_by: number;
      /** @description After division, either round the result `up` or `down`. */
      round: components["schemas"]["stripe.Stripe.Price.TransformQuantity.Round"];
    };
    /** @enum {string} */
    "stripe.Stripe.Price.Type": "one_time" | "recurring";
    /**
     * @description Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
     * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
     *
     * For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
     *
     * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
     */
    "stripe.Stripe.Price": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "price";
      /** @description Whether the price can be used for new purchases. */
      active: boolean;
      /** @description Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
      billing_scheme: components["schemas"]["stripe.Stripe.Price.BillingScheme"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
      currency_options?: {
        [key: string]: components["schemas"]["stripe.Stripe.Price.CurrencyOptions"];
      };
      /** @description When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links. */
      custom_unit_amount: components["schemas"]["stripe.Stripe.Price.CustomUnitAmount"] | null;
      /** @description Always true for a deleted object */
      deleted?: unknown;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters. */
      lookup_key: string | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description A brief description of the price, hidden from customers. */
      nickname: string | null;
      /** @description The ID of the product this price is associated with. */
      product: string | components["schemas"]["stripe.Stripe.Product"] | components["schemas"]["stripe.Stripe.DeletedProduct"];
      /** @description The recurring components of a price such as `interval` and `usage_type`. */
      recurring: components["schemas"]["stripe.Stripe.Price.Recurring"] | null;
      /** @description Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
      tax_behavior: components["schemas"]["stripe.Stripe.Price.TaxBehavior"] | null;
      /** @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
      tiers?: components["schemas"]["stripe.Stripe.Price.Tier"][];
      /** @description Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows. */
      tiers_mode: components["schemas"]["stripe.Stripe.Price.TiersMode"] | null;
      /** @description Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
      transform_quantity: components["schemas"]["stripe.Stripe.Price.TransformQuantity"] | null;
      /** @description One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase. */
      type: components["schemas"]["stripe.Stripe.Price.Type"];
      /**
       * Format: double
       * @description The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
       */
      unit_amount: number | null;
      /** @description The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`. */
      unit_amount_decimal: string | null;
    };
    "stripe.Stripe.Product.MarketingFeature": {
      /** @description The marketing feature name. Up to 80 characters long. */
      name?: string;
    };
    "stripe.Stripe.Product.PackageDimensions": {
      /**
       * Format: double
       * @description Height, in inches.
       */
      height: number;
      /**
       * Format: double
       * @description Length, in inches.
       */
      length: number;
      /**
       * Format: double
       * @description Weight, in ounces.
       */
      weight: number;
      /**
       * Format: double
       * @description Width, in inches.
       */
      width: number;
    };
    /** @description [Tax codes](https://stripe.com/docs/tax/tax-categories) classify goods and services for tax purposes. */
    "stripe.Stripe.TaxCode": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "tax_code";
      /** @description A detailed description of which types of products the tax code represents. */
      description: string;
      /** @description A short name for the tax code. */
      name: string;
    };
    /** @enum {string} */
    "stripe.Stripe.Product.Type": "good" | "service";
    "stripe.Stripe.Plan.Tier": {
      /**
       * Format: double
       * @description Price for the entire tier.
       */
      flat_amount: number | null;
      /** @description Same as `flat_amount`, but contains a decimal value with at most 12 decimal places. */
      flat_amount_decimal: string | null;
      /**
       * Format: double
       * @description Per unit price for units relevant to the tier.
       */
      unit_amount: number | null;
      /** @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
      unit_amount_decimal: string | null;
      /**
       * Format: double
       * @description Up to and including to this quantity will be contained in the tier.
       */
      up_to: number | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Plan.TiersMode": "graduated" | "volume";
    /** @enum {string} */
    "stripe.Stripe.Plan.TransformUsage.Round": "down" | "up";
    "stripe.Stripe.Plan.TransformUsage": {
      /**
       * Format: double
       * @description Divide usage by this number.
       */
      divide_by: number;
      /** @description After division, either round the result `up` or `down`. */
      round: components["schemas"]["stripe.Stripe.Plan.TransformUsage.Round"];
    };
    /** @enum {string} */
    "stripe.Stripe.Plan.UsageType": "licensed" | "metered";
    /**
     * @description You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.
     *
     * Plans define the base price, currency, and billing cycle for recurring purchases of products.
     * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.
     *
     * For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.
     *
     * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/products-prices/overview).
     */
    "stripe.Stripe.Plan": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "plan";
      /** @description Whether the plan can be used for new purchases. */
      active: boolean;
      /** @description Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`. */
      aggregate_usage: components["schemas"]["stripe.Stripe.Plan.AggregateUsage"] | null;
      /**
       * Format: double
       * @description The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
       */
      amount: number | null;
      /** @description The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`. */
      amount_decimal: string | null;
      /** @description Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
      billing_scheme: components["schemas"]["stripe.Stripe.Plan.BillingScheme"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description Always true for a deleted object */
      deleted?: unknown;
      /** @description The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
      interval: components["schemas"]["stripe.Stripe.Plan.Interval"];
      /**
       * Format: double
       * @description The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
       */
      interval_count: number;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      /** @description The meter tracking the usage of a metered price */
      meter: string | null;
      /** @description A brief description of the plan, hidden from customers. */
      nickname: string | null;
      /** @description The product whose pricing this plan determines. */
      product: (string | components["schemas"]["stripe.Stripe.Product"] | components["schemas"]["stripe.Stripe.DeletedProduct"]) | null;
      /** @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
      tiers?: components["schemas"]["stripe.Stripe.Plan.Tier"][];
      /** @description Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows. */
      tiers_mode: components["schemas"]["stripe.Stripe.Plan.TiersMode"] | null;
      /** @description Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
      transform_usage: components["schemas"]["stripe.Stripe.Plan.TransformUsage"] | null;
      /**
       * Format: double
       * @description Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
       */
      trial_period_days: number | null;
      /** @description Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. */
      usage_type: components["schemas"]["stripe.Stripe.Plan.UsageType"];
    };
    /**
     * @description Subscriptions allow you to charge a customer on a recurring basis.
     *
     * Related guide: [Creating subscriptions](https://stripe.com/docs/billing/subscriptions/creating)
     */
    "stripe.Stripe.Subscription": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "subscription";
      /** @description ID of the Connect Application that created the subscription. */
      application: (string | components["schemas"]["stripe.Stripe.Application"] | components["schemas"]["stripe.Stripe.DeletedApplication"]) | null;
      /**
       * Format: double
       * @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account.
       */
      application_fee_percent: number | null;
      automatic_tax: components["schemas"]["stripe.Stripe.Subscription.AutomaticTax"];
      /**
       * Format: double
       * @description The reference point that aligns future [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle) dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals. The timestamp is in UTC format.
       */
      billing_cycle_anchor: number;
      /** @description The fixed values used to calculate the `billing_cycle_anchor`. */
      billing_cycle_anchor_config: components["schemas"]["stripe.Stripe.Subscription.BillingCycleAnchorConfig"] | null;
      /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
      billing_thresholds: components["schemas"]["stripe.Stripe.Subscription.BillingThresholds"] | null;
      /**
       * Format: double
       * @description A date in the future at which the subscription will automatically get canceled
       */
      cancel_at: number | null;
      /** @description Whether this subscription will (if `status=active`) or did (if `status=canceled`) cancel at the end of the current billing period. */
      cancel_at_period_end: boolean;
      /**
       * Format: double
       * @description If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
       */
      canceled_at: number | null;
      /** @description Details about why this subscription was cancelled */
      cancellation_details: components["schemas"]["stripe.Stripe.Subscription.CancellationDetails"] | null;
      /** @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. */
      collection_method: components["schemas"]["stripe.Stripe.Subscription.CollectionMethod"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /**
       * Format: double
       * @description End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
       */
      current_period_end: number;
      /**
       * Format: double
       * @description Start of the current period that the subscription has been invoiced for.
       */
      current_period_start: number;
      /** @description ID of the customer who owns the subscription. */
      customer: string | components["schemas"]["stripe.Stripe.Customer"] | components["schemas"]["stripe.Stripe.DeletedCustomer"];
      /**
       * Format: double
       * @description Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
       */
      days_until_due: number | null;
      /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
      default_payment_method: (string | components["schemas"]["stripe.Stripe.PaymentMethod"]) | null;
      /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
      default_source: (string | components["schemas"]["stripe.Stripe.CustomerSource"]) | null;
      /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
      default_tax_rates?: components["schemas"]["stripe.Stripe.TaxRate"][] | null;
      /** @description The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
      description: string | null;
      /** @description Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
      discount: components["schemas"]["stripe.Stripe.Discount"] | null;
      /** @description The discounts applied to the subscription. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount. */
      discounts: (string | components["schemas"]["stripe.Stripe.Discount"])[];
      /**
       * Format: double
       * @description If the subscription has ended, the date the subscription ended.
       */
      ended_at: number | null;
      invoice_settings: components["schemas"]["stripe.Stripe.Subscription.InvoiceSettings"];
      /** @description List of subscription items, each with an attached price. */
      items: components["schemas"]["stripe.Stripe.ApiList_stripe.Stripe.SubscriptionItem_"];
      /** @description The most recent invoice this subscription has generated. */
      latest_invoice: (string | components["schemas"]["stripe.Stripe.Invoice"]) | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /**
       * Format: double
       * @description Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
       */
      next_pending_invoice_item_invoice: number | null;
      /** @description The account (if any) the charge was made on behalf of for charges associated with this subscription. See the Connect documentation for details. */
      on_behalf_of: (string | components["schemas"]["stripe.Stripe.Account"]) | null;
      /** @description If specified, payment collection for this subscription will be paused. Note that the subscription status will be unchanged and will not be updated to `paused`. Learn more about [pausing collection](https://stripe.com/billing/subscriptions/pause-payment). */
      pause_collection: components["schemas"]["stripe.Stripe.Subscription.PauseCollection"] | null;
      /** @description Payment settings passed on to invoices created by the subscription. */
      payment_settings: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings"] | null;
      /** @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
      pending_invoice_item_interval: components["schemas"]["stripe.Stripe.Subscription.PendingInvoiceItemInterval"] | null;
      /** @description You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2). */
      pending_setup_intent: (string | components["schemas"]["stripe.Stripe.SetupIntent"]) | null;
      /** @description If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid. */
      pending_update: components["schemas"]["stripe.Stripe.Subscription.PendingUpdate"] | null;
      /** @description The schedule attached to the subscription */
      schedule: (string | components["schemas"]["stripe.Stripe.SubscriptionSchedule"]) | null;
      /**
       * Format: double
       * @description Date when the subscription was first created. The date might differ from the `created` date due to backdating.
       */
      start_date: number;
      /**
       * @description Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, `unpaid`, or `paused`.
       *
       * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated.
       *
       * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
       *
       * A subscription can only enter a `paused` status [when a trial ends without a payment method](https://stripe.com/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn't generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](https://stripe.com/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription's status unchanged.
       *
       * If subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings).
       *
       * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
       */
      status: components["schemas"]["stripe.Stripe.Subscription.Status"];
      /** @description ID of the test clock this subscription belongs to. */
      test_clock: (string | components["schemas"]["stripe.Stripe.TestHelpers.TestClock"]) | null;
      /** @description The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
      transfer_data: components["schemas"]["stripe.Stripe.Subscription.TransferData"] | null;
      /**
       * Format: double
       * @description If the subscription has a trial, the end of that trial.
       */
      trial_end: number | null;
      /** @description Settings related to subscription trials. */
      trial_settings: components["schemas"]["stripe.Stripe.Subscription.TrialSettings"] | null;
      /**
       * Format: double
       * @description If the subscription has a trial, the beginning of that trial.
       */
      trial_start: number | null;
    };
    /** @enum {string} */
    "stripe.Stripe.TestHelpers.TestClock.Status": "advancing" | "internal_failure" | "ready";
    "stripe.Stripe.TestHelpers.TestClock.StatusDetails.Advancing": {
      /**
       * Format: double
       * @description The `frozen_time` that the Test Clock is advancing towards.
       */
      target_frozen_time: number;
    };
    "stripe.Stripe.TestHelpers.TestClock.StatusDetails": {
      advancing?: components["schemas"]["stripe.Stripe.TestHelpers.TestClock.StatusDetails.Advancing"];
    };
    /**
     * @description A test clock enables deterministic control over objects in testmode. With a test clock, you can create
     * objects at a frozen time in the past or future, and advance to a specific future time to observe webhooks and state changes. After the clock advances,
     * you can either validate the current state of your scenario (and test your assumptions), change the current state of your scenario (and test more complex scenarios), or keep advancing forward in time.
     */
    "stripe.Stripe.TestHelpers.TestClock": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "test_helpers.test_clock";
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Always true for a deleted object */
      deleted?: unknown;
      /**
       * Format: double
       * @description Time at which this clock is scheduled to auto delete.
       */
      deletes_after: number;
      /**
       * Format: double
       * @description Time at which all objects belonging to this clock are frozen.
       */
      frozen_time: number;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description The custom name supplied at creation. */
      name: string | null;
      /** @description The status of the Test Clock. */
      status: components["schemas"]["stripe.Stripe.TestHelpers.TestClock.Status"];
      status_details: components["schemas"]["stripe.Stripe.TestHelpers.TestClock.StatusDetails"];
    };
    /**
     * @description Invoice Items represent the component lines of an [invoice](https://stripe.com/docs/api/invoices). An invoice item is added to an
     * invoice by creating or updating it with an `invoice` field, at which point it will be included as
     * [an invoice line item](https://stripe.com/docs/api/invoices/line_item) within
     * [invoice.lines](https://stripe.com/docs/api/invoices/object#invoice_object-lines).
     *
     * Invoice Items can be created before you are ready to actually send the invoice. This can be particularly useful when combined
     * with a [subscription](https://stripe.com/docs/api/subscriptions). Sometimes you want to add a charge or credit to a customer, but actually charge
     * or credit the customer's card only at the end of a regular billing cycle. This is useful for combining several charges
     * (to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.
     *
     * Related guides: [Integrate with the Invoicing API](https://stripe.com/docs/invoicing/integration), [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
     */
    "stripe.Stripe.InvoiceItem": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "invoiceitem";
      /**
       * Format: double
       * @description Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.
       */
      amount: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description The ID of the customer who will be billed when this invoice item is billed. */
      customer: string | components["schemas"]["stripe.Stripe.Customer"] | components["schemas"]["stripe.Stripe.DeletedCustomer"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      date: number;
      /** @description Always true for a deleted object */
      deleted?: unknown;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      description: string | null;
      /** @description If true, discounts will apply to this invoice item. Always false for prorations. */
      discountable: boolean;
      /** @description The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
      discounts: ((string | components["schemas"]["stripe.Stripe.Discount"])[]) | null;
      /** @description The ID of the invoice this invoice item belongs to. */
      invoice: (string | components["schemas"]["stripe.Stripe.Invoice"]) | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      period: components["schemas"]["stripe.Stripe.InvoiceItem.Period"];
      /** @description If the invoice item is a proration, the plan of the subscription that the proration was computed for. */
      plan: components["schemas"]["stripe.Stripe.Plan"] | null;
      /** @description The price of the invoice item. */
      price: components["schemas"]["stripe.Stripe.Price"] | null;
      /** @description Whether the invoice item was created automatically as a proration adjustment when the customer switched plans. */
      proration: boolean;
      /**
       * Format: double
       * @description Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
       */
      quantity: number;
      /** @description The subscription that this invoice item has been created for, if any. */
      subscription: (string | components["schemas"]["stripe.Stripe.Subscription"]) | null;
      /** @description The subscription item that this invoice item has been created for, if any. */
      subscription_item?: string;
      /** @description The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. */
      tax_rates: components["schemas"]["stripe.Stripe.TaxRate"][] | null;
      /** @description ID of the test clock this invoice item belongs to. */
      test_clock: (string | components["schemas"]["stripe.Stripe.TestHelpers.TestClock"]) | null;
      /**
       * Format: double
       * @description Unit amount (in the `currency` specified) of the invoice item.
       */
      unit_amount: number | null;
      /** @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
      unit_amount_decimal: string | null;
    };
    "stripe.Stripe.InvoiceLineItem.Period": {
      /**
       * Format: double
       * @description The end of the period, which must be greater than or equal to the start. This value is inclusive.
       */
      end: number;
      /**
       * Format: double
       * @description The start of the period. This value is inclusive.
       */
      start: number;
    };
    "stripe.Stripe.InvoiceLineItem.ProrationDetails.CreditedItems": {
      /** @description Invoice containing the credited invoice line items */
      invoice: string;
      /** @description Credited invoice line items */
      invoice_line_items: string[];
    };
    "stripe.Stripe.InvoiceLineItem.ProrationDetails": {
      /** @description For a credit proration `line_item`, the original debit line_items to which the credit proration applies. */
      credited_items: components["schemas"]["stripe.Stripe.InvoiceLineItem.ProrationDetails.CreditedItems"] | null;
    };
    "stripe.Stripe.SubscriptionItem.BillingThresholds": {
      /**
       * Format: double
       * @description Usage threshold that triggers the subscription to create an invoice
       */
      usage_gte: number | null;
    };
    /**
     * @description Subscription items allow you to create customer subscriptions with more than
     * one plan, making it easy to represent complex billing relationships.
     */
    "stripe.Stripe.SubscriptionItem": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "subscription_item";
      /** @description Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period */
      billing_thresholds: components["schemas"]["stripe.Stripe.SubscriptionItem.BillingThresholds"] | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Always true for a deleted object */
      deleted?: unknown;
      /** @description The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount. */
      discounts: (string | components["schemas"]["stripe.Stripe.Discount"])[];
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /**
       * @description You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.
       *
       * Plans define the base price, currency, and billing cycle for recurring purchases of products.
       * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.
       *
       * For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.
       *
       * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/products-prices/overview).
       */
      plan: components["schemas"]["stripe.Stripe.Plan"];
      /**
       * @description Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
       * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
       *
       * For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
       *
       * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
       */
      price: components["schemas"]["stripe.Stripe.Price"];
      /**
       * Format: double
       * @description The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.
       */
      quantity?: number;
      /** @description The `subscription` this `subscription_item` belongs to. */
      subscription: string;
      /** @description The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`. */
      tax_rates: components["schemas"]["stripe.Stripe.TaxRate"][] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.InvoiceLineItem.TaxAmount.TaxabilityReason": "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated";
    "stripe.Stripe.InvoiceLineItem.TaxAmount": {
      /**
       * Format: double
       * @description The amount, in cents (or local equivalent), of the tax.
       */
      amount: number;
      /** @description Whether this tax amount is inclusive or exclusive. */
      inclusive: boolean;
      /** @description The tax rate that was applied to get this tax amount. */
      tax_rate: string | components["schemas"]["stripe.Stripe.TaxRate"];
      /** @description The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported. */
      taxability_reason: components["schemas"]["stripe.Stripe.InvoiceLineItem.TaxAmount.TaxabilityReason"] | null;
      /**
       * Format: double
       * @description The amount on which tax is calculated, in cents (or local equivalent).
       */
      taxable_amount: number | null;
    };
    /** @enum {string} */
    "stripe.Stripe.InvoiceLineItem.Type": "invoiceitem" | "subscription";
    /**
     * @description Invoice Line Items represent the individual lines within an [invoice](https://stripe.com/docs/api/invoices) and only exist within the context of an invoice.
     *
     * Each line item is backed by either an [invoice item](https://stripe.com/docs/api/invoiceitems) or a [subscription item](https://stripe.com/docs/api/subscription_items).
     */
    "stripe.Stripe.InvoiceLineItem": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "line_item";
      /**
       * Format: double
       * @description The amount, in cents (or local equivalent).
       */
      amount: number;
      /**
       * Format: double
       * @description The integer amount in cents (or local equivalent) representing the amount for this line item, excluding all tax and discounts.
       */
      amount_excluding_tax: number | null;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      description: string | null;
      /** @description The amount of discount calculated per discount for this line item. */
      discount_amounts: components["schemas"]["stripe.Stripe.InvoiceLineItem.DiscountAmount"][] | null;
      /** @description If true, discounts will apply to this line item. Always false for prorations. */
      discountable: boolean;
      /** @description The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
      discounts: (string | components["schemas"]["stripe.Stripe.Discount"])[];
      /** @description The ID of the invoice that contains this line item. */
      invoice: string | null;
      /** @description The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any. */
      invoice_item?: string | components["schemas"]["stripe.Stripe.InvoiceItem"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription`, `metadata` reflects the current metadata from the subscription associated with the line item, unless the invoice line was directly updated with different metadata after creation. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      period: components["schemas"]["stripe.Stripe.InvoiceLineItem.Period"];
      /** @description The plan of the subscription, if the line item is a subscription or a proration. */
      plan: components["schemas"]["stripe.Stripe.Plan"] | null;
      /** @description The price of the line item. */
      price: components["schemas"]["stripe.Stripe.Price"] | null;
      /** @description Whether this is a proration. */
      proration: boolean;
      /** @description Additional details for proration line items */
      proration_details: components["schemas"]["stripe.Stripe.InvoiceLineItem.ProrationDetails"] | null;
      /**
       * Format: double
       * @description The quantity of the subscription, if the line item is a subscription or a proration.
       */
      quantity: number | null;
      /** @description The subscription that the invoice item pertains to, if any. */
      subscription: (string | components["schemas"]["stripe.Stripe.Subscription"]) | null;
      /** @description The subscription item that generated this line item. Left empty if the line item is not an explicit result of a subscription. */
      subscription_item?: string | components["schemas"]["stripe.Stripe.SubscriptionItem"];
      /** @description The amount of tax calculated per tax rate for this line item */
      tax_amounts: components["schemas"]["stripe.Stripe.InvoiceLineItem.TaxAmount"][];
      /** @description The tax rates which apply to the line item. */
      tax_rates: components["schemas"]["stripe.Stripe.TaxRate"][];
      /** @description A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`. */
      type: components["schemas"]["stripe.Stripe.InvoiceLineItem.Type"];
      /** @description The amount in cents (or local equivalent) representing the unit amount for this line item, excluding all tax and discounts. */
      unit_amount_excluding_tax: string | null;
    };
    /**
     * @description A container for paginated lists of objects.
     * The array of objects is on the `.data` property,
     * and `.has_more` indicates whether there are additional objects beyond the end of this list.
     *
     * Learn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)
     * or, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.
     */
    "stripe.Stripe.ApiList_stripe.Stripe.InvoiceLineItem_": {
      /** @enum {string} */
      object: "list";
      data: components["schemas"]["stripe.Stripe.InvoiceLineItem"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      has_more: boolean;
      /** @description The URL where this list can be accessed. */
      url: string;
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType": "business" | "personal";
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions": {
      /** @description Transaction type of the mandate. */
      transaction_type: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit.VerificationMethod": "automatic" | "instant" | "microdeposits";
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit": {
      mandate_options?: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions"];
      /** @description Bank account verification method. */
      verification_method?: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit.VerificationMethod"];
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Bancontact.PreferredLanguage": "de" | "en" | "fr" | "nl";
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Bancontact": {
      /** @description Preferred language of the Bancontact authorization page that the customer is redirected to. */
      preferred_language: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Bancontact.PreferredLanguage"];
    };
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Card.Installments": {
      /** @description Whether Installments are enabled for this Invoice. */
      enabled: boolean | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Card.RequestThreeDSecure": "any" | "automatic" | "challenge";
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Card": {
      installments?: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Card.Installments"];
      /** @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
      request_three_d_secure: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Card.RequestThreeDSecure"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer.Country": "BE" | "DE" | "ES" | "FR" | "IE" | "NL";
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer": {
      /** @description The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`. */
      country: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer.Country"];
    };
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer": {
      eu_bank_transfer?: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer"];
      /** @description The bank transfer type that can be used for funding. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`. */
      type: string | null;
    };
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance": {
      bank_transfer?: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer"];
      /**
       * @description The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
       * @enum {string|null}
       */
      funding_type: "bank_transfer" | null;
    };
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Konbini": Record<string, never>;
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.SepaDebit": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory": "checking" | "savings";
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters": {
      /** @description The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`. */
      account_subcategories?: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory"][];
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission": "balances" | "ownership" | "payment_method" | "transactions";
    /** @enum {string} */
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch": "balances" | "ownership" | "transactions";
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections": {
      filters?: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters"];
      /** @description The list of permissions to request. The `payment_method` permission must be included. */
      permissions?: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission"][];
      /** @description Data features requested to be retrieved upon account creation. */
      prefetch: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch"][] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.VerificationMethod": "automatic" | "instant" | "microdeposits";
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount": {
      financial_connections?: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections"];
      /** @description Bank account verification method. */
      verification_method?: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount.VerificationMethod"];
    };
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions": {
      /** @description If paying by `acss_debit`, this sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoice's PaymentIntent. */
      acss_debit: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.AcssDebit"] | null;
      /** @description If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice's PaymentIntent. */
      bancontact: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Bancontact"] | null;
      /** @description If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice's PaymentIntent. */
      card: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Card"] | null;
      /** @description If paying by `customer_balance`, this sub-hash contains details about the Bank transfer payment method options to pass to the invoice's PaymentIntent. */
      customer_balance: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.CustomerBalance"] | null;
      /** @description If paying by `konbini`, this sub-hash contains details about the Konbini payment method options to pass to the invoice's PaymentIntent. */
      konbini: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.Konbini"] | null;
      /** @description If paying by `sepa_debit`, this sub-hash contains details about the SEPA Direct Debit payment method options to pass to the invoice's PaymentIntent. */
      sepa_debit: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.SepaDebit"] | null;
      /** @description If paying by `us_bank_account`, this sub-hash contains details about the ACH direct debit payment method options to pass to the invoice's PaymentIntent. */
      us_bank_account: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions.UsBankAccount"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.PaymentSettings.PaymentMethodType": "ach_credit_transfer" | "ach_debit" | "acss_debit" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "konbini" | "link" | "multibanco" | "p24" | "paynow" | "paypal" | "promptpay" | "revolut_pay" | "sepa_credit_transfer" | "sepa_debit" | "sofort" | "swish" | "us_bank_account" | "wechat_pay";
    "stripe.Stripe.Invoice.PaymentSettings": {
      /** @description ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the invoice's default_payment_method or default_source, if set. */
      default_mandate: string | null;
      /** @description Payment-method-specific configuration to provide to the invoice's PaymentIntent. */
      payment_method_options: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodOptions"] | null;
      /** @description The list of payment method types (e.g. card) to provide to the invoice's PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice's default payment method, the subscription's default payment method, the customer's default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
      payment_method_types: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings.PaymentMethodType"][] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Quote.AutomaticTax.Liability.Type": "account" | "self";
    "stripe.Stripe.Quote.AutomaticTax.Liability": {
      /** @description The connected account being referenced when `type` is `account`. */
      account?: string | components["schemas"]["stripe.Stripe.Account"];
      /** @description Type of the account referenced. */
      type: components["schemas"]["stripe.Stripe.Quote.AutomaticTax.Liability.Type"];
    };
    /** @enum {string} */
    "stripe.Stripe.Quote.AutomaticTax.Status": "complete" | "failed" | "requires_location_inputs";
    "stripe.Stripe.Quote.AutomaticTax": {
      /** @description Automatically calculate taxes */
      enabled: boolean;
      /** @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
      liability: components["schemas"]["stripe.Stripe.Quote.AutomaticTax.Liability"] | null;
      /** @description The status of the most recent automated tax calculation for this quote. */
      status: components["schemas"]["stripe.Stripe.Quote.AutomaticTax.Status"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Quote.CollectionMethod": "charge_automatically" | "send_invoice";
    /** @enum {string} */
    "stripe.Stripe.Quote.Computed.Recurring.Interval": "day" | "month" | "week" | "year";
    "stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown.Discount": {
      /**
       * Format: double
       * @description The amount discounted.
       */
      amount: number;
      /**
       * @description A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
       * It contains information about when the discount began, when it will end, and what it is applied to.
       *
       * Related guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)
       */
      discount: components["schemas"]["stripe.Stripe.Discount"];
    };
    /** @enum {string} */
    "stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown.Tax.TaxabilityReason": "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated";
    "stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown.Tax": {
      /**
       * Format: double
       * @description Amount of tax applied for this rate.
       */
      amount: number;
      /**
       * @description Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
       *
       * Related guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)
       */
      rate: components["schemas"]["stripe.Stripe.TaxRate"];
      /** @description The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported. */
      taxability_reason: components["schemas"]["stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown.Tax.TaxabilityReason"] | null;
      /**
       * Format: double
       * @description The amount on which tax is calculated, in cents (or local equivalent).
       */
      taxable_amount: number | null;
    };
    "stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown": {
      /** @description The aggregated discounts. */
      discounts: components["schemas"]["stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown.Discount"][];
      /** @description The aggregated tax amounts by rate. */
      taxes: components["schemas"]["stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown.Tax"][];
    };
    "stripe.Stripe.Quote.Computed.Recurring.TotalDetails": {
      /**
       * Format: double
       * @description This is the sum of all the discounts.
       */
      amount_discount: number;
      /**
       * Format: double
       * @description This is the sum of all the shipping amounts.
       */
      amount_shipping: number | null;
      /**
       * Format: double
       * @description This is the sum of all the tax amounts.
       */
      amount_tax: number;
      breakdown?: components["schemas"]["stripe.Stripe.Quote.Computed.Recurring.TotalDetails.Breakdown"];
    };
    "stripe.Stripe.Quote.Computed.Recurring": {
      /**
       * Format: double
       * @description Total before any discounts or taxes are applied.
       */
      amount_subtotal: number;
      /**
       * Format: double
       * @description Total after discounts and taxes are applied.
       */
      amount_total: number;
      /** @description The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
      interval: components["schemas"]["stripe.Stripe.Quote.Computed.Recurring.Interval"];
      /**
       * Format: double
       * @description The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
       */
      interval_count: number;
      total_details: components["schemas"]["stripe.Stripe.Quote.Computed.Recurring.TotalDetails"];
    };
    "stripe.Stripe.LineItem.Discount": {
      /**
       * Format: double
       * @description The amount discounted.
       */
      amount: number;
      /**
       * @description A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
       * It contains information about when the discount began, when it will end, and what it is applied to.
       *
       * Related guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)
       */
      discount: components["schemas"]["stripe.Stripe.Discount"];
    };
    /** @enum {string} */
    "stripe.Stripe.LineItem.Tax.TaxabilityReason": "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated";
    "stripe.Stripe.LineItem.Tax": {
      /**
       * Format: double
       * @description Amount of tax applied for this rate.
       */
      amount: number;
      /**
       * @description Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
       *
       * Related guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)
       */
      rate: components["schemas"]["stripe.Stripe.TaxRate"];
      /** @description The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported. */
      taxability_reason: components["schemas"]["stripe.Stripe.LineItem.Tax.TaxabilityReason"] | null;
      /**
       * Format: double
       * @description The amount on which tax is calculated, in cents (or local equivalent).
       */
      taxable_amount: number | null;
    };
    /** @description A line item. */
    "stripe.Stripe.LineItem": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "item";
      /**
       * Format: double
       * @description Total discount amount applied. If no discounts were applied, defaults to 0.
       */
      amount_discount: number;
      /**
       * Format: double
       * @description Total before any discounts or taxes are applied.
       */
      amount_subtotal: number;
      /**
       * Format: double
       * @description Total tax amount applied. If no tax was applied, defaults to 0.
       */
      amount_tax: number;
      /**
       * Format: double
       * @description Total after discounts and taxes.
       */
      amount_total: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name. */
      description?: string;
      /** @description The discounts applied to the line item. */
      discounts?: components["schemas"]["stripe.Stripe.LineItem.Discount"][];
      /** @description The price used to generate the line item. */
      price: components["schemas"]["stripe.Stripe.Price"] | null;
      /**
       * Format: double
       * @description The quantity of products being purchased.
       */
      quantity: number | null;
      /** @description The taxes applied to the line item. */
      taxes?: components["schemas"]["stripe.Stripe.LineItem.Tax"][];
    };
    /**
     * @description A container for paginated lists of objects.
     * The array of objects is on the `.data` property,
     * and `.has_more` indicates whether there are additional objects beyond the end of this list.
     *
     * Learn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)
     * or, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.
     */
    "stripe.Stripe.ApiList_stripe.Stripe.LineItem_": {
      /** @enum {string} */
      object: "list";
      data: components["schemas"]["stripe.Stripe.LineItem"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      has_more: boolean;
      /** @description The URL where this list can be accessed. */
      url: string;
    };
    "stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown.Discount": {
      /**
       * Format: double
       * @description The amount discounted.
       */
      amount: number;
      /**
       * @description A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
       * It contains information about when the discount began, when it will end, and what it is applied to.
       *
       * Related guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)
       */
      discount: components["schemas"]["stripe.Stripe.Discount"];
    };
    /** @enum {string} */
    "stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown.Tax.TaxabilityReason": "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated";
    "stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown.Tax": {
      /**
       * Format: double
       * @description Amount of tax applied for this rate.
       */
      amount: number;
      /**
       * @description Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
       *
       * Related guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)
       */
      rate: components["schemas"]["stripe.Stripe.TaxRate"];
      /** @description The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported. */
      taxability_reason: components["schemas"]["stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown.Tax.TaxabilityReason"] | null;
      /**
       * Format: double
       * @description The amount on which tax is calculated, in cents (or local equivalent).
       */
      taxable_amount: number | null;
    };
    "stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown": {
      /** @description The aggregated discounts. */
      discounts: components["schemas"]["stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown.Discount"][];
      /** @description The aggregated tax amounts by rate. */
      taxes: components["schemas"]["stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown.Tax"][];
    };
    "stripe.Stripe.Quote.Computed.Upfront.TotalDetails": {
      /**
       * Format: double
       * @description This is the sum of all the discounts.
       */
      amount_discount: number;
      /**
       * Format: double
       * @description This is the sum of all the shipping amounts.
       */
      amount_shipping: number | null;
      /**
       * Format: double
       * @description This is the sum of all the tax amounts.
       */
      amount_tax: number;
      breakdown?: components["schemas"]["stripe.Stripe.Quote.Computed.Upfront.TotalDetails.Breakdown"];
    };
    "stripe.Stripe.Quote.Computed.Upfront": {
      /**
       * Format: double
       * @description Total before any discounts or taxes are applied.
       */
      amount_subtotal: number;
      /**
       * Format: double
       * @description Total after discounts and taxes are applied.
       */
      amount_total: number;
      /** @description The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice. */
      line_items?: components["schemas"]["stripe.Stripe.ApiList_stripe.Stripe.LineItem_"];
      total_details: components["schemas"]["stripe.Stripe.Quote.Computed.Upfront.TotalDetails"];
    };
    "stripe.Stripe.Quote.Computed": {
      /** @description The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices. */
      recurring: components["schemas"]["stripe.Stripe.Quote.Computed.Recurring"] | null;
      upfront: components["schemas"]["stripe.Stripe.Quote.Computed.Upfront"];
    };
    /**
     * @description A Quote is a way to model prices that you'd like to provide to a customer.
     * Once accepted, it will automatically create an invoice, subscription or subscription schedule.
     */
    "stripe.Stripe.Quote": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "quote";
      /**
       * Format: double
       * @description Total before any discounts or taxes are applied.
       */
      amount_subtotal: number;
      /**
       * Format: double
       * @description Total after discounts and taxes are applied.
       */
      amount_total: number;
      /** @description ID of the Connect Application that created the quote. */
      application: (string | components["schemas"]["stripe.Stripe.Application"] | components["schemas"]["stripe.Stripe.DeletedApplication"]) | null;
      /**
       * Format: double
       * @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote.
       */
      application_fee_amount: number | null;
      /**
       * Format: double
       * @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote.
       */
      application_fee_percent: number | null;
      automatic_tax: components["schemas"]["stripe.Stripe.Quote.AutomaticTax"];
      /** @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`. */
      collection_method: components["schemas"]["stripe.Stripe.Quote.CollectionMethod"];
      computed: components["schemas"]["stripe.Stripe.Quote.Computed"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string | null;
      /** @description The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed. */
      customer: (string | components["schemas"]["stripe.Stripe.Customer"] | components["schemas"]["stripe.Stripe.DeletedCustomer"]) | null;
      /** @description The tax rates applied to this quote. */
      default_tax_rates?: (string | components["schemas"]["stripe.Stripe.TaxRate"])[];
      /** @description A description that will be displayed on the quote PDF. */
      description: string | null;
      /** @description The discounts applied to this quote. */
      discounts: (string | components["schemas"]["stripe.Stripe.Discount"])[];
      /**
       * Format: double
       * @description The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
       */
      expires_at: number;
      /** @description A footer that will be displayed on the quote PDF. */
      footer: string | null;
      /** @description Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details. */
      from_quote: components["schemas"]["stripe.Stripe.Quote.FromQuote"] | null;
      /** @description A header that will be displayed on the quote PDF. */
      header: string | null;
      /** @description The invoice that was created from this quote. */
      invoice: (string | components["schemas"]["stripe.Stripe.Invoice"] | components["schemas"]["stripe.Stripe.DeletedInvoice"]) | null;
      invoice_settings: components["schemas"]["stripe.Stripe.Quote.InvoiceSettings"];
      /** @description A list of items the customer is being quoted for. */
      line_items?: components["schemas"]["stripe.Stripe.ApiList_stripe.Stripe.LineItem_"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize). */
      number: string | null;
      /** @description The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details. */
      on_behalf_of: (string | components["schemas"]["stripe.Stripe.Account"]) | null;
      /** @description The status of the quote. */
      status: components["schemas"]["stripe.Stripe.Quote.Status"];
      status_transitions: components["schemas"]["stripe.Stripe.Quote.StatusTransitions"];
      /** @description The subscription that was created or updated from this quote. */
      subscription: (string | components["schemas"]["stripe.Stripe.Subscription"]) | null;
      subscription_data: components["schemas"]["stripe.Stripe.Quote.SubscriptionData"];
      /** @description The subscription schedule that was created or updated from this quote. */
      subscription_schedule: (string | components["schemas"]["stripe.Stripe.SubscriptionSchedule"]) | null;
      /** @description ID of the test clock this quote belongs to. */
      test_clock: (string | components["schemas"]["stripe.Stripe.TestHelpers.TestClock"]) | null;
      total_details: components["schemas"]["stripe.Stripe.Quote.TotalDetails"];
      /** @description The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices. */
      transfer_data: components["schemas"]["stripe.Stripe.Quote.TransferData"] | null;
    };
    "stripe.Stripe.Quote.FromQuote": {
      /** @description Whether this quote is a revision of a different quote. */
      is_revision: boolean;
      /** @description The quote that was cloned. */
      quote: string | components["schemas"]["stripe.Stripe.Quote"];
    };
    /** @description The DeletedInvoice object. */
    "stripe.Stripe.DeletedInvoice": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "invoice";
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      deleted: true;
    };
    /** @enum {string} */
    "stripe.Stripe.Quote.InvoiceSettings.Issuer.Type": "account" | "self";
    "stripe.Stripe.Quote.InvoiceSettings.Issuer": {
      /** @description The connected account being referenced when `type` is `account`. */
      account?: string | components["schemas"]["stripe.Stripe.Account"];
      /** @description Type of the account referenced. */
      type: components["schemas"]["stripe.Stripe.Quote.InvoiceSettings.Issuer.Type"];
    };
    "stripe.Stripe.Quote.InvoiceSettings": {
      /**
       * Format: double
       * @description Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`.
       */
      days_until_due: number | null;
      issuer: components["schemas"]["stripe.Stripe.Quote.InvoiceSettings.Issuer"];
    };
    /** @enum {string} */
    "stripe.Stripe.Quote.Status": "accepted" | "canceled" | "draft" | "open";
    "stripe.Stripe.Quote.StatusTransitions": {
      /**
       * Format: double
       * @description The time that the quote was accepted. Measured in seconds since Unix epoch.
       */
      accepted_at: number | null;
      /**
       * Format: double
       * @description The time that the quote was canceled. Measured in seconds since Unix epoch.
       */
      canceled_at: number | null;
      /**
       * Format: double
       * @description The time that the quote was finalized. Measured in seconds since Unix epoch.
       */
      finalized_at: number | null;
    };
    "stripe.Stripe.Quote.SubscriptionData": {
      /** @description The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
      description: string | null;
      /**
       * Format: double
       * @description When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.
       */
      effective_date: number | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on the subscription or subscription schedule when the quote is accepted. If a recurring price is included in `line_items`, this field will be passed to the resulting subscription's `metadata` field. If `subscription_data.effective_date` is used, this field will be passed to the resulting subscription schedule's `phases.metadata` field. Unlike object-level metadata, this field is declarative. Updates will clear prior values. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      /**
       * Format: double
       * @description Integer representing the number of trial period days before the customer is charged for the first time.
       */
      trial_period_days: number | null;
    };
    "stripe.Stripe.SubscriptionSchedule.CurrentPhase": {
      /**
       * Format: double
       * @description The end of this phase of the subscription schedule.
       */
      end_date: number;
      /**
       * Format: double
       * @description The start of this phase of the subscription schedule.
       */
      start_date: number;
    };
    /** @enum {string} */
    "stripe.Stripe.SubscriptionSchedule.DefaultSettings.AutomaticTax.Liability.Type": "account" | "self";
    "stripe.Stripe.SubscriptionSchedule.DefaultSettings.AutomaticTax.Liability": {
      /** @description The connected account being referenced when `type` is `account`. */
      account?: string | components["schemas"]["stripe.Stripe.Account"];
      /** @description Type of the account referenced. */
      type: components["schemas"]["stripe.Stripe.SubscriptionSchedule.DefaultSettings.AutomaticTax.Liability.Type"];
    };
    "stripe.Stripe.SubscriptionSchedule.DefaultSettings.AutomaticTax": {
      /** @description Whether Stripe automatically computes tax on invoices created during this phase. */
      enabled: boolean;
      /** @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
      liability: components["schemas"]["stripe.Stripe.SubscriptionSchedule.DefaultSettings.AutomaticTax.Liability"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.SubscriptionSchedule.DefaultSettings.BillingCycleAnchor": "automatic" | "phase_start";
    "stripe.Stripe.SubscriptionSchedule.DefaultSettings.BillingThresholds": {
      /**
       * Format: double
       * @description Monetary threshold that triggers the subscription to create an invoice
       */
      amount_gte: number | null;
      /** @description Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`. */
      reset_billing_cycle_anchor: boolean | null;
    };
    /** @enum {string} */
    "stripe.Stripe.SubscriptionSchedule.DefaultSettings.CollectionMethod": "charge_automatically" | "send_invoice";
    /** @enum {string} */
    "stripe.Stripe.SubscriptionSchedule.DefaultSettings.InvoiceSettings.Issuer.Type": "account" | "self";
    "stripe.Stripe.SubscriptionSchedule.DefaultSettings.InvoiceSettings.Issuer": {
      /** @description The connected account being referenced when `type` is `account`. */
      account?: string | components["schemas"]["stripe.Stripe.Account"];
      /** @description Type of the account referenced. */
      type: components["schemas"]["stripe.Stripe.SubscriptionSchedule.DefaultSettings.InvoiceSettings.Issuer.Type"];
    };
    "stripe.Stripe.SubscriptionSchedule.DefaultSettings.InvoiceSettings": {
      /** @description The account tax IDs associated with the subscription schedule. Will be set on invoices generated by the subscription schedule. */
      account_tax_ids: ((string | components["schemas"]["stripe.Stripe.TaxId"] | components["schemas"]["stripe.Stripe.DeletedTaxId"])[]) | null;
      /**
       * Format: double
       * @description Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
       */
      days_until_due: number | null;
      issuer: components["schemas"]["stripe.Stripe.SubscriptionSchedule.DefaultSettings.InvoiceSettings.Issuer"];
    };
    "stripe.Stripe.SubscriptionSchedule.DefaultSettings.TransferData": {
      /**
       * Format: double
       * @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
       */
      amount_percent: number | null;
      /** @description The account where funds from the payment will be transferred to upon payment success. */
      destination: string | components["schemas"]["stripe.Stripe.Account"];
    };
    "stripe.Stripe.SubscriptionSchedule.DefaultSettings": {
      /**
       * Format: double
       * @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule.
       */
      application_fee_percent: number | null;
      automatic_tax?: components["schemas"]["stripe.Stripe.SubscriptionSchedule.DefaultSettings.AutomaticTax"];
      /** @description Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
      billing_cycle_anchor: components["schemas"]["stripe.Stripe.SubscriptionSchedule.DefaultSettings.BillingCycleAnchor"];
      /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
      billing_thresholds: components["schemas"]["stripe.Stripe.SubscriptionSchedule.DefaultSettings.BillingThresholds"] | null;
      /** @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. */
      collection_method: components["schemas"]["stripe.Stripe.SubscriptionSchedule.DefaultSettings.CollectionMethod"] | null;
      /** @description ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
      default_payment_method: (string | components["schemas"]["stripe.Stripe.PaymentMethod"]) | null;
      /** @description Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
      description: string | null;
      invoice_settings: components["schemas"]["stripe.Stripe.SubscriptionSchedule.DefaultSettings.InvoiceSettings"];
      /** @description The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details. */
      on_behalf_of: (string | components["schemas"]["stripe.Stripe.Account"]) | null;
      /** @description The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
      transfer_data: components["schemas"]["stripe.Stripe.SubscriptionSchedule.DefaultSettings.TransferData"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.SubscriptionSchedule.EndBehavior": "cancel" | "none" | "release" | "renew";
    "stripe.Stripe.SubscriptionSchedule.Phase.AddInvoiceItem.Discount": {
      /** @description ID of the coupon to create a new discount for. */
      coupon: (string | components["schemas"]["stripe.Stripe.Coupon"]) | null;
      /** @description ID of an existing discount on the object (or one of its ancestors) to reuse. */
      discount: (string | components["schemas"]["stripe.Stripe.Discount"]) | null;
      /** @description ID of the promotion code to create a new discount for. */
      promotion_code: (string | components["schemas"]["stripe.Stripe.PromotionCode"]) | null;
    };
    /** @description The DeletedPrice object. */
    "stripe.Stripe.DeletedPrice": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "price";
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      deleted: true;
    };
    "stripe.Stripe.SubscriptionSchedule.Phase.AddInvoiceItem": {
      /** @description The stackable discounts that will be applied to the item. */
      discounts: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.AddInvoiceItem.Discount"][];
      /** @description ID of the price used to generate the invoice item. */
      price: string | components["schemas"]["stripe.Stripe.Price"] | components["schemas"]["stripe.Stripe.DeletedPrice"];
      /**
       * Format: double
       * @description The quantity of the invoice item.
       */
      quantity: number | null;
      /** @description The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item. */
      tax_rates?: components["schemas"]["stripe.Stripe.TaxRate"][] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.SubscriptionSchedule.Phase.AutomaticTax.Liability.Type": "account" | "self";
    "stripe.Stripe.SubscriptionSchedule.Phase.AutomaticTax.Liability": {
      /** @description The connected account being referenced when `type` is `account`. */
      account?: string | components["schemas"]["stripe.Stripe.Account"];
      /** @description Type of the account referenced. */
      type: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.AutomaticTax.Liability.Type"];
    };
    "stripe.Stripe.SubscriptionSchedule.Phase.AutomaticTax": {
      /** @description Whether Stripe automatically computes tax on invoices created during this phase. */
      enabled: boolean;
      /** @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
      liability: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.AutomaticTax.Liability"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.SubscriptionSchedule.Phase.BillingCycleAnchor": "automatic" | "phase_start";
    "stripe.Stripe.SubscriptionSchedule.Phase.BillingThresholds": {
      /**
       * Format: double
       * @description Monetary threshold that triggers the subscription to create an invoice
       */
      amount_gte: number | null;
      /** @description Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`. */
      reset_billing_cycle_anchor: boolean | null;
    };
    /** @enum {string} */
    "stripe.Stripe.SubscriptionSchedule.Phase.CollectionMethod": "charge_automatically" | "send_invoice";
    /** @description The DeletedCoupon object. */
    "stripe.Stripe.DeletedCoupon": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "coupon";
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      deleted: true;
    };
    "stripe.Stripe.SubscriptionSchedule.Phase.Discount": {
      /** @description ID of the coupon to create a new discount for. */
      coupon: (string | components["schemas"]["stripe.Stripe.Coupon"]) | null;
      /** @description ID of an existing discount on the object (or one of its ancestors) to reuse. */
      discount: (string | components["schemas"]["stripe.Stripe.Discount"]) | null;
      /** @description ID of the promotion code to create a new discount for. */
      promotion_code: (string | components["schemas"]["stripe.Stripe.PromotionCode"]) | null;
    };
    /** @enum {string} */
    "stripe.Stripe.SubscriptionSchedule.Phase.InvoiceSettings.Issuer.Type": "account" | "self";
    "stripe.Stripe.SubscriptionSchedule.Phase.InvoiceSettings.Issuer": {
      /** @description The connected account being referenced when `type` is `account`. */
      account?: string | components["schemas"]["stripe.Stripe.Account"];
      /** @description Type of the account referenced. */
      type: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.InvoiceSettings.Issuer.Type"];
    };
    "stripe.Stripe.SubscriptionSchedule.Phase.InvoiceSettings": {
      /** @description The account tax IDs associated with this phase of the subscription schedule. Will be set on invoices generated by this phase of the subscription schedule. */
      account_tax_ids: ((string | components["schemas"]["stripe.Stripe.TaxId"] | components["schemas"]["stripe.Stripe.DeletedTaxId"])[]) | null;
      /**
       * Format: double
       * @description Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
       */
      days_until_due: number | null;
      /** @description The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
      issuer: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.InvoiceSettings.Issuer"] | null;
    };
    "stripe.Stripe.SubscriptionSchedule.Phase.Item.BillingThresholds": {
      /**
       * Format: double
       * @description Usage threshold that triggers the subscription to create an invoice
       */
      usage_gte: number | null;
    };
    "stripe.Stripe.SubscriptionSchedule.Phase.Item.Discount": {
      /** @description ID of the coupon to create a new discount for. */
      coupon: (string | components["schemas"]["stripe.Stripe.Coupon"]) | null;
      /** @description ID of an existing discount on the object (or one of its ancestors) to reuse. */
      discount: (string | components["schemas"]["stripe.Stripe.Discount"]) | null;
      /** @description ID of the promotion code to create a new discount for. */
      promotion_code: (string | components["schemas"]["stripe.Stripe.PromotionCode"]) | null;
    };
    /** @description The DeletedPlan object. */
    "stripe.Stripe.DeletedPlan": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "plan";
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      deleted: true;
    };
    "stripe.Stripe.SubscriptionSchedule.Phase.Item": {
      /** @description Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period */
      billing_thresholds: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.Item.BillingThresholds"] | null;
      /** @description The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount. */
      discounts: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.Item.Discount"][];
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an item. Metadata on this item will update the underlying subscription item's `metadata` when the phase is entered. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      /** @description ID of the plan to which the customer should be subscribed. */
      plan: string | components["schemas"]["stripe.Stripe.Plan"] | components["schemas"]["stripe.Stripe.DeletedPlan"];
      /** @description ID of the price to which the customer should be subscribed. */
      price: string | components["schemas"]["stripe.Stripe.Price"] | components["schemas"]["stripe.Stripe.DeletedPrice"];
      /**
       * Format: double
       * @description Quantity of the plan to which the customer should be subscribed.
       */
      quantity?: number;
      /** @description The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`. */
      tax_rates?: components["schemas"]["stripe.Stripe.TaxRate"][] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.SubscriptionSchedule.Phase.ProrationBehavior": "always_invoice" | "create_prorations" | "none";
    "stripe.Stripe.SubscriptionSchedule.Phase.TransferData": {
      /**
       * Format: double
       * @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
       */
      amount_percent: number | null;
      /** @description The account where funds from the payment will be transferred to upon payment success. */
      destination: string | components["schemas"]["stripe.Stripe.Account"];
    };
    "stripe.Stripe.SubscriptionSchedule.Phase": {
      /** @description A list of prices and quantities that will generate invoice items appended to the next invoice for this phase. */
      add_invoice_items: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.AddInvoiceItem"][];
      /**
       * Format: double
       * @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule.
       */
      application_fee_percent: number | null;
      automatic_tax?: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.AutomaticTax"];
      /** @description Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
      billing_cycle_anchor: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.BillingCycleAnchor"] | null;
      /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
      billing_thresholds: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.BillingThresholds"] | null;
      /** @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. */
      collection_method: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.CollectionMethod"] | null;
      /** @description ID of the coupon to use during this phase of the subscription schedule. */
      coupon: (string | components["schemas"]["stripe.Stripe.Coupon"] | components["schemas"]["stripe.Stripe.DeletedCoupon"]) | null;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
      default_payment_method: (string | components["schemas"]["stripe.Stripe.PaymentMethod"]) | null;
      /** @description The default tax rates to apply to the subscription during this phase of the subscription schedule. */
      default_tax_rates?: components["schemas"]["stripe.Stripe.TaxRate"][] | null;
      /** @description Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
      description: string | null;
      /** @description The stackable discounts that will be applied to the subscription on this phase. Subscription item discounts are applied before subscription discounts. */
      discounts: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.Discount"][];
      /**
       * Format: double
       * @description The end of this phase of the subscription schedule.
       */
      end_date: number;
      /** @description The invoice settings applicable during this phase. */
      invoice_settings: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.InvoiceSettings"] | null;
      /** @description Subscription items to configure the subscription to during this phase of the subscription schedule. */
      items: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.Item"][];
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule's phase will update the underlying subscription's `metadata` when the phase is entered. Updating the underlying subscription's `metadata` directly will not affect the current phase's `metadata`. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      /** @description The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details. */
      on_behalf_of: (string | components["schemas"]["stripe.Stripe.Account"]) | null;
      /** @description If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`. */
      proration_behavior: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.ProrationBehavior"];
      /**
       * Format: double
       * @description The start of this phase of the subscription schedule.
       */
      start_date: number;
      /** @description The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
      transfer_data: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase.TransferData"] | null;
      /**
       * Format: double
       * @description When the trial ends within the phase.
       */
      trial_end: number | null;
    };
    /** @enum {string} */
    "stripe.Stripe.SubscriptionSchedule.Status": "active" | "canceled" | "completed" | "not_started" | "released";
    /**
     * @description A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
     *
     * Related guide: [Subscription schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules)
     */
    "stripe.Stripe.SubscriptionSchedule": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "subscription_schedule";
      /** @description ID of the Connect Application that created the schedule. */
      application: (string | components["schemas"]["stripe.Stripe.Application"] | components["schemas"]["stripe.Stripe.DeletedApplication"]) | null;
      /**
       * Format: double
       * @description Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
       */
      canceled_at: number | null;
      /**
       * Format: double
       * @description Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
       */
      completed_at: number | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`. */
      current_phase: components["schemas"]["stripe.Stripe.SubscriptionSchedule.CurrentPhase"] | null;
      /** @description ID of the customer who owns the subscription schedule. */
      customer: string | components["schemas"]["stripe.Stripe.Customer"] | components["schemas"]["stripe.Stripe.DeletedCustomer"];
      default_settings: components["schemas"]["stripe.Stripe.SubscriptionSchedule.DefaultSettings"];
      /** @description Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription. */
      end_behavior: components["schemas"]["stripe.Stripe.SubscriptionSchedule.EndBehavior"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
      /** @description Configuration for the subscription schedule's phases. */
      phases: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Phase"][];
      /**
       * Format: double
       * @description Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
       */
      released_at: number | null;
      /** @description ID of the subscription once managed by the subscription schedule (if it is released). */
      released_subscription: string | null;
      /** @description The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules). */
      status: components["schemas"]["stripe.Stripe.SubscriptionSchedule.Status"];
      /** @description ID of the subscription managed by the subscription schedule. */
      subscription: (string | components["schemas"]["stripe.Stripe.Subscription"]) | null;
      /** @description ID of the test clock this subscription schedule belongs to. */
      test_clock: (string | components["schemas"]["stripe.Stripe.TestHelpers.TestClock"]) | null;
    };
    "stripe.Stripe.Quote.TotalDetails.Breakdown.Discount": {
      /**
       * Format: double
       * @description The amount discounted.
       */
      amount: number;
      /**
       * @description A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
       * It contains information about when the discount began, when it will end, and what it is applied to.
       *
       * Related guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)
       */
      discount: components["schemas"]["stripe.Stripe.Discount"];
    };
    /** @enum {string} */
    "stripe.Stripe.Quote.TotalDetails.Breakdown.Tax.TaxabilityReason": "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated";
    "stripe.Stripe.Quote.TotalDetails.Breakdown.Tax": {
      /**
       * Format: double
       * @description Amount of tax applied for this rate.
       */
      amount: number;
      /**
       * @description Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
       *
       * Related guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)
       */
      rate: components["schemas"]["stripe.Stripe.TaxRate"];
      /** @description The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported. */
      taxability_reason: components["schemas"]["stripe.Stripe.Quote.TotalDetails.Breakdown.Tax.TaxabilityReason"] | null;
      /**
       * Format: double
       * @description The amount on which tax is calculated, in cents (or local equivalent).
       */
      taxable_amount: number | null;
    };
    "stripe.Stripe.Quote.TotalDetails.Breakdown": {
      /** @description The aggregated discounts. */
      discounts: components["schemas"]["stripe.Stripe.Quote.TotalDetails.Breakdown.Discount"][];
      /** @description The aggregated tax amounts by rate. */
      taxes: components["schemas"]["stripe.Stripe.Quote.TotalDetails.Breakdown.Tax"][];
    };
    "stripe.Stripe.Quote.TotalDetails": {
      /**
       * Format: double
       * @description This is the sum of all the discounts.
       */
      amount_discount: number;
      /**
       * Format: double
       * @description This is the sum of all the shipping amounts.
       */
      amount_shipping: number | null;
      /**
       * Format: double
       * @description This is the sum of all the tax amounts.
       */
      amount_tax: number;
      breakdown?: components["schemas"]["stripe.Stripe.Quote.TotalDetails.Breakdown"];
    };
    "stripe.Stripe.Quote.TransferData": {
      /**
       * Format: double
       * @description The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
       */
      amount: number | null;
      /**
       * Format: double
       * @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount will be transferred to the destination.
       */
      amount_percent: number | null;
      /** @description The account where funds from the payment will be transferred to upon payment success. */
      destination: string | components["schemas"]["stripe.Stripe.Account"];
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.Rendering.Pdf.PageSize": "a4" | "auto" | "letter";
    "stripe.Stripe.Invoice.Rendering.Pdf": {
      /** @description Page size of invoice pdf. Options include a4, letter, and auto. If set to auto, page size will be switched to a4 or letter based on customer locale. */
      page_size: components["schemas"]["stripe.Stripe.Invoice.Rendering.Pdf.PageSize"] | null;
    };
    "stripe.Stripe.Invoice.Rendering": {
      /** @description How line-item prices and amounts will be displayed with respect to tax on invoice PDFs. */
      amount_tax_display: string | null;
      /** @description Invoice pdf rendering options */
      pdf: components["schemas"]["stripe.Stripe.Invoice.Rendering.Pdf"] | null;
      /** @description ID of the rendering template that the invoice is formatted by. */
      template: string | null;
      /**
       * Format: double
       * @description Version of the rendering template that the invoice is using.
       */
      template_version: number | null;
    };
    /** @enum {string} */
    "stripe.Stripe.ShippingRate.DeliveryEstimate.Maximum.Unit": "business_day" | "day" | "hour" | "month" | "week";
    "stripe.Stripe.ShippingRate.DeliveryEstimate.Maximum": {
      /** @description A unit of time. */
      unit: components["schemas"]["stripe.Stripe.ShippingRate.DeliveryEstimate.Maximum.Unit"];
      /**
       * Format: double
       * @description Must be greater than 0.
       */
      value: number;
    };
    /** @enum {string} */
    "stripe.Stripe.ShippingRate.DeliveryEstimate.Minimum.Unit": "business_day" | "day" | "hour" | "month" | "week";
    "stripe.Stripe.ShippingRate.DeliveryEstimate.Minimum": {
      /** @description A unit of time. */
      unit: components["schemas"]["stripe.Stripe.ShippingRate.DeliveryEstimate.Minimum.Unit"];
      /**
       * Format: double
       * @description Must be greater than 0.
       */
      value: number;
    };
    "stripe.Stripe.ShippingRate.DeliveryEstimate": {
      /** @description The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite. */
      maximum: components["schemas"]["stripe.Stripe.ShippingRate.DeliveryEstimate.Maximum"] | null;
      /** @description The lower bound of the estimated range. If empty, represents no lower bound. */
      minimum: components["schemas"]["stripe.Stripe.ShippingRate.DeliveryEstimate.Minimum"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.ShippingRate.FixedAmount.CurrencyOptions.TaxBehavior": "exclusive" | "inclusive" | "unspecified";
    "stripe.Stripe.ShippingRate.FixedAmount.CurrencyOptions": {
      /**
       * Format: double
       * @description A non-negative integer in cents representing how much to charge.
       */
      amount: number;
      /** @description Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. */
      tax_behavior: components["schemas"]["stripe.Stripe.ShippingRate.FixedAmount.CurrencyOptions.TaxBehavior"];
    };
    "stripe.Stripe.ShippingRate.FixedAmount": {
      /**
       * Format: double
       * @description A non-negative integer in cents representing how much to charge.
       */
      amount: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description Shipping rates defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
      currency_options?: {
        [key: string]: components["schemas"]["stripe.Stripe.ShippingRate.FixedAmount.CurrencyOptions"];
      };
    };
    /** @enum {string} */
    "stripe.Stripe.ShippingRate.TaxBehavior": "exclusive" | "inclusive" | "unspecified";
    /**
     * @description Shipping rates describe the price of shipping presented to your customers and
     * applied to a purchase. For more information, see [Charge for shipping](https://stripe.com/docs/payments/during-payment/charge-shipping).
     */
    "stripe.Stripe.ShippingRate": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "shipping_rate";
      /** @description Whether the shipping rate can be used for new purchases. Defaults to `true`. */
      active: boolean;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions. */
      delivery_estimate: components["schemas"]["stripe.Stripe.ShippingRate.DeliveryEstimate"] | null;
      /** @description The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions. */
      display_name: string | null;
      fixed_amount?: components["schemas"]["stripe.Stripe.ShippingRate.FixedAmount"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. */
      tax_behavior: components["schemas"]["stripe.Stripe.ShippingRate.TaxBehavior"] | null;
      /** @description A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`. */
      tax_code: (string | components["schemas"]["stripe.Stripe.TaxCode"]) | null;
      /**
       * @description The type of calculation to use on the shipping rate.
       * @enum {string}
       */
      type: "fixed_amount";
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.ShippingCost.Tax.TaxabilityReason": "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated";
    "stripe.Stripe.Invoice.ShippingCost.Tax": {
      /**
       * Format: double
       * @description Amount of tax applied for this rate.
       */
      amount: number;
      /**
       * @description Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
       *
       * Related guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)
       */
      rate: components["schemas"]["stripe.Stripe.TaxRate"];
      /** @description The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported. */
      taxability_reason: components["schemas"]["stripe.Stripe.Invoice.ShippingCost.Tax.TaxabilityReason"] | null;
      /**
       * Format: double
       * @description The amount on which tax is calculated, in cents (or local equivalent).
       */
      taxable_amount: number | null;
    };
    "stripe.Stripe.Invoice.ShippingCost": {
      /**
       * Format: double
       * @description Total shipping cost before any taxes are applied.
       */
      amount_subtotal: number;
      /**
       * Format: double
       * @description Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0.
       */
      amount_tax: number;
      /**
       * Format: double
       * @description Total shipping cost after taxes are applied.
       */
      amount_total: number;
      /** @description The ID of the ShippingRate for this invoice. */
      shipping_rate: (string | components["schemas"]["stripe.Stripe.ShippingRate"]) | null;
      /** @description The taxes applied to the shipping rate. */
      taxes?: components["schemas"]["stripe.Stripe.Invoice.ShippingCost.Tax"][];
    };
    "stripe.Stripe.Invoice.ShippingDetails": {
      address?: components["schemas"]["stripe.Stripe.Address"];
      /** @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
      carrier?: string | null;
      /** @description Recipient name. */
      name?: string;
      /** @description Recipient phone (including extension). */
      phone?: string | null;
      /** @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
      tracking_number?: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.Status": "draft" | "open" | "paid" | "uncollectible" | "void";
    "stripe.Stripe.Invoice.StatusTransitions": {
      /**
       * Format: double
       * @description The time that the invoice draft was finalized.
       */
      finalized_at: number | null;
      /**
       * Format: double
       * @description The time that the invoice was marked uncollectible.
       */
      marked_uncollectible_at: number | null;
      /**
       * Format: double
       * @description The time that the invoice was paid.
       */
      paid_at: number | null;
      /**
       * Format: double
       * @description The time that the invoice was voided.
       */
      voided_at: number | null;
    };
    "stripe.Stripe.Invoice.SubscriptionDetails": {
      /**
       * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) defined as subscription metadata when an invoice is created. Becomes an immutable snapshot of the subscription metadata at the time of invoice finalization.
       *  *Note: This attribute is populated only for invoices created on or after June 29, 2023.*
       */
      metadata: components["schemas"]["stripe.Stripe.Metadata"] | null;
    };
    "stripe.Stripe.Invoice.ThresholdReason.ItemReason": {
      /** @description The IDs of the line items that triggered the threshold invoice. */
      line_item_ids: string[];
      /**
       * Format: double
       * @description The quantity threshold boundary that applied to the given line item.
       */
      usage_gte: number;
    };
    "stripe.Stripe.Invoice.ThresholdReason": {
      /**
       * Format: double
       * @description The total invoice amount threshold boundary if it triggered the threshold invoice.
       */
      amount_gte: number | null;
      /** @description Indicates which line items triggered a threshold invoice. */
      item_reasons: components["schemas"]["stripe.Stripe.Invoice.ThresholdReason.ItemReason"][];
    };
    "stripe.Stripe.Invoice.TotalDiscountAmount": {
      /**
       * Format: double
       * @description The amount, in cents (or local equivalent), of the discount.
       */
      amount: number;
      /** @description The discount that was applied to get this discount amount. */
      discount: string | components["schemas"]["stripe.Stripe.Discount"] | components["schemas"]["stripe.Stripe.DeletedDiscount"];
    };
    /** @enum {string} */
    "stripe.Stripe.Invoice.TotalTaxAmount.TaxabilityReason": "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated";
    "stripe.Stripe.Invoice.TotalTaxAmount": {
      /**
       * Format: double
       * @description The amount, in cents (or local equivalent), of the tax.
       */
      amount: number;
      /** @description Whether this tax amount is inclusive or exclusive. */
      inclusive: boolean;
      /** @description The tax rate that was applied to get this tax amount. */
      tax_rate: string | components["schemas"]["stripe.Stripe.TaxRate"];
      /** @description The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported. */
      taxability_reason: components["schemas"]["stripe.Stripe.Invoice.TotalTaxAmount.TaxabilityReason"] | null;
      /**
       * Format: double
       * @description The amount on which tax is calculated, in cents (or local equivalent).
       */
      taxable_amount: number | null;
    };
    "stripe.Stripe.Invoice.TransferData": {
      /**
       * Format: double
       * @description The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
       */
      amount: number | null;
      /** @description The account where funds from the payment will be transferred to upon payment success. */
      destination: string | components["schemas"]["stripe.Stripe.Account"];
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.LastPaymentError.Code": "account_closed" | "account_country_invalid_address" | "account_error_country_change_requires_additional_steps" | "account_information_mismatch" | "account_invalid" | "account_number_invalid" | "acss_debit_session_incomplete" | "alipay_upgrade_required" | "amount_too_large" | "amount_too_small" | "api_key_expired" | "application_fees_not_allowed" | "authentication_required" | "balance_insufficient" | "balance_invalid_parameter" | "bank_account_bad_routing_numbers" | "bank_account_declined" | "bank_account_exists" | "bank_account_restricted" | "bank_account_unusable" | "bank_account_unverified" | "bank_account_verification_failed" | "billing_invalid_mandate" | "bitcoin_upgrade_required" | "capture_charge_authorization_expired" | "capture_unauthorized_payment" | "card_decline_rate_limit_exceeded" | "card_declined" | "cardholder_phone_number_required" | "charge_already_captured" | "charge_already_refunded" | "charge_disputed" | "charge_exceeds_source_limit" | "charge_exceeds_transaction_limit" | "charge_expired_for_capture" | "charge_invalid_parameter" | "charge_not_refundable" | "clearing_code_unsupported" | "country_code_invalid" | "country_unsupported" | "coupon_expired" | "customer_max_payment_methods" | "customer_max_subscriptions" | "customer_tax_location_invalid" | "debit_not_authorized" | "email_invalid" | "expired_card" | "financial_connections_account_inactive" | "financial_connections_no_successful_transaction_refresh" | "forwarding_api_inactive" | "forwarding_api_invalid_parameter" | "forwarding_api_upstream_connection_error" | "forwarding_api_upstream_connection_timeout" | "idempotency_key_in_use" | "incorrect_address" | "incorrect_cvc" | "incorrect_number" | "incorrect_zip" | "instant_payouts_config_disabled" | "instant_payouts_currency_disabled" | "instant_payouts_limit_exceeded" | "instant_payouts_unsupported" | "insufficient_funds" | "intent_invalid_state" | "intent_verification_method_missing" | "invalid_card_type" | "invalid_characters" | "invalid_charge_amount" | "invalid_cvc" | "invalid_expiry_month" | "invalid_expiry_year" | "invalid_mandate_reference_prefix_format" | "invalid_number" | "invalid_source_usage" | "invalid_tax_location" | "invoice_no_customer_line_items" | "invoice_no_payment_method_types" | "invoice_no_subscription_line_items" | "invoice_not_editable" | "invoice_on_behalf_of_not_editable" | "invoice_payment_intent_requires_action" | "invoice_upcoming_none" | "livemode_mismatch" | "lock_timeout" | "missing" | "no_account" | "not_allowed_on_standard_account" | "out_of_inventory" | "ownership_declaration_not_allowed" | "parameter_invalid_empty" | "parameter_invalid_integer" | "parameter_invalid_string_blank" | "parameter_invalid_string_empty" | "parameter_missing" | "parameter_unknown" | "parameters_exclusive" | "payment_intent_action_required" | "payment_intent_authentication_failure" | "payment_intent_incompatible_payment_method" | "payment_intent_invalid_parameter" | "payment_intent_konbini_rejected_confirmation_number" | "payment_intent_mandate_invalid" | "payment_intent_payment_attempt_expired" | "payment_intent_payment_attempt_failed" | "payment_intent_unexpected_state" | "payment_method_bank_account_already_verified" | "payment_method_bank_account_blocked" | "payment_method_billing_details_address_missing" | "payment_method_configuration_failures" | "payment_method_currency_mismatch" | "payment_method_customer_decline" | "payment_method_invalid_parameter" | "payment_method_invalid_parameter_testmode" | "payment_method_microdeposit_failed" | "payment_method_microdeposit_verification_amounts_invalid" | "payment_method_microdeposit_verification_amounts_mismatch" | "payment_method_microdeposit_verification_attempts_exceeded" | "payment_method_microdeposit_verification_descriptor_code_mismatch" | "payment_method_microdeposit_verification_timeout" | "payment_method_not_available" | "payment_method_provider_decline" | "payment_method_provider_timeout" | "payment_method_unactivated" | "payment_method_unexpected_state" | "payment_method_unsupported_type" | "payout_reconciliation_not_ready" | "payouts_limit_exceeded" | "payouts_not_allowed" | "platform_account_required" | "platform_api_key_expired" | "postal_code_invalid" | "processing_error" | "product_inactive" | "progressive_onboarding_limit_exceeded" | "rate_limit" | "refer_to_customer" | "refund_disputed_payment" | "resource_already_exists" | "resource_missing" | "return_intent_already_processed" | "routing_number_invalid" | "secret_key_required" | "sepa_unsupported_account" | "setup_attempt_failed" | "setup_intent_authentication_failure" | "setup_intent_invalid_parameter" | "setup_intent_mandate_invalid" | "setup_intent_setup_attempt_expired" | "setup_intent_unexpected_state" | "shipping_address_invalid" | "shipping_calculation_failed" | "sku_inactive" | "state_unsupported" | "status_transition_invalid" | "stripe_tax_inactive" | "tax_id_invalid" | "taxes_calculation_failed" | "terminal_location_country_unsupported" | "terminal_reader_busy" | "terminal_reader_hardware_fault" | "terminal_reader_invalid_location_for_activation" | "terminal_reader_invalid_location_for_payment" | "terminal_reader_offline" | "terminal_reader_timeout" | "testmode_charges_only" | "tls_version_unsupported" | "token_already_used" | "token_card_network_invalid" | "token_in_use" | "transfer_source_balance_parameters_mismatch" | "transfers_not_allowed" | "url_invalid";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.LastPaymentError.Type": "api_error" | "card_error" | "idempotency_error" | "invalid_request_error";
    "stripe.Stripe.PaymentIntent.LastPaymentError": {
      /** @description For card errors, the ID of the failed charge. */
      charge?: string;
      /** @description For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
      code?: components["schemas"]["stripe.Stripe.PaymentIntent.LastPaymentError.Code"];
      /** @description For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
      decline_code?: string;
      /** @description A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
      doc_url?: string;
      /** @description A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
      message?: string;
      /** @description If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
      param?: string;
      /**
       * @description A PaymentIntent guides you through the process of collecting a payment from your customer.
       * We recommend that you create exactly one PaymentIntent for each order or
       * customer session in your system. You can reference the PaymentIntent later to
       * see the history of payment attempts for a particular session.
       *
       * A PaymentIntent transitions through
       * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
       * throughout its lifetime as it interfaces with Stripe.js to perform
       * authentication flows and ultimately creates at most one successful charge.
       *
       * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
       */
      payment_intent?: components["schemas"]["stripe.Stripe.PaymentIntent"];
      /**
       * @description PaymentMethod objects represent your customer's payment instruments.
       * You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
       * Customer objects to store instrument details for future payments.
       *
       * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
       */
      payment_method?: components["schemas"]["stripe.Stripe.PaymentMethod"];
      /** @description If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors. */
      payment_method_type?: string;
      /** @description A URL to the request log entry in your dashboard. */
      request_log_url?: string;
      /**
       * @description A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
       * For example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
       * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
       *
       * Create a SetupIntent when you're ready to collect your customer's payment credentials.
       * Don't maintain long-lived, unconfirmed SetupIntents because they might not be valid.
       * The SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides
       * you through the setup process.
       *
       * Successful SetupIntents result in payment credentials that are optimized for future payments.
       * For example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through
       * [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection
       * to streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).
       * If you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),
       * it automatically attaches the resulting payment method to that Customer after successful setup.
       * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
       * PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.
       *
       * By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.
       *
       * Related guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)
       */
      setup_intent?: components["schemas"]["stripe.Stripe.SetupIntent"];
      source?: components["schemas"]["stripe.Stripe.CustomerSource"];
      /** @description The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error` */
      type: components["schemas"]["stripe.Stripe.PaymentIntent.LastPaymentError.Type"];
    };
    "stripe.Stripe.PaymentIntent.NextAction.AlipayHandleRedirect": {
      /** @description The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App. */
      native_data: string | null;
      /** @description The native URL you must redirect your customer to in order to authenticate the payment in an iOS App. */
      native_url: string | null;
      /** @description If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
      return_url: string | null;
      /** @description The URL you must redirect your customer to in order to authenticate the payment. */
      url: string | null;
    };
    "stripe.Stripe.PaymentIntent.NextAction.BoletoDisplayDetails": {
      /**
       * Format: double
       * @description The timestamp after which the boleto expires.
       */
      expires_at: number | null;
      /** @description The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher. */
      hosted_voucher_url: string | null;
      /** @description The boleto number. */
      number: string | null;
      /** @description The URL to the downloadable boleto voucher PDF. */
      pdf: string | null;
    };
    "stripe.Stripe.PaymentIntent.NextAction.CardAwaitNotification": {
      /**
       * Format: double
       * @description The time that payment will be attempted. If customer approval is required, they need to provide approval before this time.
       */
      charge_attempt_at: number | null;
      /** @description For payments greater than INR 15000, the customer must provide explicit approval of the payment with their bank. For payments of lower amount, no customer action is required. */
      customer_approval_required: boolean | null;
    };
    "stripe.Stripe.PaymentIntent.NextAction.CashappHandleRedirectOrDisplayQrCode.QrCode": {
      /**
       * Format: double
       * @description The date (unix timestamp) when the QR code expires.
       */
      expires_at: number;
      /** @description The image_url_png string used to render QR code */
      image_url_png: string;
      /** @description The image_url_svg string used to render QR code */
      image_url_svg: string;
    };
    "stripe.Stripe.PaymentIntent.NextAction.CashappHandleRedirectOrDisplayQrCode": {
      /** @description The URL to the hosted Cash App Pay instructions page, which allows customers to view the QR code, and supports QR code refreshing on expiration. */
      hosted_instructions_url: string;
      /** @description The url for mobile redirect based auth */
      mobile_auth_url: string;
      qr_code: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.CashappHandleRedirectOrDisplayQrCode.QrCode"];
    };
    "stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Aba": {
      /** @description The ABA account number */
      account_number: string;
      /** @description The bank name */
      bank_name: string;
      /** @description The ABA routing number */
      routing_number: string;
    };
    "stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Iban": {
      /** @description The name of the person or business that owns the bank account */
      account_holder_name: string;
      /** @description The BIC/SWIFT code of the account. */
      bic: string;
      /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
      country: string;
      /** @description The IBAN of the account. */
      iban: string;
    };
    "stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.SortCode": {
      /** @description The name of the person or business that owns the bank account */
      account_holder_name: string;
      /** @description The account number */
      account_number: string;
      /** @description The six-digit sort code */
      sort_code: string;
    };
    "stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Spei": {
      /** @description The three-digit bank code */
      bank_code: string;
      /** @description The short banking institution name */
      bank_name: string;
      /** @description The CLABE number */
      clabe: string;
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.SupportedNetwork": "ach" | "bacs" | "domestic_wire_us" | "fps" | "sepa" | "spei" | "swift" | "zengin";
    "stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Swift": {
      /** @description The account number */
      account_number: string;
      /** @description The bank name */
      bank_name: string;
      /** @description The SWIFT code */
      swift_code: string;
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Type": "aba" | "iban" | "sort_code" | "spei" | "swift" | "zengin";
    "stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Zengin": {
      /** @description The account holder name */
      account_holder_name: string | null;
      /** @description The account number */
      account_number: string | null;
      /** @description The bank account type. In Japan, this can only be `futsu` or `toza`. */
      account_type: string | null;
      /** @description The bank code of the account */
      bank_code: string | null;
      /** @description The bank name of the account */
      bank_name: string | null;
      /** @description The branch code of the account */
      branch_code: string | null;
      /** @description The branch name of the account */
      branch_name: string | null;
    };
    "stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress": {
      /** @description ABA Records contain U.S. bank account details per the ABA format. */
      aba?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Aba"];
      /** @description Iban Records contain E.U. bank account details per the SEPA format. */
      iban?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Iban"];
      /** @description Sort Code Records contain U.K. bank account details per the sort code format. */
      sort_code?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.SortCode"];
      /** @description SPEI Records contain Mexico bank account details per the SPEI format. */
      spei?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Spei"];
      /** @description The payment networks supported by this FinancialAddress */
      supported_networks?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.SupportedNetwork"][];
      /** @description SWIFT Records contain U.S. bank account details per the SWIFT format. */
      swift?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Swift"];
      /** @description The type of financial address */
      type: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Type"];
      /** @description Zengin Records contain Japan bank account details per the Zengin format. */
      zengin?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress.Zengin"];
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.Type": "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
    "stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions": {
      /**
       * Format: double
       * @description The remaining amount that needs to be transferred to complete the payment.
       */
      amount_remaining: number | null;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string | null;
      /** @description A list of financial addresses that can be used to fund the customer balance */
      financial_addresses?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.FinancialAddress"][];
      /** @description A link to a hosted page that guides your customer through completing the transfer. */
      hosted_instructions_url: string | null;
      /** @description A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer. */
      reference: string | null;
      /** @description Type of bank transfer */
      type: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions.Type"];
    };
    "stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Familymart": {
      /** @description The confirmation number. */
      confirmation_number?: string;
      /** @description The payment code. */
      payment_code: string;
    };
    "stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Lawson": {
      /** @description The confirmation number. */
      confirmation_number?: string;
      /** @description The payment code. */
      payment_code: string;
    };
    "stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Ministop": {
      /** @description The confirmation number. */
      confirmation_number?: string;
      /** @description The payment code. */
      payment_code: string;
    };
    "stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Seicomart": {
      /** @description The confirmation number. */
      confirmation_number?: string;
      /** @description The payment code. */
      payment_code: string;
    };
    "stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores": {
      /** @description FamilyMart instruction details. */
      familymart: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Familymart"] | null;
      /** @description Lawson instruction details. */
      lawson: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Lawson"] | null;
      /** @description Ministop instruction details. */
      ministop: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Ministop"] | null;
      /** @description Seicomart instruction details. */
      seicomart: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores.Seicomart"] | null;
    };
    "stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails": {
      /**
       * Format: double
       * @description The timestamp at which the pending Konbini payment expires.
       */
      expires_at: number;
      /** @description The URL for the Konbini payment instructions page, which allows customers to view and print a Konbini voucher. */
      hosted_voucher_url: string | null;
      stores: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails.Stores"];
    };
    "stripe.Stripe.PaymentIntent.NextAction.MultibancoDisplayDetails": {
      /** @description Entity number associated with this Multibanco payment. */
      entity: string | null;
      /**
       * Format: double
       * @description The timestamp at which the Multibanco voucher expires.
       */
      expires_at: number | null;
      /** @description The URL for the hosted Multibanco voucher page, which allows customers to view a Multibanco voucher. */
      hosted_voucher_url: string | null;
      /** @description Reference number associated with this Multibanco payment. */
      reference: string | null;
    };
    "stripe.Stripe.PaymentIntent.NextAction.OxxoDisplayDetails": {
      /**
       * Format: double
       * @description The timestamp after which the OXXO voucher expires.
       */
      expires_after: number | null;
      /** @description The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher. */
      hosted_voucher_url: string | null;
      /** @description OXXO reference number. */
      number: string | null;
    };
    "stripe.Stripe.PaymentIntent.NextAction.PaynowDisplayQrCode": {
      /** @description The raw data string used to generate QR code, it should be used together with QR code library. */
      data: string;
      /** @description The URL to the hosted PayNow instructions page, which allows customers to view the PayNow QR code. */
      hosted_instructions_url: string | null;
      /** @description The image_url_png string used to render QR code */
      image_url_png: string;
      /** @description The image_url_svg string used to render QR code */
      image_url_svg: string;
    };
    "stripe.Stripe.PaymentIntent.NextAction.PixDisplayQrCode": {
      /** @description The raw data string used to generate QR code, it should be used together with QR code library. */
      data?: string;
      /**
       * Format: double
       * @description The date (unix timestamp) when the PIX expires.
       */
      expires_at?: number;
      /** @description The URL to the hosted pix instructions page, which allows customers to view the pix QR code. */
      hosted_instructions_url?: string;
      /** @description The image_url_png string used to render png QR code */
      image_url_png?: string;
      /** @description The image_url_svg string used to render svg QR code */
      image_url_svg?: string;
    };
    "stripe.Stripe.PaymentIntent.NextAction.PromptpayDisplayQrCode": {
      /** @description The raw data string used to generate QR code, it should be used together with QR code library. */
      data: string;
      /** @description The URL to the hosted PromptPay instructions page, which allows customers to view the PromptPay QR code. */
      hosted_instructions_url: string;
      /** @description The PNG path used to render the QR code, can be used as the source in an HTML img tag */
      image_url_png: string;
      /** @description The SVG path used to render the QR code, can be used as the source in an HTML img tag */
      image_url_svg: string;
    };
    "stripe.Stripe.PaymentIntent.NextAction.RedirectToUrl": {
      /** @description If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
      return_url: string | null;
      /** @description The URL you must redirect your customer to in order to authenticate the payment. */
      url: string | null;
    };
    "stripe.Stripe.PaymentIntent.NextAction.SwishHandleRedirectOrDisplayQrCode.QrCode": {
      /** @description The raw data string used to generate QR code, it should be used together with QR code library. */
      data: string;
      /** @description The image_url_png string used to render QR code */
      image_url_png: string;
      /** @description The image_url_svg string used to render QR code */
      image_url_svg: string;
    };
    "stripe.Stripe.PaymentIntent.NextAction.SwishHandleRedirectOrDisplayQrCode": {
      /** @description The URL to the hosted Swish instructions page, which allows customers to view the QR code. */
      hosted_instructions_url: string;
      /** @description The url for mobile redirect based auth (for internal use only and not typically available in standard API requests). */
      mobile_auth_url: string;
      qr_code: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.SwishHandleRedirectOrDisplayQrCode.QrCode"];
    };
    "stripe.Stripe.PaymentIntent.NextAction.UseStripeSdk": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.NextAction.VerifyWithMicrodeposits.MicrodepositType": "amounts" | "descriptor_code";
    "stripe.Stripe.PaymentIntent.NextAction.VerifyWithMicrodeposits": {
      /**
       * Format: double
       * @description The timestamp when the microdeposits are expected to land.
       */
      arrival_date: number;
      /** @description The URL for the hosted verification page, which allows customers to verify their bank account. */
      hosted_verification_url: string;
      /** @description The type of the microdeposit sent to the customer. Used to distinguish between different verification methods. */
      microdeposit_type: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.VerifyWithMicrodeposits.MicrodepositType"] | null;
    };
    "stripe.Stripe.PaymentIntent.NextAction.WechatPayDisplayQrCode": {
      /** @description The data being used to generate QR code */
      data: string;
      /** @description The URL to the hosted WeChat Pay instructions page, which allows customers to view the WeChat Pay QR code. */
      hosted_instructions_url: string;
      /** @description The base64 image data for a pre-generated QR code */
      image_data_url: string;
      /** @description The image_url_png string used to render QR code */
      image_url_png: string;
      /** @description The image_url_svg string used to render QR code */
      image_url_svg: string;
    };
    "stripe.Stripe.PaymentIntent.NextAction.WechatPayRedirectToAndroidApp": {
      /** @description app_id is the APP ID registered on WeChat open platform */
      app_id: string;
      /** @description nonce_str is a random string */
      nonce_str: string;
      /** @description package is static value */
      package: string;
      /** @description an unique merchant ID assigned by WeChat Pay */
      partner_id: string;
      /** @description an unique trading ID assigned by WeChat Pay */
      prepay_id: string;
      /** @description A signature */
      sign: string;
      /** @description Specifies the current time in epoch format */
      timestamp: string;
    };
    "stripe.Stripe.PaymentIntent.NextAction.WechatPayRedirectToIosApp": {
      /** @description An universal link that redirect to WeChat Pay app */
      native_url: string;
    };
    "stripe.Stripe.PaymentIntent.NextAction": {
      alipay_handle_redirect?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.AlipayHandleRedirect"];
      boleto_display_details?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.BoletoDisplayDetails"];
      card_await_notification?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.CardAwaitNotification"];
      cashapp_handle_redirect_or_display_qr_code?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.CashappHandleRedirectOrDisplayQrCode"];
      display_bank_transfer_instructions?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.DisplayBankTransferInstructions"];
      konbini_display_details?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.KonbiniDisplayDetails"];
      multibanco_display_details?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.MultibancoDisplayDetails"];
      oxxo_display_details?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.OxxoDisplayDetails"];
      paynow_display_qr_code?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.PaynowDisplayQrCode"];
      pix_display_qr_code?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.PixDisplayQrCode"];
      promptpay_display_qr_code?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.PromptpayDisplayQrCode"];
      redirect_to_url?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.RedirectToUrl"];
      swish_handle_redirect_or_display_qr_code?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.SwishHandleRedirectOrDisplayQrCode"];
      /** @description Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`. */
      type: string;
      /** @description When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
      use_stripe_sdk?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.UseStripeSdk"];
      verify_with_microdeposits?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.VerifyWithMicrodeposits"];
      wechat_pay_display_qr_code?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.WechatPayDisplayQrCode"];
      wechat_pay_redirect_to_android_app?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.WechatPayRedirectToAndroidApp"];
      wechat_pay_redirect_to_ios_app?: components["schemas"]["stripe.Stripe.PaymentIntent.NextAction.WechatPayRedirectToIosApp"];
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodConfigurationDetails": {
      /** @description ID of the payment method configuration used. */
      id: string;
      /** @description ID of the parent payment method configuration used. */
      parent: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.MandateOptions.PaymentSchedule": "combined" | "interval" | "sporadic";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType": "business" | "personal";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.MandateOptions": {
      /** @description A URL for custom mandate text */
      custom_mandate_url?: string;
      /** @description Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
      interval_description: string | null;
      /** @description Payment schedule for the mandate. */
      payment_schedule: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.MandateOptions.PaymentSchedule"] | null;
      /** @description Transaction type of the mandate. */
      transaction_type: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.SetupFutureUsage": "none" | "off_session" | "on_session";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.VerificationMethod": "automatic" | "instant" | "microdeposits";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit": {
      mandate_options?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.MandateOptions"];
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.SetupFutureUsage"];
      /** @description Bank account verification method. */
      verification_method?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit.VerificationMethod"];
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Affirm": {
      /**
       * @description Controls when the funds will be captured from the customer's account.
       * @enum {string}
       */
      capture_method?: "manual";
      /** @description Preferred language of the Affirm authorization page that the customer is redirected to. */
      preferred_locale?: string;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.AfterpayClearpay": {
      /**
       * @description Controls when the funds will be captured from the customer's account.
       * @enum {string}
       */
      capture_method?: "manual";
      /**
       * @description An internal identifier or reference that this payment corresponds to. You must limit the identifier to 128 characters, and it can only contain letters, numbers, underscores, backslashes, and dashes.
       * This field differs from the statement descriptor and item name.
       */
      reference: string | null;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Alipay.SetupFutureUsage": "none" | "off_session";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Alipay": {
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Alipay.SetupFutureUsage"];
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.AmazonPay.SetupFutureUsage": "none" | "off_session";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.AmazonPay": {
      /**
       * @description Controls when the funds will be captured from the customer's account.
       * @enum {string}
       */
      capture_method?: "manual";
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.AmazonPay.SetupFutureUsage"];
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.AuBecsDebit.SetupFutureUsage": "none" | "off_session" | "on_session";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.AuBecsDebit": {
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.AuBecsDebit.SetupFutureUsage"];
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.BacsDebit.MandateOptions": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.BacsDebit.SetupFutureUsage": "none" | "off_session" | "on_session";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.BacsDebit": {
      mandate_options?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.BacsDebit.MandateOptions"];
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.BacsDebit.SetupFutureUsage"];
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Bancontact.PreferredLanguage": "de" | "en" | "fr" | "nl";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Bancontact.SetupFutureUsage": "none" | "off_session";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Bancontact": {
      /** @description Preferred language of the Bancontact authorization page that the customer is redirected to. */
      preferred_language: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Bancontact.PreferredLanguage"];
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Bancontact.SetupFutureUsage"];
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Blik": {
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Boleto.SetupFutureUsage": "none" | "off_session" | "on_session";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Boleto": {
      /**
       * Format: double
       * @description The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.
       */
      expires_after_days: number;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Boleto.SetupFutureUsage"];
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Installments.AvailablePlan": {
      /**
       * Format: double
       * @description For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card.
       */
      count: number | null;
      /**
       * @description For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
       * One of `month`.
       * @enum {string|null}
       */
      interval: "month" | null;
      /**
       * @description Type of installment plan, one of `fixed_count`.
       * @enum {string}
       */
      type: "fixed_count";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Installments.Plan": {
      /**
       * Format: double
       * @description For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card.
       */
      count: number | null;
      /**
       * @description For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
       * One of `month`.
       * @enum {string|null}
       */
      interval: "month" | null;
      /**
       * @description Type of installment plan, one of `fixed_count`.
       * @enum {string}
       */
      type: "fixed_count";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Installments": {
      /** @description Installment plans that may be selected for this PaymentIntent. */
      available_plans: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Installments.AvailablePlan"][] | null;
      /** @description Whether Installments are enabled for this PaymentIntent. */
      enabled: boolean;
      /** @description Installment plan selected for this PaymentIntent. */
      plan: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Installments.Plan"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.MandateOptions.AmountType": "fixed" | "maximum";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.MandateOptions.Interval": "day" | "month" | "sporadic" | "week" | "year";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.MandateOptions": {
      /**
       * Format: double
       * @description Amount to be charged for future payments.
       */
      amount: number;
      /** @description One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param. */
      amount_type: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.MandateOptions.AmountType"];
      /** @description A description of the mandate or subscription that is meant to be displayed to the customer. */
      description: string | null;
      /**
       * Format: double
       * @description End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
       */
      end_date: number | null;
      /** @description Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`. */
      interval: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.MandateOptions.Interval"];
      /**
       * Format: double
       * @description The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.
       */
      interval_count: number | null;
      /** @description Unique identifier for the mandate or subscription. */
      reference: string;
      /**
       * Format: double
       * @description Start date of the mandate or subscription. Start date should not be lesser than yesterday.
       */
      start_date: number;
      /** @description Specifies the type of mandates supported. Possible values are `india`. */
      supported_types: "india"[] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Network": "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestExtendedAuthorization": "if_available" | "never";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestIncrementalAuthorization": "if_available" | "never";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestMulticapture": "if_available" | "never";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestOvercapture": "if_available" | "never";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestThreeDSecure": "any" | "automatic" | "challenge";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.SetupFutureUsage": "none" | "off_session" | "on_session";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card": {
      /**
       * @description Controls when the funds will be captured from the customer's account.
       * @enum {string}
       */
      capture_method?: "manual";
      /**
       * @description Installment details for this payment (Mexico only).
       *
       * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
       */
      installments: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Installments"] | null;
      /** @description Configuration options for setting up an eMandate for cards issued in India. */
      mandate_options: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.MandateOptions"] | null;
      /** @description Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time. */
      network: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.Network"] | null;
      /** @description Request ability to [capture beyond the standard authorization validity window](https://stripe.com/docs/payments/extended-authorization) for this PaymentIntent. */
      request_extended_authorization?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestExtendedAuthorization"];
      /** @description Request ability to [increment the authorization](https://stripe.com/docs/payments/incremental-authorization) for this PaymentIntent. */
      request_incremental_authorization?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestIncrementalAuthorization"];
      /** @description Request ability to make [multiple captures](https://stripe.com/docs/payments/multicapture) for this PaymentIntent. */
      request_multicapture?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestMulticapture"];
      /** @description Request ability to [overcapture](https://stripe.com/docs/payments/overcapture) for this PaymentIntent. */
      request_overcapture?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestOvercapture"];
      /** @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
      request_three_d_secure: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.RequestThreeDSecure"] | null;
      /** @description When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter). */
      require_cvc_recollection?: boolean;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card.SetupFutureUsage"];
      /** @description Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that's set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters. */
      statement_descriptor_suffix_kana?: string;
      /** @description Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that's set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters. */
      statement_descriptor_suffix_kanji?: string;
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.CardPresent.Routing.RequestedPriority": "domestic" | "international";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.CardPresent.Routing": {
      /** @description Requested routing priority */
      requested_priority: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.CardPresent.Routing.RequestedPriority"] | null;
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.CardPresent": {
      /** @description Request ability to capture this payment beyond the standard [authorization validity window](https://stripe.com/docs/terminal/features/extended-authorizations#authorization-validity) */
      request_extended_authorization: boolean | null;
      /** @description Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support. */
      request_incremental_authorization_support: boolean | null;
      routing?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.CardPresent.Routing"];
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Cashapp.SetupFutureUsage": "none" | "off_session" | "on_session";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Cashapp": {
      /**
       * @description Controls when the funds will be captured from the customer's account.
       * @enum {string}
       */
      capture_method?: "manual";
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Cashapp.SetupFutureUsage"];
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer.Country": "BE" | "DE" | "ES" | "FR" | "IE" | "NL";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer": {
      /** @description The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`. */
      country: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer.Country"];
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.RequestedAddressType": "aba" | "iban" | "sepa" | "sort_code" | "spei" | "swift" | "zengin";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.Type": "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer": {
      eu_bank_transfer?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer"];
      /**
       * @description List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.
       *
       * Permitted values include: `sort_code`, `zengin`, `iban`, or `spei`.
       */
      requested_address_types?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.RequestedAddressType"][];
      /** @description The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`. */
      type: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer.Type"] | null;
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance": {
      bank_transfer?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance.BankTransfer"];
      /**
       * @description The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
       * @enum {string|null}
       */
      funding_type: "bank_transfer" | null;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Eps": {
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Fpx": {
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Giropay": {
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Grabpay": {
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Ideal.SetupFutureUsage": "none" | "off_session";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Ideal": {
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Ideal.SetupFutureUsage"];
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.InteracPresent": Record<string, never>;
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Klarna": {
      /**
       * @description Controls when the funds will be captured from the customer's account.
       * @enum {string}
       */
      capture_method?: "manual";
      /** @description Preferred locale of the Klarna checkout page that the customer is redirected to. */
      preferred_locale: string | null;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Konbini": {
      /** @description An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores. */
      confirmation_number: string | null;
      /**
       * Format: double
       * @description The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.
       */
      expires_after_days: number | null;
      /**
       * Format: double
       * @description The timestamp at which the Konbini payment instructions will expire. Only one of `expires_after_days` or `expires_at` may be set.
       */
      expires_at: number | null;
      /** @description A product descriptor of up to 22 characters, which will appear to customers at the convenience store. */
      product_description: string | null;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Link.SetupFutureUsage": "none" | "off_session";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Link": {
      /**
       * @description Controls when the funds will be captured from the customer's account.
       * @enum {string}
       */
      capture_method?: "manual";
      /**
       * @deprecated
       * @description [Deprecated] This is a legacy parameter that no longer has any function.
       */
      persistent_token: string | null;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Link.SetupFutureUsage"];
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Mobilepay": {
      /**
       * @description Controls when the funds will be captured from the customer's account.
       * @enum {string}
       */
      capture_method?: "manual";
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Multibanco": {
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Oxxo": {
      /**
       * Format: double
       * @description The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
       */
      expires_after_days: number;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.P24": {
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Paynow": {
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Paypal.SetupFutureUsage": "none" | "off_session";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Paypal": {
      /**
       * @description Controls when the funds will be captured from the customer's account.
       * @enum {string}
       */
      capture_method?: "manual";
      /** @description Preferred locale of the PayPal checkout page that the customer is redirected to. */
      preferred_locale: string | null;
      /** @description A reference of the PayPal transaction visible to customer which is mapped to PayPal's invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID. */
      reference: string | null;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Paypal.SetupFutureUsage"];
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Pix": {
      /**
       * Format: double
       * @description The number of seconds (between 10 and 1209600) after which Pix payment will expire.
       */
      expires_after_seconds: number | null;
      /**
       * Format: double
       * @description The timestamp at which the Pix expires.
       */
      expires_at: number | null;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Promptpay": {
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.RevolutPay.SetupFutureUsage": "none" | "off_session";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.RevolutPay": {
      /**
       * @description Controls when the funds will be captured from the customer's account.
       * @enum {string}
       */
      capture_method?: "manual";
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.RevolutPay.SetupFutureUsage"];
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.SepaDebit.MandateOptions": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.SepaDebit.SetupFutureUsage": "none" | "off_session" | "on_session";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.SepaDebit": {
      mandate_options?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.SepaDebit.MandateOptions"];
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.SepaDebit.SetupFutureUsage"];
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Sofort.PreferredLanguage": "de" | "en" | "es" | "fr" | "it" | "nl" | "pl";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Sofort.SetupFutureUsage": "none" | "off_session";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Sofort": {
      /** @description Preferred language of the SOFORT authorization page that the customer is redirected to. */
      preferred_language: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Sofort.PreferredLanguage"] | null;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Sofort.SetupFutureUsage"];
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Swish": {
      /** @description The order ID displayed in the Swish app after the payment is authorized. */
      reference: string | null;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Twint": {
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory": "checking" | "savings";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters": {
      /** @description The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`. */
      account_subcategories?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory"][];
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission": "balances" | "ownership" | "payment_method" | "transactions";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch": "balances" | "ownership" | "transactions";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections": {
      filters?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters"];
      /** @description The list of permissions to request. The `payment_method` permission must be included. */
      permissions?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission"][];
      /** @description Data features requested to be retrieved upon account creation. */
      prefetch: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch"][] | null;
      /** @description For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app. */
      return_url?: string;
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.MandateOptions": {
      /**
       * @description Mandate collection method
       * @enum {string}
       */
      collection_method?: "paper";
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.PreferredSettlementSpeed": "fastest" | "standard";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.SetupFutureUsage": "none" | "off_session" | "on_session";
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.VerificationMethod": "automatic" | "instant" | "microdeposits";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount": {
      financial_connections?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.FinancialConnections"];
      mandate_options?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.MandateOptions"];
      /** @description Preferred transaction settlement speed */
      preferred_settlement_speed?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.PreferredSettlementSpeed"];
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       */
      setup_future_usage?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.SetupFutureUsage"];
      /** @description Bank account verification method. */
      verification_method?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount.VerificationMethod"];
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.WechatPay.Client": "android" | "ios" | "web";
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.WechatPay": {
      /** @description The app ID registered with WeChat Pay. Only required when client is ios or android. */
      app_id: string | null;
      /** @description The client type that the end customer will pay from */
      client: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.WechatPay.Client"] | null;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions.Zip": {
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](https://stripe.com/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](https://stripe.com/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](https://stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](https://stripe.com/strong-customer-authentication).
       * @enum {string}
       */
      setup_future_usage?: "none";
    };
    "stripe.Stripe.PaymentIntent.PaymentMethodOptions": {
      acss_debit?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.AcssDebit"];
      affirm?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Affirm"];
      afterpay_clearpay?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.AfterpayClearpay"];
      alipay?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Alipay"];
      amazon_pay?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.AmazonPay"];
      au_becs_debit?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.AuBecsDebit"];
      bacs_debit?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.BacsDebit"];
      bancontact?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Bancontact"];
      blik?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Blik"];
      boleto?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Boleto"];
      card?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Card"];
      card_present?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.CardPresent"];
      cashapp?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Cashapp"];
      customer_balance?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.CustomerBalance"];
      eps?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Eps"];
      fpx?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Fpx"];
      giropay?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Giropay"];
      grabpay?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Grabpay"];
      ideal?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Ideal"];
      interac_present?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.InteracPresent"];
      klarna?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Klarna"];
      konbini?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Konbini"];
      link?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Link"];
      mobilepay?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Mobilepay"];
      multibanco?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Multibanco"];
      oxxo?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Oxxo"];
      p24?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.P24"];
      paynow?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Paynow"];
      paypal?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Paypal"];
      pix?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Pix"];
      promptpay?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Promptpay"];
      revolut_pay?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.RevolutPay"];
      sepa_debit?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.SepaDebit"];
      sofort?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Sofort"];
      swish?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Swish"];
      twint?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Twint"];
      us_bank_account?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.UsBankAccount"];
      wechat_pay?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.WechatPay"];
      zip?: components["schemas"]["stripe.Stripe.PaymentIntent.PaymentMethodOptions.Zip"];
    };
    "stripe.Stripe.PaymentIntent.Processing.Card.CustomerNotification": {
      /** @description Whether customer approval has been requested for this payment. For payments greater than INR 15000 or mandate amount, the customer must provide explicit approval of the payment with their bank. */
      approval_requested: boolean | null;
      /**
       * Format: double
       * @description If customer approval is required, they need to provide approval before this time.
       */
      completes_at: number | null;
    };
    "stripe.Stripe.PaymentIntent.Processing.Card": {
      customer_notification?: components["schemas"]["stripe.Stripe.PaymentIntent.Processing.Card.CustomerNotification"];
    };
    "stripe.Stripe.PaymentIntent.Processing": {
      card?: components["schemas"]["stripe.Stripe.PaymentIntent.Processing.Card"];
      /**
       * @description Type of the payment method for which payment is in `processing` state, one of `card`.
       * @enum {string}
       */
      type: "card";
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.SetupFutureUsage": "off_session" | "on_session";
    "stripe.Stripe.PaymentIntent.Shipping": {
      address?: components["schemas"]["stripe.Stripe.Address"];
      /** @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
      carrier?: string | null;
      /** @description Recipient name. */
      name?: string;
      /** @description Recipient phone (including extension). */
      phone?: string | null;
      /** @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
      tracking_number?: string | null;
    };
    "stripe.Stripe.DeletedCustomerSource": components["schemas"]["stripe.Stripe.DeletedBankAccount"] | components["schemas"]["stripe.Stripe.DeletedCard"];
    /** @enum {string} */
    "stripe.Stripe.PaymentIntent.Status": "canceled" | "processing" | "requires_action" | "requires_capture" | "requires_confirmation" | "requires_payment_method" | "succeeded";
    "stripe.Stripe.PaymentIntent.TransferData": {
      /**
       * Format: double
       * @description Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
       */
      amount?: number;
      /**
       * @description The account (if any) that the payment is attributed to for tax
       * reporting, and where funds from the payment are transferred to after
       * payment success.
       */
      destination: string | components["schemas"]["stripe.Stripe.Account"];
    };
    /** @enum {string} */
    "stripe.Stripe.SetupAttempt.SetupError.Type": "api_error" | "card_error" | "idempotency_error" | "invalid_request_error";
    "stripe.Stripe.SetupAttempt.SetupError": {
      /** @description For card errors, the ID of the failed charge. */
      charge?: string;
      /** @description For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
      code?: components["schemas"]["stripe.Stripe.SetupAttempt.SetupError.Code"];
      /** @description For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
      decline_code?: string;
      /** @description A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
      doc_url?: string;
      /** @description A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
      message?: string;
      /** @description If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
      param?: string;
      /**
       * @description A PaymentIntent guides you through the process of collecting a payment from your customer.
       * We recommend that you create exactly one PaymentIntent for each order or
       * customer session in your system. You can reference the PaymentIntent later to
       * see the history of payment attempts for a particular session.
       *
       * A PaymentIntent transitions through
       * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
       * throughout its lifetime as it interfaces with Stripe.js to perform
       * authentication flows and ultimately creates at most one successful charge.
       *
       * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
       */
      payment_intent?: components["schemas"]["stripe.Stripe.PaymentIntent"];
      /**
       * @description PaymentMethod objects represent your customer's payment instruments.
       * You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
       * Customer objects to store instrument details for future payments.
       *
       * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
       */
      payment_method?: components["schemas"]["stripe.Stripe.PaymentMethod"];
      /** @description If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors. */
      payment_method_type?: string;
      /** @description A URL to the request log entry in your dashboard. */
      request_log_url?: string;
      /**
       * @description A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
       * For example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
       * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
       *
       * Create a SetupIntent when you're ready to collect your customer's payment credentials.
       * Don't maintain long-lived, unconfirmed SetupIntents because they might not be valid.
       * The SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides
       * you through the setup process.
       *
       * Successful SetupIntents result in payment credentials that are optimized for future payments.
       * For example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through
       * [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection
       * to streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).
       * If you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),
       * it automatically attaches the resulting payment method to that Customer after successful setup.
       * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
       * PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.
       *
       * By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.
       *
       * Related guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)
       */
      setup_intent?: components["schemas"]["stripe.Stripe.SetupIntent"];
      source?: components["schemas"]["stripe.Stripe.CustomerSource"];
      /** @description The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error` */
      type: components["schemas"]["stripe.Stripe.SetupAttempt.SetupError.Type"];
    };
    "stripe.Stripe.PaymentMethod.Card.GeneratedFrom": {
      /** @description The charge that created this object. */
      charge: string | null;
      /** @description Transaction-specific details of the payment method used in the payment. */
      payment_method_details: components["schemas"]["stripe.Stripe.PaymentMethod.Card.GeneratedFrom.PaymentMethodDetails"] | null;
      /** @description The ID of the SetupAttempt that generated this PaymentMethod, if any. */
      setup_attempt: (string | components["schemas"]["stripe.Stripe.SetupAttempt"]) | null;
    };
    "stripe.Stripe.PaymentMethod.Card.Networks": {
      /** @description All available networks for the card. */
      available: string[];
      /** @description The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card. */
      preferred: string | null;
    };
    "stripe.Stripe.PaymentMethod.Card.ThreeDSecureUsage": {
      /** @description Whether 3D Secure is supported on this card. */
      supported: boolean;
    };
    "stripe.Stripe.PaymentMethod.Card.Wallet.AmexExpressCheckout": Record<string, never>;
    "stripe.Stripe.PaymentMethod.Card.Wallet.ApplePay": Record<string, never>;
    "stripe.Stripe.PaymentMethod.Card.Wallet.GooglePay": Record<string, never>;
    "stripe.Stripe.PaymentMethod.Card.Wallet.Link": Record<string, never>;
    "stripe.Stripe.PaymentMethod.Card.Wallet.Masterpass": {
      /** @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      billing_address: components["schemas"]["stripe.Stripe.Address"] | null;
      /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      email: string | null;
      /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      name: string | null;
      /** @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      shipping_address: components["schemas"]["stripe.Stripe.Address"] | null;
    };
    "stripe.Stripe.PaymentMethod.Card.Wallet.SamsungPay": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.Card.Wallet.Type": "amex_express_checkout" | "apple_pay" | "google_pay" | "link" | "masterpass" | "samsung_pay" | "visa_checkout";
    "stripe.Stripe.PaymentMethod.Card.Wallet.VisaCheckout": {
      /** @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      billing_address: components["schemas"]["stripe.Stripe.Address"] | null;
      /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      email: string | null;
      /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      name: string | null;
      /** @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      shipping_address: components["schemas"]["stripe.Stripe.Address"] | null;
    };
    "stripe.Stripe.PaymentMethod.Card.Wallet": {
      amex_express_checkout?: components["schemas"]["stripe.Stripe.PaymentMethod.Card.Wallet.AmexExpressCheckout"];
      apple_pay?: components["schemas"]["stripe.Stripe.PaymentMethod.Card.Wallet.ApplePay"];
      /** @description (For tokenized numbers only.) The last four digits of the device account number. */
      dynamic_last4: string | null;
      google_pay?: components["schemas"]["stripe.Stripe.PaymentMethod.Card.Wallet.GooglePay"];
      link?: components["schemas"]["stripe.Stripe.PaymentMethod.Card.Wallet.Link"];
      masterpass?: components["schemas"]["stripe.Stripe.PaymentMethod.Card.Wallet.Masterpass"];
      samsung_pay?: components["schemas"]["stripe.Stripe.PaymentMethod.Card.Wallet.SamsungPay"];
      /** @description The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
      type: components["schemas"]["stripe.Stripe.PaymentMethod.Card.Wallet.Type"];
      visa_checkout?: components["schemas"]["stripe.Stripe.PaymentMethod.Card.Wallet.VisaCheckout"];
    };
    "stripe.Stripe.PaymentMethod.Card": {
      /** @description Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      brand: string;
      /** @description Checks on Card address and CVC if provided. */
      checks: components["schemas"]["stripe.Stripe.PaymentMethod.Card.Checks"] | null;
      /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      country: string | null;
      /** @description A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.) */
      description?: string | null;
      /** @description The brand to use when displaying the card, this accounts for customer's brand choice on dual-branded cards. Can be `american_express`, `cartes_bancaires`, `diners_club`, `discover`, `eftpos_australia`, `interac`, `jcb`, `mastercard`, `union_pay`, `visa`, or `other` and may contain more values in the future. */
      display_brand: string | null;
      /**
       * Format: double
       * @description Two-digit number representing the card's expiration month.
       */
      exp_month: number;
      /**
       * Format: double
       * @description Four-digit number representing the card's expiration year.
       */
      exp_year: number;
      /**
       * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
       *
       * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
       */
      fingerprint?: string | null;
      /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      funding: string;
      /** @description Details of the original PaymentMethod that created this object. */
      generated_from: components["schemas"]["stripe.Stripe.PaymentMethod.Card.GeneratedFrom"] | null;
      /** @description Issuer identification number of the card. (For internal use only and not typically available in standard API requests.) */
      iin?: string | null;
      /** @description The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.) */
      issuer?: string | null;
      /** @description The last four digits of the card. */
      last4: string;
      /** @description Contains information about card networks that can be used to process the payment. */
      networks: components["schemas"]["stripe.Stripe.PaymentMethod.Card.Networks"] | null;
      /** @description Contains details on how this Card may be used for 3D Secure authentication. */
      three_d_secure_usage: components["schemas"]["stripe.Stripe.PaymentMethod.Card.ThreeDSecureUsage"] | null;
      /** @description If this Card is part of a card wallet, this contains the details of the card wallet. */
      wallet: components["schemas"]["stripe.Stripe.PaymentMethod.Card.Wallet"] | null;
    };
    "stripe.Stripe.PaymentMethod.CardPresent.Networks": {
      /** @description All available networks for the card. */
      available: string[];
      /** @description The preferred network for the card. */
      preferred: string | null;
    };
    "stripe.Stripe.PaymentMethod.CardPresent.Offline": {
      /**
       * Format: double
       * @description Time at which the payment was collected while offline
       */
      stored_at: number | null;
      /**
       * @description The method used to process this payment method offline. Only deferred is allowed.
       * @enum {string|null}
       */
      type: "deferred" | null;
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.CardPresent.ReadMethod": "contact_emv" | "contactless_emv" | "contactless_magstripe_mode" | "magnetic_stripe_fallback" | "magnetic_stripe_track2";
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.CardPresent.Wallet.Type": "apple_pay" | "google_pay" | "samsung_pay" | "unknown";
    "stripe.Stripe.PaymentMethod.CardPresent.Wallet": {
      /** @description The type of mobile wallet, one of `apple_pay`, `google_pay`, `samsung_pay`, or `unknown`. */
      type: components["schemas"]["stripe.Stripe.PaymentMethod.CardPresent.Wallet.Type"];
    };
    "stripe.Stripe.PaymentMethod.CardPresent": {
      /** @description Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      brand: string | null;
      /** @description The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card. */
      brand_product: string | null;
      /** @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
      cardholder_name: string | null;
      /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      country: string | null;
      /** @description A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.) */
      description?: string | null;
      /**
       * Format: double
       * @description Two-digit number representing the card's expiration month.
       */
      exp_month: number;
      /**
       * Format: double
       * @description Four-digit number representing the card's expiration year.
       */
      exp_year: number;
      /**
       * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
       *
       * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
       */
      fingerprint: string | null;
      /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      funding: string | null;
      /** @description Issuer identification number of the card. (For internal use only and not typically available in standard API requests.) */
      iin?: string | null;
      /** @description The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.) */
      issuer?: string | null;
      /** @description The last four digits of the card. */
      last4: string | null;
      /** @description Contains information about card networks that can be used to process the payment. */
      networks: components["schemas"]["stripe.Stripe.PaymentMethod.CardPresent.Networks"] | null;
      /** @description Details about payment methods collected offline. */
      offline: components["schemas"]["stripe.Stripe.PaymentMethod.CardPresent.Offline"] | null;
      /** @description EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
      preferred_locales: string[] | null;
      /** @description How card details were read in this transaction. */
      read_method: components["schemas"]["stripe.Stripe.PaymentMethod.CardPresent.ReadMethod"] | null;
      wallet?: components["schemas"]["stripe.Stripe.PaymentMethod.CardPresent.Wallet"];
    };
    "stripe.Stripe.PaymentMethod.Cashapp": {
      /** @description A unique and immutable identifier assigned by Cash App to every buyer. */
      buyer_id: string | null;
      /** @description A public identifier for buyers using Cash App. */
      cashtag: string | null;
    };
    "stripe.Stripe.PaymentMethod.CustomerBalance": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.Eps.Bank": "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
    "stripe.Stripe.PaymentMethod.Eps": {
      /** @description The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`. */
      bank: components["schemas"]["stripe.Stripe.PaymentMethod.Eps.Bank"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.Fpx.AccountHolderType": "company" | "individual";
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.Fpx.Bank": "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
    "stripe.Stripe.PaymentMethod.Fpx": {
      /** @description Account holder type, if provided. Can be one of `individual` or `company`. */
      account_holder_type: components["schemas"]["stripe.Stripe.PaymentMethod.Fpx.AccountHolderType"] | null;
      /** @description The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`. */
      bank: components["schemas"]["stripe.Stripe.PaymentMethod.Fpx.Bank"];
    };
    "stripe.Stripe.PaymentMethod.Giropay": Record<string, never>;
    "stripe.Stripe.PaymentMethod.Grabpay": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.Ideal.Bank": "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "n26" | "nn" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.Ideal.Bic": "ABNANL2A" | "ASNBNL21" | "BITSNL2A" | "BUNQNL2A" | "FVLBNL22" | "HANDNL2A" | "INGBNL2A" | "KNABNL2H" | "MOYONL21" | "NNBANL2G" | "NTSBDEB1" | "RABONL2U" | "RBRBNL21" | "REVOIE23" | "REVOLT21" | "SNSBNL2A" | "TRIONL2U";
    "stripe.Stripe.PaymentMethod.Ideal": {
      /** @description The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`. */
      bank: components["schemas"]["stripe.Stripe.PaymentMethod.Ideal.Bank"] | null;
      /** @description The Bank Identifier Code of the customer's bank, if the bank was provided. */
      bic: components["schemas"]["stripe.Stripe.PaymentMethod.Ideal.Bic"] | null;
    };
    "stripe.Stripe.PaymentMethod.InteracPresent.Networks": {
      /** @description All available networks for the card. */
      available: string[];
      /** @description The preferred network for the card. */
      preferred: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.InteracPresent.ReadMethod": "contact_emv" | "contactless_emv" | "contactless_magstripe_mode" | "magnetic_stripe_fallback" | "magnetic_stripe_track2";
    "stripe.Stripe.PaymentMethod.InteracPresent": {
      /** @description Card brand. Can be `interac`, `mastercard` or `visa`. */
      brand: string | null;
      /** @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
      cardholder_name: string | null;
      /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      country: string | null;
      /** @description A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.) */
      description?: string | null;
      /**
       * Format: double
       * @description Two-digit number representing the card's expiration month.
       */
      exp_month: number;
      /**
       * Format: double
       * @description Four-digit number representing the card's expiration year.
       */
      exp_year: number;
      /**
       * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
       *
       * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
       */
      fingerprint: string | null;
      /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      funding: string | null;
      /** @description Issuer identification number of the card. (For internal use only and not typically available in standard API requests.) */
      iin?: string | null;
      /** @description The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.) */
      issuer?: string | null;
      /** @description The last four digits of the card. */
      last4: string | null;
      /** @description Contains information about card networks that can be used to process the payment. */
      networks: components["schemas"]["stripe.Stripe.PaymentMethod.InteracPresent.Networks"] | null;
      /** @description EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
      preferred_locales: string[] | null;
      /** @description How card details were read in this transaction. */
      read_method: components["schemas"]["stripe.Stripe.PaymentMethod.InteracPresent.ReadMethod"] | null;
    };
    "stripe.Stripe.PaymentMethod.Klarna.Dob": {
      /**
       * Format: double
       * @description The day of birth, between 1 and 31.
       */
      day: number | null;
      /**
       * Format: double
       * @description The month of birth, between 1 and 12.
       */
      month: number | null;
      /**
       * Format: double
       * @description The four-digit year of birth.
       */
      year: number | null;
    };
    "stripe.Stripe.PaymentMethod.Klarna": {
      /** @description The customer's date of birth, if provided. */
      dob?: components["schemas"]["stripe.Stripe.PaymentMethod.Klarna.Dob"] | null;
    };
    "stripe.Stripe.PaymentMethod.Konbini": Record<string, never>;
    "stripe.Stripe.PaymentMethod.Link": {
      /** @description Account owner's email address. */
      email: string | null;
      /**
       * @deprecated
       * @description [Deprecated] This is a legacy parameter that no longer has any function.
       */
      persistent_token?: string;
    };
    "stripe.Stripe.PaymentMethod.Mobilepay": Record<string, never>;
    "stripe.Stripe.PaymentMethod.Multibanco": Record<string, never>;
    "stripe.Stripe.PaymentMethod.Oxxo": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.P24.Bank": "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "velobank" | "volkswagen_bank";
    "stripe.Stripe.PaymentMethod.P24": {
      /** @description The customer's bank, if provided. */
      bank: components["schemas"]["stripe.Stripe.PaymentMethod.P24.Bank"] | null;
    };
    "stripe.Stripe.PaymentMethod.Paynow": Record<string, never>;
    "stripe.Stripe.PaymentMethod.Paypal": {
      /**
       * @description Owner's email. Values are provided by PayPal directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      payer_email: string | null;
      /** @description PayPal account PayerID. This identifier uniquely identifies the PayPal customer. */
      payer_id: string | null;
    };
    "stripe.Stripe.PaymentMethod.Pix": Record<string, never>;
    "stripe.Stripe.PaymentMethod.Promptpay": Record<string, never>;
    "stripe.Stripe.PaymentMethod.RadarOptions": {
      /** @description A [Radar Session](https://stripe.com/docs/radar/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments. */
      session?: string;
    };
    "stripe.Stripe.PaymentMethod.RevolutPay": Record<string, never>;
    "stripe.Stripe.PaymentMethod.SepaDebit.GeneratedFrom": {
      /** @description The ID of the Charge that generated this PaymentMethod, if any. */
      charge: (string | components["schemas"]["stripe.Stripe.Charge"]) | null;
      /** @description The ID of the SetupAttempt that generated this PaymentMethod, if any. */
      setup_attempt: (string | components["schemas"]["stripe.Stripe.SetupAttempt"]) | null;
    };
    "stripe.Stripe.PaymentMethod.SepaDebit": {
      /** @description Bank code of bank associated with the bank account. */
      bank_code: string | null;
      /** @description Branch code of bank associated with the bank account. */
      branch_code: string | null;
      /** @description Two-letter ISO code representing the country the bank account is located in. */
      country: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: string | null;
      /** @description Information about the object that generated this PaymentMethod. */
      generated_from: components["schemas"]["stripe.Stripe.PaymentMethod.SepaDebit.GeneratedFrom"] | null;
      /** @description Last four characters of the IBAN. */
      last4: string | null;
    };
    "stripe.Stripe.PaymentMethod.Sofort": {
      /** @description Two-letter ISO code representing the country the bank account is located in. */
      country: string | null;
    };
    "stripe.Stripe.PaymentMethod.Swish": Record<string, never>;
    "stripe.Stripe.PaymentMethod.Twint": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.Type": "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "card_present" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "interac_present" | "klarna" | "konbini" | "link" | "mobilepay" | "multibanco" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "revolut_pay" | "sepa_debit" | "sofort" | "swish" | "twint" | "us_bank_account" | "wechat_pay" | "zip";
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.UsBankAccount.AccountHolderType": "company" | "individual";
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.UsBankAccount.AccountType": "checking" | "savings";
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.UsBankAccount.Networks.Supported": "ach" | "us_domestic_wire";
    "stripe.Stripe.PaymentMethod.UsBankAccount.Networks": {
      /** @description The preferred network. */
      preferred: string | null;
      /** @description All supported networks. */
      supported: components["schemas"]["stripe.Stripe.PaymentMethod.UsBankAccount.Networks.Supported"][];
    };
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails.Blocked.NetworkCode": "R02" | "R03" | "R04" | "R05" | "R07" | "R08" | "R10" | "R11" | "R16" | "R20" | "R29" | "R31";
    /** @enum {string} */
    "stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails.Blocked.Reason": "bank_account_closed" | "bank_account_frozen" | "bank_account_invalid_details" | "bank_account_restricted" | "bank_account_unusable" | "debit_not_authorized";
    "stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails.Blocked": {
      /** @description The ACH network code that resulted in this block. */
      network_code: components["schemas"]["stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails.Blocked.NetworkCode"] | null;
      /** @description The reason why this PaymentMethod's fingerprint has been blocked */
      reason: components["schemas"]["stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails.Blocked.Reason"] | null;
    };
    "stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails": {
      blocked?: components["schemas"]["stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails.Blocked"];
    };
    "stripe.Stripe.PaymentMethod.UsBankAccount": {
      /** @description Account holder type: individual or company. */
      account_holder_type: components["schemas"]["stripe.Stripe.PaymentMethod.UsBankAccount.AccountHolderType"] | null;
      /** @description Account type: checkings or savings. Defaults to checking if omitted. */
      account_type: components["schemas"]["stripe.Stripe.PaymentMethod.UsBankAccount.AccountType"] | null;
      /** @description The name of the bank. */
      bank_name: string | null;
      /** @description The ID of the Financial Connections Account used to create the payment method. */
      financial_connections_account: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: string | null;
      /** @description Last four digits of the bank account number. */
      last4: string | null;
      /** @description Contains information about US bank account networks that can be used. */
      networks: components["schemas"]["stripe.Stripe.PaymentMethod.UsBankAccount.Networks"] | null;
      /** @description Routing number of the bank account. */
      routing_number: string | null;
      /** @description Contains information about the future reusability of this PaymentMethod. */
      status_details: components["schemas"]["stripe.Stripe.PaymentMethod.UsBankAccount.StatusDetails"] | null;
    };
    "stripe.Stripe.PaymentMethod.WechatPay": Record<string, never>;
    "stripe.Stripe.PaymentMethod.Zip": Record<string, never>;
    "stripe.Stripe.Customer.InvoiceSettings.RenderingOptions": {
      /** @description How line-item prices and amounts will be displayed with respect to tax on invoice PDFs. */
      amount_tax_display: string | null;
      /** @description ID of the invoice rendering template to be used for this customer's invoices. If set, the template will be used on all invoices for this customer unless a template is set directly on the invoice. */
      template: string | null;
    };
    "stripe.Stripe.Customer.InvoiceSettings": {
      /** @description Default custom fields to be displayed on invoices for this customer. */
      custom_fields: components["schemas"]["stripe.Stripe.Customer.InvoiceSettings.CustomField"][] | null;
      /** @description ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices. */
      default_payment_method: (string | components["schemas"]["stripe.Stripe.PaymentMethod"]) | null;
      /** @description Default footer to be displayed on invoices for this customer. */
      footer: string | null;
      /** @description Default options for invoice PDF rendering for this customer. */
      rendering_options: components["schemas"]["stripe.Stripe.Customer.InvoiceSettings.RenderingOptions"] | null;
    };
    "stripe.Stripe.Customer.Shipping": {
      address?: components["schemas"]["stripe.Stripe.Address"];
      /** @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
      carrier?: string | null;
      /** @description Recipient name. */
      name?: string;
      /** @description Recipient phone (including extension). */
      phone?: string | null;
      /** @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
      tracking_number?: string | null;
    };
    /**
     * @description A container for paginated lists of objects.
     * The array of objects is on the `.data` property,
     * and `.has_more` indicates whether there are additional objects beyond the end of this list.
     *
     * Learn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)
     * or, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.
     */
    "stripe.Stripe.ApiList_stripe.Stripe.CustomerSource_": {
      /** @enum {string} */
      object: "list";
      data: components["schemas"]["stripe.Stripe.CustomerSource"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      has_more: boolean;
      /** @description The URL where this list can be accessed. */
      url: string;
    };
    /**
     * @description A container for paginated lists of objects.
     * The array of objects is on the `.data` property,
     * and `.has_more` indicates whether there are additional objects beyond the end of this list.
     *
     * Learn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)
     * or, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.
     */
    "stripe.Stripe.ApiList_stripe.Stripe.Subscription_": {
      /** @enum {string} */
      object: "list";
      data: components["schemas"]["stripe.Stripe.Subscription"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      has_more: boolean;
      /** @description The URL where this list can be accessed. */
      url: string;
    };
    /** @enum {string} */
    "stripe.Stripe.Customer.Tax.AutomaticTax": "failed" | "not_collecting" | "supported" | "unrecognized_location";
    /** @enum {string} */
    "stripe.Stripe.Customer.Tax.Location.Source": "billing_address" | "ip_address" | "payment_method" | "shipping_destination";
    "stripe.Stripe.Customer.Tax.Location": {
      /** @description The customer's country as identified by Stripe Tax. */
      country: string;
      /** @description The data source used to infer the customer's location. */
      source: components["schemas"]["stripe.Stripe.Customer.Tax.Location.Source"];
      /** @description The customer's state, county, province, or region as identified by Stripe Tax. */
      state: string | null;
    };
    "stripe.Stripe.Customer.Tax": {
      /** @description Surfaces if automatic tax computation is possible given the current customer location information. */
      automatic_tax: components["schemas"]["stripe.Stripe.Customer.Tax.AutomaticTax"];
      /** @description A recent IP address of the customer used for tax reporting and tax location inference. */
      ip_address: string | null;
      /** @description The customer's location as identified by Stripe Tax. */
      location: components["schemas"]["stripe.Stripe.Customer.Tax.Location"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Customer.TaxExempt": "exempt" | "none" | "reverse";
    /**
     * @description A container for paginated lists of objects.
     * The array of objects is on the `.data` property,
     * and `.has_more` indicates whether there are additional objects beyond the end of this list.
     *
     * Learn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)
     * or, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.
     */
    "stripe.Stripe.ApiList_stripe.Stripe.TaxId_": {
      /** @enum {string} */
      object: "list";
      data: components["schemas"]["stripe.Stripe.TaxId"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      has_more: boolean;
      /** @description The URL where this list can be accessed. */
      url: string;
    };
    /** @enum {string} */
    "stripe.Stripe.BankAccount.FutureRequirements.Error.Code": "invalid_address_city_state_postal_code" | "invalid_address_highway_contract_box" | "invalid_address_private_mailbox" | "invalid_business_profile_name" | "invalid_business_profile_name_denylisted" | "invalid_company_name_denylisted" | "invalid_dob_age_over_maximum" | "invalid_dob_age_under_18" | "invalid_dob_age_under_minimum" | "invalid_product_description_length" | "invalid_product_description_url_match" | "invalid_representative_country" | "invalid_statement_descriptor_business_mismatch" | "invalid_statement_descriptor_denylisted" | "invalid_statement_descriptor_length" | "invalid_statement_descriptor_prefix_denylisted" | "invalid_statement_descriptor_prefix_mismatch" | "invalid_street_address" | "invalid_tax_id" | "invalid_tax_id_format" | "invalid_tos_acceptance" | "invalid_url_denylisted" | "invalid_url_format" | "invalid_url_length" | "invalid_url_web_presence_detected" | "invalid_url_website_business_information_mismatch" | "invalid_url_website_empty" | "invalid_url_website_inaccessible" | "invalid_url_website_inaccessible_geoblocked" | "invalid_url_website_inaccessible_password_protected" | "invalid_url_website_incomplete" | "invalid_url_website_incomplete_cancellation_policy" | "invalid_url_website_incomplete_customer_service_details" | "invalid_url_website_incomplete_legal_restrictions" | "invalid_url_website_incomplete_refund_policy" | "invalid_url_website_incomplete_return_policy" | "invalid_url_website_incomplete_terms_and_conditions" | "invalid_url_website_incomplete_under_construction" | "invalid_url_website_other" | "invalid_value_other" | "verification_directors_mismatch" | "verification_document_address_mismatch" | "verification_document_address_missing" | "verification_document_corrupt" | "verification_document_country_not_supported" | "verification_document_directors_mismatch" | "verification_document_dob_mismatch" | "verification_document_duplicate_type" | "verification_document_expired" | "verification_document_failed_copy" | "verification_document_failed_greyscale" | "verification_document_failed_other" | "verification_document_failed_test_mode" | "verification_document_fraudulent" | "verification_document_id_number_mismatch" | "verification_document_id_number_missing" | "verification_document_incomplete" | "verification_document_invalid" | "verification_document_issue_or_expiry_date_missing" | "verification_document_manipulated" | "verification_document_missing_back" | "verification_document_missing_front" | "verification_document_name_mismatch" | "verification_document_name_missing" | "verification_document_nationality_mismatch" | "verification_document_not_readable" | "verification_document_not_signed" | "verification_document_not_uploaded" | "verification_document_photo_mismatch" | "verification_document_too_large" | "verification_document_type_not_supported" | "verification_extraneous_directors" | "verification_failed_address_match" | "verification_failed_business_iec_number" | "verification_failed_document_match" | "verification_failed_id_number_match" | "verification_failed_keyed_identity" | "verification_failed_keyed_match" | "verification_failed_name_match" | "verification_failed_other" | "verification_failed_representative_authority" | "verification_failed_residential_address" | "verification_failed_tax_id_match" | "verification_failed_tax_id_not_issued" | "verification_missing_directors" | "verification_missing_executives" | "verification_missing_owners" | "verification_requires_additional_memorandum_of_associations" | "verification_requires_additional_proof_of_registration" | "verification_supportability";
    "stripe.Stripe.BankAccount.FutureRequirements.Error": {
      /** @description The code for the type of error. */
      code: components["schemas"]["stripe.Stripe.BankAccount.FutureRequirements.Error.Code"];
      /** @description An informative message that indicates the error type and provides additional details about the error. */
      reason: string;
      /** @description The specific user onboarding requirement field (in the requirements hash) that needs to be resolved. */
      requirement: string;
    };
    "stripe.Stripe.BankAccount.FutureRequirements": {
      /** @description Fields that need to be collected to keep the external account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
      currently_due: string[] | null;
      /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
      errors: components["schemas"]["stripe.Stripe.BankAccount.FutureRequirements.Error"][] | null;
      /** @description Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the external account. */
      past_due: string[] | null;
      /** @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending. */
      pending_verification: string[] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.BankAccount.Requirements.Error.Code": "invalid_address_city_state_postal_code" | "invalid_address_highway_contract_box" | "invalid_address_private_mailbox" | "invalid_business_profile_name" | "invalid_business_profile_name_denylisted" | "invalid_company_name_denylisted" | "invalid_dob_age_over_maximum" | "invalid_dob_age_under_18" | "invalid_dob_age_under_minimum" | "invalid_product_description_length" | "invalid_product_description_url_match" | "invalid_representative_country" | "invalid_statement_descriptor_business_mismatch" | "invalid_statement_descriptor_denylisted" | "invalid_statement_descriptor_length" | "invalid_statement_descriptor_prefix_denylisted" | "invalid_statement_descriptor_prefix_mismatch" | "invalid_street_address" | "invalid_tax_id" | "invalid_tax_id_format" | "invalid_tos_acceptance" | "invalid_url_denylisted" | "invalid_url_format" | "invalid_url_length" | "invalid_url_web_presence_detected" | "invalid_url_website_business_information_mismatch" | "invalid_url_website_empty" | "invalid_url_website_inaccessible" | "invalid_url_website_inaccessible_geoblocked" | "invalid_url_website_inaccessible_password_protected" | "invalid_url_website_incomplete" | "invalid_url_website_incomplete_cancellation_policy" | "invalid_url_website_incomplete_customer_service_details" | "invalid_url_website_incomplete_legal_restrictions" | "invalid_url_website_incomplete_refund_policy" | "invalid_url_website_incomplete_return_policy" | "invalid_url_website_incomplete_terms_and_conditions" | "invalid_url_website_incomplete_under_construction" | "invalid_url_website_other" | "invalid_value_other" | "verification_directors_mismatch" | "verification_document_address_mismatch" | "verification_document_address_missing" | "verification_document_corrupt" | "verification_document_country_not_supported" | "verification_document_directors_mismatch" | "verification_document_dob_mismatch" | "verification_document_duplicate_type" | "verification_document_expired" | "verification_document_failed_copy" | "verification_document_failed_greyscale" | "verification_document_failed_other" | "verification_document_failed_test_mode" | "verification_document_fraudulent" | "verification_document_id_number_mismatch" | "verification_document_id_number_missing" | "verification_document_incomplete" | "verification_document_invalid" | "verification_document_issue_or_expiry_date_missing" | "verification_document_manipulated" | "verification_document_missing_back" | "verification_document_missing_front" | "verification_document_name_mismatch" | "verification_document_name_missing" | "verification_document_nationality_mismatch" | "verification_document_not_readable" | "verification_document_not_signed" | "verification_document_not_uploaded" | "verification_document_photo_mismatch" | "verification_document_too_large" | "verification_document_type_not_supported" | "verification_extraneous_directors" | "verification_failed_address_match" | "verification_failed_business_iec_number" | "verification_failed_document_match" | "verification_failed_id_number_match" | "verification_failed_keyed_identity" | "verification_failed_keyed_match" | "verification_failed_name_match" | "verification_failed_other" | "verification_failed_representative_authority" | "verification_failed_residential_address" | "verification_failed_tax_id_match" | "verification_failed_tax_id_not_issued" | "verification_missing_directors" | "verification_missing_executives" | "verification_missing_owners" | "verification_requires_additional_memorandum_of_associations" | "verification_requires_additional_proof_of_registration" | "verification_supportability";
    "stripe.Stripe.BankAccount.Requirements.Error": {
      /** @description The code for the type of error. */
      code: components["schemas"]["stripe.Stripe.BankAccount.Requirements.Error.Code"];
      /** @description An informative message that indicates the error type and provides additional details about the error. */
      reason: string;
      /** @description The specific user onboarding requirement field (in the requirements hash) that needs to be resolved. */
      requirement: string;
    };
    "stripe.Stripe.BankAccount.Requirements": {
      /** @description Fields that need to be collected to keep the external account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
      currently_due: string[] | null;
      /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
      errors: components["schemas"]["stripe.Stripe.BankAccount.Requirements.Error"][] | null;
      /** @description Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the external account. */
      past_due: string[] | null;
      /** @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending. */
      pending_verification: string[] | null;
    };
    /**
     * @description A container for paginated lists of objects.
     * The array of objects is on the `.data` property,
     * and `.has_more` indicates whether there are additional objects beyond the end of this list.
     *
     * Learn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)
     * or, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.
     */
    "stripe.Stripe.ApiList_stripe.Stripe.ExternalAccount_": {
      /** @enum {string} */
      object: "list";
      data: components["schemas"]["stripe.Stripe.ExternalAccount"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      has_more: boolean;
      /** @description The URL where this list can be accessed. */
      url: string;
    };
    "stripe.Stripe.Account.FutureRequirements.Alternative": {
      /** @description Fields that can be provided to satisfy all fields in `original_fields_due`. */
      alternative_fields_due: string[];
      /** @description Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`. */
      original_fields_due: string[];
    };
    /** @enum {string} */
    "stripe.Stripe.Account.FutureRequirements.Error.Code": "invalid_address_city_state_postal_code" | "invalid_address_highway_contract_box" | "invalid_address_private_mailbox" | "invalid_business_profile_name" | "invalid_business_profile_name_denylisted" | "invalid_company_name_denylisted" | "invalid_dob_age_over_maximum" | "invalid_dob_age_under_18" | "invalid_dob_age_under_minimum" | "invalid_product_description_length" | "invalid_product_description_url_match" | "invalid_representative_country" | "invalid_statement_descriptor_business_mismatch" | "invalid_statement_descriptor_denylisted" | "invalid_statement_descriptor_length" | "invalid_statement_descriptor_prefix_denylisted" | "invalid_statement_descriptor_prefix_mismatch" | "invalid_street_address" | "invalid_tax_id" | "invalid_tax_id_format" | "invalid_tos_acceptance" | "invalid_url_denylisted" | "invalid_url_format" | "invalid_url_length" | "invalid_url_web_presence_detected" | "invalid_url_website_business_information_mismatch" | "invalid_url_website_empty" | "invalid_url_website_inaccessible" | "invalid_url_website_inaccessible_geoblocked" | "invalid_url_website_inaccessible_password_protected" | "invalid_url_website_incomplete" | "invalid_url_website_incomplete_cancellation_policy" | "invalid_url_website_incomplete_customer_service_details" | "invalid_url_website_incomplete_legal_restrictions" | "invalid_url_website_incomplete_refund_policy" | "invalid_url_website_incomplete_return_policy" | "invalid_url_website_incomplete_terms_and_conditions" | "invalid_url_website_incomplete_under_construction" | "invalid_url_website_other" | "invalid_value_other" | "verification_directors_mismatch" | "verification_document_address_mismatch" | "verification_document_address_missing" | "verification_document_corrupt" | "verification_document_country_not_supported" | "verification_document_directors_mismatch" | "verification_document_dob_mismatch" | "verification_document_duplicate_type" | "verification_document_expired" | "verification_document_failed_copy" | "verification_document_failed_greyscale" | "verification_document_failed_other" | "verification_document_failed_test_mode" | "verification_document_fraudulent" | "verification_document_id_number_mismatch" | "verification_document_id_number_missing" | "verification_document_incomplete" | "verification_document_invalid" | "verification_document_issue_or_expiry_date_missing" | "verification_document_manipulated" | "verification_document_missing_back" | "verification_document_missing_front" | "verification_document_name_mismatch" | "verification_document_name_missing" | "verification_document_nationality_mismatch" | "verification_document_not_readable" | "verification_document_not_signed" | "verification_document_not_uploaded" | "verification_document_photo_mismatch" | "verification_document_too_large" | "verification_document_type_not_supported" | "verification_extraneous_directors" | "verification_failed_address_match" | "verification_failed_business_iec_number" | "verification_failed_document_match" | "verification_failed_id_number_match" | "verification_failed_keyed_identity" | "verification_failed_keyed_match" | "verification_failed_name_match" | "verification_failed_other" | "verification_failed_representative_authority" | "verification_failed_residential_address" | "verification_failed_tax_id_match" | "verification_failed_tax_id_not_issued" | "verification_missing_directors" | "verification_missing_executives" | "verification_missing_owners" | "verification_requires_additional_memorandum_of_associations" | "verification_requires_additional_proof_of_registration" | "verification_supportability";
    "stripe.Stripe.Account.FutureRequirements.Error": {
      /** @description The code for the type of error. */
      code: components["schemas"]["stripe.Stripe.Account.FutureRequirements.Error.Code"];
      /** @description An informative message that indicates the error type and provides additional details about the error. */
      reason: string;
      /** @description The specific user onboarding requirement field (in the requirements hash) that needs to be resolved. */
      requirement: string;
    };
    "stripe.Stripe.Account.FutureRequirements": {
      /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
      alternatives: components["schemas"]["stripe.Stripe.Account.FutureRequirements.Alternative"][] | null;
      /**
       * Format: double
       * @description Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning.
       */
      current_deadline: number | null;
      /** @description Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash. */
      currently_due: string[] | null;
      /** @description This is typed as a string for consistency with `requirements.disabled_reason`. */
      disabled_reason: string | null;
      /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
      errors: components["schemas"]["stripe.Stripe.Account.FutureRequirements.Error"][] | null;
      /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well. */
      eventually_due: string[] | null;
      /** @description Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
      past_due: string[] | null;
      /** @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending. */
      pending_verification: string[] | null;
    };
    "stripe.Stripe.Person.AdditionalTosAcceptances.Account": {
      /**
       * Format: double
       * @description The Unix timestamp marking when the legal guardian accepted the service agreement.
       */
      date: number | null;
      /** @description The IP address from which the legal guardian accepted the service agreement. */
      ip: string | null;
      /** @description The user agent of the browser from which the legal guardian accepted the service agreement. */
      user_agent: string | null;
    };
    "stripe.Stripe.Person.AdditionalTosAcceptances": {
      /** @description Details on the legal guardian's acceptance of the main Stripe service agreement. */
      account: components["schemas"]["stripe.Stripe.Person.AdditionalTosAcceptances.Account"] | null;
    };
    "stripe.Stripe.Person.AddressKana": {
      /** @description City/Ward. */
      city: string | null;
      /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
      country: string | null;
      /** @description Block/Building number. */
      line1: string | null;
      /** @description Building details. */
      line2: string | null;
      /** @description ZIP or postal code. */
      postal_code: string | null;
      /** @description Prefecture. */
      state: string | null;
      /** @description Town/cho-me. */
      town: string | null;
    };
    "stripe.Stripe.Person.AddressKanji": {
      /** @description City/Ward. */
      city: string | null;
      /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
      country: string | null;
      /** @description Block/Building number. */
      line1: string | null;
      /** @description Building details. */
      line2: string | null;
      /** @description ZIP or postal code. */
      postal_code: string | null;
      /** @description Prefecture. */
      state: string | null;
      /** @description Town/cho-me. */
      town: string | null;
    };
    "stripe.Stripe.Person.Dob": {
      /**
       * Format: double
       * @description The day of birth, between 1 and 31.
       */
      day: number | null;
      /**
       * Format: double
       * @description The month of birth, between 1 and 12.
       */
      month: number | null;
      /**
       * Format: double
       * @description The four-digit year of birth.
       */
      year: number | null;
    };
    "stripe.Stripe.Person.FutureRequirements.Alternative": {
      /** @description Fields that can be provided to satisfy all fields in `original_fields_due`. */
      alternative_fields_due: string[];
      /** @description Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`. */
      original_fields_due: string[];
    };
    /** @enum {string} */
    "stripe.Stripe.Person.FutureRequirements.Error.Code": "invalid_address_city_state_postal_code" | "invalid_address_highway_contract_box" | "invalid_address_private_mailbox" | "invalid_business_profile_name" | "invalid_business_profile_name_denylisted" | "invalid_company_name_denylisted" | "invalid_dob_age_over_maximum" | "invalid_dob_age_under_18" | "invalid_dob_age_under_minimum" | "invalid_product_description_length" | "invalid_product_description_url_match" | "invalid_representative_country" | "invalid_statement_descriptor_business_mismatch" | "invalid_statement_descriptor_denylisted" | "invalid_statement_descriptor_length" | "invalid_statement_descriptor_prefix_denylisted" | "invalid_statement_descriptor_prefix_mismatch" | "invalid_street_address" | "invalid_tax_id" | "invalid_tax_id_format" | "invalid_tos_acceptance" | "invalid_url_denylisted" | "invalid_url_format" | "invalid_url_length" | "invalid_url_web_presence_detected" | "invalid_url_website_business_information_mismatch" | "invalid_url_website_empty" | "invalid_url_website_inaccessible" | "invalid_url_website_inaccessible_geoblocked" | "invalid_url_website_inaccessible_password_protected" | "invalid_url_website_incomplete" | "invalid_url_website_incomplete_cancellation_policy" | "invalid_url_website_incomplete_customer_service_details" | "invalid_url_website_incomplete_legal_restrictions" | "invalid_url_website_incomplete_refund_policy" | "invalid_url_website_incomplete_return_policy" | "invalid_url_website_incomplete_terms_and_conditions" | "invalid_url_website_incomplete_under_construction" | "invalid_url_website_other" | "invalid_value_other" | "verification_directors_mismatch" | "verification_document_address_mismatch" | "verification_document_address_missing" | "verification_document_corrupt" | "verification_document_country_not_supported" | "verification_document_directors_mismatch" | "verification_document_dob_mismatch" | "verification_document_duplicate_type" | "verification_document_expired" | "verification_document_failed_copy" | "verification_document_failed_greyscale" | "verification_document_failed_other" | "verification_document_failed_test_mode" | "verification_document_fraudulent" | "verification_document_id_number_mismatch" | "verification_document_id_number_missing" | "verification_document_incomplete" | "verification_document_invalid" | "verification_document_issue_or_expiry_date_missing" | "verification_document_manipulated" | "verification_document_missing_back" | "verification_document_missing_front" | "verification_document_name_mismatch" | "verification_document_name_missing" | "verification_document_nationality_mismatch" | "verification_document_not_readable" | "verification_document_not_signed" | "verification_document_not_uploaded" | "verification_document_photo_mismatch" | "verification_document_too_large" | "verification_document_type_not_supported" | "verification_extraneous_directors" | "verification_failed_address_match" | "verification_failed_business_iec_number" | "verification_failed_document_match" | "verification_failed_id_number_match" | "verification_failed_keyed_identity" | "verification_failed_keyed_match" | "verification_failed_name_match" | "verification_failed_other" | "verification_failed_representative_authority" | "verification_failed_residential_address" | "verification_failed_tax_id_match" | "verification_failed_tax_id_not_issued" | "verification_missing_directors" | "verification_missing_executives" | "verification_missing_owners" | "verification_requires_additional_memorandum_of_associations" | "verification_requires_additional_proof_of_registration" | "verification_supportability";
    "stripe.Stripe.Person.FutureRequirements.Error": {
      /** @description The code for the type of error. */
      code: components["schemas"]["stripe.Stripe.Person.FutureRequirements.Error.Code"];
      /** @description An informative message that indicates the error type and provides additional details about the error. */
      reason: string;
      /** @description The specific user onboarding requirement field (in the requirements hash) that needs to be resolved. */
      requirement: string;
    };
    "stripe.Stripe.Person.FutureRequirements": {
      /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
      alternatives: components["schemas"]["stripe.Stripe.Person.FutureRequirements.Alternative"][] | null;
      /** @description Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition. */
      currently_due: string[];
      /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
      errors: components["schemas"]["stripe.Stripe.Person.FutureRequirements.Error"][];
      /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set. */
      eventually_due: string[];
      /** @description Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
      past_due: string[];
      /** @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending. */
      pending_verification: string[];
    };
    /** @enum {string} */
    "stripe.Stripe.Person.PoliticalExposure": "existing" | "none";
    "stripe.Stripe.Person.Relationship": {
      /** @description Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations. */
      director: boolean | null;
      /** @description Whether the person has significant responsibility to control, manage, or direct the organization. */
      executive: boolean | null;
      /** @description Whether the person is the legal guardian of the account's representative. */
      legal_guardian: boolean | null;
      /** @description Whether the person is an owner of the account's legal entity. */
      owner: boolean | null;
      /**
       * Format: double
       * @description The percent owned by the person of the account's legal entity.
       */
      percent_ownership: number | null;
      /** @description Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account. */
      representative: boolean | null;
      /** @description The person's title (e.g., CEO, Support Engineer). */
      title: string | null;
    };
    "stripe.Stripe.Person.Requirements.Alternative": {
      /** @description Fields that can be provided to satisfy all fields in `original_fields_due`. */
      alternative_fields_due: string[];
      /** @description Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`. */
      original_fields_due: string[];
    };
    /** @enum {string} */
    "stripe.Stripe.Person.Requirements.Error.Code": "invalid_address_city_state_postal_code" | "invalid_address_highway_contract_box" | "invalid_address_private_mailbox" | "invalid_business_profile_name" | "invalid_business_profile_name_denylisted" | "invalid_company_name_denylisted" | "invalid_dob_age_over_maximum" | "invalid_dob_age_under_18" | "invalid_dob_age_under_minimum" | "invalid_product_description_length" | "invalid_product_description_url_match" | "invalid_representative_country" | "invalid_statement_descriptor_business_mismatch" | "invalid_statement_descriptor_denylisted" | "invalid_statement_descriptor_length" | "invalid_statement_descriptor_prefix_denylisted" | "invalid_statement_descriptor_prefix_mismatch" | "invalid_street_address" | "invalid_tax_id" | "invalid_tax_id_format" | "invalid_tos_acceptance" | "invalid_url_denylisted" | "invalid_url_format" | "invalid_url_length" | "invalid_url_web_presence_detected" | "invalid_url_website_business_information_mismatch" | "invalid_url_website_empty" | "invalid_url_website_inaccessible" | "invalid_url_website_inaccessible_geoblocked" | "invalid_url_website_inaccessible_password_protected" | "invalid_url_website_incomplete" | "invalid_url_website_incomplete_cancellation_policy" | "invalid_url_website_incomplete_customer_service_details" | "invalid_url_website_incomplete_legal_restrictions" | "invalid_url_website_incomplete_refund_policy" | "invalid_url_website_incomplete_return_policy" | "invalid_url_website_incomplete_terms_and_conditions" | "invalid_url_website_incomplete_under_construction" | "invalid_url_website_other" | "invalid_value_other" | "verification_directors_mismatch" | "verification_document_address_mismatch" | "verification_document_address_missing" | "verification_document_corrupt" | "verification_document_country_not_supported" | "verification_document_directors_mismatch" | "verification_document_dob_mismatch" | "verification_document_duplicate_type" | "verification_document_expired" | "verification_document_failed_copy" | "verification_document_failed_greyscale" | "verification_document_failed_other" | "verification_document_failed_test_mode" | "verification_document_fraudulent" | "verification_document_id_number_mismatch" | "verification_document_id_number_missing" | "verification_document_incomplete" | "verification_document_invalid" | "verification_document_issue_or_expiry_date_missing" | "verification_document_manipulated" | "verification_document_missing_back" | "verification_document_missing_front" | "verification_document_name_mismatch" | "verification_document_name_missing" | "verification_document_nationality_mismatch" | "verification_document_not_readable" | "verification_document_not_signed" | "verification_document_not_uploaded" | "verification_document_photo_mismatch" | "verification_document_too_large" | "verification_document_type_not_supported" | "verification_extraneous_directors" | "verification_failed_address_match" | "verification_failed_business_iec_number" | "verification_failed_document_match" | "verification_failed_id_number_match" | "verification_failed_keyed_identity" | "verification_failed_keyed_match" | "verification_failed_name_match" | "verification_failed_other" | "verification_failed_representative_authority" | "verification_failed_residential_address" | "verification_failed_tax_id_match" | "verification_failed_tax_id_not_issued" | "verification_missing_directors" | "verification_missing_executives" | "verification_missing_owners" | "verification_requires_additional_memorandum_of_associations" | "verification_requires_additional_proof_of_registration" | "verification_supportability";
    "stripe.Stripe.Person.Requirements.Error": {
      /** @description The code for the type of error. */
      code: components["schemas"]["stripe.Stripe.Person.Requirements.Error.Code"];
      /** @description An informative message that indicates the error type and provides additional details about the error. */
      reason: string;
      /** @description The specific user onboarding requirement field (in the requirements hash) that needs to be resolved. */
      requirement: string;
    };
    "stripe.Stripe.Person.Requirements": {
      /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
      alternatives: components["schemas"]["stripe.Stripe.Person.Requirements.Alternative"][] | null;
      /** @description Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
      currently_due: string[];
      /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
      errors: components["schemas"]["stripe.Stripe.Person.Requirements.Error"][];
      /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set. */
      eventually_due: string[];
      /** @description Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account. */
      past_due: string[];
      /** @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending. */
      pending_verification: string[];
    };
    "stripe.Stripe.Person.Verification.AdditionalDocument": {
      /** @description The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
      back: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read". */
      details: string | null;
      /** @description One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document. */
      details_code: string | null;
      /** @description The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
      front: (string | components["schemas"]["stripe.Stripe.File"]) | null;
    };
    "stripe.Stripe.Person.Verification.Document": {
      /** @description The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
      back: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read". */
      details: string | null;
      /** @description One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document. */
      details_code: string | null;
      /** @description The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
      front: (string | components["schemas"]["stripe.Stripe.File"]) | null;
    };
    "stripe.Stripe.Person.Verification": {
      /** @description A document showing address, either a passport, local ID card, or utility bill from a well-known utility company. */
      additional_document?: components["schemas"]["stripe.Stripe.Person.Verification.AdditionalDocument"] | null;
      /** @description A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified". */
      details?: string | null;
      /** @description One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person. */
      details_code?: string | null;
      document?: components["schemas"]["stripe.Stripe.Person.Verification.Document"];
      /** @description The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`. */
      status: string;
    };
    /**
     * @description This is an object representing a person associated with a Stripe account.
     *
     * A platform cannot access a person for an account where [account.controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, after creating an Account Link or Account Session to start Connect onboarding.
     *
     * See the [Standard onboarding](https://stripe.com/connect/standard-accounts) or [Express onboarding](https://stripe.com/connect/express-accounts) documentation for information about prefilling information and account onboarding steps. Learn more about [handling identity verification with the API](https://stripe.com/connect/handling-api-verification#person-information).
     */
    "stripe.Stripe.Person": {
      /** @description Unique identifier for the object. */
      id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "person";
      /** @description The account the person is associated with. */
      account: string;
      additional_tos_acceptances?: components["schemas"]["stripe.Stripe.Person.AdditionalTosAcceptances"];
      address?: components["schemas"]["stripe.Stripe.Address"];
      /** @description The Kana variation of the person's address (Japan only). */
      address_kana?: components["schemas"]["stripe.Stripe.Person.AddressKana"] | null;
      /** @description The Kanji variation of the person's address (Japan only). */
      address_kanji?: components["schemas"]["stripe.Stripe.Person.AddressKanji"] | null;
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Always true for a deleted object */
      deleted?: unknown;
      dob?: components["schemas"]["stripe.Stripe.Person.Dob"];
      /** @description The person's email address. */
      email?: string | null;
      /** @description The person's first name. */
      first_name?: string | null;
      /** @description The Kana variation of the person's first name (Japan only). */
      first_name_kana?: string | null;
      /** @description The Kanji variation of the person's first name (Japan only). */
      first_name_kanji?: string | null;
      /** @description A list of alternate names or aliases that the person is known by. */
      full_name_aliases?: string[];
      /** @description Information about the [upcoming new requirements for this person](https://stripe.com/docs/connect/custom-accounts/future-requirements), including what information needs to be collected, and by when. */
      future_requirements?: components["schemas"]["stripe.Stripe.Person.FutureRequirements"] | null;
      /** @description The person's gender (International regulations require either "male" or "female"). */
      gender?: string | null;
      /** @description Whether the person's `id_number` was provided. True if either the full ID number was provided or if only the required part of the ID number was provided (ex. last four of an individual's SSN for the US indicated by `ssn_last_4_provided`). */
      id_number_provided?: boolean;
      /** @description Whether the person's `id_number_secondary` was provided. */
      id_number_secondary_provided?: boolean;
      /** @description The person's last name. */
      last_name?: string | null;
      /** @description The Kana variation of the person's last name (Japan only). */
      last_name_kana?: string | null;
      /** @description The Kanji variation of the person's last name (Japan only). */
      last_name_kanji?: string | null;
      /** @description The person's maiden name. */
      maiden_name?: string | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata?: components["schemas"]["stripe.Stripe.Metadata"];
      /** @description The country where the person is a national. */
      nationality?: string | null;
      /** @description The person's phone number. */
      phone?: string | null;
      /** @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
      political_exposure?: components["schemas"]["stripe.Stripe.Person.PoliticalExposure"];
      registered_address?: components["schemas"]["stripe.Stripe.Address"];
      relationship?: components["schemas"]["stripe.Stripe.Person.Relationship"];
      /** @description Information about the requirements for this person, including what information needs to be collected, and by when. */
      requirements?: components["schemas"]["stripe.Stripe.Person.Requirements"] | null;
      /** @description Whether the last four digits of the person's Social Security number have been provided (U.S. only). */
      ssn_last_4_provided?: boolean;
      verification?: components["schemas"]["stripe.Stripe.Person.Verification"];
    };
    "stripe.Stripe.Account.Requirements.Alternative": {
      /** @description Fields that can be provided to satisfy all fields in `original_fields_due`. */
      alternative_fields_due: string[];
      /** @description Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`. */
      original_fields_due: string[];
    };
    /** @enum {string} */
    "stripe.Stripe.Account.Requirements.Error.Code": "invalid_address_city_state_postal_code" | "invalid_address_highway_contract_box" | "invalid_address_private_mailbox" | "invalid_business_profile_name" | "invalid_business_profile_name_denylisted" | "invalid_company_name_denylisted" | "invalid_dob_age_over_maximum" | "invalid_dob_age_under_18" | "invalid_dob_age_under_minimum" | "invalid_product_description_length" | "invalid_product_description_url_match" | "invalid_representative_country" | "invalid_statement_descriptor_business_mismatch" | "invalid_statement_descriptor_denylisted" | "invalid_statement_descriptor_length" | "invalid_statement_descriptor_prefix_denylisted" | "invalid_statement_descriptor_prefix_mismatch" | "invalid_street_address" | "invalid_tax_id" | "invalid_tax_id_format" | "invalid_tos_acceptance" | "invalid_url_denylisted" | "invalid_url_format" | "invalid_url_length" | "invalid_url_web_presence_detected" | "invalid_url_website_business_information_mismatch" | "invalid_url_website_empty" | "invalid_url_website_inaccessible" | "invalid_url_website_inaccessible_geoblocked" | "invalid_url_website_inaccessible_password_protected" | "invalid_url_website_incomplete" | "invalid_url_website_incomplete_cancellation_policy" | "invalid_url_website_incomplete_customer_service_details" | "invalid_url_website_incomplete_legal_restrictions" | "invalid_url_website_incomplete_refund_policy" | "invalid_url_website_incomplete_return_policy" | "invalid_url_website_incomplete_terms_and_conditions" | "invalid_url_website_incomplete_under_construction" | "invalid_url_website_other" | "invalid_value_other" | "verification_directors_mismatch" | "verification_document_address_mismatch" | "verification_document_address_missing" | "verification_document_corrupt" | "verification_document_country_not_supported" | "verification_document_directors_mismatch" | "verification_document_dob_mismatch" | "verification_document_duplicate_type" | "verification_document_expired" | "verification_document_failed_copy" | "verification_document_failed_greyscale" | "verification_document_failed_other" | "verification_document_failed_test_mode" | "verification_document_fraudulent" | "verification_document_id_number_mismatch" | "verification_document_id_number_missing" | "verification_document_incomplete" | "verification_document_invalid" | "verification_document_issue_or_expiry_date_missing" | "verification_document_manipulated" | "verification_document_missing_back" | "verification_document_missing_front" | "verification_document_name_mismatch" | "verification_document_name_missing" | "verification_document_nationality_mismatch" | "verification_document_not_readable" | "verification_document_not_signed" | "verification_document_not_uploaded" | "verification_document_photo_mismatch" | "verification_document_too_large" | "verification_document_type_not_supported" | "verification_extraneous_directors" | "verification_failed_address_match" | "verification_failed_business_iec_number" | "verification_failed_document_match" | "verification_failed_id_number_match" | "verification_failed_keyed_identity" | "verification_failed_keyed_match" | "verification_failed_name_match" | "verification_failed_other" | "verification_failed_representative_authority" | "verification_failed_residential_address" | "verification_failed_tax_id_match" | "verification_failed_tax_id_not_issued" | "verification_missing_directors" | "verification_missing_executives" | "verification_missing_owners" | "verification_requires_additional_memorandum_of_associations" | "verification_requires_additional_proof_of_registration" | "verification_supportability";
    "stripe.Stripe.Account.Requirements.Error": {
      /** @description The code for the type of error. */
      code: components["schemas"]["stripe.Stripe.Account.Requirements.Error.Code"];
      /** @description An informative message that indicates the error type and provides additional details about the error. */
      reason: string;
      /** @description The specific user onboarding requirement field (in the requirements hash) that needs to be resolved. */
      requirement: string;
    };
    "stripe.Stripe.Account.Requirements": {
      /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
      alternatives: components["schemas"]["stripe.Stripe.Account.Requirements.Alternative"][] | null;
      /**
       * Format: double
       * @description Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.
       */
      current_deadline: number | null;
      /** @description Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
      currently_due: string[] | null;
      /** @description If the account is disabled, this string describes why. [Learn more about handling verification issues](https://stripe.com/docs/connect/handling-api-verification). Can be `action_required.requested_capabilities`, `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.incomplete_verification`, `rejected.listed`, `rejected.other`, `rejected.terms_of_service`, `under_review`, or `other`. */
      disabled_reason: string | null;
      /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
      errors: components["schemas"]["stripe.Stripe.Account.Requirements.Error"][] | null;
      /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set. */
      eventually_due: string[] | null;
      /** @description Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account. */
      past_due: string[] | null;
      /** @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending. */
      pending_verification: string[] | null;
    };
    "stripe.Stripe.Account.Settings.BacsDebitPayments": {
      /** @description The Bacs Direct Debit display name for this account. For payments made with Bacs Direct Debit, this name appears on the mandate as the statement descriptor. Mobile banking apps display it as the name of the business. To use custom branding, set the Bacs Direct Debit Display Name during or right after creation. Custom branding incurs an additional monthly fee for the platform. The fee appears 5 business days after requesting Bacs. If you don't set the display name before requesting Bacs capability, it's automatically set as "Stripe" and the account is onboarded to Stripe branding, which is free. */
      display_name: string | null;
      /** @description The Bacs Direct Debit Service user number for this account. For payments made with Bacs Direct Debit, this number is a unique identifier of the account with our banking partners. */
      service_user_number: string | null;
    };
    "stripe.Stripe.Account.Settings.Branding": {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px. */
      icon: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px. */
      logo: (string | components["schemas"]["stripe.Stripe.File"]) | null;
      /** @description A CSS hex color value representing the primary branding color for this account */
      primary_color: string | null;
      /** @description A CSS hex color value representing the secondary branding color for this account */
      secondary_color: string | null;
    };
    "stripe.Stripe.Account.Settings.CardIssuing.TosAcceptance": {
      /**
       * Format: double
       * @description The Unix timestamp marking when the account representative accepted the service agreement.
       */
      date: number | null;
      /** @description The IP address from which the account representative accepted the service agreement. */
      ip: string | null;
      /** @description The user agent of the browser from which the account representative accepted the service agreement. */
      user_agent?: string;
    };
    "stripe.Stripe.Account.Settings.CardIssuing": {
      tos_acceptance?: components["schemas"]["stripe.Stripe.Account.Settings.CardIssuing.TosAcceptance"];
    };
    "stripe.Stripe.Account.Settings.CardPayments.DeclineOn": {
      /** @description Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification. */
      avs_failure: boolean;
      /** @description Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification. */
      cvc_failure: boolean;
    };
    "stripe.Stripe.Account.Settings.CardPayments": {
      decline_on?: components["schemas"]["stripe.Stripe.Account.Settings.CardPayments.DeclineOn"];
      /** @description The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion. */
      statement_descriptor_prefix: string | null;
      /** @description The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kana` specified on the charge. `statement_descriptor_prefix_kana` is useful for maximizing descriptor space for the dynamic portion. */
      statement_descriptor_prefix_kana: string | null;
      /** @description The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kanji` specified on the charge. `statement_descriptor_prefix_kanji` is useful for maximizing descriptor space for the dynamic portion. */
      statement_descriptor_prefix_kanji: string | null;
    };
    "stripe.Stripe.Account.Settings.Dashboard": {
      /** @description The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts. */
      display_name: string | null;
      /** @description The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). */
      timezone: string | null;
    };
    "stripe.Stripe.Account.Settings.Invoices": {
      /** @description The list of default Account Tax IDs to automatically include on invoices. Account Tax IDs get added when an invoice is finalized. */
      default_account_tax_ids: ((string | components["schemas"]["stripe.Stripe.TaxId"])[]) | null;
    };
    "stripe.Stripe.Account.Settings.Payments": {
      /** @description The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. */
      statement_descriptor: string | null;
      /** @description The Kana variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors). */
      statement_descriptor_kana: string | null;
      /** @description The Kanji variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors). */
      statement_descriptor_kanji: string | null;
      /** @description The Kana variation of `statement_descriptor_prefix` used for card charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors). */
      statement_descriptor_prefix_kana: string | null;
      /** @description The Kanji variation of `statement_descriptor_prefix` used for card charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors). */
      statement_descriptor_prefix_kanji: string | null;
    };
    "stripe.Stripe.Account.Settings.Payouts.Schedule": {
      /**
       * Format: double
       * @description The number of days charges for the account will be held before being paid out.
       */
      delay_days: number;
      /** @description How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`. */
      interval: string;
      /**
       * Format: double
       * @description The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.
       */
      monthly_anchor?: number;
      /** @description The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly. */
      weekly_anchor?: string;
    };
    "stripe.Stripe.Account.Settings.Payouts": {
      /** @description A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See [Understanding Connect account balances](https://stripe.com/connect/account-balances) for details. The default value is `false` when [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, otherwise `true`. */
      debit_negative_balances: boolean;
      schedule: components["schemas"]["stripe.Stripe.Account.Settings.Payouts.Schedule"];
      /** @description The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard. */
      statement_descriptor: string | null;
    };
    "stripe.Stripe.Account.Settings.SepaDebitPayments": {
      /** @description SEPA creditor identifier that identifies the company making the payment. */
      creditor_id?: string;
    };
    "stripe.Stripe.Account.Settings.Treasury.TosAcceptance": {
      /**
       * Format: double
       * @description The Unix timestamp marking when the account representative accepted the service agreement.
       */
      date: number | null;
      /** @description The IP address from which the account representative accepted the service agreement. */
      ip: string | null;
      /** @description The user agent of the browser from which the account representative accepted the service agreement. */
      user_agent?: string;
    };
    "stripe.Stripe.Account.Settings.Treasury": {
      tos_acceptance?: components["schemas"]["stripe.Stripe.Account.Settings.Treasury.TosAcceptance"];
    };
    "stripe.Stripe.Account.Settings": {
      bacs_debit_payments?: components["schemas"]["stripe.Stripe.Account.Settings.BacsDebitPayments"];
      branding: components["schemas"]["stripe.Stripe.Account.Settings.Branding"];
      card_issuing?: components["schemas"]["stripe.Stripe.Account.Settings.CardIssuing"];
      card_payments: components["schemas"]["stripe.Stripe.Account.Settings.CardPayments"];
      dashboard: components["schemas"]["stripe.Stripe.Account.Settings.Dashboard"];
      invoices?: components["schemas"]["stripe.Stripe.Account.Settings.Invoices"];
      payments: components["schemas"]["stripe.Stripe.Account.Settings.Payments"];
      payouts?: components["schemas"]["stripe.Stripe.Account.Settings.Payouts"];
      sepa_debit_payments?: components["schemas"]["stripe.Stripe.Account.Settings.SepaDebitPayments"];
      treasury?: components["schemas"]["stripe.Stripe.Account.Settings.Treasury"];
    };
    "stripe.Stripe.Account.TosAcceptance": {
      /**
       * Format: double
       * @description The Unix timestamp marking when the account representative accepted their service agreement
       */
      date?: number | null;
      /** @description The IP address from which the account representative accepted their service agreement */
      ip?: string | null;
      /** @description The user's service agreement type */
      service_agreement?: string;
      /** @description The user agent of the browser from which the account representative accepted their service agreement */
      user_agent?: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Account.Type": "custom" | "express" | "none" | "standard";
    /** @enum {string} */
    "stripe.Stripe.Subscription.AutomaticTax.Liability.Type": "account" | "self";
    "stripe.Stripe.Subscription.AutomaticTax.Liability": {
      /** @description The connected account being referenced when `type` is `account`. */
      account?: string | components["schemas"]["stripe.Stripe.Account"];
      /** @description Type of the account referenced. */
      type: components["schemas"]["stripe.Stripe.Subscription.AutomaticTax.Liability.Type"];
    };
    "stripe.Stripe.Subscription.AutomaticTax": {
      /** @description Whether Stripe automatically computes tax on this subscription. */
      enabled: boolean;
      /** @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
      liability: components["schemas"]["stripe.Stripe.Subscription.AutomaticTax.Liability"] | null;
    };
    "stripe.Stripe.Subscription.BillingCycleAnchorConfig": {
      /**
       * Format: double
       * @description The day of the month of the billing_cycle_anchor.
       */
      day_of_month: number;
      /**
       * Format: double
       * @description The hour of the day of the billing_cycle_anchor.
       */
      hour: number | null;
      /**
       * Format: double
       * @description The minute of the hour of the billing_cycle_anchor.
       */
      minute: number | null;
      /**
       * Format: double
       * @description The month to start full cycle billing periods.
       */
      month: number | null;
      /**
       * Format: double
       * @description The second of the minute of the billing_cycle_anchor.
       */
      second: number | null;
    };
    "stripe.Stripe.Subscription.BillingThresholds": {
      /**
       * Format: double
       * @description Monetary threshold that triggers the subscription to create an invoice
       */
      amount_gte: number | null;
      /** @description Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`. */
      reset_billing_cycle_anchor: boolean | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Subscription.CancellationDetails.Feedback": "customer_service" | "low_quality" | "missing_features" | "other" | "switched_service" | "too_complex" | "too_expensive" | "unused";
    /** @enum {string} */
    "stripe.Stripe.Subscription.CancellationDetails.Reason": "cancellation_requested" | "payment_disputed" | "payment_failed";
    "stripe.Stripe.Subscription.CancellationDetails": {
      /** @description Additional comments about why the user canceled the subscription, if the subscription was canceled explicitly by the user. */
      comment: string | null;
      /** @description The customer submitted reason for why they canceled, if the subscription was canceled explicitly by the user. */
      feedback: components["schemas"]["stripe.Stripe.Subscription.CancellationDetails.Feedback"] | null;
      /** @description Why this subscription was canceled. */
      reason: components["schemas"]["stripe.Stripe.Subscription.CancellationDetails.Reason"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Subscription.CollectionMethod": "charge_automatically" | "send_invoice";
    /** @enum {string} */
    "stripe.Stripe.Subscription.InvoiceSettings.Issuer.Type": "account" | "self";
    "stripe.Stripe.Subscription.InvoiceSettings.Issuer": {
      /** @description The connected account being referenced when `type` is `account`. */
      account?: string | components["schemas"]["stripe.Stripe.Account"];
      /** @description Type of the account referenced. */
      type: components["schemas"]["stripe.Stripe.Subscription.InvoiceSettings.Issuer.Type"];
    };
    "stripe.Stripe.Subscription.InvoiceSettings": {
      /** @description The account tax IDs associated with the subscription. Will be set on invoices generated by the subscription. */
      account_tax_ids: ((string | components["schemas"]["stripe.Stripe.TaxId"] | components["schemas"]["stripe.Stripe.DeletedTaxId"])[]) | null;
      issuer: components["schemas"]["stripe.Stripe.Subscription.InvoiceSettings.Issuer"];
    };
    /**
     * @description A container for paginated lists of objects.
     * The array of objects is on the `.data` property,
     * and `.has_more` indicates whether there are additional objects beyond the end of this list.
     *
     * Learn more in Stripe's [pagination docs](https://stripe.com/docs/api/pagination?lang=node)
     * or, when iterating over many items, try [auto-pagination](https://github.com/stripe/stripe-node#auto-pagination) instead.
     */
    "stripe.Stripe.ApiList_stripe.Stripe.SubscriptionItem_": {
      /** @enum {string} */
      object: "list";
      data: components["schemas"]["stripe.Stripe.SubscriptionItem"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      has_more: boolean;
      /** @description The URL where this list can be accessed. */
      url: string;
    };
    /** @enum {string} */
    "stripe.Stripe.Subscription.PauseCollection.Behavior": "keep_as_draft" | "mark_uncollectible" | "void";
    "stripe.Stripe.Subscription.PauseCollection": {
      /** @description The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`. */
      behavior: components["schemas"]["stripe.Stripe.Subscription.PauseCollection.Behavior"];
      /**
       * Format: double
       * @description The time after which the subscription will resume collecting payments.
       */
      resumes_at: number | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType": "business" | "personal";
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions": {
      /** @description Transaction type of the mandate. */
      transaction_type: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions.TransactionType"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit.VerificationMethod": "automatic" | "instant" | "microdeposits";
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit": {
      mandate_options?: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit.MandateOptions"];
      /** @description Bank account verification method. */
      verification_method?: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit.VerificationMethod"];
    };
    /** @enum {string} */
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Bancontact.PreferredLanguage": "de" | "en" | "fr" | "nl";
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Bancontact": {
      /** @description Preferred language of the Bancontact authorization page that the customer is redirected to. */
      preferred_language: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Bancontact.PreferredLanguage"];
    };
    /** @enum {string} */
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.MandateOptions.AmountType": "fixed" | "maximum";
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.MandateOptions": {
      /**
       * Format: double
       * @description Amount to be charged for future payments.
       */
      amount: number | null;
      /** @description One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param. */
      amount_type: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.MandateOptions.AmountType"] | null;
      /** @description A description of the mandate or subscription that is meant to be displayed to the customer. */
      description: string | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.Network": "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "girocard" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa";
    /** @enum {string} */
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.RequestThreeDSecure": "any" | "automatic" | "challenge";
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card": {
      mandate_options?: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.MandateOptions"];
      /** @description Selected network to process this Subscription on. Depends on the available networks of the card attached to the Subscription. Can be only set confirm-time. */
      network: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.Network"] | null;
      /** @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
      request_three_d_secure: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card.RequestThreeDSecure"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer.Country": "BE" | "DE" | "ES" | "FR" | "IE" | "NL";
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer": {
      /** @description The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`. */
      country: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer.Country"];
    };
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer": {
      eu_bank_transfer?: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer.EuBankTransfer"];
      /** @description The bank transfer type that can be used for funding. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`. */
      type: string | null;
    };
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance": {
      bank_transfer?: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance.BankTransfer"];
      /**
       * @description The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
       * @enum {string|null}
       */
      funding_type: "bank_transfer" | null;
    };
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Konbini": Record<string, never>;
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.SepaDebit": Record<string, never>;
    /** @enum {string} */
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory": "checking" | "savings";
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters": {
      /** @description The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`. */
      account_subcategories?: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters.AccountSubcategory"][];
    };
    /** @enum {string} */
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission": "balances" | "ownership" | "payment_method" | "transactions";
    /** @enum {string} */
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch": "balances" | "ownership" | "transactions";
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections": {
      filters?: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Filters"];
      /** @description The list of permissions to request. The `payment_method` permission must be included. */
      permissions?: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Permission"][];
      /** @description Data features requested to be retrieved upon account creation. */
      prefetch: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections.Prefetch"][] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.VerificationMethod": "automatic" | "instant" | "microdeposits";
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount": {
      financial_connections?: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.FinancialConnections"];
      /** @description Bank account verification method. */
      verification_method?: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount.VerificationMethod"];
    };
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions": {
      /** @description This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription. */
      acss_debit: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.AcssDebit"] | null;
      /** @description This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription. */
      bancontact: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Bancontact"] | null;
      /** @description This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription. */
      card: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Card"] | null;
      /** @description This sub-hash contains details about the Bank transfer payment method options to pass to invoices created by the subscription. */
      customer_balance: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.CustomerBalance"] | null;
      /** @description This sub-hash contains details about the Konbini payment method options to pass to invoices created by the subscription. */
      konbini: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.Konbini"] | null;
      /** @description This sub-hash contains details about the SEPA Direct Debit payment method options to pass to invoices created by the subscription. */
      sepa_debit: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.SepaDebit"] | null;
      /** @description This sub-hash contains details about the ACH direct debit payment method options to pass to invoices created by the subscription. */
      us_bank_account: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions.UsBankAccount"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Subscription.PaymentSettings.PaymentMethodType": "ach_credit_transfer" | "ach_debit" | "acss_debit" | "amazon_pay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "konbini" | "link" | "multibanco" | "p24" | "paynow" | "paypal" | "promptpay" | "revolut_pay" | "sepa_credit_transfer" | "sepa_debit" | "sofort" | "swish" | "us_bank_account" | "wechat_pay";
    /** @enum {string} */
    "stripe.Stripe.Subscription.PaymentSettings.SaveDefaultPaymentMethod": "off" | "on_subscription";
    "stripe.Stripe.Subscription.PaymentSettings": {
      /** @description Payment-method-specific configuration to provide to invoices created by the subscription. */
      payment_method_options: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodOptions"] | null;
      /** @description The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice's default payment method, the subscription's default payment method, the customer's default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
      payment_method_types: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.PaymentMethodType"][] | null;
      /** @description Configure whether Stripe updates `subscription.default_payment_method` when payment succeeds. Defaults to `off`. */
      save_default_payment_method: components["schemas"]["stripe.Stripe.Subscription.PaymentSettings.SaveDefaultPaymentMethod"] | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Subscription.PendingInvoiceItemInterval.Interval": "day" | "month" | "week" | "year";
    "stripe.Stripe.Subscription.PendingInvoiceItemInterval": {
      /** @description Specifies invoicing frequency. Either `day`, `week`, `month` or `year`. */
      interval: components["schemas"]["stripe.Stripe.Subscription.PendingInvoiceItemInterval.Interval"];
      /**
       * Format: double
       * @description The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
       */
      interval_count: number;
    };
    "stripe.Stripe.Subscription.PendingUpdate": {
      /**
       * Format: double
       * @description If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.
       */
      billing_cycle_anchor: number | null;
      /**
       * Format: double
       * @description The point after which the changes reflected by this update will be discarded and no longer applied.
       */
      expires_at: number;
      /** @description List of subscription items, each with an attached plan, that will be set if the update is applied. */
      subscription_items: components["schemas"]["stripe.Stripe.SubscriptionItem"][] | null;
      /**
       * Format: double
       * @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
       */
      trial_end: number | null;
      /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
      trial_from_plan: boolean | null;
    };
    /** @enum {string} */
    "stripe.Stripe.Subscription.Status": "active" | "canceled" | "incomplete" | "incomplete_expired" | "past_due" | "paused" | "trialing" | "unpaid";
    "stripe.Stripe.Subscription.TransferData": {
      /**
       * Format: double
       * @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
       */
      amount_percent: number | null;
      /** @description The account where funds from the payment will be transferred to upon payment success. */
      destination: string | components["schemas"]["stripe.Stripe.Account"];
    };
    /** @enum {string} */
    "stripe.Stripe.Subscription.TrialSettings.EndBehavior.MissingPaymentMethod": "cancel" | "create_invoice" | "pause";
    "stripe.Stripe.Subscription.TrialSettings.EndBehavior": {
      /** @description Indicates how the subscription should change when the trial ends if the user did not provide a payment method. */
      missing_payment_method: components["schemas"]["stripe.Stripe.Subscription.TrialSettings.EndBehavior.MissingPaymentMethod"];
    };
    "stripe.Stripe.Subscription.TrialSettings": {
      /** @description Defines how a subscription behaves when a free trial ends. */
      end_behavior: components["schemas"]["stripe.Stripe.Subscription.TrialSettings.EndBehavior"];
    };
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.stripe.Stripe.Discount_": {
      [key: string]: components["schemas"]["stripe.Stripe.Discount"];
    };
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_stripe.Stripe.Invoice.Exclude_keyofstripe.Stripe.Invoice.id__": {
      /** @description A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified. */
      number: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      object: "invoice";
      /** @description The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) */
      status: components["schemas"]["stripe.Stripe.Invoice.Status"];
      /** @description ID of the Connect Application that created the invoice. */
      application: string | components["schemas"]["stripe.Stripe.Application"] | components["schemas"]["stripe.Stripe.DeletedApplication"];
      /** @description The subscription that this invoice was prepared for, if any. */
      subscription: string | components["schemas"]["stripe.Stripe.Subscription"];
      /** @description The ID of the customer who will be billed. */
      customer: string | components["schemas"]["stripe.Stripe.Customer"] | components["schemas"]["stripe.Stripe.DeletedCustomer"];
      /** @description Always true for a deleted object */
      deleted?: unknown;
      issuer: components["schemas"]["stripe.Stripe.Invoice.Issuer"];
      /** @description ID of the latest charge generated for this invoice, if any. */
      charge: string | components["schemas"]["stripe.Stripe.Charge"];
      /** @description Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance. */
      paid: boolean;
      /** @description The country of the business associated with this invoice, most often the business creating the invoice. */
      account_country: string;
      /** @description The public name of the business associated with this invoice, most often the business creating the invoice. */
      account_name: string;
      /** @description The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
      account_tax_ids: (string | components["schemas"]["stripe.Stripe.TaxId"] | components["schemas"]["stripe.Stripe.DeletedTaxId"])[];
      /**
       * Format: double
       * @description Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
       */
      amount_due: number;
      /**
       * Format: double
       * @description The amount, in cents (or local equivalent), that was paid.
       */
      amount_paid: number;
      /**
       * Format: double
       * @description The difference between amount_due and amount_paid, in cents (or local equivalent).
       */
      amount_remaining: number;
      /**
       * Format: double
       * @description This is the sum of all the shipping amounts.
       */
      amount_shipping: number;
      /**
       * Format: double
       * @description The fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
       */
      application_fee_amount: number;
      /**
       * Format: double
       * @description Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. If a failure is returned with a non-retryable return code, the invoice can no longer be retried unless a new payment method is obtained. Retries will continue to be scheduled, and attempt_count will continue to increment, but retries will only be executed if a new payment method is obtained.
       */
      attempt_count: number;
      /** @description Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users. */
      attempted: boolean;
      /** @description Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action. */
      auto_advance?: boolean;
      automatic_tax: components["schemas"]["stripe.Stripe.Invoice.AutomaticTax"];
      /**
       * Format: double
       * @description The time when this invoice is currently scheduled to be automatically finalized. The field will be `null` if the invoice is not scheduled to finalize in the future. If the invoice is not in the draft state, this field will always be `null` - see `finalized_at` for the time when an already-finalized invoice was finalized.
       */
      automatically_finalizes_at: number;
      /**
       * @description Indicates the reason why the invoice was created.
       *
       * * `manual`: Unrelated to a subscription, for example, created via the invoice editor.
       * * `subscription`: No longer in use. Applies to subscriptions from before May 2018 where no distinction was made between updates, cycles, and thresholds.
       * * `subscription_create`: A new subscription was created.
       * * `subscription_cycle`: A subscription advanced into a new period.
       * * `subscription_threshold`: A subscription reached a billing threshold.
       * * `subscription_update`: A subscription was updated.
       * * `upcoming`: Reserved for simulated invoices, per the upcoming invoice endpoint.
       */
      billing_reason: components["schemas"]["stripe.Stripe.Invoice.BillingReason"];
      /** @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. */
      collection_method: components["schemas"]["stripe.Stripe.Invoice.CollectionMethod"];
      /**
       * Format: double
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** @description Custom fields displayed on the invoice. */
      custom_fields: components["schemas"]["stripe.Stripe.Invoice.CustomField"][];
      /** @description The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated. */
      customer_address: components["schemas"]["stripe.Stripe.Address"];
      /** @description The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated. */
      customer_email: string;
      /** @description The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated. */
      customer_name: string;
      /** @description The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated. */
      customer_phone: string;
      /** @description The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated. */
      customer_shipping: components["schemas"]["stripe.Stripe.Invoice.CustomerShipping"];
      /** @description The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated. */
      customer_tax_exempt: components["schemas"]["stripe.Stripe.Invoice.CustomerTaxExempt"];
      /** @description The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated. */
      customer_tax_ids?: components["schemas"]["stripe.Stripe.Invoice.CustomerTaxId"][];
      /** @description ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
      default_payment_method: string | components["schemas"]["stripe.Stripe.PaymentMethod"];
      /** @description ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
      default_source: string | components["schemas"]["stripe.Stripe.CustomerSource"];
      /** @description The tax rates applied to this invoice, if any. */
      default_tax_rates: components["schemas"]["stripe.Stripe.TaxRate"][];
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
      description: string;
      /** @description Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts. */
      discount: components["schemas"]["stripe.Stripe.Discount"];
      /** @description The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
      discounts: (string | components["schemas"]["stripe.Stripe.Discount"] | components["schemas"]["stripe.Stripe.DeletedDiscount"])[];
      /**
       * Format: double
       * @description The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
       */
      due_date: number;
      /**
       * Format: double
       * @description The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt.
       */
      effective_at: number;
      /**
       * Format: double
       * @description Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
       */
      ending_balance: number;
      /** @description Footer displayed on the invoice. */
      footer: string;
      /** @description Details of the invoice that was cloned. See the [revision documentation](https://stripe.com/docs/invoicing/invoice-revisions) for more details. */
      from_invoice: components["schemas"]["stripe.Stripe.Invoice.FromInvoice"];
      /** @description The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null. */
      hosted_invoice_url?: string;
      /** @description The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null. */
      invoice_pdf?: string;
      /** @description The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized. */
      last_finalization_error: components["schemas"]["stripe.Stripe.Invoice.LastFinalizationError"];
      /** @description The ID of the most recent non-draft revision of this invoice */
      latest_revision: string | components["schemas"]["stripe.Stripe.Invoice"];
      /** @description The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order. */
      lines: components["schemas"]["stripe.Stripe.ApiList_stripe.Stripe.InvoiceLineItem_"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: components["schemas"]["stripe.Stripe.Metadata"];
      /**
       * Format: double
       * @description The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
       */
      next_payment_attempt: number;
      /** @description The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
      on_behalf_of: string | components["schemas"]["stripe.Stripe.Account"];
      /** @description Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe. */
      paid_out_of_band: boolean;
      /** @description The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent. */
      payment_intent: string | components["schemas"]["stripe.Stripe.PaymentIntent"];
      payment_settings: components["schemas"]["stripe.Stripe.Invoice.PaymentSettings"];
      /**
       * Format: double
       * @description End of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.
       */
      period_end: number;
      /**
       * Format: double
       * @description Start of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.
       */
      period_start: number;
      /**
       * Format: double
       * @description Total amount of all post-payment credit notes issued for this invoice.
       */
      post_payment_credit_notes_amount: number;
      /**
       * Format: double
       * @description Total amount of all pre-payment credit notes issued for this invoice.
       */
      pre_payment_credit_notes_amount: number;
      /** @description The quote this invoice was generated from. */
      quote: string | components["schemas"]["stripe.Stripe.Quote"];
      /** @description This is the transaction number that appears on email receipts sent for this invoice. */
      receipt_number: string;
      /** @description The rendering-related settings that control how the invoice is displayed on customer-facing surfaces such as PDF and Hosted Invoice Page. */
      rendering: components["schemas"]["stripe.Stripe.Invoice.Rendering"];
      /** @description The details of the cost of shipping, including the ShippingRate applied on the invoice. */
      shipping_cost: components["schemas"]["stripe.Stripe.Invoice.ShippingCost"];
      /** @description Shipping details for the invoice. The Invoice PDF will use the `shipping_details` value if it is set, otherwise the PDF will render the shipping address from the customer. */
      shipping_details: components["schemas"]["stripe.Stripe.Invoice.ShippingDetails"];
      /**
       * Format: double
       * @description Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. For revision invoices, this also includes any customer balance that was applied to the original invoice.
       */
      starting_balance: number;
      /** @description Extra information about an invoice for the customer's credit card statement. */
      statement_descriptor: string;
      status_transitions: components["schemas"]["stripe.Stripe.Invoice.StatusTransitions"];
      /** @description Details about the subscription that created this invoice. */
      subscription_details: components["schemas"]["stripe.Stripe.Invoice.SubscriptionDetails"];
      /**
       * Format: double
       * @description Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
       */
      subscription_proration_date?: number;
      /**
       * Format: double
       * @description Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or exclusive tax is applied. Item discounts are already incorporated
       */
      subtotal: number;
      /**
       * Format: double
       * @description The integer amount in cents (or local equivalent) representing the subtotal of the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated
       */
      subtotal_excluding_tax: number;
      /**
       * Format: double
       * @description The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.
       */
      tax: number;
      /** @description ID of the test clock this invoice belongs to. */
      test_clock: string | components["schemas"]["stripe.Stripe.TestHelpers.TestClock"];
      threshold_reason?: components["schemas"]["stripe.Stripe.Invoice.ThresholdReason"];
      /**
       * Format: double
       * @description Total after discounts and taxes.
       */
      total: number;
      /** @description The aggregate amounts calculated per discount across all line items. */
      total_discount_amounts: components["schemas"]["stripe.Stripe.Invoice.TotalDiscountAmount"][];
      /**
       * Format: double
       * @description The integer amount in cents (or local equivalent) representing the total amount of the invoice including all discounts but excluding all tax.
       */
      total_excluding_tax: number;
      /** @description The aggregate amounts calculated per tax rate for all line items. */
      total_tax_amounts: components["schemas"]["stripe.Stripe.Invoice.TotalTaxAmount"][];
      /** @description The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice. */
      transfer_data: components["schemas"]["stripe.Stripe.Invoice.TransferData"];
      /**
       * Format: double
       * @description Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
       */
      webhooks_delivered_at: number;
    };
    /** @description Construct a type with the properties of T except for those in type K. */
    "Omit_stripe.Stripe.Invoice.id_": components["schemas"]["Pick_stripe.Stripe.Invoice.Exclude_keyofstripe.Stripe.Invoice.id__"];
    "stripe.Stripe.UpcomingInvoice": components["schemas"]["Omit_stripe.Stripe.Invoice.id_"];
    ConvertToWavResponse: {
      data: string | null;
      error: string | null;
    };
    ConvertToWavRequestBody: {
      audioData: string;
    };
  };
  responses: {
  };
  parameters: {
  };
  requestBodies: {
  };
  headers: {
  };
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  PostUserFeedback: {
    requestBody: {
      content: {
        "application/json": {
          tag: string;
          feedback: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            success?: unknown;
            error: string;
          } | {
            error?: unknown;
            success: boolean;
          };
        };
      };
    };
  };
  CreateEvaluator: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEvaluatorParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorResult.string_"];
        };
      };
    };
  };
  GetEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorResult.string_"];
        };
      };
    };
  };
  UpdateEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateEvaluatorParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorResult.string_"];
        };
      };
    };
  };
  DeleteEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  QueryEvaluators: {
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorResult-Array.string_"];
        };
      };
    };
  };
  GetExperimentsForEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorExperiment-Array.string_"];
        };
      };
    };
  };
  GetOnlineEvaluators: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_OnlineEvaluatorByEvaluatorId-Array.string_"];
        };
      };
    };
  };
  CreateOnlineEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOnlineEvaluatorParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  DeleteOnlineEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
        onlineEvaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  TestPythonEvaluator: {
    requestBody: {
      content: {
        "application/json": {
          testInput: components["schemas"]["TestInput"];
          code: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__output-string--traces-string-Array--statusCode_63_-number_.string_"];
        };
      };
    };
  };
  TestLLMEvaluator: {
    requestBody: {
      content: {
        "application/json": {
          evaluatorName: string;
          testInput: components["schemas"]["TestInput"];
          evaluatorConfig: components["schemas"]["EvaluatorConfig"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["EvaluatorScoreResult"];
        };
      };
    };
  };
  TestLastMileEvaluator: {
    requestBody: {
      content: {
        "application/json": {
          testInput: components["schemas"]["TestInput"];
          config: components["schemas"]["LastMileConfigForm"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__score-number--input-string--output-string--ground_truth_63_-string_.string_"];
        };
      };
    };
  };
  GetEvaluatorStats: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorStats.string_"];
        };
      };
    };
  };
  CreateEmptyExperiment: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__experimentId-string_.string_"];
        };
      };
    };
  };
  CreateExperimentFromRequest: {
    parameters: {
      path: {
        requestId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__experimentId-string_.string_"];
        };
      };
    };
  };
  CreateNewExperiment: {
    requestBody: {
      content: {
        "application/json": {
          originalPromptVersion: string;
          name: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__experimentId-string_.string_"];
        };
      };
    };
  };
  GetExperiments: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ExperimentV2-Array.string_"];
        };
      };
    };
  };
  GetExperimentById: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ExtendedExperimentData.string_"];
        };
      };
    };
  };
  DeleteExperiment: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateNewPromptVersionForExperiment: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateNewPromptVersionForExperimentParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult.string_"];
        };
      };
    };
  };
  DeletePromptVersion: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetPromptVersionsForExperiment: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ExperimentV2PromptVersion-Array.string_"];
        };
      };
    };
  };
  GetInputKeysForExperiment: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string-Array.string_"];
        };
      };
    };
  };
  AddManualRowToExperiment: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputs: components["schemas"]["Record_string.string_"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string.string_"];
        };
      };
    };
  };
  AddManualRowsToExperimentBatch: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputs: components["schemas"]["Record_string.string_"][];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  DeleteExperimentTableRows: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputRecordIds: string[];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateExperimentTableRowBatch: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          rows: {
              autoInputs: unknown[];
              inputs: components["schemas"]["Record_string.string_"];
              inputRecordId: string;
            }[];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateExperimentTableRowFromDataset: {
    parameters: {
      path: {
        experimentId: string;
        datasetId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  UpdateExperimentTableRow: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputs: components["schemas"]["Record_string.string_"];
          inputRecordId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  RunHypothesis: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputRecordId: string;
          promptVersionId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string.string_"];
        };
      };
    };
  };
  GetExperimentEvaluators: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorResult-Array.string_"];
        };
      };
    };
  };
  CreateExperimentEvaluator: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          evaluatorId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  DeleteExperimentEvaluator: {
    parameters: {
      path: {
        experimentId: string;
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  RunExperimentEvaluators: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  ShouldRunEvaluators: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_boolean.string_"];
        };
      };
    };
  };
  GetExperimentPromptVersionScores: {
    parameters: {
      path: {
        experimentId: string;
        promptVersionId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_Record_string.ScoreV2_.string_"];
        };
      };
    };
  };
  GetExperimentScore: {
    parameters: {
      path: {
        experimentId: string;
        requestId: string;
        scoreKey: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ScoreV2-or-null.string_"];
        };
      };
    };
  };
  GetRequests: {
    /** @description Request query filters */
    requestBody: {
      content: {
        /**
         * @example {
         *   "filter": "all",
         *   "isCached": false,
         *   "limit": 10,
         *   "offset": 0,
         *   "sort": {
         *     "created_at": "desc"
         *   },
         *   "isScored": false,
         *   "isPartOfExperiment": false
         * }
         */
        "application/json": components["schemas"]["RequestQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeRequest-Array.string_"];
        };
      };
    };
  };
  GetRequestsClickhouse: {
    /** @description Request query filters */
    requestBody: {
      content: {
        /**
         * @example {
         *   "filter": "all",
         *   "isCached": false,
         *   "limit": 100,
         *   "offset": 0,
         *   "sort": {
         *     "created_at": "desc"
         *   },
         *   "includeInputs": false,
         *   "isScored": false,
         *   "isPartOfExperiment": false
         * }
         */
        "application/json": components["schemas"]["RequestQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeRequest-Array.string_"];
        };
      };
    };
  };
  GetRequestById: {
    parameters: {
      query?: {
        includeBody?: boolean;
      };
      path: {
        requestId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeRequest.string_"];
        };
      };
    };
  };
  GetRequestsByIds: {
    requestBody: {
      content: {
        "application/json": {
          requestIds: string[];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeRequest-Array.string_"];
        };
      };
    };
  };
  FeedbackRequest: {
    parameters: {
      path: {
        requestId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          rating: boolean;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  PutProperty: {
    parameters: {
      path: {
        requestId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          value: string;
          key: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetRequestAssetById: {
    parameters: {
      path: {
        requestId: string;
        assetId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeRequestAsset.string_"];
        };
      };
    };
  };
  AddScores: {
    parameters: {
      path: {
        requestId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScoreRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetPrompts: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptsQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptsResult-Array.string_"];
        };
      };
    };
  };
  GetPrompt: {
    parameters: {
      path: {
        promptId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptResult.string_"];
        };
      };
    };
  };
  DeletePrompt: {
    parameters: {
      path: {
        promptId: string;
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  CreatePrompt: {
    requestBody: {
      content: {
        "application/json": {
          metadata: components["schemas"]["Record_string.any_"];
          prompt: unknown;
          userDefinedId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_CreatePromptResponse.string_"];
        };
      };
    };
  };
  UpdatePromptUserDefinedId: {
    parameters: {
      path: {
        promptId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          userDefinedId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  EditPromptVersionLabel: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptEditSubversionLabelParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__metadata-Record_string.any__.string_"];
        };
      };
    };
  };
  EditPromptVersionTemplate: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptEditSubversionTemplateParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateSubversionFromUi: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptCreateSubversionParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult.string_"];
        };
      };
    };
  };
  CreateSubversion: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptCreateSubversionParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult.string_"];
        };
      };
    };
  };
  PromotePromptVersionToProduction: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          previousProductionVersionId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult.string_"];
        };
      };
    };
  };
  GetInputs: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          random?: boolean;
          /** Format: double */
          limit: number;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptInputRecord-Array.string_"];
        };
      };
    };
  };
  GetPromptExperiments: {
    parameters: {
      path: {
        promptId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array.string_"];
        };
      };
    };
  };
  GetPromptVersions: {
    parameters: {
      path: {
        promptId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptVersionsQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult-Array.string_"];
        };
      };
    };
  };
  GetPromptVersion: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult.string_"];
        };
      };
    };
  };
  GetPromptVersionsCompiled: {
    parameters: {
      path: {
        user_defined_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptVersiosQueryParamsCompiled"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResultCompiled.string_"];
        };
      };
    };
  };
  GetPromptVersionTemplates: {
    parameters: {
      path: {
        user_defined_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptVersiosQueryParamsCompiled"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResultFilled.string_"];
        };
      };
    };
  };
  GetSettings: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            useAzureForExperiment: boolean;
          };
        };
      };
    };
  };
  GetCostForPrompts: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  GetCostForEvals: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  GetCostForExperiments: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  GetFreeUsage: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  UpgradeToPro: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpgradeToProRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  UpgradeExistingCustomer: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpgradeToProRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  UpgradeToTeamBundle: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpgradeToTeamBundleRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  UpgradeExistingCustomerToTeamBundle: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpgradeToTeamBundleRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  ManageSubscription: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  UndoCancelSubscription: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": null;
        };
      };
    };
  };
  AddOns: {
    parameters: {
      path: {
        productType: "alerts" | "prompts" | "experiments" | "evals";
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": null;
        };
      };
    };
  };
  DeleteAddOns: {
    parameters: {
      path: {
        productType: "alerts" | "prompts" | "experiments" | "evals";
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": null;
        };
      };
    };
  };
  PreviewInvoice: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": ({
            evaluators_usage: components["schemas"]["LLMUsage"][];
            experiments_usage: components["schemas"]["LLMUsage"][];
            /** Format: double */
            total: number;
            /** Format: double */
            tax: number | null;
            /** Format: double */
            subtotal: number;
            discount: ({
              coupon: {
                /** Format: double */
                amount_off: number | null;
                /** Format: double */
                percent_off: number | null;
                name: string | null;
              };
            }) | null;
            lines: ({
              data: ({
                  description: string | null;
                  /** Format: double */
                  amount: number | null;
                  id: string | null;
                })[];
            }) | null;
            /** Format: double */
            next_payment_attempt: number | null;
            currency: string | null;
          }) | null;
        };
      };
    };
  };
  CancelSubscription: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": null;
        };
      };
    };
  };
  MigrateToPro: {
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  GetSubscription: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": ({
            items: ({
                price: {
                  product: ({
                    name: string | null;
                  }) | null;
                };
                /** Format: double */
                quantity?: number;
              })[];
            /** Format: double */
            trial_end: number | null;
            id: string;
            /** Format: double */
            current_period_start: number;
            /** Format: double */
            current_period_end: number;
            cancel_at_period_end: boolean;
            status: string;
          }) | null;
        };
      };
    };
  };
  HandleStripeWebhook: {
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  GetOrganizations: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__40_Database-at-public_91_Tables_93_-at-organization_91_Row_93_-and-_role-string__41_-Array.string_"];
        };
      };
    };
  };
  GetOrganization: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_Database-at-public_91_Tables_93_-at-organization_91_Row_93_.string_"];
        };
      };
    };
  };
  GetReseller: {
    parameters: {
      path: {
        resellerId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_Result__color-string--created_at-string--domain-string--governance_settings-Json--has_onboarded-boolean--icon-string--id-string--is_main_org-boolean--is_personal-boolean--limits-Json--logo_path-string--name-string--onboarding_status-Json--org_provider_key-string--organization_type-string--owner-string--percent_to_log-number--referral-string--request_limit-number--reseller_id-string--size-string--soft_delete-boolean--stripe_customer_id-string--stripe_metadata-Json--stripe_subscription_id-string--stripe_subscription_item_id-string--subscription_status-string--tier-string_-Array.string_.unknown_"];
        };
      };
    };
  };
  AcceptTerms: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateNewOrganization: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewOrganizationParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string.string_"];
        };
      };
    };
  };
  UpdateOrganization: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateOrganizationParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  OnboardOrganization: {
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  AddMemberToOrganization: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          email: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateOrganizationFilter: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          filterType: "dashboard" | "requests";
          filters: components["schemas"]["OrganizationFilter"][];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  UpdateOrganizationFilter: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          filterType: "dashboard" | "requests";
          filters: components["schemas"]["OrganizationFilter"][];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  DeleteOrganization: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetOrganizationLayout: {
    parameters: {
      query: {
        filterType: string;
      };
      path: {
        organizationId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_OrganizationLayout.string_"];
        };
      };
    };
  };
  GetOrganizationMembers: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_OrganizationMember-Array.string_"];
        };
      };
    };
  };
  UpdateOrganizationMember: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          memberId: string;
          role: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetOrganizationOwner: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_OrganizationOwner-Array.string_"];
        };
      };
    };
  };
  RemoveMemberFromOrganization: {
    parameters: {
      query: {
        memberId: string;
      };
      path: {
        organizationId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  SetupDemo: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  UpdateOnboardingStatus: {
    requestBody: {
      content: {
        "application/json": {
          has_onboarded: boolean;
          name: string;
          onboarding_status: components["schemas"]["OnboardingStatus"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  LogRequests: {
    /** @description Log message to log */
    requestBody: {
      content: {
        "application/json": components["schemas"]["KafkaMessageContents"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  GetMemberLimits: {
    parameters: {
      path: {
        memberId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ResultError_unknown_"] | components["schemas"]["ResultSuccess_unknown_"];
        };
      };
    };
  };
  SetMemberLimits: {
    parameters: {
      path: {
        memberId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: double */
          days: number;
          /** Format: double */
          limitUSD: number;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ResultError_unknown_"] | components["schemas"]["ResultSuccess_any_"];
        };
      };
    };
  };
  GetMyLimits: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ResultError_unknown_"] | components["schemas"]["ResultSuccess_unknown_"];
        };
      };
    };
  };
  IsGovernanceOrg: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ResultError_unknown_"] | components["schemas"]["ResultSuccess_unknown_"];
        };
      };
    };
  };
  GenerateHash: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateHashQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            error?: {
              details?: string;
              message?: string;
            };
            success?: boolean;
          };
        };
      };
    };
  };
  DatasetFineTune: {
    parameters: {
      path: {
        datasetId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FineTuneBodyParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["FineTuneResult"];
        };
      };
    };
  };
  FineTune: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FineTuneBody"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            error: string;
          } | {
            data: {
              url: string;
              fineTuneJob: string;
            };
            success: boolean;
          };
        };
      };
    };
  };
  FineTuneJobStats: {
    parameters: {
      path: {
        jobId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            error: string;
          } | {
            events: unknown;
            job: unknown;
          };
        };
      };
    };
  };
  GetFilters: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_StoreFilterType-Array.string_"];
        };
      };
    };
  };
  CreateFilter: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StoreFilterType"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__id-string_.string_"];
        };
      };
    };
  };
  GetFilter: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_StoreFilterType.string_"];
        };
      };
    };
  };
  DeleteFilter: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  UpdateFilter: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          filters: unknown;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  DemoCompletion: {
    requestBody: {
      content: {
        "application/json": {
          cache_enabled?: boolean;
          /** Format: double */
          max_tokens?: number;
          tool_choice?: components["schemas"]["ChatCompletionToolChoiceOption"];
          tools?: components["schemas"]["ChatCompletionTool"][];
          sessionPath?: string;
          sessionName?: string;
          sessionId?: string;
          userEmail?: string;
          promptId: string;
          messages: components["schemas"]["ChatCompletionMessageParam"][];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ChatCompletion.string_"];
        };
      };
    };
  };
  GetAlerts: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_AlertResponse.string_"];
        };
      };
    };
  };
  CreateAlert: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AlertRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string.string_"];
        };
      };
    };
  };
  DeleteAlert: {
    parameters: {
      path: {
        alertId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetAlertBanners: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__active-boolean--created_at-string--id-number--message-string--title-string--updated_at-string_-Array.string_"];
        };
      };
    };
  };
  UpdateFeatureFlags: {
    requestBody: {
      content: {
        "application/json": {
          orgId: string;
          flag: string;
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  DeleteFeatureFlag: {
    requestBody: {
      content: {
        "application/json": {
          orgId: string;
          flag: string;
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  GetFeatureFlags: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__organization_id-string--name-string--flags-string-Array_-Array.string_"];
        };
      };
    };
  };
  GetTopOrgsByUsage: {
    requestBody: {
      content: {
        "application/json": {
          /** Format: double */
          minRequests: number;
          /** Format: double */
          limit: number;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            organizations: ({
                usage: {
                  /** Format: double */
                  all_time_count: number;
                  monthly_usage: {
                      /** Format: double */
                      requestCount: number;
                      month: string;
                    }[];
                  /** Format: double */
                  requests_last_30_days: number;
                  /** Format: double */
                  total_requests: number;
                };
                organization: {
                  members: ({
                      last_sign_in_at: string | null;
                      role: string;
                      name: string;
                      email: string;
                      id: string;
                    })[];
                  subscription_status: string | null;
                  stripe_subscription_id: string | null;
                  stripe_customer_id: string | null;
                  tier: string;
                  owner: string;
                  created_at: string;
                  name: string;
                  id: string;
                };
              })[];
          };
        };
      };
    };
  };
  GetTopOrgs: {
    requestBody: {
      content: {
        "application/json": {
          emailContains?: string[];
          orgsNameContains?: string[];
          orgsId?: string[];
          /** @enum {string} */
          tier: "all" | "pro" | "free" | "growth" | "enterprise";
          endDate: string;
          startDate: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
              /** Format: double */
              ct: number;
              organization_id: string;
              members: {
                  last_active: string;
                  role: string;
                  email: string;
                  id: string;
                }[];
              name: string;
              owner_last_login: string;
              owner_email: string;
              tier: string;
              id: string;
              overTime: {
                  organization_id: string;
                  dt: string;
                  /** Format: double */
                  count: number;
                }[];
            }[];
        };
      };
    };
  };
  GetAdmins: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": ({
              user_id: string | null;
              user_email: string | null;
              /** Format: double */
              id: number;
              created_at: string;
            })[];
        };
      };
    };
  };
  Whodis: {
    requestBody: {
      content: {
        "application/json": {
          email?: string;
          userId?: string;
          organizationId?: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            organizations: ({
                usage: {
                  /** Format: double */
                  all_time_count: number;
                  monthly_usage: {
                      /** Format: double */
                      requestCount: number;
                      month: string;
                    }[];
                  /** Format: double */
                  requests_last_30_days: number;
                  /** Format: double */
                  total_requests: number;
                };
                organization: {
                  members: ({
                      last_sign_in_at: string | null;
                      role: string;
                      name: string;
                      email: string;
                      id: string;
                    })[];
                  subscription_status: string | null;
                  stripe_subscription_id: string | null;
                  stripe_customer_id: string | null;
                  tier: string;
                  owner: string;
                  created_at: string;
                  name: string;
                  id: string;
                };
              })[];
          };
        };
      };
    };
  };
  GetSetting: {
    parameters: {
      path: {
        name: components["schemas"]["SettingName"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Setting"];
        };
      };
    };
  };
  AzureTest: {
    requestBody: {
      content: {
        "application/json": {
          requestBody: unknown;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            fetchParams: {
              body: string;
              headers: {
                [key: string]: string;
              };
              url: components["schemas"]["url.URL"];
            };
            resultText: string;
          };
        };
      };
    };
  };
  UpdateSetting: {
    requestBody: {
      content: {
        "application/json": {
          settings: components["schemas"]["Setting"];
          name: components["schemas"]["SettingName"];
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  FindAllOrgs: {
    requestBody: {
      content: {
        "application/json": {
          orgName: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            orgs: {
                id: string;
                name: string;
              }[];
          };
        };
      };
    };
  };
  NewOrgsOverTime: {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          groupBy: "hour" | "day" | "week" | "month";
          /** @enum {string} */
          timeFilter: "1 days" | "7 days" | "1 month" | "3 months" | "6 months" | "12 months" | "24 months";
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            usersOverTime: {
                day: string;
                count: string;
              }[];
            newUsersOvertime: {
                day: string;
                count: string;
              }[];
            newOrgsOvertime: {
                day: string;
                count: string;
              }[];
          };
        };
      };
    };
  };
  AddAdminsToOrg: {
    requestBody: {
      content: {
        "application/json": {
          adminIds: string[];
          orgId: string;
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  CreateAlertBanner: {
    requestBody: {
      content: {
        "application/json": {
          message: string;
          title: string;
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  UpdateAlertBanner: {
    requestBody: {
      content: {
        "application/json": {
          active: boolean;
          /** Format: double */
          id: number;
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  GetTopOrgsOverTime: {
    requestBody: {
      content: {
        "application/json": {
          groupBy?: string;
          /** Format: double */
          limit: number;
          timeRange: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            organizations: {
                data: {
                    /** Format: double */
                    request_count: number;
                    time: string;
                  }[];
                organization_name: string;
                organization_id: string;
              }[];
          };
        };
      };
    };
  };
  /**
   * @description Get all subscription data, invoices, and discounts for the admin projections page
   * Uses caching to minimize API calls to Stripe
   */
  GetSubscriptionData: {
    parameters: {
      query?: {
        forceRefresh?: boolean;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            upcomingInvoices: components["schemas"]["stripe.Stripe.UpcomingInvoice"][];
            discounts: components["schemas"]["Record_string.stripe.Stripe.Discount_"];
            invoices: components["schemas"]["stripe.Stripe.Invoice"][];
            subscriptions: components["schemas"]["stripe.Stripe.Subscription"][];
          };
        };
      };
    };
  };
  ConvertToWav: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConvertToWavRequestBody"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ConvertToWavResponse"];
        };
      };
    };
  };
}
