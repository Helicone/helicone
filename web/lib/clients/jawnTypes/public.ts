type JsonValue = string | number | boolean | null | JsonArray | JsonObject;
interface JsonArray extends Array<JsonValue> {}
interface JsonObject { [key: string]: JsonValue; }

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/webhooks": {
    get: operations["GetWebhooks"];
    post: operations["NewWebhook"];
  };
  "/v1/webhooks/{webhookId}": {
    delete: operations["DeleteWebhook"];
  };
  "/v1/public/waitlist/experiments": {
    post: operations["AddToWaitlist"];
  };
  "/v1/vault/add": {
    post: operations["AddKey"];
  };
  "/v1/vault/keys": {
    get: operations["GetKeys"];
  };
  "/v1/vault/key/{providerKeyId}": {
    get: operations["GetKeyById"];
  };
  "/v1/vault/update/{id}": {
    patch: operations["UpdateKey"];
  };
  "/v1/user/metrics-overview/query": {
    post: operations["GetUserMetricsOverview"];
  };
  "/v1/user/metrics/query": {
    post: operations["GetUserMetrics"];
  };
  "/v1/user/query": {
    post: operations["GetUsers"];
  };
  "/v1/request/query": {
    post: operations["GetRequests"];
  };
  "/v1/request/query-clickhouse": {
    post: operations["GetRequestsClickhouse"];
  };
  "/v1/request/{requestId}": {
    get: operations["GetRequestById"];
  };
  "/v1/request/query-ids": {
    post: operations["GetRequestsByIds"];
  };
  "/v1/request/{requestId}/feedback": {
    post: operations["FeedbackRequest"];
  };
  "/v1/request/{requestId}/property": {
    put: operations["PutProperty"];
  };
  "/v1/request/{requestId}/assets/{assetId}": {
    post: operations["GetRequestAssetById"];
  };
  "/v1/request/{requestId}/score": {
    post: operations["AddScores"];
  };
  "/v1/prompt/query": {
    post: operations["GetPrompts"];
  };
  "/v1/prompt/{promptId}/query": {
    post: operations["GetPrompt"];
  };
  "/v1/prompt/{promptId}": {
    delete: operations["DeletePrompt"];
  };
  "/v1/prompt/create": {
    post: operations["CreatePrompt"];
  };
  "/v1/prompt/{promptId}/user-defined-id": {
    patch: operations["UpdatePromptUserDefinedId"];
  };
  "/v1/prompt/version/{promptVersionId}/edit-label": {
    post: operations["EditPromptVersionLabel"];
  };
  "/v1/prompt/version/{promptVersionId}/edit-template": {
    post: operations["EditPromptVersionTemplate"];
  };
  "/v1/prompt/version/{promptVersionId}/subversion-from-ui": {
    post: operations["CreateSubversionFromUi"];
  };
  "/v1/prompt/version/{promptVersionId}/subversion": {
    post: operations["CreateSubversion"];
  };
  "/v1/prompt/version/{promptVersionId}/promote": {
    post: operations["PromotePromptVersionToProduction"];
  };
  "/v1/prompt/version/{promptVersionId}/inputs/query": {
    post: operations["GetInputs"];
  };
  "/v1/prompt/{promptId}/experiments": {
    get: operations["GetPromptExperiments"];
  };
  "/v1/prompt/{promptId}/versions/query": {
    post: operations["GetPromptVersions"];
  };
  "/v1/prompt/version/{promptVersionId}": {
    get: operations["GetPromptVersion"];
    delete: operations["DeletePromptVersion"];
  };
  "/v1/prompt/{user_defined_id}/compile": {
    post: operations["GetPromptVersionsCompiled"];
  };
  "/v1/prompt/{user_defined_id}/template": {
    post: operations["GetPromptVersionTemplates"];
  };
  "/v1/evaluator": {
    post: operations["CreateEvaluator"];
  };
  "/v1/evaluator/{evaluatorId}": {
    get: operations["GetEvaluator"];
    put: operations["UpdateEvaluator"];
    delete: operations["DeleteEvaluator"];
  };
  "/v1/evaluator/query": {
    post: operations["QueryEvaluators"];
  };
  "/v1/evaluator/{evaluatorId}/experiments": {
    get: operations["GetExperimentsForEvaluator"];
  };
  "/v1/evaluator/{evaluatorId}/onlineEvaluators": {
    get: operations["GetOnlineEvaluators"];
    post: operations["CreateOnlineEvaluator"];
  };
  "/v1/evaluator/{evaluatorId}/onlineEvaluators/{onlineEvaluatorId}": {
    delete: operations["DeleteOnlineEvaluator"];
  };
  "/v1/evaluator/python/test": {
    post: operations["TestPythonEvaluator"];
  };
  "/v1/evaluator/llm/test": {
    post: operations["TestLLMEvaluator"];
  };
  "/v1/evaluator/lastmile/test": {
    post: operations["TestLastMileEvaluator"];
  };
  "/v1/evaluator/{evaluatorId}/stats": {
    get: operations["GetEvaluatorStats"];
  };
  "/v2/experiment/create/empty": {
    post: operations["CreateEmptyExperiment"];
  };
  "/v2/experiment/create/from-request/{requestId}": {
    post: operations["CreateExperimentFromRequest"];
  };
  "/v2/experiment/new": {
    post: operations["CreateNewExperiment"];
  };
  "/v2/experiment": {
    get: operations["GetExperiments"];
  };
  "/v2/experiment/{experimentId}": {
    get: operations["GetExperimentById"];
    delete: operations["DeleteExperiment"];
  };
  "/v2/experiment/{experimentId}/prompt-version": {
    post: operations["CreateNewPromptVersionForExperiment"];
  };
  "/v2/experiment/{experimentId}/prompt-version/{promptVersionId}": {
    delete: operations["DeletePromptVersion"];
  };
  "/v2/experiment/{experimentId}/prompt-versions": {
    get: operations["GetPromptVersionsForExperiment"];
  };
  "/v2/experiment/{experimentId}/input-keys": {
    get: operations["GetInputKeysForExperiment"];
  };
  "/v2/experiment/{experimentId}/add-manual-row": {
    post: operations["AddManualRowToExperiment"];
  };
  "/v2/experiment/{experimentId}/add-manual-rows-batch": {
    post: operations["AddManualRowsToExperimentBatch"];
  };
  "/v2/experiment/{experimentId}/rows": {
    delete: operations["DeleteExperimentTableRows"];
  };
  "/v2/experiment/{experimentId}/row/insert/batch": {
    post: operations["CreateExperimentTableRowBatch"];
  };
  "/v2/experiment/{experimentId}/row/insert/dataset/{datasetId}": {
    post: operations["CreateExperimentTableRowFromDataset"];
  };
  "/v2/experiment/{experimentId}/row/update": {
    post: operations["UpdateExperimentTableRow"];
  };
  "/v2/experiment/{experimentId}/run-hypothesis": {
    post: operations["RunHypothesis"];
  };
  "/v2/experiment/{experimentId}/evaluators": {
    get: operations["GetExperimentEvaluators"];
    post: operations["CreateExperimentEvaluator"];
  };
  "/v2/experiment/{experimentId}/evaluators/{evaluatorId}": {
    delete: operations["DeleteExperimentEvaluator"];
  };
  "/v2/experiment/{experimentId}/evaluators/run": {
    post: operations["RunExperimentEvaluators"];
  };
  "/v2/experiment/{experimentId}/should-run-evaluators": {
    get: operations["ShouldRunEvaluators"];
  };
  "/v2/experiment/{experimentId}/{promptVersionId}/scores": {
    get: operations["GetExperimentPromptVersionScores"];
  };
  "/v2/experiment/{experimentId}/{requestId}/{scoreKey}": {
    get: operations["GetExperimentScore"];
  };
  "/v1/trace/log": {
    post: operations["LogTrace"];
  };
  "/v1/trace/log-python": {
    post: operations["LogPythonTrace"];
  };
  "/v1/stripe/subscription/cost-for-prompts": {
    get: operations["GetCostForPrompts"];
  };
  "/v1/stripe/subscription/cost-for-evals": {
    get: operations["GetCostForEvals"];
  };
  "/v1/stripe/subscription/cost-for-experiments": {
    get: operations["GetCostForExperiments"];
  };
  "/v1/stripe/subscription/free/usage": {
    get: operations["GetFreeUsage"];
  };
  "/v1/stripe/subscription/new-customer/upgrade-to-pro": {
    post: operations["UpgradeToPro"];
  };
  "/v1/stripe/subscription/existing-customer/upgrade-to-pro": {
    post: operations["UpgradeExistingCustomer"];
  };
  "/v1/stripe/subscription/new-customer/upgrade-to-team-bundle": {
    post: operations["UpgradeToTeamBundle"];
  };
  "/v1/stripe/subscription/existing-customer/upgrade-to-team-bundle": {
    post: operations["UpgradeExistingCustomerToTeamBundle"];
  };
  "/v1/stripe/subscription/manage-subscription": {
    post: operations["ManageSubscription"];
  };
  "/v1/stripe/subscription/undo-cancel-subscription": {
    post: operations["UndoCancelSubscription"];
  };
  "/v1/stripe/subscription/add-ons/{productType}": {
    post: operations["AddOns"];
    delete: operations["DeleteAddOns"];
  };
  "/v1/stripe/subscription/preview-invoice": {
    get: operations["PreviewInvoice"];
  };
  "/v1/stripe/subscription/cancel-subscription": {
    post: operations["CancelSubscription"];
  };
  "/v1/stripe/subscription/migrate-to-pro": {
    post: operations["MigrateToPro"];
  };
  "/v1/stripe/subscription": {
    get: operations["GetSubscription"];
  };
  "/v1/stripe/webhook": {
    post: operations["HandleStripeWebhook"];
  };
  "/v1/session/has-session": {
    get: operations["HasSession"];
  };
  "/v1/session/query": {
    post: operations["GetSessions"];
  };
  "/v1/session/name/query": {
    post: operations["GetNames"];
  };
  "/v1/session/metrics/query": {
    post: operations["GetMetrics"];
  };
  "/v1/session/{sessionId}/feedback": {
    post: operations["UpdateSessionFeedback"];
  };
  "/v1/public/status/provider": {
    get: operations["GetAllProviderStatus"];
  };
  "/v1/public/status/provider/{provider}": {
    get: operations["GetProviderStatus"];
  };
  "/v1/property/query": {
    post: operations["GetProperties"];
  };
  "/v1/property/{propertyKey}/search": {
    post: operations["SearchProperties"];
  };
  "/v1/property/{propertyKey}/top-costs/query": {
    post: operations["GetTopCosts"];
  };
  "/v1/public/pi/get-api-key": {
    post: operations["GetApiKey"];
  };
  "/v1/pi/session": {
    post: operations["AddSession"];
  };
  "/v1/pi/org-name/query": {
    post: operations["GetOrgName"];
  };
  "/v1/pi/total-costs": {
    post: operations["GetTotalCosts"];
  };
  "/v1/pi/total_requests": {
    post: operations["PiGetTotalRequests"];
  };
  "/v1/pi/costs-over-time/query": {
    post: operations["GetCostsOverTime"];
  };
  "/v1/public/compare/models": {
    post: operations["GetModelComparison"];
  };
  "/v1/models": {
    get: operations["GetModels"];
  };
  "/v1/public/security": {
    post: operations["GetSecurity"];
  };
  "/v1/integration": {
    get: operations["GetIntegrations"];
    post: operations["CreateIntegration"];
  };
  "/v1/integration/{integrationId}": {
    get: operations["GetIntegration"];
    post: operations["UpdateIntegration"];
  };
  "/v1/integration/type/{type}": {
    get: operations["GetIntegrationByType"];
  };
  "/v1/integration/slack/settings": {
    get: operations["GetSlackSettings"];
  };
  "/v1/integration/slack/channels": {
    get: operations["GetSlackChannels"];
  };
  "/v1/experiment/new-empty": {
    post: operations["CreateNewEmptyExperiment"];
  };
  "/v1/experiment/table/new": {
    post: operations["CreateNewExperimentTable"];
  };
  "/v1/experiment/table/{experimentTableId}/query": {
    post: operations["GetExperimentTableById"];
  };
  "/v1/experiment/table/{experimentTableId}/metadata/query": {
    post: operations["GetExperimentTableMetadata"];
  };
  "/v1/experiment/tables/query": {
    post: operations["GetExperimentTables"];
  };
  "/v1/experiment/table/{experimentTableId}/cell": {
    post: operations["CreateExperimentCell"];
    patch: operations["UpdateExperimentCell"];
  };
  "/v1/experiment/table/{experimentTableId}/column": {
    post: operations["CreateExperimentColumn"];
  };
  "/v1/experiment/table/{experimentTableId}/row/new": {
    post: operations["CreateExperimentTableRow"];
  };
  "/v1/experiment/table/{experimentTableId}/row/{rowIndex}": {
    delete: operations["DeleteExperimentTableRow"];
  };
  "/v1/experiment/table/{experimentTableId}/row/insert/batch": {
    post: operations["CreateExperimentTableRowWithCellsBatch"];
  };
  "/v1/experiment/update-meta": {
    post: operations["UpdateExperimentMeta"];
  };
  "/v1/experiment": {
    post: operations["CreateNewExperimentOld"];
  };
  "/v1/experiment/hypothesis": {
    post: operations["CreateNewExperimentHypothesis"];
  };
  "/v1/experiment/hypothesis/{hypothesisId}/scores/query": {
    post: operations["GetExperimentHypothesisScores"];
  };
  "/v1/experiment/{experimentId}/evaluators": {
    get: operations["GetExperimentEvaluators"];
    post: operations["CreateExperimentEvaluatorOld"];
  };
  "/v1/experiment/{experimentId}/evaluators/run": {
    post: operations["RunExperimentEvaluatorsOld"];
  };
  "/v1/experiment/{experimentId}/evaluators/{evaluatorId}": {
    delete: operations["DeleteExperimentEvaluatorOld"];
  };
  "/v1/experiment/query": {
    post: operations["GetExperimentsOld"];
  };
  "/v1/experiment/dataset": {
    post: operations["AddDataset"];
  };
  "/v1/experiment/dataset/random": {
    post: operations["AddRandomDataset"];
  };
  "/v1/experiment/dataset/query": {
    post: operations["GetDatasets"];
  };
  "/v1/experiment/dataset/{datasetId}/row/insert": {
    post: operations["InsertDatasetRow"];
  };
  "/v1/experiment/dataset/{datasetId}/version/{promptVersionId}/row/new": {
    post: operations["CreateDatasetRow"];
  };
  "/v1/experiment/dataset/{datasetId}/inputs/query": {
    post: operations["GetDataset"];
  };
  "/v1/experiment/dataset/{datasetId}/mutate": {
    post: operations["MutateDataset"];
  };
  "/v1/helicone-dataset": {
    post: operations["AddHeliconeDataset"];
  };
  "/v1/helicone-dataset/{datasetId}/mutate": {
    post: operations["MutateHeliconeDataset"];
  };
  "/v1/helicone-dataset/{datasetId}/query": {
    post: operations["QueryHeliconeDatasetRows"];
  };
  "/v1/helicone-dataset/{datasetId}/count": {
    post: operations["CountHeliconeDatasetRows"];
  };
  "/v1/helicone-dataset/query": {
    post: operations["QueryHeliconeDataset"];
  };
  "/v1/helicone-dataset/{datasetId}/request/{requestId}": {
    post: operations["UpdateHeliconeDatasetRequest"];
  };
  "/v1/evals/query": {
    post: operations["QueryEvals"];
  };
  "/v1/evals/scores": {
    get: operations["GetEvalScores"];
  };
  "/v1/evals/{requestId}": {
    post: operations["AddEval"];
  };
  "/v1/evals/score-distributions/query": {
    post: operations["QueryScoreDistributions"];
  };
  "/v1/public/dataisbeautiful/total-values": {
    post: operations["GetTotalValues"];
  };
  "/v1/public/dataisbeautiful/model/usage/overtime": {
    post: operations["GetModelUsageOverTime"];
  };
  "/v1/public/dataisbeautiful/provider/usage/overtime": {
    post: operations["GetProviderUsageOverTime"];
  };
  "/v1/public/dataisbeautiful/total-requests": {
    post: operations["GetTotalRequests"];
  };
  "/v1/public/dataisbeautiful/ttft-vs-prompt-length": {
    post: operations["GetTTFTvsPromptInputLength"];
  };
  "/v1/public/dataisbeautiful/model/percentage": {
    post: operations["GetModelPercentage"];
  };
  "/v1/public/dataisbeautiful/model/cost": {
    post: operations["GetModelCost"];
  };
  "/v1/public/dataisbeautiful/provider/percentage": {
    post: operations["GetProviderPercentage"];
  };
  "/v1/public/dataisbeautiful/model/percentage/overtime": {
    post: operations["GetModelPercentageOverTime"];
  };
  "/v1/dashboard/scores/query": {
    post: operations["GetScoresOverTime"];
  };
  "/v1/customer/{customerId}/usage/query": {
    post: operations["GetCustomerUsage"];
  };
  "/v1/customer/query": {
    post: operations["GetCustomers"];
  };
  "/v1/api-keys/provider-key/{providerKeyId}": {
    get: operations["GetProviderKey"];
    delete: operations["DeleteProviderKey"];
    patch: operations["UpdateProviderKey"];
  };
  "/v1/api-keys/provider-key": {
    post: operations["CreateProviderKey"];
  };
  "/v1/api-keys/provider-keys": {
    get: operations["GetProviderKeys"];
  };
  "/v1/api-keys": {
    get: operations["GetAPIKeys"];
    post: operations["CreateAPIKey"];
  };
  "/v1/api-keys/proxy-key": {
    post: operations["CreateProxyKey"];
  };
  "/v1/api-keys/{apiKeyId}": {
    delete: operations["DeleteAPIKey"];
    patch: operations["UpdateAPIKey"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ResultSuccess_unknown_: {
      data: unknown;
      /** @enum {number|null} */
      error: null;
    };
    ResultError_unknown_: {
      /** @enum {number|null} */
      data: null;
      error: unknown;
    };
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.any_": {
      [key: string]: unknown;
    };
    WebhookData: {
      destination: string;
      config: components["schemas"]["Record_string.any_"];
      includeData?: boolean;
    };
    "ResultSuccess__id-string--created_at-string--destination-string--version-string--config-string--hmac_key-string_-Array_": {
      data: {
          hmac_key: string;
          config: string;
          version: string;
          destination: string;
          created_at: string;
          id: string;
        }[];
      /** @enum {number|null} */
      error: null;
    };
    ResultError_string_: {
      /** @enum {number|null} */
      data: null;
      error: string;
    };
    "Result__id-string--created_at-string--destination-string--version-string--config-string--hmac_key-string_-Array.string_": components["schemas"]["ResultSuccess__id-string--created_at-string--destination-string--version-string--config-string--hmac_key-string_-Array_"] | components["schemas"]["ResultError_string_"];
    ResultSuccess_null_: {
      /** @enum {number|null} */
      data: null;
      /** @enum {number|null} */
      error: null;
    };
    "Result_null.string_": components["schemas"]["ResultSuccess_null_"] | components["schemas"]["ResultError_string_"];
    ResultError_any_: {
      /** @enum {number|null} */
      data: null;
      error: unknown;
    };
    "ResultSuccess__id-string__": {
      data: {
        id: string;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__id-string_.string_": components["schemas"]["ResultSuccess__id-string__"] | components["schemas"]["ResultError_string_"];
    AddVaultKeyParams: {
      key: string;
      provider: string;
      name?: string;
    };
    DecryptedProviderKey: {
      provider_key_name: string | null;
      provider_name: string | null;
      provider_key: string | null;
      org_id: string | null;
      id: string | null;
    };
    "ResultSuccess_DecryptedProviderKey-Array_": {
      data: components["schemas"]["DecryptedProviderKey"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_DecryptedProviderKey-Array.string_": components["schemas"]["ResultSuccess_DecryptedProviderKey-Array_"] | components["schemas"]["ResultError_string_"];
    ResultSuccess_DecryptedProviderKey_: {
      data: components["schemas"]["DecryptedProviderKey"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_DecryptedProviderKey.string_": components["schemas"]["ResultSuccess_DecryptedProviderKey_"] | components["schemas"]["ResultError_string_"];
    HistogramRow: {
      range_start: string;
      range_end: string;
      /** Format: double */
      value: number;
    };
    "ResultSuccess__request_count-HistogramRow-Array--user_cost-HistogramRow-Array__": {
      data: {
        user_cost: components["schemas"]["HistogramRow"][];
        request_count: components["schemas"]["HistogramRow"][];
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__request_count-HistogramRow-Array--user_cost-HistogramRow-Array_.string_": components["schemas"]["ResultSuccess__request_count-HistogramRow-Array--user_cost-HistogramRow-Array__"] | components["schemas"]["ResultError_string_"];
    /** @description Make all properties in T optional */
    Partial_TextOperators_: {
      "not-equals"?: string;
      equals?: string;
      like?: string;
      ilike?: string;
      contains?: string;
      "not-contains"?: string;
    };
    /** @description Make all properties in T optional */
    Partial_TimestampOperators_: {
      gte?: string;
      lte?: string;
      lt?: string;
      gt?: string;
    };
    /** @description Make all properties in T optional */
    Partial_NumberOperators_: {
      /** Format: double */
      "not-equals"?: number;
      /** Format: double */
      equals?: number;
      /** Format: double */
      gte?: number;
      /** Format: double */
      lte?: number;
      /** Format: double */
      lt?: number;
      /** Format: double */
      gt?: number;
    };
    /** @description Make all properties in T optional */
    Partial_UserMetricsToOperators_: {
      user_id?: components["schemas"]["Partial_TextOperators_"];
      last_active?: components["schemas"]["Partial_TimestampOperators_"];
      total_requests?: components["schemas"]["Partial_NumberOperators_"];
      active_for?: components["schemas"]["Partial_NumberOperators_"];
      average_requests_per_day_active?: components["schemas"]["Partial_NumberOperators_"];
      average_tokens_per_request?: components["schemas"]["Partial_NumberOperators_"];
      total_completion_tokens?: components["schemas"]["Partial_NumberOperators_"];
      total_prompt_tokens?: components["schemas"]["Partial_NumberOperators_"];
      cost?: components["schemas"]["Partial_NumberOperators_"];
    };
    /** @description Make all properties in T optional */
    Partial_TimestampOperatorsTyped_: {
      /** Format: date-time */
      gte?: string;
      /** Format: date-time */
      lte?: string;
      /** Format: date-time */
      lt?: string;
      /** Format: date-time */
      gt?: string;
    };
    /** @description Make all properties in T optional */
    Partial_BooleanOperators_: {
      equals?: boolean;
    };
    /** @description Make all properties in T optional */
    Partial_VectorOperators_: {
      contains?: string;
    };
    /** @description Make all properties in T optional */
    Partial_RequestResponseRMTToOperators_: {
      latency?: components["schemas"]["Partial_NumberOperators_"];
      status?: components["schemas"]["Partial_NumberOperators_"];
      request_created_at?: components["schemas"]["Partial_TimestampOperatorsTyped_"];
      response_created_at?: components["schemas"]["Partial_TimestampOperatorsTyped_"];
      model?: components["schemas"]["Partial_TextOperators_"];
      user_id?: components["schemas"]["Partial_TextOperators_"];
      organization_id?: components["schemas"]["Partial_TextOperators_"];
      node_id?: components["schemas"]["Partial_TextOperators_"];
      job_id?: components["schemas"]["Partial_TextOperators_"];
      threat?: components["schemas"]["Partial_BooleanOperators_"];
      request_id?: components["schemas"]["Partial_TextOperators_"];
      prompt_tokens?: components["schemas"]["Partial_NumberOperators_"];
      completion_tokens?: components["schemas"]["Partial_NumberOperators_"];
      total_tokens?: components["schemas"]["Partial_NumberOperators_"];
      target_url?: components["schemas"]["Partial_TextOperators_"];
      properties?: {
        [key: string]: components["schemas"]["Partial_TextOperators_"];
      };
      search_properties?: {
        [key: string]: components["schemas"]["Partial_TextOperators_"];
      };
      scores?: {
        [key: string]: components["schemas"]["Partial_TextOperators_"];
      };
      scores_column?: components["schemas"]["Partial_TextOperators_"];
      request_body?: components["schemas"]["Partial_VectorOperators_"];
      response_body?: components["schemas"]["Partial_VectorOperators_"];
    };
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_FilterLeaf.user_metrics-or-request_response_rmt_": {
      user_metrics?: components["schemas"]["Partial_UserMetricsToOperators_"];
      request_response_rmt?: components["schemas"]["Partial_RequestResponseRMTToOperators_"];
    };
    "FilterLeafSubset_user_metrics-or-request_response_rmt_": components["schemas"]["Pick_FilterLeaf.user_metrics-or-request_response_rmt_"];
    UserFilterNode: components["schemas"]["FilterLeafSubset_user_metrics-or-request_response_rmt_"] | components["schemas"]["UserFilterBranch"] | "all";
    UserFilterBranch: {
      right: components["schemas"]["UserFilterNode"];
      /** @enum {string} */
      operator: "or" | "and";
      left: components["schemas"]["UserFilterNode"];
    };
    /** @enum {string} */
    PSize: "p50" | "p75" | "p95" | "p99" | "p99.9";
    UserMetricsResult: {
      id: string;
      user_id: string;
      /** Format: double */
      active_for: number;
      first_active: string;
      last_active: string;
      /** Format: double */
      total_requests: number;
      /** Format: double */
      average_requests_per_day_active: number;
      /** Format: double */
      average_tokens_per_request: number;
      /** Format: double */
      total_completion_tokens: number;
      /** Format: double */
      total_prompt_tokens: number;
      /** Format: double */
      cost: number;
    };
    "ResultSuccess__users-UserMetricsResult-Array--count-number__": {
      data: {
        /** Format: double */
        count: number;
        users: components["schemas"]["UserMetricsResult"][];
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__users-UserMetricsResult-Array--count-number_.string_": components["schemas"]["ResultSuccess__users-UserMetricsResult-Array--count-number__"] | components["schemas"]["ResultError_string_"];
    /** @enum {string} */
    SortDirection: "asc" | "desc";
    SortLeafUsers: {
      id?: components["schemas"]["SortDirection"];
      user_id?: components["schemas"]["SortDirection"];
      active_for?: components["schemas"]["SortDirection"];
      first_active?: components["schemas"]["SortDirection"];
      last_active?: components["schemas"]["SortDirection"];
      total_requests?: components["schemas"]["SortDirection"];
      average_requests_per_day_active?: components["schemas"]["SortDirection"];
      average_tokens_per_request?: components["schemas"]["SortDirection"];
      cost?: components["schemas"]["SortDirection"];
      rate_limited_count?: components["schemas"]["SortDirection"];
    };
    UserMetricsQueryParams: {
      filter: components["schemas"]["UserFilterNode"];
      /** Format: double */
      offset: number;
      /** Format: double */
      limit: number;
      timeFilter?: {
        /** Format: double */
        endTimeUnixSeconds: number;
        /** Format: double */
        startTimeUnixSeconds: number;
      };
      /** Format: double */
      timeZoneDifferenceMinutes?: number;
      sort?: components["schemas"]["SortLeafUsers"];
    };
    "ResultSuccess__count-number--prompt_tokens-number--completion_tokens-number--user_id-string--cost_usd-number_-Array_": {
      data: {
          /** Format: double */
          cost_usd: number;
          user_id: string;
          /** Format: double */
          completion_tokens: number;
          /** Format: double */
          prompt_tokens: number;
          /** Format: double */
          count: number;
        }[];
      /** @enum {number|null} */
      error: null;
    };
    "Result__count-number--prompt_tokens-number--completion_tokens-number--user_id-string--cost_usd-number_-Array.string_": components["schemas"]["ResultSuccess__count-number--prompt_tokens-number--completion_tokens-number--user_id-string--cost_usd-number_-Array_"] | components["schemas"]["ResultError_string_"];
    UserQueryParams: {
      userIds?: string[];
      timeFilter?: {
        /** Format: double */
        endTimeUnixSeconds: number;
        /** Format: double */
        startTimeUnixSeconds: number;
      };
    };
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.string_": {
      [key: string]: string;
    };
    /** @enum {string} */
    ProviderName: "OPENAI" | "ANTHROPIC" | "AZURE" | "LOCAL" | "HELICONE" | "AMDBARTEK" | "ANYSCALE" | "CLOUDFLARE" | "2YFV" | "TOGETHER" | "LEMONFOX" | "FIREWORKS" | "PERPLEXITY" | "GOOGLE" | "OPENROUTER" | "WISDOMINANUTSHELL" | "GROQ" | "COHERE" | "MISTRAL" | "DEEPINFRA" | "QSTASH" | "FIRECRAWL" | "AWS" | "DEEPSEEK" | "X" | "AVIAN" | "NEBIUS" | "NOVITA";
    Provider: components["schemas"]["ProviderName"] | "CUSTOM";
    /** @enum {string} */
    LlmType: "chat" | "completion";
    FunctionCall: {
      name: string;
      arguments: components["schemas"]["Record_string.any_"];
    };
    Message: {
      contentArray?: components["schemas"]["Message"][];
      /** Format: double */
      idx?: number;
      audio_data?: string;
      image_url?: string;
      timestamp?: string;
      tool_call_id?: string;
      tool_calls?: components["schemas"]["FunctionCall"][];
      content?: string;
      name?: string;
      role?: string;
      id?: string;
      /** @enum {string} */
      _type: "functionCall" | "function" | "image" | "message" | "autoInput" | "contentArray" | "audio";
    };
    Tool: {
      name: string;
      description: string;
      parameters?: components["schemas"]["Record_string.any_"];
    };
    HeliconeEventTool: {
      /** @enum {string} */
      _type: "tool";
      toolName: string;
      input: unknown;
      [key: string]: unknown;
    };
    HeliconeEventVectorDB: {
      /** @enum {string} */
      _type: "vector_db";
      /** @enum {string} */
      operation: "search" | "insert" | "delete" | "update";
      text?: string;
      vector?: number[];
      /** Format: double */
      topK?: number;
      filter?: Record<string, never>;
      databaseName?: string;
      [key: string]: unknown;
    };
    LLMRequestBody: {
      llm_type?: components["schemas"]["LlmType"];
      provider?: string;
      model?: string;
      messages?: components["schemas"]["Message"][] | null;
      prompt?: string | null;
      /** Format: double */
      max_tokens?: number | null;
      /** Format: double */
      temperature?: number | null;
      /** Format: double */
      top_p?: number | null;
      /** Format: double */
      seed?: number | null;
      stream?: boolean | null;
      /** Format: double */
      presence_penalty?: number | null;
      /** Format: double */
      frequency_penalty?: number | null;
      stop?: (string[] | string) | null;
      /** @enum {string|null} */
      reasoning_effort?: "low" | "medium" | "high" | null;
      tools?: components["schemas"]["Tool"][];
      parallel_tool_calls?: boolean | null;
      tool_choice?: {
        name?: string;
        /** @enum {string} */
        type: "none" | "auto" | "any" | "tool";
      };
      response_format?: {
        json_schema?: unknown;
        type: string;
      };
      toolDetails?: components["schemas"]["HeliconeEventTool"];
      vectorDBDetails?: components["schemas"]["HeliconeEventVectorDB"];
      input?: string | string[];
      /** Format: double */
      n?: number | null;
      size?: string;
      quality?: string;
    };
    LLMResponseBody: {
      vectorDBDetailsResponse?: {
        /** @enum {string} */
        _type: "vector_db";
        metadata: {
          timestamp: string;
          destination_parsed?: boolean;
          destination?: string;
        };
        /** Format: double */
        actualSimilarity?: number;
        /** Format: double */
        similarityThreshold?: number;
        message: string;
        status: string;
      };
      toolDetailsResponse?: {
        toolName: string;
        /** @enum {string} */
        _type: "tool";
        metadata: {
          timestamp: string;
        };
        tips: string[];
        message: string;
        status: string;
      };
      error?: {
        heliconeMessage: unknown;
      };
      model?: string | null;
      messages?: components["schemas"]["Message"][] | null;
    };
    LlmSchema: {
      request: components["schemas"]["LLMRequestBody"];
      response?: components["schemas"]["LLMResponseBody"] | null;
    };
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.number_": {
      [key: string]: number;
    };
    HeliconeRequest: {
      response_id: string | null;
      response_created_at: string | null;
      response_body?: unknown;
      /** Format: double */
      response_status: number;
      response_model: string | null;
      request_id: string;
      request_created_at: string;
      request_body: unknown;
      request_path: string;
      request_user_id: string | null;
      request_properties: components["schemas"]["Record_string.string_"] | null;
      request_model: string | null;
      model_override: string | null;
      helicone_user: string | null;
      provider: components["schemas"]["Provider"];
      /** Format: double */
      delay_ms: number | null;
      /** Format: double */
      time_to_first_token: number | null;
      /** Format: double */
      total_tokens: number | null;
      /** Format: double */
      prompt_tokens: number | null;
      /** Format: double */
      prompt_cache_write_tokens: number | null;
      /** Format: double */
      prompt_cache_read_tokens: number | null;
      /** Format: double */
      completion_tokens: number | null;
      prompt_id: string | null;
      feedback_created_at?: string | null;
      feedback_id?: string | null;
      feedback_rating?: boolean | null;
      signed_body_url?: string | null;
      llmSchema: components["schemas"]["LlmSchema"] | null;
      country_code: string | null;
      asset_ids: string[] | null;
      asset_urls: components["schemas"]["Record_string.string_"] | null;
      scores: components["schemas"]["Record_string.number_"] | null;
      /** Format: double */
      costUSD?: number | null;
      properties: components["schemas"]["Record_string.string_"];
      assets: string[];
      target_url: string;
      model: string;
    };
    "ResultSuccess_HeliconeRequest-Array_": {
      data: components["schemas"]["HeliconeRequest"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_HeliconeRequest-Array.string_": components["schemas"]["ResultSuccess_HeliconeRequest-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description Make all properties in T optional */
    Partial_CacheHitsTableToOperators_: {
      organization_id?: components["schemas"]["Partial_TextOperators_"];
      request_id?: components["schemas"]["Partial_TextOperators_"];
      latency?: components["schemas"]["Partial_NumberOperators_"];
      completion_tokens?: components["schemas"]["Partial_NumberOperators_"];
      prompt_tokens?: components["schemas"]["Partial_NumberOperators_"];
      created_at?: components["schemas"]["Partial_TimestampOperatorsTyped_"];
    };
    /** @description Make all properties in T optional */
    Partial_FeedbackTableToOperators_: {
      id?: components["schemas"]["Partial_NumberOperators_"];
      created_at?: components["schemas"]["Partial_TimestampOperators_"];
      rating?: components["schemas"]["Partial_BooleanOperators_"];
      response_id?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description Make all properties in T optional */
    Partial_RequestTableToOperators_: {
      prompt?: components["schemas"]["Partial_TextOperators_"];
      created_at?: components["schemas"]["Partial_TimestampOperators_"];
      user_id?: components["schemas"]["Partial_TextOperators_"];
      auth_hash?: components["schemas"]["Partial_TextOperators_"];
      org_id?: components["schemas"]["Partial_TextOperators_"];
      id?: components["schemas"]["Partial_TextOperators_"];
      node_id?: components["schemas"]["Partial_TextOperators_"];
      model?: components["schemas"]["Partial_TextOperators_"];
      modelOverride?: components["schemas"]["Partial_TextOperators_"];
      path?: components["schemas"]["Partial_TextOperators_"];
      prompt_id?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description Make all properties in T optional */
    Partial_RequestResponseSearchToOperators_: {
      request_body_vector?: components["schemas"]["Partial_VectorOperators_"];
      response_body_vector?: components["schemas"]["Partial_VectorOperators_"];
    };
    /** @description Make all properties in T optional */
    Partial_ResponseTableToOperators_: {
      body_tokens?: components["schemas"]["Partial_NumberOperators_"];
      body_model?: components["schemas"]["Partial_TextOperators_"];
      body_completion?: components["schemas"]["Partial_TextOperators_"];
      status?: components["schemas"]["Partial_NumberOperators_"];
      model?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description Make all properties in T optional */
    Partial_SessionsRequestResponseRMTToOperators_: {
      session_session_id?: components["schemas"]["Partial_TextOperators_"];
      session_session_name?: components["schemas"]["Partial_TextOperators_"];
      session_total_cost?: components["schemas"]["Partial_NumberOperators_"];
      session_total_tokens?: components["schemas"]["Partial_NumberOperators_"];
      session_prompt_tokens?: components["schemas"]["Partial_NumberOperators_"];
      session_completion_tokens?: components["schemas"]["Partial_NumberOperators_"];
      session_total_requests?: components["schemas"]["Partial_NumberOperators_"];
      session_created_at?: components["schemas"]["Partial_TimestampOperatorsTyped_"];
      session_latest_request_created_at?: components["schemas"]["Partial_TimestampOperatorsTyped_"];
    };
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_FilterLeaf.feedback-or-request-or-response-or-properties-or-values-or-request_response_search-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_": {
      cache_hits?: components["schemas"]["Partial_CacheHitsTableToOperators_"];
      feedback?: components["schemas"]["Partial_FeedbackTableToOperators_"];
      properties?: {
        [key: string]: components["schemas"]["Partial_TextOperators_"];
      };
      request?: components["schemas"]["Partial_RequestTableToOperators_"];
      request_response_search?: components["schemas"]["Partial_RequestResponseSearchToOperators_"];
      response?: components["schemas"]["Partial_ResponseTableToOperators_"];
      request_response_rmt?: components["schemas"]["Partial_RequestResponseRMTToOperators_"];
      sessions_request_response_rmt?: components["schemas"]["Partial_SessionsRequestResponseRMTToOperators_"];
      values?: {
        [key: string]: components["schemas"]["Partial_TextOperators_"];
      };
    };
    "FilterLeafSubset_feedback-or-request-or-response-or-properties-or-values-or-request_response_search-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_": components["schemas"]["Pick_FilterLeaf.feedback-or-request-or-response-or-properties-or-values-or-request_response_search-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_"];
    RequestFilterNode: components["schemas"]["FilterLeafSubset_feedback-or-request-or-response-or-properties-or-values-or-request_response_search-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_"] | components["schemas"]["RequestFilterBranch"] | "all";
    RequestFilterBranch: {
      right: components["schemas"]["RequestFilterNode"];
      /** @enum {string} */
      operator: "or" | "and";
      left: components["schemas"]["RequestFilterNode"];
    };
    SortLeafRequest: {
      /** @enum {boolean} */
      random?: true;
      created_at?: components["schemas"]["SortDirection"];
      cache_created_at?: components["schemas"]["SortDirection"];
      latency?: components["schemas"]["SortDirection"];
      last_active?: components["schemas"]["SortDirection"];
      total_tokens?: components["schemas"]["SortDirection"];
      completion_tokens?: components["schemas"]["SortDirection"];
      prompt_tokens?: components["schemas"]["SortDirection"];
      user_id?: components["schemas"]["SortDirection"];
      body_model?: components["schemas"]["SortDirection"];
      is_cached?: components["schemas"]["SortDirection"];
      request_prompt?: components["schemas"]["SortDirection"];
      response_text?: components["schemas"]["SortDirection"];
      properties?: {
        [key: string]: components["schemas"]["SortDirection"];
      };
      values?: {
        [key: string]: components["schemas"]["SortDirection"];
      };
      cost_usd?: components["schemas"]["SortDirection"];
    };
    RequestQueryParams: {
      filter: components["schemas"]["RequestFilterNode"];
      /** Format: double */
      offset?: number;
      /** Format: double */
      limit?: number;
      sort?: components["schemas"]["SortLeafRequest"];
      isCached?: boolean;
      includeInputs?: boolean;
      isPartOfExperiment?: boolean;
      isScored?: boolean;
    };
    ResultSuccess_HeliconeRequest_: {
      data: components["schemas"]["HeliconeRequest"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_HeliconeRequest.string_": components["schemas"]["ResultSuccess_HeliconeRequest_"] | components["schemas"]["ResultError_string_"];
    HeliconeRequestAsset: {
      assetUrl: string;
    };
    ResultSuccess_HeliconeRequestAsset_: {
      data: components["schemas"]["HeliconeRequestAsset"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_HeliconeRequestAsset.string_": components["schemas"]["ResultSuccess_HeliconeRequestAsset_"] | components["schemas"]["ResultError_string_"];
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.number-or-boolean-or-undefined_": {
      [key: string]: number | boolean;
    };
    Scores: components["schemas"]["Record_string.number-or-boolean-or-undefined_"];
    ScoreRequest: {
      scores: components["schemas"]["Scores"];
    };
    PromptsResult: {
      id: string;
      user_defined_id: string;
      description: string;
      pretty_name: string;
      created_at: string;
      /** Format: double */
      major_version: number;
      metadata?: components["schemas"]["Record_string.any_"];
    };
    "ResultSuccess_PromptsResult-Array_": {
      data: components["schemas"]["PromptsResult"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptsResult-Array.string_": components["schemas"]["ResultSuccess_PromptsResult-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description Make all properties in T optional */
    Partial_PromptToOperators_: {
      id?: components["schemas"]["Partial_TextOperators_"];
      user_defined_id?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_FilterLeaf.prompt_v2_": {
      prompt_v2?: components["schemas"]["Partial_PromptToOperators_"];
    };
    FilterLeafSubset_prompt_v2_: components["schemas"]["Pick_FilterLeaf.prompt_v2_"];
    PromptsFilterNode: components["schemas"]["FilterLeafSubset_prompt_v2_"] | components["schemas"]["PromptsFilterBranch"] | "all";
    PromptsFilterBranch: {
      right: components["schemas"]["PromptsFilterNode"];
      /** @enum {string} */
      operator: "or" | "and";
      left: components["schemas"]["PromptsFilterNode"];
    };
    PromptsQueryParams: {
      filter: components["schemas"]["PromptsFilterNode"];
    };
    PromptResult: {
      id: string;
      user_defined_id: string;
      description: string;
      pretty_name: string;
      /** Format: double */
      major_version: number;
      latest_version_id: string;
      latest_model_used: string;
      created_at: string;
      last_used: string;
      versions: string[];
      metadata?: components["schemas"]["Record_string.any_"];
    };
    ResultSuccess_PromptResult_: {
      data: components["schemas"]["PromptResult"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptResult.string_": components["schemas"]["ResultSuccess_PromptResult_"] | components["schemas"]["ResultError_string_"];
    PromptQueryParams: {
      timeFilter: {
        end: string;
        start: string;
      };
    };
    CreatePromptResponse: {
      id: string;
      prompt_version_id: string;
    };
    ResultSuccess_CreatePromptResponse_: {
      data: components["schemas"]["CreatePromptResponse"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_CreatePromptResponse.string_": components["schemas"]["ResultSuccess_CreatePromptResponse_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__metadata-Record_string.any___": {
      data: {
        metadata: components["schemas"]["Record_string.any_"];
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__metadata-Record_string.any__.string_": components["schemas"]["ResultSuccess__metadata-Record_string.any___"] | components["schemas"]["ResultError_string_"];
    PromptEditSubversionLabelParams: {
      label: string;
    };
    PromptEditSubversionTemplateParams: {
      heliconeTemplate: unknown;
      experimentId?: string;
    };
    PromptVersionResult: {
      id: string;
      /** Format: double */
      minor_version: number;
      /** Format: double */
      major_version: number;
      prompt_v2: string;
      model: string;
      helicone_template: string;
      created_at: string;
      metadata: components["schemas"]["Record_string.any_"];
      parent_prompt_version?: string | null;
      experiment_id?: string | null;
      updated_at?: string;
    };
    ResultSuccess_PromptVersionResult_: {
      data: components["schemas"]["PromptVersionResult"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptVersionResult.string_": components["schemas"]["ResultSuccess_PromptVersionResult_"] | components["schemas"]["ResultError_string_"];
    PromptCreateSubversionParams: {
      newHeliconeTemplate: unknown;
      isMajorVersion?: boolean;
      metadata?: components["schemas"]["Record_string.any_"];
      experimentId?: string;
      bumpForMajorPromptVersionId?: string;
    };
    PromptInputRecord: {
      id: string;
      inputs: components["schemas"]["Record_string.string_"];
      dataset_row_id?: string;
      source_request: string;
      prompt_version: string;
      created_at: string;
      response_body?: string;
      request_body?: string;
      auto_prompt_inputs: unknown[];
    };
    "ResultSuccess_PromptInputRecord-Array_": {
      data: components["schemas"]["PromptInputRecord"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptInputRecord-Array.string_": components["schemas"]["ResultSuccess_PromptInputRecord-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array_": {
      data: {
          meta: components["schemas"]["Record_string.any_"];
          dataset: string;
          /** Format: double */
          num_hypotheses: number;
          created_at: string;
          id: string;
        }[];
      /** @enum {number|null} */
      error: null;
    };
    "Result__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array.string_": components["schemas"]["ResultSuccess__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess_PromptVersionResult-Array_": {
      data: components["schemas"]["PromptVersionResult"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptVersionResult-Array.string_": components["schemas"]["ResultSuccess_PromptVersionResult-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description Make all properties in T optional */
    Partial_PromptVersionsToOperators_: {
      minor_version?: components["schemas"]["Partial_NumberOperators_"];
      major_version?: components["schemas"]["Partial_NumberOperators_"];
      id?: components["schemas"]["Partial_TextOperators_"];
      prompt_v2?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_FilterLeaf.prompts_versions_": {
      prompts_versions?: components["schemas"]["Partial_PromptVersionsToOperators_"];
    };
    FilterLeafSubset_prompts_versions_: components["schemas"]["Pick_FilterLeaf.prompts_versions_"];
    PromptVersionsFilterNode: components["schemas"]["FilterLeafSubset_prompts_versions_"] | components["schemas"]["PromptVersionsFilterBranch"] | "all";
    PromptVersionsFilterBranch: {
      right: components["schemas"]["PromptVersionsFilterNode"];
      /** @enum {string} */
      operator: "or" | "and";
      left: components["schemas"]["PromptVersionsFilterNode"];
    };
    PromptVersionsQueryParams: {
      filter?: components["schemas"]["PromptVersionsFilterNode"];
      includeExperimentVersions?: boolean;
    };
    PromptVersionResultCompiled: {
      id: string;
      /** Format: double */
      minor_version: number;
      /** Format: double */
      major_version: number;
      prompt_v2: string;
      model: string;
      prompt_compiled: unknown;
    };
    ResultSuccess_PromptVersionResultCompiled_: {
      data: components["schemas"]["PromptVersionResultCompiled"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptVersionResultCompiled.string_": components["schemas"]["ResultSuccess_PromptVersionResultCompiled_"] | components["schemas"]["ResultError_string_"];
    PromptVersiosQueryParamsCompiled: {
      filter?: components["schemas"]["PromptVersionsFilterNode"];
      includeExperimentVersions?: boolean;
      inputs: components["schemas"]["Record_string.string_"];
    };
    PromptVersionResultFilled: {
      id: string;
      /** Format: double */
      minor_version: number;
      /** Format: double */
      major_version: number;
      prompt_v2: string;
      model: string;
      filled_helicone_template: unknown;
    };
    ResultSuccess_PromptVersionResultFilled_: {
      data: components["schemas"]["PromptVersionResultFilled"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptVersionResultFilled.string_": components["schemas"]["ResultSuccess_PromptVersionResultFilled_"] | components["schemas"]["ResultError_string_"];
    EvaluatorResult: {
      id: string;
      created_at: string;
      scoring_type: string;
      llm_template: unknown;
      organization_id: string;
      updated_at: string;
      name: string;
      code_template: unknown;
      last_mile_config: unknown;
    };
    ResultSuccess_EvaluatorResult_: {
      data: components["schemas"]["EvaluatorResult"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_EvaluatorResult.string_": components["schemas"]["ResultSuccess_EvaluatorResult_"] | components["schemas"]["ResultError_string_"];
    CreateEvaluatorParams: {
      scoring_type: string;
      llm_template?: unknown;
      name: string;
      code_template?: unknown;
      last_mile_config?: unknown;
    };
    "ResultSuccess_EvaluatorResult-Array_": {
      data: components["schemas"]["EvaluatorResult"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_EvaluatorResult-Array.string_": components["schemas"]["ResultSuccess_EvaluatorResult-Array_"] | components["schemas"]["ResultError_string_"];
    UpdateEvaluatorParams: {
      scoring_type?: string;
      llm_template?: unknown;
      code_template?: unknown;
      name?: string;
      last_mile_config?: unknown;
    };
    EvaluatorExperiment: {
      experiment_name: string;
      experiment_created_at: string;
      experiment_id: string;
    };
    "ResultSuccess_EvaluatorExperiment-Array_": {
      data: components["schemas"]["EvaluatorExperiment"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_EvaluatorExperiment-Array.string_": components["schemas"]["ResultSuccess_EvaluatorExperiment-Array_"] | components["schemas"]["ResultError_string_"];
    OnlineEvaluatorByEvaluatorId: {
      config: unknown;
      id: string;
    };
    "ResultSuccess_OnlineEvaluatorByEvaluatorId-Array_": {
      data: components["schemas"]["OnlineEvaluatorByEvaluatorId"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_OnlineEvaluatorByEvaluatorId-Array.string_": components["schemas"]["ResultSuccess_OnlineEvaluatorByEvaluatorId-Array_"] | components["schemas"]["ResultError_string_"];
    CreateOnlineEvaluatorParams: {
      config: components["schemas"]["Record_string.any_"];
    };
    "ResultSuccess__output-string--traces-string-Array--statusCode_63_-number__": {
      data: {
        /** Format: double */
        statusCode?: number;
        traces: string[];
        output: string;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__output-string--traces-string-Array--statusCode_63_-number_.string_": components["schemas"]["ResultSuccess__output-string--traces-string-Array--statusCode_63_-number__"] | components["schemas"]["ResultError_string_"];
    TestInput: {
      promptTemplate?: string;
      inputs: {
        autoInputs?: components["schemas"]["Record_string.string_"];
        inputs: components["schemas"]["Record_string.string_"];
      };
      outputBody: string;
      inputBody: string;
    };
    EvaluatorScore: {
      score: number | boolean;
    };
    ResultSuccess_EvaluatorScore_: {
      data: components["schemas"]["EvaluatorScore"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_EvaluatorScore.string_": components["schemas"]["ResultSuccess_EvaluatorScore_"] | components["schemas"]["ResultError_string_"];
    EvaluatorScoreResult: components["schemas"]["Result_EvaluatorScore.string_"];
    EvaluatorConfig: {
      evaluator_code_template?: string;
      evaluator_llm_template?: string;
      evaluator_scoring_type: string;
    };
    "ResultSuccess__score-number--input-string--output-string--ground_truth_63_-string__": {
      data: {
        ground_truth?: string;
        output: string;
        input: string;
        /** Format: double */
        score: number;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__score-number--input-string--output-string--ground_truth_63_-string_.string_": components["schemas"]["ResultSuccess__score-number--input-string--output-string--ground_truth_63_-string__"] | components["schemas"]["ResultError_string_"];
    DataEntry: {
      /** @enum {string} */
      _type: "system-prompt";
    } | {
      inputKey: string;
      /** @enum {string} */
      _type: "prompt-input";
    } | ({
      /** @enum {string} */
      content: "jsonify" | "message";
      /** @enum {string} */
      _type: "input-body";
    }) | ({
      /** @enum {string} */
      content: "jsonify" | "message";
      /** @enum {string} */
      _type: "output-body";
    });
    BaseLastMileConfigForm: {
      output: components["schemas"]["DataEntry"];
      input: components["schemas"]["DataEntry"];
      name: string;
    };
    LastMileConfigForm: components["schemas"]["BaseLastMileConfigForm"] & (({
      /** @enum {string} */
      _type: "relevance" | "context_relevance";
    }) | {
      groundTruth: components["schemas"]["DataEntry"];
      /** @enum {string} */
      _type: "faithfulness";
    });
    EvaluatorStats: {
      /** Format: double */
      averageScore: number;
      /** Format: double */
      totalUses: number;
      /** @enum {string} */
      recentTrend: "up" | "down" | "stable";
      scoreDistribution: {
          /** Format: double */
          count: number;
          range: string;
        }[];
      timeSeriesData: {
          /** Format: double */
          value: number;
          date: string;
        }[];
    };
    ResultSuccess_EvaluatorStats_: {
      data: components["schemas"]["EvaluatorStats"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_EvaluatorStats.string_": components["schemas"]["ResultSuccess_EvaluatorStats_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__experimentId-string__": {
      data: {
        experimentId: string;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__experimentId-string_.string_": components["schemas"]["ResultSuccess__experimentId-string__"] | components["schemas"]["ResultError_string_"];
    ExperimentV2: {
      id: string;
      name: string;
      original_prompt_version: string;
      copied_original_prompt_version: string | null;
      input_keys: string[] | null;
      created_at: string;
    };
    "ResultSuccess_ExperimentV2-Array_": {
      data: components["schemas"]["ExperimentV2"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ExperimentV2-Array.string_": components["schemas"]["ResultSuccess_ExperimentV2-Array_"] | components["schemas"]["ResultError_string_"];
    ExperimentV2Output: {
      id: string;
      request_id: string;
      is_original: boolean;
      prompt_version_id: string;
      created_at: string;
      input_record_id: string;
    };
    ExperimentV2Row: {
      id: string;
      inputs: components["schemas"]["Record_string.string_"];
      prompt_version: string;
      requests: components["schemas"]["ExperimentV2Output"][];
      auto_prompt_inputs: unknown[];
    };
    ExtendedExperimentData: {
      id: string;
      name: string;
      original_prompt_version: string;
      copied_original_prompt_version: string | null;
      input_keys: string[] | null;
      created_at: string;
      rows: components["schemas"]["ExperimentV2Row"][];
    };
    ResultSuccess_ExtendedExperimentData_: {
      data: components["schemas"]["ExtendedExperimentData"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ExtendedExperimentData.string_": components["schemas"]["ResultSuccess_ExtendedExperimentData_"] | components["schemas"]["ResultError_string_"];
    CreateNewPromptVersionForExperimentParams: {
      newHeliconeTemplate: unknown;
      isMajorVersion?: boolean;
      metadata?: components["schemas"]["Record_string.any_"];
      experimentId?: string;
      bumpForMajorPromptVersionId?: string;
      parentPromptVersionId: string;
    };
Json: JsonObject;
    ExperimentV2PromptVersion: {
      created_at: string | null;
      experiment_id: string | null;
      helicone_template: components["schemas"]["Json"] | null;
      id: string;
      /** Format: double */
      major_version: number;
      metadata: components["schemas"]["Json"] | null;
      /** Format: double */
      minor_version: number;
      model: string | null;
      organization: string;
      prompt_v2: string;
      soft_delete: boolean | null;
    };
    "ResultSuccess_ExperimentV2PromptVersion-Array_": {
      data: components["schemas"]["ExperimentV2PromptVersion"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ExperimentV2PromptVersion-Array.string_": components["schemas"]["ResultSuccess_ExperimentV2PromptVersion-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess_string-Array_": {
      data: string[];
      /** @enum {number|null} */
      error: null;
    };
    "Result_string-Array.string_": components["schemas"]["ResultSuccess_string-Array_"] | components["schemas"]["ResultError_string_"];
    ResultSuccess_string_: {
      data: string;
      /** @enum {number|null} */
      error: null;
    };
    "Result_string.string_": components["schemas"]["ResultSuccess_string_"] | components["schemas"]["ResultError_string_"];
    ResultSuccess_boolean_: {
      data: boolean;
      /** @enum {number|null} */
      error: null;
    };
    "Result_boolean.string_": components["schemas"]["ResultSuccess_boolean_"] | components["schemas"]["ResultError_string_"];
    ScoreV2: {
      valueType: string;
      value: number | string;
      /** Format: double */
      max: number;
      /** Format: double */
      min: number;
    };
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.ScoreV2_": {
      [key: string]: components["schemas"]["ScoreV2"];
    };
    "ResultSuccess_Record_string.ScoreV2__": {
      data: components["schemas"]["Record_string.ScoreV2_"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_Record_string.ScoreV2_.string_": components["schemas"]["ResultSuccess_Record_string.ScoreV2__"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess_ScoreV2-or-null_": {
      data: components["schemas"]["ScoreV2"] | null;
      /** @enum {number|null} */
      error: null;
    };
    "Result_ScoreV2-or-null.string_": components["schemas"]["ResultSuccess_ScoreV2-or-null_"] | components["schemas"]["ResultError_string_"];
    OTELTrace: {
      resourceSpans: {
          scopeSpans: {
              spans: {
                  /** Format: double */
                  droppedLinksCount: number;
                  links: unknown[];
                  status: {
                    /** Format: double */
                    code: number;
                  };
                  /** Format: double */
                  droppedEventsCount: number;
                  events: unknown[];
                  /** Format: double */
                  droppedAttributesCount: number;
                  attributes: {
                      value: {
                        /** Format: double */
                        intValue?: number;
                        stringValue?: string;
                      };
                      key: string;
                    }[];
                  endTimeUnixNano: string;
                  startTimeUnixNano: string;
                  /** Format: double */
                  kind: number;
                  name: string;
                  spanId: string;
                  traceId: string;
                }[];
              scope: {
                version: string;
                name: string;
              };
            }[];
          resource: {
            /** Format: double */
            droppedAttributesCount: number;
            attributes: {
                value: {
                  arrayValue?: {
                    values: {
                        stringValue: string;
                      }[];
                  };
                  /** Format: double */
                  intValue?: number;
                  stringValue?: string;
                };
                key: string;
              }[];
          };
        }[];
    };
    UpgradeToProRequest: {
      addons?: {
        evals?: boolean;
        experiments?: boolean;
        prompts?: boolean;
        alerts?: boolean;
      };
      /** Format: double */
      seats?: number;
      /** @enum {string} */
      ui_mode?: "embedded" | "hosted";
    };
    UpgradeToTeamBundleRequest: {
      /** @enum {string} */
      ui_mode?: "embedded" | "hosted";
    };
    LLMUsage: {
      model: string;
      provider: string;
      /** Format: double */
      prompt_tokens: number;
      /** Format: double */
      completion_tokens: number;
      /** Format: double */
      total_count: number;
      /** Format: double */
      amount: number;
      description: string;
      totalCost: {
        /** Format: double */
        prompt_token: number;
        /** Format: double */
        completion_token: number;
      };
    };
    SessionResult: {
      created_at: string;
      latest_request_created_at: string;
      session_id: string;
      session_name: string;
      /** Format: double */
      total_cost: number;
      /** Format: double */
      total_requests: number;
      /** Format: double */
      prompt_tokens: number;
      /** Format: double */
      completion_tokens: number;
      /** Format: double */
      total_tokens: number;
    };
    "ResultSuccess_SessionResult-Array_": {
      data: components["schemas"]["SessionResult"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_SessionResult-Array.string_": components["schemas"]["ResultSuccess_SessionResult-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_FilterLeaf.request_response_rmt-or-sessions_request_response_rmt_": {
      request_response_rmt?: components["schemas"]["Partial_RequestResponseRMTToOperators_"];
      sessions_request_response_rmt?: components["schemas"]["Partial_SessionsRequestResponseRMTToOperators_"];
    };
    "FilterLeafSubset_request_response_rmt-or-sessions_request_response_rmt_": components["schemas"]["Pick_FilterLeaf.request_response_rmt-or-sessions_request_response_rmt_"];
    SessionFilterNode: components["schemas"]["FilterLeafSubset_request_response_rmt-or-sessions_request_response_rmt_"] | components["schemas"]["SessionFilterBranch"] | "all";
    SessionFilterBranch: {
      right: components["schemas"]["SessionFilterNode"];
      /** @enum {string} */
      operator: "or" | "and";
      left: components["schemas"]["SessionFilterNode"];
    };
    SessionQueryParams: {
      search: string;
      timeFilter: {
        /** Format: double */
        endTimeUnixMs: number;
        /** Format: double */
        startTimeUnixMs: number;
      };
      nameEquals?: string;
      /** Format: double */
      timezoneDifference: number;
      filter: components["schemas"]["SessionFilterNode"];
    };
    SessionNameResult: {
      name: string;
      created_at: string;
      /** Format: double */
      total_cost: number;
      last_used: string;
      first_used: string;
      /** Format: double */
      session_count: number;
    };
    "ResultSuccess_SessionNameResult-Array_": {
      data: components["schemas"]["SessionNameResult"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_SessionNameResult-Array.string_": components["schemas"]["ResultSuccess_SessionNameResult-Array_"] | components["schemas"]["ResultError_string_"];
    SessionNameQueryParams: {
      nameContains: string;
      /** Format: double */
      timezoneDifference: number;
      /** @enum {string} */
      pSize?: "p50" | "p75" | "p95" | "p99" | "p99.9";
      useInterquartile?: boolean;
    };
    SessionMetrics: {
      session_count: components["schemas"]["HistogramRow"][];
      session_duration: components["schemas"]["HistogramRow"][];
      session_cost: components["schemas"]["HistogramRow"][];
    };
    ResultSuccess_SessionMetrics_: {
      data: components["schemas"]["SessionMetrics"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_SessionMetrics.string_": components["schemas"]["ResultSuccess_SessionMetrics_"] | components["schemas"]["ResultError_string_"];
    MetricsData: {
      /** Format: double */
      totalRequests: number;
      /** Format: double */
      requestCountPrevious24h: number;
      /** Format: double */
      requestVolumeChange: number;
      /** Format: double */
      errorRate24h: number;
      /** Format: double */
      errorRatePrevious24h: number;
      /** Format: double */
      errorRateChange: number;
      /** Format: double */
      averageLatency: number;
      /** Format: double */
      averageLatencyPerToken: number;
      /** Format: double */
      latencyChange: number;
      /** Format: double */
      latencyPerTokenChange: number;
      /** Format: double */
      recentRequestCount: number;
      /** Format: double */
      recentErrorCount: number;
    };
    TimeSeriesDataPoint: {
      /** Format: date-time */
      timestamp: string;
      /** Format: double */
      errorCount: number;
      /** Format: double */
      requestCount: number;
      /** Format: double */
      averageLatency: number;
      /** Format: double */
      averageLatencyPerCompletionToken: number;
    };
    ProviderMetrics: {
      providerName: string;
      metrics: components["schemas"]["MetricsData"] & {
        timeSeriesData: components["schemas"]["TimeSeriesDataPoint"][];
      };
    };
    "ResultSuccess_ProviderMetrics-Array_": {
      data: components["schemas"]["ProviderMetrics"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ProviderMetrics-Array.string_": components["schemas"]["ResultSuccess_ProviderMetrics-Array_"] | components["schemas"]["ResultError_string_"];
    ResultSuccess_ProviderMetrics_: {
      data: components["schemas"]["ProviderMetrics"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ProviderMetrics.string_": components["schemas"]["ResultSuccess_ProviderMetrics_"] | components["schemas"]["ResultError_string_"];
    /** @enum {string} */
    TimeFrame: "24h" | "7d" | "30d";
    Property: {
      property: string;
    };
    "ResultSuccess_Property-Array_": {
      data: components["schemas"]["Property"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_Property-Array.string_": components["schemas"]["ResultSuccess_Property-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__value-string--cost-number_-Array_": {
      data: {
          /** Format: double */
          cost: number;
          value: string;
        }[];
      /** @enum {number|null} */
      error: null;
    };
    "Result__value-string--cost-number_-Array.string_": components["schemas"]["ResultSuccess__value-string--cost-number_-Array_"] | components["schemas"]["ResultError_string_"];
    TimeFilterRequest: {
      timeFilter: {
        end: string;
        start: string;
      };
    };
    "ResultSuccess__apiKey-string__": {
      data: {
        apiKey: string;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__apiKey-string_.string_": components["schemas"]["ResultSuccess__apiKey-string__"] | components["schemas"]["ResultError_string_"];
    ResultSuccess_number_: {
      /** Format: double */
      data: number;
      /** @enum {number|null} */
      error: null;
    };
    "Result_number.string_": components["schemas"]["ResultSuccess_number_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__cost-number--created_at_trunc-string_-Array_": {
      data: {
          created_at_trunc: string;
          /** Format: double */
          cost: number;
        }[];
      /** @enum {number|null} */
      error: null;
    };
    "Result__cost-number--created_at_trunc-string_-Array.string_": components["schemas"]["ResultSuccess__cost-number--created_at_trunc-string_-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_FilterLeaf.request_response_rmt_": {
      request_response_rmt?: components["schemas"]["Partial_RequestResponseRMTToOperators_"];
    };
    FilterLeafSubset_request_response_rmt_: components["schemas"]["Pick_FilterLeaf.request_response_rmt_"];
    RequestClickhouseFilterNode: components["schemas"]["FilterLeafSubset_request_response_rmt_"] | components["schemas"]["RequestClickhouseFilterBranch"] | "all";
    RequestClickhouseFilterBranch: {
      right: components["schemas"]["RequestClickhouseFilterNode"];
      /** @enum {string} */
      operator: "or" | "and";
      left: components["schemas"]["RequestClickhouseFilterNode"];
    };
    /** @enum {string} */
    TimeIncrement: "min" | "hour" | "day" | "week" | "month" | "year";
    DataOverTimeRequest: {
      timeFilter: {
        end: string;
        start: string;
      };
      userFilter: components["schemas"]["RequestClickhouseFilterNode"];
      dbIncrement: components["schemas"]["TimeIncrement"];
      /** Format: double */
      timeZoneDifference: number;
    };
    MetricStats: {
      /** Format: double */
      p99: number;
      /** Format: double */
      p95: number;
      /** Format: double */
      p90: number;
      /** Format: double */
      max: number;
      /** Format: double */
      min: number;
      /** Format: double */
      median: number;
      /** Format: double */
      average: number;
    };
    TokenMetricStats: components["schemas"]["MetricStats"] & {
      /** Format: double */
      medianPer1000Tokens: number;
    };
    TimeSeriesMetric: {
      /** Format: double */
      value: number;
      timestamp: string;
    };
    Model: {
      timeSeriesData: {
        errorRate: components["schemas"]["TimeSeriesMetric"][];
        successRate: components["schemas"]["TimeSeriesMetric"][];
        ttft: components["schemas"]["TimeSeriesMetric"][];
        latency: components["schemas"]["TimeSeriesMetric"][];
      };
      requestStatus: {
        /** Format: double */
        errorRate: number;
        /** Format: double */
        successRate: number;
      };
      geographicTtft: {
          /** Format: double */
          median: number;
          countryCode: string;
        }[];
      geographicLatency: {
          /** Format: double */
          median: number;
          countryCode: string;
        }[];
      feedback: {
        /** Format: double */
        negativePercentage: number;
        /** Format: double */
        positivePercentage: number;
      };
      costs: {
        /** Format: double */
        completion_token: number;
        /** Format: double */
        prompt_token: number;
      };
      ttft: components["schemas"]["MetricStats"];
      latency: components["schemas"]["TokenMetricStats"];
      provider: string;
      model: string;
    };
    "ResultSuccess_Model-Array_": {
      data: components["schemas"]["Model"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_Model-Array.string_": components["schemas"]["ResultSuccess_Model-Array_"] | components["schemas"]["ResultError_string_"];
    ModelsToCompare: {
      provider: string;
      names: string[];
      parent: string;
    };
    "ResultSuccess__model-string_-Array_": {
      data: {
          model: string;
        }[];
      /** @enum {number|null} */
      error: null;
    };
    "Result__model-string_-Array.string_": components["schemas"]["ResultSuccess__model-string_-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__unsafe-boolean__": {
      data: {
        unsafe: boolean;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__unsafe-boolean_.string_": components["schemas"]["ResultSuccess__unsafe-boolean__"] | components["schemas"]["ResultError_string_"];
    IntegrationCreateParams: {
      integration_name: string;
      settings?: components["schemas"]["Json"];
      active?: boolean;
    };
    Integration: {
      integration_name?: string;
      settings?: components["schemas"]["Json"];
      active?: boolean;
      id: string;
    };
    ResultSuccess_Array_Integration__: {
      data: components["schemas"]["Integration"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_Array_Integration_.string_": components["schemas"]["ResultSuccess_Array_Integration__"] | components["schemas"]["ResultError_string_"];
    IntegrationUpdateParams: {
      integration_name?: string;
      settings?: components["schemas"]["Json"];
      active?: boolean;
    };
    ResultSuccess_Integration_: {
      data: components["schemas"]["Integration"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_Integration.string_": components["schemas"]["ResultSuccess_Integration_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess_Array__id-string--name-string___": {
      data: {
          name: string;
          id: string;
        }[];
      /** @enum {number|null} */
      error: null;
    };
    "Result_Array__id-string--name-string__.string_": components["schemas"]["ResultSuccess_Array__id-string--name-string___"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__tableId-string--experimentId-string__": {
      data: {
        experimentId: string;
        tableId: string;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__tableId-string--experimentId-string_.string_": components["schemas"]["ResultSuccess__tableId-string--experimentId-string__"] | components["schemas"]["ResultError_string_"];
    CreateExperimentTableParams: {
      datasetId: string;
      experimentMetadata: components["schemas"]["Record_string.any_"];
      promptVersionId: string;
      newHeliconeTemplate: string;
      isMajorVersion: boolean;
      promptSubversionMetadata: components["schemas"]["Record_string.any_"];
      experimentTableMetadata?: components["schemas"]["Record_string.any_"];
    };
    ExperimentTableColumn: {
      id: string;
      columnName: string;
      columnType: string;
      hypothesisId?: string;
      cells: ({
          metadata?: components["schemas"]["Record_string.any_"];
          value: string | null;
          requestId?: string;
          /** Format: double */
          rowIndex: number;
          id: string;
        })[];
      metadata?: components["schemas"]["Record_string.any_"];
    };
    ExperimentTable: {
      id: string;
      name: string;
      experimentId: string;
      columns: components["schemas"]["ExperimentTableColumn"][];
      metadata?: components["schemas"]["Record_string.any_"];
    };
    ResultSuccess_ExperimentTable_: {
      data: components["schemas"]["ExperimentTable"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ExperimentTable.string_": components["schemas"]["ResultSuccess_ExperimentTable_"] | components["schemas"]["ResultError_string_"];
    ExperimentTableSimplified: {
      id: string;
      name: string;
      experimentId: string;
      createdAt: string;
      metadata?: unknown;
      columns: {
          columnType: string;
          columnName: string;
          id: string;
        }[];
    };
    ResultSuccess_ExperimentTableSimplified_: {
      data: components["schemas"]["ExperimentTableSimplified"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ExperimentTableSimplified.string_": components["schemas"]["ResultSuccess_ExperimentTableSimplified_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess_ExperimentTableSimplified-Array_": {
      data: components["schemas"]["ExperimentTableSimplified"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ExperimentTableSimplified-Array.string_": components["schemas"]["ResultSuccess_ExperimentTableSimplified-Array_"] | components["schemas"]["ResultError_string_"];
    /**
     * @description Error format
     *
     * {@link https://postgrest.org/en/stable/api.html?highlight=options#errors-and-http-status-codes}
     */
    PostgrestError: {
      name: string;
      message: string;
      stack?: string;
      details: string;
      hint: string;
      code: string;
    };
    ResultError_PostgrestError_: {
      /** @enum {number|null} */
      data: null;
      error: components["schemas"]["PostgrestError"];
    };
    NewExperimentParams: {
      datasetId: string;
      promptVersion: string;
      model: string;
      providerKeyId: string;
      meta?: unknown;
    };
    "ResultSuccess__hypothesisId-string__": {
      data: {
        hypothesisId: string;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__hypothesisId-string_.string_": components["schemas"]["ResultSuccess__hypothesisId-string__"] | components["schemas"]["ResultError_string_"];
    Score: {
      valueType: string;
      value: number | string;
    };
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.Score_": {
      [key: string]: components["schemas"]["Score"];
    };
    "ResultSuccess__runsCount-number--scores-Record_string.Score___": {
      data: {
        scores: components["schemas"]["Record_string.Score_"];
        /** Format: double */
        runsCount: number;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__runsCount-number--scores-Record_string.Score__.string_": components["schemas"]["ResultSuccess__runsCount-number--scores-Record_string.Score___"] | components["schemas"]["ResultError_string_"];
    ResponseObj: {
      body: unknown;
      createdAt: string;
      /** Format: double */
      completionTokens: number;
      /** Format: double */
      promptTokens: number;
      /** Format: double */
      promptCacheWriteTokens: number;
      /** Format: double */
      promptCacheReadTokens: number;
      /** Format: double */
      delayMs: number;
      model: string;
    };
    RequestObj: {
      id: string;
      provider: string;
    };
    ExperimentDatasetRow: {
      rowId: string;
      inputRecord: {
        request: components["schemas"]["RequestObj"];
        response: components["schemas"]["ResponseObj"];
        autoInputs: components["schemas"]["Record_string.string_"][];
        inputs: components["schemas"]["Record_string.string_"];
        requestPath: string;
        requestId: string;
        id: string;
      };
      /** Format: double */
      rowIndex: number;
      columnId: string;
      scores: components["schemas"]["Record_string.Score_"];
    };
    ExperimentScores: {
      dataset: {
        scores: components["schemas"]["Record_string.Score_"];
      };
      hypothesis: {
        scores: components["schemas"]["Record_string.Score_"];
        /** Format: double */
        runsCount: number;
      };
    };
    Experiment: {
      id: string;
      organization: string;
      dataset: {
        rows: components["schemas"]["ExperimentDatasetRow"][];
        name: string;
        id: string;
      };
      meta: unknown;
      createdAt: string;
      hypotheses: {
          runs: {
              request?: components["schemas"]["RequestObj"];
              scores: components["schemas"]["Record_string.Score_"];
              response?: components["schemas"]["ResponseObj"];
              resultRequestId: string;
              datasetRowId: string;
            }[];
          providerKey: string;
          createdAt: string;
          status: string;
          model: string;
          parentPromptVersion?: {
            template: unknown;
          };
          promptVersion?: {
            template: unknown;
          };
          promptVersionId: string;
          id: string;
        }[];
      scores: components["schemas"]["ExperimentScores"] | null;
      tableId: string | null;
    };
    "ResultSuccess_Experiment-Array_": {
      data: components["schemas"]["Experiment"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_Experiment-Array.string_": components["schemas"]["ResultSuccess_Experiment-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description Make all properties in T optional */
    Partial_ExperimentToOperators_: {
      id?: components["schemas"]["Partial_TextOperators_"];
      prompt_v2?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_FilterLeaf.experiment_": {
      experiment?: components["schemas"]["Partial_ExperimentToOperators_"];
    };
    FilterLeafSubset_experiment_: components["schemas"]["Pick_FilterLeaf.experiment_"];
    ExperimentFilterNode: components["schemas"]["FilterLeafSubset_experiment_"] | components["schemas"]["ExperimentFilterBranch"] | "all";
    ExperimentFilterBranch: {
      right: components["schemas"]["ExperimentFilterNode"];
      /** @enum {string} */
      operator: "or" | "and";
      left: components["schemas"]["ExperimentFilterNode"];
    };
    IncludeExperimentKeys: {
      /** @enum {boolean} */
      inputs?: true;
      /** @enum {boolean} */
      promptVersion?: true;
      /** @enum {boolean} */
      responseBodies?: true;
      /** @enum {boolean} */
      score?: true;
    };
    "ResultSuccess__datasetId-string__": {
      data: {
        datasetId: string;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__datasetId-string_.string_": components["schemas"]["ResultSuccess__datasetId-string__"] | components["schemas"]["ResultError_string_"];
    DatasetMetadata: {
      promptVersionId?: string;
      inputRecordsIds?: string[];
    };
    NewDatasetParams: {
      datasetName: string;
      requestIds: string[];
      /** @enum {string} */
      datasetType: "experiment" | "helicone";
      meta?: components["schemas"]["DatasetMetadata"];
    };
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_FilterLeaf.request-or-prompts_versions_": {
      prompts_versions?: components["schemas"]["Partial_PromptVersionsToOperators_"];
      request?: components["schemas"]["Partial_RequestTableToOperators_"];
    };
    "FilterLeafSubset_request-or-prompts_versions_": components["schemas"]["Pick_FilterLeaf.request-or-prompts_versions_"];
    DatasetFilterNode: components["schemas"]["FilterLeafSubset_request-or-prompts_versions_"] | components["schemas"]["DatasetFilterBranch"] | "all";
    DatasetFilterBranch: {
      right: components["schemas"]["DatasetFilterNode"];
      /** @enum {string} */
      operator: "or" | "and";
      left: components["schemas"]["DatasetFilterNode"];
    };
    RandomDatasetParams: {
      datasetName: string;
      filter: components["schemas"]["DatasetFilterNode"];
      /** Format: double */
      offset?: number;
      /** Format: double */
      limit?: number;
    };
    DatasetResult: {
      id: string;
      name: string;
      created_at: string;
      meta?: components["schemas"]["DatasetMetadata"];
    };
    "ResultSuccess_DatasetResult-Array_": {
      data: components["schemas"]["DatasetResult"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_DatasetResult-Array.string_": components["schemas"]["ResultSuccess_DatasetResult-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess___-Array_": {
      data: Record<string, never>[];
      /** @enum {number|null} */
      error: null;
    };
    "Result___-Array.string_": components["schemas"]["ResultSuccess___-Array_"] | components["schemas"]["ResultError_string_"];
    HeliconeDatasetMetadata: {
      promptVersionId?: string;
      inputRecordsIds?: string[];
    };
    NewHeliconeDatasetParams: {
      datasetName: string;
      requestIds: string[];
      meta?: components["schemas"]["HeliconeDatasetMetadata"];
    };
    MutateParams: {
      addRequests: string[];
      removeRequests: string[];
    };
    HeliconeDatasetRow: {
      id: string;
      origin_request_id: string;
      dataset_id: string;
      created_at: string;
      signed_url: components["schemas"]["Result_string.string_"];
    };
    "ResultSuccess_HeliconeDatasetRow-Array_": {
      data: components["schemas"]["HeliconeDatasetRow"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_HeliconeDatasetRow-Array.string_": components["schemas"]["ResultSuccess_HeliconeDatasetRow-Array_"] | components["schemas"]["ResultError_string_"];
    HeliconeDataset: {
      created_at: string | null;
      dataset_type: string;
      id: string;
      meta: components["schemas"]["Json"] | null;
      name: string | null;
      organization: string;
      /** Format: double */
      requests_count: number;
    };
    "ResultSuccess_HeliconeDataset-Array_": {
      data: components["schemas"]["HeliconeDataset"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_HeliconeDataset-Array.string_": components["schemas"]["ResultSuccess_HeliconeDataset-Array_"] | components["schemas"]["ResultError_string_"];
    ResultSuccess_any_: {
      data: unknown;
      /** @enum {number|null} */
      error: null;
    };
    Eval: {
      name: string;
      /** Format: double */
      averageScore: number;
      /** Format: double */
      minScore: number;
      /** Format: double */
      maxScore: number;
      /** Format: double */
      count: number;
      overTime: {
          /** Format: double */
          count: number;
          date: string;
        }[];
      averageOverTime: {
          /** Format: double */
          value: number;
          date: string;
        }[];
    };
    "ResultSuccess_Eval-Array_": {
      data: components["schemas"]["Eval"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_Eval-Array.string_": components["schemas"]["ResultSuccess_Eval-Array_"] | components["schemas"]["ResultError_string_"];
    EvalFilterNode: components["schemas"]["FilterLeafSubset_request_response_rmt_"] | components["schemas"]["EvalFilterBranch"] | "all";
    EvalFilterBranch: {
      right: components["schemas"]["EvalFilterNode"];
      /** @enum {string} */
      operator: "or" | "and";
      left: components["schemas"]["EvalFilterNode"];
    };
    EvalQueryParams: {
      filter: components["schemas"]["EvalFilterNode"];
      timeFilter: {
        end: string;
        start: string;
      };
      /** Format: double */
      offset?: number;
      /** Format: double */
      limit?: number;
      /** Format: double */
      timeZoneDifference?: number;
    };
    ScoreDistribution: {
      name: string;
      distribution: {
          /** Format: double */
          value: number;
          /** Format: double */
          upper: number;
          /** Format: double */
          lower: number;
        }[];
    };
    "ResultSuccess_ScoreDistribution-Array_": {
      data: components["schemas"]["ScoreDistribution"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ScoreDistribution-Array.string_": components["schemas"]["ResultSuccess_ScoreDistribution-Array_"] | components["schemas"]["ResultError_string_"];
    TotalValuesForAllOfTime: {
      /** Format: double */
      total_cost: number;
      /** Format: double */
      total_tokens: number;
      /** Format: double */
      total_requests: number;
    };
    ResultSuccess_TotalValuesForAllOfTime_: {
      data: components["schemas"]["TotalValuesForAllOfTime"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_TotalValuesForAllOfTime.string_": components["schemas"]["ResultSuccess_TotalValuesForAllOfTime_"] | components["schemas"]["ResultError_string_"];
    ModelUsageOverTime: {
      /** Format: double */
      tokens: number;
      date: string;
      model: string;
    };
    "ResultSuccess_ModelUsageOverTime-Array_": {
      data: components["schemas"]["ModelUsageOverTime"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ModelUsageOverTime-Array.string_": components["schemas"]["ResultSuccess_ModelUsageOverTime-Array_"] | components["schemas"]["ResultError_string_"];
    ProviderUsageOverTime: {
      /** Format: double */
      tokens: number;
      date: string;
      provider: string;
    };
    "ResultSuccess_ProviderUsageOverTime-Array_": {
      data: components["schemas"]["ProviderUsageOverTime"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ProviderUsageOverTime-Array.string_": components["schemas"]["ResultSuccess_ProviderUsageOverTime-Array_"] | components["schemas"]["ResultError_string_"];
    /**
     * @description *
     * FUTURE HELICONE DEVS ALL THE ROUTES HERE ARE CACHE UNAUTHENTICATED!! PLEASE DO NOT USE THE AUTH PARAM
     * @enum {string}
     */
    TimeSpan: "7d" | "1m" | "3m";
    /** @enum {string} */
    ModelName: "gpt-3.5" | "gpt-4o" | "gpt-4o-mini" | "gpt-4" | "gpt-4-turbo" | "claude-3-opus" | "claude-3-sonnet" | "claude-3-haiku" | "claude-2" | "open-mixtral" | "Llama" | "dall-e" | "text-moderation" | "text-embedding" | "anthropic/claude-3.5-sonnet";
    /** @enum {string} */
    OpenStatsProviderName: "OPENAI" | "ANTHROPIC" | "OPENROUTER" | "MISTRAL" | "META";
    DataIsBeautifulRequestBody: {
      provider?: components["schemas"]["OpenStatsProviderName"];
      models?: components["schemas"]["ModelName"][];
      timespan: components["schemas"]["TimeSpan"];
    };
    TTFTvsPromptLength: {
      /** Format: double */
      prompt_length: number;
      /** Format: double */
      ttft_normalized_p75: number;
      /** Format: double */
      ttft_normalized_p99: number;
      /** Format: double */
      ttft_normalized: number;
      /** Format: double */
      ttft_p75: number;
      /** Format: double */
      ttft_p99: number;
      /** Format: double */
      ttft: number;
    };
    "ResultSuccess_TTFTvsPromptLength-Array_": {
      data: components["schemas"]["TTFTvsPromptLength"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_TTFTvsPromptLength-Array.string_": components["schemas"]["ResultSuccess_TTFTvsPromptLength-Array_"] | components["schemas"]["ResultError_string_"];
    ModelBreakdown: {
      /** Format: double */
      percent: number;
      matched_model: string;
    };
    "ResultSuccess_ModelBreakdown-Array_": {
      data: components["schemas"]["ModelBreakdown"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ModelBreakdown-Array.string_": components["schemas"]["ResultSuccess_ModelBreakdown-Array_"] | components["schemas"]["ResultError_string_"];
    ModelCost: {
      /** Format: double */
      percent: number;
      matched_model: string;
    };
    "ResultSuccess_ModelCost-Array_": {
      data: components["schemas"]["ModelCost"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ModelCost-Array.string_": components["schemas"]["ResultSuccess_ModelCost-Array_"] | components["schemas"]["ResultError_string_"];
    ProviderBreakdown: {
      /** Format: double */
      percent: number;
      provider: string;
    };
    "ResultSuccess_ProviderBreakdown-Array_": {
      data: components["schemas"]["ProviderBreakdown"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ProviderBreakdown-Array.string_": components["schemas"]["ResultSuccess_ProviderBreakdown-Array_"] | components["schemas"]["ResultError_string_"];
    ModelBreakdownOverTime: {
      date: string;
    } & components["schemas"]["ModelBreakdown"];
    "ResultSuccess_ModelBreakdownOverTime-Array_": {
      data: components["schemas"]["ModelBreakdownOverTime"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ModelBreakdownOverTime-Array.string_": components["schemas"]["ResultSuccess_ModelBreakdownOverTime-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__score_key-string--score_sum-number--created_at_trunc-string_-Array_": {
      data: {
          created_at_trunc: string;
          /** Format: double */
          score_sum: number;
          score_key: string;
        }[];
      /** @enum {number|null} */
      error: null;
    };
    "Result__score_key-string--score_sum-number--created_at_trunc-string_-Array.string_": components["schemas"]["ResultSuccess__score_key-string--score_sum-number--created_at_trunc-string_-Array_"] | components["schemas"]["ResultError_string_"];
    CustomerUsage: {
      id: string;
      name: string;
      /** Format: double */
      cost: number;
      /** Format: double */
      count: number;
      /** Format: double */
      prompt_tokens: number;
      /** Format: double */
      completion_tokens: number;
    };
    Customer: {
      id: string;
      name: string;
    };
    "ResultSuccess__api_key_hash-string--api_key_name-string--created_at-string--governance-boolean--id-number--key_permissions-string--organization_id-string--soft_delete-boolean--temp_key-boolean--user_id-string_-Array_": {
      data: {
          user_id: string;
          temp_key: boolean;
          soft_delete: boolean;
          organization_id: string;
          key_permissions: string;
          /** Format: double */
          id: number;
          governance: boolean;
          created_at: string;
          api_key_name: string;
          api_key_hash: string;
        }[];
      /** @enum {number|null} */
      error: null;
    };
    "Result__api_key_hash-string--api_key_name-string--created_at-string--governance-boolean--id-number--key_permissions-string--organization_id-string--soft_delete-boolean--temp_key-boolean--user_id-string_-Array.string_": components["schemas"]["ResultSuccess__api_key_hash-string--api_key_name-string--created_at-string--governance-boolean--id-number--key_permissions-string--organization_id-string--soft_delete-boolean--temp_key-boolean--user_id-string_-Array_"] | components["schemas"]["ResultError_string_"];
  };
  responses: {
  };
  parameters: {
  };
  requestBodies: {
  };
  headers: {
  };
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  GetWebhooks: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__id-string--created_at-string--destination-string--version-string--config-string--hmac_key-string_-Array.string_"];
        };
      };
    };
  };
  NewWebhook: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebhookData"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ResultSuccess_unknown_"] | components["schemas"]["ResultError_unknown_"];
        };
      };
    };
  };
  DeleteWebhook: {
    parameters: {
      path: {
        webhookId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  AddToWaitlist: {
    requestBody: {
      content: {
        "application/json": {
          email: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ResultSuccess_unknown_"] | components["schemas"]["ResultError_any_"];
        };
      };
    };
  };
  AddKey: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddVaultKeyParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__id-string_.string_"];
        };
      };
    };
  };
  GetKeys: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_DecryptedProviderKey-Array.string_"];
        };
      };
    };
  };
  GetKeyById: {
    parameters: {
      path: {
        providerKeyId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_DecryptedProviderKey.string_"];
        };
      };
    };
  };
  UpdateKey: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          active?: boolean;
          name?: string;
          key?: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetUserMetricsOverview: {
    requestBody: {
      content: {
        "application/json": {
          useInterquartile: boolean;
          pSize: components["schemas"]["PSize"];
          filter: components["schemas"]["UserFilterNode"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__request_count-HistogramRow-Array--user_cost-HistogramRow-Array_.string_"];
        };
      };
    };
  };
  GetUserMetrics: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserMetricsQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__users-UserMetricsResult-Array--count-number_.string_"];
        };
      };
    };
  };
  GetUsers: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__count-number--prompt_tokens-number--completion_tokens-number--user_id-string--cost_usd-number_-Array.string_"];
        };
      };
    };
  };
  GetRequests: {
    /** @description Request query filters */
    requestBody: {
      content: {
        /**
         * @example {
         *   "filter": "all",
         *   "isCached": false,
         *   "limit": 10,
         *   "offset": 0,
         *   "sort": {
         *     "created_at": "desc"
         *   },
         *   "isScored": false,
         *   "isPartOfExperiment": false
         * }
         */
        "application/json": components["schemas"]["RequestQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeRequest-Array.string_"];
        };
      };
    };
  };
  GetRequestsClickhouse: {
    /** @description Request query filters */
    requestBody: {
      content: {
        /**
         * @example {
         *   "filter": "all",
         *   "isCached": false,
         *   "limit": 100,
         *   "offset": 0,
         *   "sort": {
         *     "created_at": "desc"
         *   },
         *   "includeInputs": false,
         *   "isScored": false,
         *   "isPartOfExperiment": false
         * }
         */
        "application/json": components["schemas"]["RequestQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeRequest-Array.string_"];
        };
      };
    };
  };
  GetRequestById: {
    parameters: {
      query?: {
        includeBody?: boolean;
      };
      path: {
        requestId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeRequest.string_"];
        };
      };
    };
  };
  GetRequestsByIds: {
    requestBody: {
      content: {
        "application/json": {
          requestIds: string[];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeRequest-Array.string_"];
        };
      };
    };
  };
  FeedbackRequest: {
    parameters: {
      path: {
        requestId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          rating: boolean;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  PutProperty: {
    parameters: {
      path: {
        requestId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          value: string;
          key: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetRequestAssetById: {
    parameters: {
      path: {
        requestId: string;
        assetId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeRequestAsset.string_"];
        };
      };
    };
  };
  AddScores: {
    parameters: {
      path: {
        requestId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScoreRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetPrompts: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptsQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptsResult-Array.string_"];
        };
      };
    };
  };
  GetPrompt: {
    parameters: {
      path: {
        promptId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptResult.string_"];
        };
      };
    };
  };
  DeletePrompt: {
    parameters: {
      path: {
        promptId: string;
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  CreatePrompt: {
    requestBody: {
      content: {
        "application/json": {
          metadata: components["schemas"]["Record_string.any_"];
          prompt: unknown;
          userDefinedId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_CreatePromptResponse.string_"];
        };
      };
    };
  };
  UpdatePromptUserDefinedId: {
    parameters: {
      path: {
        promptId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          userDefinedId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  EditPromptVersionLabel: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptEditSubversionLabelParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__metadata-Record_string.any__.string_"];
        };
      };
    };
  };
  EditPromptVersionTemplate: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptEditSubversionTemplateParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateSubversionFromUi: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptCreateSubversionParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult.string_"];
        };
      };
    };
  };
  CreateSubversion: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptCreateSubversionParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult.string_"];
        };
      };
    };
  };
  PromotePromptVersionToProduction: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          previousProductionVersionId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult.string_"];
        };
      };
    };
  };
  GetInputs: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          random?: boolean;
          /** Format: double */
          limit: number;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptInputRecord-Array.string_"];
        };
      };
    };
  };
  GetPromptExperiments: {
    parameters: {
      path: {
        promptId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array.string_"];
        };
      };
    };
  };
  GetPromptVersions: {
    parameters: {
      path: {
        promptId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptVersionsQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult-Array.string_"];
        };
      };
    };
  };
  GetPromptVersion: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult.string_"];
        };
      };
    };
  };
  DeletePromptVersion: {
    parameters: {
      path: {
        experimentId: string;
        promptVersionId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetPromptVersionsCompiled: {
    parameters: {
      path: {
        user_defined_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptVersiosQueryParamsCompiled"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResultCompiled.string_"];
        };
      };
    };
  };
  GetPromptVersionTemplates: {
    parameters: {
      path: {
        user_defined_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptVersiosQueryParamsCompiled"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResultFilled.string_"];
        };
      };
    };
  };
  CreateEvaluator: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEvaluatorParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorResult.string_"];
        };
      };
    };
  };
  GetEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorResult.string_"];
        };
      };
    };
  };
  UpdateEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateEvaluatorParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorResult.string_"];
        };
      };
    };
  };
  DeleteEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  QueryEvaluators: {
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorResult-Array.string_"];
        };
      };
    };
  };
  GetExperimentsForEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorExperiment-Array.string_"];
        };
      };
    };
  };
  GetOnlineEvaluators: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_OnlineEvaluatorByEvaluatorId-Array.string_"];
        };
      };
    };
  };
  CreateOnlineEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOnlineEvaluatorParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  DeleteOnlineEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
        onlineEvaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  TestPythonEvaluator: {
    requestBody: {
      content: {
        "application/json": {
          testInput: components["schemas"]["TestInput"];
          code: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__output-string--traces-string-Array--statusCode_63_-number_.string_"];
        };
      };
    };
  };
  TestLLMEvaluator: {
    requestBody: {
      content: {
        "application/json": {
          evaluatorName: string;
          testInput: components["schemas"]["TestInput"];
          evaluatorConfig: components["schemas"]["EvaluatorConfig"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["EvaluatorScoreResult"];
        };
      };
    };
  };
  TestLastMileEvaluator: {
    requestBody: {
      content: {
        "application/json": {
          testInput: components["schemas"]["TestInput"];
          config: components["schemas"]["LastMileConfigForm"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__score-number--input-string--output-string--ground_truth_63_-string_.string_"];
        };
      };
    };
  };
  GetEvaluatorStats: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorStats.string_"];
        };
      };
    };
  };
  CreateEmptyExperiment: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__experimentId-string_.string_"];
        };
      };
    };
  };
  CreateExperimentFromRequest: {
    parameters: {
      path: {
        requestId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__experimentId-string_.string_"];
        };
      };
    };
  };
  CreateNewExperiment: {
    requestBody: {
      content: {
        "application/json": {
          originalPromptVersion: string;
          name: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__experimentId-string_.string_"];
        };
      };
    };
  };
  GetExperiments: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ExperimentV2-Array.string_"];
        };
      };
    };
  };
  GetExperimentById: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ExtendedExperimentData.string_"];
        };
      };
    };
  };
  DeleteExperiment: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateNewPromptVersionForExperiment: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateNewPromptVersionForExperimentParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult.string_"];
        };
      };
    };
  };
  GetPromptVersionsForExperiment: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ExperimentV2PromptVersion-Array.string_"];
        };
      };
    };
  };
  GetInputKeysForExperiment: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string-Array.string_"];
        };
      };
    };
  };
  AddManualRowToExperiment: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputs: components["schemas"]["Record_string.string_"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string.string_"];
        };
      };
    };
  };
  AddManualRowsToExperimentBatch: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputs: components["schemas"]["Record_string.string_"][];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  DeleteExperimentTableRows: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputRecordIds: string[];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateExperimentTableRowBatch: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          rows: {
              autoInputs: unknown[];
              inputs: components["schemas"]["Record_string.string_"];
              inputRecordId: string;
            }[];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateExperimentTableRowFromDataset: {
    parameters: {
      path: {
        experimentId: string;
        datasetId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  UpdateExperimentTableRow: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputs: components["schemas"]["Record_string.string_"];
          inputRecordId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  RunHypothesis: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputRecordId: string;
          promptVersionId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string.string_"];
        };
      };
    };
  };
  GetExperimentEvaluators: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorResult-Array.string_"];
        };
      };
    };
  };
  CreateExperimentEvaluator: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          evaluatorId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  DeleteExperimentEvaluator: {
    parameters: {
      path: {
        experimentId: string;
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  RunExperimentEvaluators: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  ShouldRunEvaluators: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_boolean.string_"];
        };
      };
    };
  };
  GetExperimentPromptVersionScores: {
    parameters: {
      path: {
        experimentId: string;
        promptVersionId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_Record_string.ScoreV2_.string_"];
        };
      };
    };
  };
  GetExperimentScore: {
    parameters: {
      path: {
        experimentId: string;
        requestId: string;
        scoreKey: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ScoreV2-or-null.string_"];
        };
      };
    };
  };
  LogTrace: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OTELTrace"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  LogPythonTrace: {
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  GetCostForPrompts: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  GetCostForEvals: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  GetCostForExperiments: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  GetFreeUsage: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  UpgradeToPro: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpgradeToProRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  UpgradeExistingCustomer: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpgradeToProRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  UpgradeToTeamBundle: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpgradeToTeamBundleRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  UpgradeExistingCustomerToTeamBundle: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpgradeToTeamBundleRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  ManageSubscription: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  UndoCancelSubscription: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": null;
        };
      };
    };
  };
  AddOns: {
    parameters: {
      path: {
        productType: "alerts" | "prompts" | "experiments" | "evals";
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": null;
        };
      };
    };
  };
  DeleteAddOns: {
    parameters: {
      path: {
        productType: "alerts" | "prompts" | "experiments" | "evals";
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": null;
        };
      };
    };
  };
  PreviewInvoice: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": ({
            evaluators_usage: components["schemas"]["LLMUsage"][];
            experiments_usage: components["schemas"]["LLMUsage"][];
            /** Format: double */
            total: number;
            /** Format: double */
            tax: number | null;
            /** Format: double */
            subtotal: number;
            discount: ({
              coupon: {
                /** Format: double */
                amount_off: number | null;
                /** Format: double */
                percent_off: number | null;
                name: string | null;
              };
            }) | null;
            lines: ({
              data: ({
                  description: string | null;
                  /** Format: double */
                  amount: number | null;
                  id: string | null;
                })[];
            }) | null;
            /** Format: double */
            next_payment_attempt: number | null;
            currency: string | null;
          }) | null;
        };
      };
    };
  };
  CancelSubscription: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": null;
        };
      };
    };
  };
  MigrateToPro: {
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  GetSubscription: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": ({
            items: ({
                price: {
                  product: ({
                    name: string | null;
                  }) | null;
                };
                /** Format: double */
                quantity?: number;
              })[];
            /** Format: double */
            trial_end: number | null;
            id: string;
            /** Format: double */
            current_period_start: number;
            /** Format: double */
            current_period_end: number;
            cancel_at_period_end: boolean;
            status: string;
          }) | null;
        };
      };
    };
  };
  HandleStripeWebhook: {
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  HasSession: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_boolean.string_"];
        };
      };
    };
  };
  GetSessions: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_SessionResult-Array.string_"];
        };
      };
    };
  };
  GetNames: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionNameQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_SessionNameResult-Array.string_"];
        };
      };
    };
  };
  GetMetrics: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionNameQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_SessionMetrics.string_"];
        };
      };
    };
  };
  UpdateSessionFeedback: {
    parameters: {
      path: {
        sessionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          rating: boolean;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetAllProviderStatus: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ProviderMetrics-Array.string_"];
        };
      };
    };
  };
  GetProviderStatus: {
    parameters: {
      query: {
        timeFrame: components["schemas"]["TimeFrame"];
      };
      path: {
        provider: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ProviderMetrics.string_"];
        };
      };
    };
  };
  GetProperties: {
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_Property-Array.string_"];
        };
      };
    };
  };
  SearchProperties: {
    parameters: {
      path: {
        propertyKey: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          searchTerm: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string-Array.string_"];
        };
      };
    };
  };
  GetTopCosts: {
    parameters: {
      path: {
        propertyKey: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TimeFilterRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__value-string--cost-number_-Array.string_"];
        };
      };
    };
  };
  GetApiKey: {
    requestBody: {
      content: {
        "application/json": {
          sessionUUID: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__apiKey-string_.string_"];
        };
      };
    };
  };
  AddSession: {
    requestBody: {
      content: {
        "application/json": {
          sessionUUID: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string.string_"];
        };
      };
    };
  };
  GetOrgName: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string.string_"];
        };
      };
    };
  };
  GetTotalCosts: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_number.string_"];
        };
      };
    };
  };
  PiGetTotalRequests: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_number.string_"];
        };
      };
    };
  };
  GetCostsOverTime: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataOverTimeRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__cost-number--created_at_trunc-string_-Array.string_"];
        };
      };
    };
  };
  GetModelComparison: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModelsToCompare"][];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_Model-Array.string_"];
        };
      };
    };
  };
  GetModels: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__model-string_-Array.string_"];
        };
      };
    };
  };
  GetSecurity: {
    requestBody: {
      content: {
        "application/json": {
          text: string;
          advanced: boolean;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__unsafe-boolean_.string_"];
        };
      };
    };
  };
  GetIntegrations: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_Array_Integration_.string_"];
        };
      };
    };
  };
  CreateIntegration: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IntegrationCreateParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__id-string_.string_"];
        };
      };
    };
  };
  GetIntegration: {
    parameters: {
      path: {
        integrationId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_Integration.string_"];
        };
      };
    };
  };
  UpdateIntegration: {
    parameters: {
      path: {
        integrationId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IntegrationUpdateParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetIntegrationByType: {
    parameters: {
      path: {
        type: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_Integration.string_"];
        };
      };
    };
  };
  GetSlackSettings: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_Integration.string_"];
        };
      };
    };
  };
  GetSlackChannels: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_Array__id-string--name-string__.string_"];
        };
      };
    };
  };
  CreateNewEmptyExperiment: {
    requestBody: {
      content: {
        "application/json": {
          datasetId: string;
          metadata: components["schemas"]["Record_string.string_"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__experimentId-string_.string_"];
        };
      };
    };
  };
  CreateNewExperimentTable: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateExperimentTableParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__tableId-string--experimentId-string_.string_"];
        };
      };
    };
  };
  GetExperimentTableById: {
    parameters: {
      path: {
        experimentTableId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ExperimentTable.string_"];
        };
      };
    };
  };
  GetExperimentTableMetadata: {
    parameters: {
      path: {
        experimentTableId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ExperimentTableSimplified.string_"];
        };
      };
    };
  };
  GetExperimentTables: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ExperimentTableSimplified-Array.string_"];
        };
      };
    };
  };
  CreateExperimentCell: {
    parameters: {
      path: {
        experimentTableId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          value: string | null;
          /** Format: double */
          rowIndex: number;
          columnId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  UpdateExperimentCell: {
    parameters: {
      path: {
        experimentTableId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          updateInputs?: boolean;
          metadata?: string;
          value?: string;
          status?: string;
          cellId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateExperimentColumn: {
    parameters: {
      path: {
        experimentTableId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputKeys?: string[];
          promptVersionId?: string;
          hypothesisId?: string;
          columnType: string;
          columnName: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateExperimentTableRow: {
    parameters: {
      path: {
        experimentTableId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputs?: components["schemas"]["Record_string.string_"];
          sourceRequest?: string;
          promptVersionId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  DeleteExperimentTableRow: {
    parameters: {
      path: {
        experimentTableId: string;
        rowIndex: number;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateExperimentTableRowWithCellsBatch: {
    parameters: {
      path: {
        experimentTableId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          rows: ({
              sourceRequest?: string;
              cells: ({
                  metadata?: unknown;
                  value: string | null;
                  columnId: string;
                })[];
              datasetId: string;
              inputs: components["schemas"]["Record_string.string_"];
              inputRecordId: string;
            })[];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  UpdateExperimentMeta: {
    requestBody: {
      content: {
        "application/json": {
          meta: components["schemas"]["Record_string.string_"];
          experimentId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ResultSuccess_unknown_"] | components["schemas"]["ResultError_PostgrestError_"];
        };
      };
    };
  };
  CreateNewExperimentOld: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewExperimentParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__experimentId-string_.string_"];
        };
      };
    };
  };
  CreateNewExperimentHypothesis: {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          status: "PENDING" | "RUNNING" | "COMPLETED" | "FAILED";
          providerKeyId: string;
          promptVersion: string;
          model: string;
          experimentId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__hypothesisId-string_.string_"];
        };
      };
    };
  };
  GetExperimentHypothesisScores: {
    parameters: {
      path: {
        hypothesisId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__runsCount-number--scores-Record_string.Score__.string_"];
        };
      };
    };
  };
  CreateExperimentEvaluatorOld: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          evaluatorId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  RunExperimentEvaluatorsOld: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  DeleteExperimentEvaluatorOld: {
    parameters: {
      path: {
        experimentId: string;
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetExperimentsOld: {
    requestBody: {
      content: {
        "application/json": {
          include?: components["schemas"]["IncludeExperimentKeys"];
          filter: components["schemas"]["ExperimentFilterNode"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_Experiment-Array.string_"];
        };
      };
    };
  };
  AddDataset: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewDatasetParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__datasetId-string_.string_"];
        };
      };
    };
  };
  AddRandomDataset: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RandomDatasetParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__datasetId-string_.string_"];
        };
      };
    };
  };
  GetDatasets: {
    requestBody: {
      content: {
        "application/json": {
          promptVersionId?: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_DatasetResult-Array.string_"];
        };
      };
    };
  };
  InsertDatasetRow: {
    parameters: {
      path: {
        datasetId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          originalColumnId?: string;
          inputs: components["schemas"]["Record_string.string_"];
          inputRecordId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string.string_"];
        };
      };
    };
  };
  CreateDatasetRow: {
    parameters: {
      path: {
        datasetId: string;
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          sourceRequest?: string;
          inputs: components["schemas"]["Record_string.string_"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string.string_"];
        };
      };
    };
  };
  GetDataset: {
    parameters: {
      path: {
        datasetId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptInputRecord-Array.string_"];
        };
      };
    };
  };
  MutateDataset: {
    requestBody: {
      content: {
        "application/json": {
          removeRequests: string[];
          addRequests: string[];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result___-Array.string_"];
        };
      };
    };
  };
  AddHeliconeDataset: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewHeliconeDatasetParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__datasetId-string_.string_"];
        };
      };
    };
  };
  MutateHeliconeDataset: {
    parameters: {
      path: {
        datasetId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MutateParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  QueryHeliconeDatasetRows: {
    parameters: {
      path: {
        datasetId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: double */
          limit: number;
          /** Format: double */
          offset: number;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeDatasetRow-Array.string_"];
        };
      };
    };
  };
  CountHeliconeDatasetRows: {
    parameters: {
      path: {
        datasetId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_number.string_"];
        };
      };
    };
  };
  QueryHeliconeDataset: {
    requestBody: {
      content: {
        "application/json": {
          datasetIds?: string[];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeDataset-Array.string_"];
        };
      };
    };
  };
  UpdateHeliconeDatasetRequest: {
    parameters: {
      path: {
        datasetId: string;
        requestId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          responseBody: components["schemas"]["Json"];
          requestBody: components["schemas"]["Json"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ResultError_unknown_"] | components["schemas"]["ResultSuccess_any_"];
        };
      };
    };
  };
  QueryEvals: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EvalQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_Eval-Array.string_"];
        };
      };
    };
  };
  GetEvalScores: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string-Array.string_"];
        };
      };
    };
  };
  AddEval: {
    parameters: {
      path: {
        requestId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: double */
          score: number;
          name: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  QueryScoreDistributions: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EvalQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ScoreDistribution-Array.string_"];
        };
      };
    };
  };
  GetTotalValues: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_TotalValuesForAllOfTime.string_"];
        };
      };
    };
  };
  GetModelUsageOverTime: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ModelUsageOverTime-Array.string_"];
        };
      };
    };
  };
  GetProviderUsageOverTime: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ProviderUsageOverTime-Array.string_"];
        };
      };
    };
  };
  GetTotalRequests: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataIsBeautifulRequestBody"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_number.string_"];
        };
      };
    };
  };
  GetTTFTvsPromptInputLength: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataIsBeautifulRequestBody"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_TTFTvsPromptLength-Array.string_"];
        };
      };
    };
  };
  GetModelPercentage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataIsBeautifulRequestBody"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ModelBreakdown-Array.string_"];
        };
      };
    };
  };
  GetModelCost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataIsBeautifulRequestBody"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ModelCost-Array.string_"];
        };
      };
    };
  };
  GetProviderPercentage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataIsBeautifulRequestBody"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ProviderBreakdown-Array.string_"];
        };
      };
    };
  };
  GetModelPercentageOverTime: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataIsBeautifulRequestBody"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ModelBreakdownOverTime-Array.string_"];
        };
      };
    };
  };
  GetScoresOverTime: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataOverTimeRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__score_key-string--score_sum-number--created_at_trunc-string_-Array.string_"];
        };
      };
    };
  };
  GetCustomerUsage: {
    parameters: {
      path: {
        customerId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["CustomerUsage"] | null;
        };
      };
    };
  };
  GetCustomers: {
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Customer"][];
        };
      };
    };
  };
  GetProviderKey: {
    parameters: {
      path: {
        providerKeyId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["DecryptedProviderKey"] | {
            error: string;
          };
        };
      };
    };
  };
  DeleteProviderKey: {
    parameters: {
      path: {
        providerKeyId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  UpdateProviderKey: {
    parameters: {
      path: {
        providerKeyId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          config?: components["schemas"]["Record_string.string_"];
          providerKey?: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            id: string;
          } | {
            error: string;
          };
        };
      };
    };
  };
  CreateProviderKey: {
    requestBody: {
      content: {
        "application/json": {
          providerKeyName: string;
          config: components["schemas"]["Record_string.string_"];
          providerKey: string;
          providerName: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            id: string;
          } | {
            error: string;
          };
        };
      };
    };
  };
  GetProviderKeys: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": unknown[] | {
            error: string;
          };
        };
      };
    };
  };
  GetAPIKeys: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__api_key_hash-string--api_key_name-string--created_at-string--governance-boolean--id-number--key_permissions-string--organization_id-string--soft_delete-boolean--temp_key-boolean--user_id-string_-Array.string_"];
        };
      };
    };
  };
  CreateAPIKey: {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          key_permissions?: "rw" | "r" | "w";
          api_key_name: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            apiKey: string;
            id: string;
          } | {
            error: string;
          };
        };
      };
    };
  };
  CreateProxyKey: {
    requestBody: {
      content: {
        "application/json": {
          proxyKeyName: string;
          providerKeyId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            proxyKeyId: string;
            proxyKey: string;
          } | {
            error: string;
          };
        };
      };
    };
  };
  DeleteAPIKey: {
    parameters: {
      path: {
        apiKeyId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  UpdateAPIKey: {
    parameters: {
      path: {
        apiKeyId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          api_key_name: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            error: string;
          };
        };
      };
    };
  };
}
