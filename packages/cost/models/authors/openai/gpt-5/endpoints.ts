import type { Endpoint } from "../../../types";

export const endpoints = {
  "gpt-5:openai": {
    modelId: "gpt-5",
    provider: "openai",
    providerModelId: "gpt-5",
    pricing: {
      prompt: 1.25,
      completion: 10,
      cacheRead: 0.125,
      image1k: 1.4875, // 70 base + (8 tiles × 140) = 1190 tokens × $1.25/M
    },
    contextLength: 400000,
    maxCompletionTokens: 128000,
    supportedParameters: [
      "tools",
      "tool_choice",
      "seed",
      "max_tokens",
      "response_format",
      "temperature",
      "top_p",
      "stop",
      "frequency_penalty",
      "presence_penalty",
      "reasoning",
      "thinking",
      "functions",
      "function_call",
      "stream",
    ],
    ptbEnabled: true,
  },
  "gpt-5-mini:openai": {
    modelId: "gpt-5-mini",
    provider: "openai",
    providerModelId: "gpt-5-mini",
    pricing: {
      prompt: 0.25,
      completion: 2,
      cacheRead: 0.025,
      image1k: 0.41475, // 1024 patches × 1.62 multiplier = 1659 tokens × $0.25/M
    },
    contextLength: 400000,
    maxCompletionTokens: 128000,
    supportedParameters: [
      "tools",
      "tool_choice",
      "seed",
      "max_tokens",
      "response_format",
      "temperature",
      "top_p",
      "stop",
      "frequency_penalty",
      "presence_penalty",
      "reasoning",
      "thinking",
      "functions",
      "function_call",
      "stream",
    ],
    ptbEnabled: true,
  },
  "gpt-5-nano:openai": {
    modelId: "gpt-5-nano",
    provider: "openai",
    providerModelId: "gpt-5-nano",
    pricing: {
      prompt: 0.05,
      completion: 0.4,
      cacheRead: 0.005,
      image1k: 0.12595, // 1024 patches × 2.46 multiplier = 2519 tokens × $0.05/M
    },
    contextLength: 400000,
    maxCompletionTokens: 128000,
    supportedParameters: [
      "tools",
      "tool_choice",
      "seed",
      "max_tokens",
      "response_format",
      "temperature",
      "top_p",
      "stop",
      "frequency_penalty",
      "presence_penalty",
      "reasoning",
      "thinking",
      "functions",
      "function_call",
      "stream",
    ],
    ptbEnabled: true,
  },
} satisfies Record<string, Endpoint>;

export type EndpointId = keyof typeof endpoints;