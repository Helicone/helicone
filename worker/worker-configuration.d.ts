/* eslint-disable */
// Generated by Wrangler by running `wrangler types` (hash: 0687d7285a479b7a05d67829a2c76b55)
// Runtime types generated with workerd@1.20250803.0 2025-08-03 nodejs_compat_v2
declare namespace Cloudflare {
	interface Env {
		RATE_LIMIT_KV: KVNamespace;
		CACHE_KV: KVNamespace;
		INSERT_KV: KVNamespace;
		UTILITY_KV: KVNamespace;
		REQUEST_AND_RESPONSE_QUEUE_KV: KVNamespace;
		SECURE_CACHE: KVNamespace;
		EU_SECURE_CACHE: KVNamespace;
		SUPABASE_SERVICE_ROLE_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU";
		SUPABASE_URL: "http://localhost:54321" | "https://bolqqmqbrciybnypvklh.supabase.co";
		EU_SUPABASE_SERVICE_ROLE_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU";
		EU_SUPABASE_URL: "http://localhost:54321";
		CLICKHOUSE_HOST: "http://localhost:18123" | "https://p76qbrlulo.us-east-1.aws.clickhouse.cloud:8443";
		CLICKHOUSE_USER: "default";
		CLICKHOUSE_PASSWORD: "";
		PROVIDER: "OPENAI";
		TOKEN_COUNT_URL: "https://tokens.helicone.ai/anthropic/count_tokens";
		WORKER_TYPE: "OPENAI_PROXY" | "AI_GATEWAY_API" | "GATEWAY_API" | "GENERATE_API" | "ANTHROPIC_PROXY" | "HELICONE_API" | "CUSTOMER_GATEWAY";
		VAULT_ENABLED: "true";
		REQUEST_CACHE_KEY: "9984c295ec7d0f506b8af65e9d60773480eb0c9347a6bd8a2b08fb57b5117701";
		REQUEST_CACHE_KEY_2: "9984c295ec7d0f506b8af65e9d60773480eb0c9347a6bd8a2b08fb57b5117701";
		VALHALLA_URL: "http://localhost:8585";
		S3_ENDPOINT: "http://localhost:9000";
		S3_ACCESS_KEY: "minioadmin";
		S3_SECRET_KEY: "minioadmin";
		S3_BUCKET_NAME: "request-response-storage";
		HELICONE_MANUAL_ACCESS_KEY: "Q2xH5Cwid/gAmuLv8QWhgcpNXA4DG1Dxe0ypQTJ8oEA=";
		APP_URL: "https://us.helicone.ai";
		ENVIRONMENT: "development" | "production";
		TOKENIZER_COUNT_API: "https://tokens.helicone.ai/anthropic/count_tokens";
		TOKEN_CALC_URL: "https://tokens.helicone.ai/anthropic/count_tokens";
		STORAGE_URL: "http://localhost:9000";
		LOOPS_API_KEY: "";
		POSTHOG_API_KEY: "";
		OPENAI_API_KEY: "";
		OPENAI_ORG_ID: "";
		CUSTOMER_GATEWAY_URL: "";
		RESEND_API_KEY: "";
		PROMPTARMOR_API_KEY: "";
		DATADOG_ENABLED: "false" | "true";
		DATADOG_API_KEY: "";
		DATADOG_ENDPOINT: "";
		GATEWAY_TARGET: string;
		S3_ENABLED: "true";
		S3_REGION: "us-west-2" | "eu-west-1";
		SENTRY_API_KEY: "";
		SENTRY_PROJECT_ID: "";
		WORKER_DEFINED_REDIRECT_URL: string;
		AWS_REGION: "us-west-2" | "eu-west-1";
		AWS_ACCESS_KEY_ID: "";
		AWS_SECRET_ACCESS_KEY: "";
		REQUEST_LOGS_QUEUE_URL: "";
		REQUEST_LOGS_QUEUE_URL_LOW_PRIORITY: "";
		ORG_IDS: "";
		EU_CLICKHOUSE_HOST: "http://localhost:18123";
		EU_CLICKHOUSE_USER: "default";
		EU_CLICKHOUSE_PASSWORD: "";
		EU_S3_BUCKET_NAME: "request-response-storage";
		EU_REQUEST_LOGS_QUEUE_URL: "";
		EU_REQUEST_LOGS_QUEUE_URL_LOW_PRIORITY: "";
		EU_AWS_REGION: "eu-west-1";
		UPSTASH_KAFKA_URL: "";
		UPSTASH_KAFKA_USERNAME: "";
		UPSTASH_KAFKA_PASSWORD: "";
		QUEUE_PROVIDER: "sqs";
		RATE_LIMITER: DurableObjectNamespace<import("./src/index").InMemoryRateLimiter>;
		FALLBACK_QUEUE: Queue;
	}
}
interface Env extends Cloudflare.Env {}

// Add missing types
declare class ExecutionContext {
	waitUntil(promise: Promise<any>): void;
	passThroughOnException(): void;
}

interface MessageBatch<T> {
	queue: string;
	messages: Array<{
		id: string;
		timestamp: number;
		body: T;
	}>;
}

declare class ScheduledController {
	readonly scheduledTime: number;
	readonly cron: string;
	noRetry(): void;
}

// Begin runtime types
/*! *****************************************************************************
Copyright (c) Cloudflare. All rights reserved.
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0
THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABILITY OR NON-INFRINGEMENT.
See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* eslint-disable */
// noinspection JSUnusedGlobalSymbols
declare var onmessage: never;
/**
 * An abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException)
 */
declare class DOMException extends Error {
    constructor(message?: string, name?: string);
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/message) */
    readonly message: string;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/name) */
    readonly name: string;
    /**
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/code)
     */
    readonly code: number;
    static readonly INDEX_SIZE_ERR: number;
    static readonly DOMSTRING_SIZE_ERR: number;
    static readonly HIERARCHY_REQUEST_ERR: number;
    static readonly WRONG_DOCUMENT_ERR: number;
    static readonly INVALID_CHARACTER_ERR: number;
    static readonly NO_DATA_ALLOWED_ERR: number;
    static readonly NO_MODIFICATION_ALLOWED_ERR: number;
    static readonly NOT_FOUND_ERR: number;
    static readonly NOT_SUPPORTED_ERR: number;
    static readonly INUSE_ATTRIBUTE_ERR: number;
    static readonly INVALID_STATE_ERR: number;
    static readonly SYNTAX_ERR: number;
    static readonly INVALID_MODIFICATION_ERR: number;
    static readonly NAMESPACE_ERR: number;
    static readonly INVALID_ACCESS_ERR: number;
    static readonly VALIDATION_ERR: number;
    static readonly TYPE_MISMATCH_ERR: number;
    static readonly SECURITY_ERR: number;
    static readonly NETWORK_ERR: number;
    static readonly ABORT_ERR: number;
    static readonly URL_MISMATCH_ERR: number;
    static readonly QUOTA_EXCEEDED_ERR: number;
    static readonly TIMEOUT_ERR: number;
    static readonly INVALID_NODE_TYPE_ERR: number;
    static readonly DATA_CLONE_ERR: number;
    get stack(): any;
    set stack(value: any);
}
type WorkerGlobalScopeEventMap = {
    fetch: FetchEvent;
    scheduled: ScheduledEvent;
    queue: QueueEvent;
    unhandledrejection: PromiseRejectionEvent;
    rejectionhandled: PromiseRejectionEvent;
};
declare abstract class WorkerGlobalScope extends EventTarget<WorkerGlobalScopeEventMap> {
    EventTarget: typeof EventTarget;
}
/* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console) */
interface Console {
    "assert"(condition?: boolean, ...data: any[]): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/clear_static) */
    clear(): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/count_static) */
    count(label?: string): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/countReset_static) */
    countReset(label?: string): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/debug_static) */
    debug(...data: any[]): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/dir_static) */
    dir(item?: any, options?: any): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/dirxml_static) */
    dirxml(...data: any[]): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/error_static) */
    error(...data: any[]): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/group_static) */
    group(...data: any[]): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/groupCollapsed_static) */
    groupCollapsed(...data: any[]): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/groupEnd_static) */
    groupEnd(): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/info_static) */
    info(...data: any[]): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static) */
    log(...data: any[]): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/table_static) */
    table(tabularData?: any, properties?: string[]): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/time_static) */
    time(label?: string): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/timeEnd_static) */
    timeEnd(label?: string): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/timeLog_static) */
    timeLog(label?: string, ...data: any[]): void;
    timeStamp(label?: string): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/trace_static) */
    trace(...data: any[]): void;
    /* [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/warn_static) */
    warn(...data: any[]): void;
}
declare const console: Console;
type BufferSource = ArrayBufferView | ArrayBuffer;
type TypedArray = Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array | BigInt64Array | BigUint64Array;

