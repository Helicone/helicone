create table "public"."admins" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid
);


alter table "public"."admins" enable row level security;

create table "public"."alert_banners" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text,
    "message" text,
    "active" boolean not null default false,
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."alert_banners" enable row level security;

CREATE UNIQUE INDEX admins_id_key ON public.admins USING btree (id);

CREATE UNIQUE INDEX admins_pkey ON public.admins USING btree (id);

CREATE UNIQUE INDEX alert_banners_pkey ON public.alert_banners USING btree (id);

alter table "public"."admins" add constraint "admins_pkey" PRIMARY KEY using index "admins_pkey";

alter table "public"."alert_banners" add constraint "alert_banners_pkey" PRIMARY KEY using index "alert_banners_pkey";

alter table "public"."admins" add constraint "admins_id_key" UNIQUE using index "admins_id_key";

alter table "public"."admins" add constraint "admins_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."admins" validate constraint "admins_user_id_fkey";

grant delete on table "public"."admins" to "anon";

grant insert on table "public"."admins" to "anon";

grant references on table "public"."admins" to "anon";

grant select on table "public"."admins" to "anon";

grant trigger on table "public"."admins" to "anon";

grant truncate on table "public"."admins" to "anon";

grant update on table "public"."admins" to "anon";

grant delete on table "public"."admins" to "authenticated";

grant insert on table "public"."admins" to "authenticated";

grant references on table "public"."admins" to "authenticated";

grant select on table "public"."admins" to "authenticated";

grant trigger on table "public"."admins" to "authenticated";

grant truncate on table "public"."admins" to "authenticated";

grant update on table "public"."admins" to "authenticated";

grant delete on table "public"."admins" to "service_role";

grant insert on table "public"."admins" to "service_role";

grant references on table "public"."admins" to "service_role";

grant select on table "public"."admins" to "service_role";

grant trigger on table "public"."admins" to "service_role";

grant truncate on table "public"."admins" to "service_role";

grant update on table "public"."admins" to "service_role";

grant delete on table "public"."alert_banners" to "anon";

grant insert on table "public"."alert_banners" to "anon";

grant references on table "public"."alert_banners" to "anon";

grant select on table "public"."alert_banners" to "anon";

grant trigger on table "public"."alert_banners" to "anon";

grant truncate on table "public"."alert_banners" to "anon";

grant update on table "public"."alert_banners" to "anon";

grant delete on table "public"."alert_banners" to "authenticated";

grant insert on table "public"."alert_banners" to "authenticated";

grant references on table "public"."alert_banners" to "authenticated";

grant select on table "public"."alert_banners" to "authenticated";

grant trigger on table "public"."alert_banners" to "authenticated";

grant truncate on table "public"."alert_banners" to "authenticated";

grant update on table "public"."alert_banners" to "authenticated";

grant delete on table "public"."alert_banners" to "service_role";

grant insert on table "public"."alert_banners" to "service_role";

grant references on table "public"."alert_banners" to "service_role";

grant select on table "public"."alert_banners" to "service_role";

grant trigger on table "public"."alert_banners" to "service_role";

grant truncate on table "public"."alert_banners" to "service_role";

grant update on table "public"."alert_banners" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."alert_banners"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."alert_banners"
as permissive
for select
to public
using (true);


create policy "Enable update access for all users"
on "public"."alert_banners"
as permissive
for update
to public
using (true)
with check (true);



