const t=(t,n)=>{const r=new Map;return t.forEach(((t,e)=>{r.set(t,n[e])})),r},n=(t,n,r)=>[t?"auto":null!=n?n:0,null!=r?r:"auto"],r=(t,n)=>{if(!n)return[];const r=new Set;return t.forEach((t=>{r.add(t[n])})),Array.from(r)};function e(t,n){if(t===n)return!0;if("object"!=typeof t||"object"!=typeof n||null===t||null===n)return!1;const r=Object.keys(t),o=Object.keys(n);if(r.length!==o.length)return!1;for(const u of r)if(!o.includes(u)||!e(t[u],n[u]))return!1;return!0}function o(t,n){const r=[];for(const e of t)if(Object.prototype.hasOwnProperty.call(e,n)&&(r.push(e[n]),r.length>1))return!1;return!0}export{r as constructCategories,t as constructCategoryColors,e as deepEqual,n as getYAxisDomain,o as hasOnlyOneValueForThisKey};
