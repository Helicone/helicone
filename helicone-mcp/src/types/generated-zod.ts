// Generated by ts-to-zod
import { z } from "zod";
import { type RequestFilterBranch, type RequestFilterNode, type SessionFilterBranch, type SessionFilterNode } from "./flat";

export const sortDirectionSchema = z.union([z.literal("asc"), z.literal("desc")]);

export const textOperatorsSchema = z.object({
    "not-equals": z.string().optional(),
    equals: z.string().optional(),
    like: z.string().optional(),
    ilike: z.string().optional(),
    contains: z.string().optional(),
    "not-contains": z.string().optional()
});

export const numberOperatorsSchema = z.object({
    "not-equals": z.number().optional(),
    equals: z.number().optional(),
    gte: z.number().optional(),
    lte: z.number().optional(),
    lt: z.number().optional(),
    gt: z.number().optional()
});

export const booleanOperatorsSchema = z.object({
    equals: z.boolean().optional()
});

export const timestampOperatorsSchema = z.object({
    equals: z.string().optional(),
    gte: z.string().optional(),
    lte: z.string().optional(),
    lt: z.string().optional(),
    gt: z.string().optional()
});

export const vectorOperatorsSchema = z.object({
    contains: z.string().optional()
});

export const requestResponseRmtToOperatorsSchema = z.object({
    country_code: textOperatorsSchema.optional(),
    latency: numberOperatorsSchema.optional(),
    cost: numberOperatorsSchema.optional(),
    provider: textOperatorsSchema.optional(),
    time_to_first_token: numberOperatorsSchema.optional(),
    status: numberOperatorsSchema.optional(),
    request_created_at: timestampOperatorsSchema.optional(),
    response_created_at: timestampOperatorsSchema.optional(),
    model: textOperatorsSchema.optional(),
    user_id: textOperatorsSchema.optional(),
    organization_id: textOperatorsSchema.optional(),
    node_id: textOperatorsSchema.optional(),
    job_id: textOperatorsSchema.optional(),
    threat: booleanOperatorsSchema.optional(),
    request_id: textOperatorsSchema.optional(),
    prompt_tokens: numberOperatorsSchema.optional(),
    completion_tokens: numberOperatorsSchema.optional(),
    prompt_cache_read_tokens: numberOperatorsSchema.optional(),
    prompt_cache_write_tokens: numberOperatorsSchema.optional(),
    total_tokens: numberOperatorsSchema.optional(),
    target_url: textOperatorsSchema.optional(),
    properties: z.record(z.string(), textOperatorsSchema).optional(),
    search_properties: z.record(z.string(), textOperatorsSchema).optional(),
    scores: z.record(z.string(), textOperatorsSchema).optional(),
    scores_column: textOperatorsSchema.optional(),
    request_body: vectorOperatorsSchema.optional(),
    response_body: vectorOperatorsSchema.optional(),
    cache_enabled: booleanOperatorsSchema.optional(),
    cache_reference_id: textOperatorsSchema.optional(),
    cached: booleanOperatorsSchema.optional(),
    assets: textOperatorsSchema.optional(),
    "helicone-score-feedback": booleanOperatorsSchema.optional(),
    prompt_id: textOperatorsSchema.optional(),
    prompt_version: textOperatorsSchema.optional(),
    request_referrer: textOperatorsSchema.optional(),
    is_passthrough_billing: booleanOperatorsSchema.optional()
});

export const sessionsRequestResponseRmtToOperatorsSchema = z.object({
    session_session_id: textOperatorsSchema.optional(),
    session_session_name: textOperatorsSchema.optional(),
    session_total_cost: numberOperatorsSchema.optional(),
    session_total_tokens: numberOperatorsSchema.optional(),
    session_prompt_tokens: numberOperatorsSchema.optional(),
    session_completion_tokens: numberOperatorsSchema.optional(),
    session_total_requests: numberOperatorsSchema.optional(),
    session_created_at: timestampOperatorsSchema.optional(),
    session_latest_request_created_at: timestampOperatorsSchema.optional(),
    session_tag: textOperatorsSchema.optional()
});

export const responseTableToOperatorsSchema = z.object({
    body_tokens: numberOperatorsSchema.optional(),
    body_model: textOperatorsSchema.optional(),
    body_completion: textOperatorsSchema.optional(),
    status: numberOperatorsSchema.optional(),
    model: textOperatorsSchema.optional()
});

export const requestTableToOperatorsSchema = z.object({
    prompt: textOperatorsSchema.optional(),
    created_at: timestampOperatorsSchema.optional(),
    user_id: textOperatorsSchema.optional(),
    auth_hash: textOperatorsSchema.optional(),
    org_id: textOperatorsSchema.optional(),
    id: textOperatorsSchema.optional(),
    node_id: textOperatorsSchema.optional(),
    model: textOperatorsSchema.optional(),
    modelOverride: textOperatorsSchema.optional(),
    path: textOperatorsSchema.optional(),
    country_code: textOperatorsSchema.optional(),
    prompt_id: textOperatorsSchema.optional()
});

export const feedbackTableToOperatorsSchema = z.object({
    id: numberOperatorsSchema.optional(),
    created_at: timestampOperatorsSchema.optional(),
    rating: booleanOperatorsSchema.optional(),
    response_id: textOperatorsSchema.optional()
});

export const filterLeafSubsetSchema = z.object({
    request_response_rmt: requestResponseRmtToOperatorsSchema.optional(),
    response: responseTableToOperatorsSchema.optional(),
    request: requestTableToOperatorsSchema.optional(),
    feedback: feedbackTableToOperatorsSchema.optional(),
    sessions_request_response_rmt: sessionsRequestResponseRmtToOperatorsSchema.optional(),
    properties: z.record(z.string(), textOperatorsSchema).optional(),
    values: z.record(z.string(), textOperatorsSchema).optional()
});

export const sortLeafRequestSchema = z.object({
    random: z.literal(true).optional(),
    created_at: sortDirectionSchema.optional(),
    cache_created_at: sortDirectionSchema.optional(),
    latency: sortDirectionSchema.optional(),
    last_active: sortDirectionSchema.optional(),
    total_tokens: sortDirectionSchema.optional(),
    completion_tokens: sortDirectionSchema.optional(),
    prompt_tokens: sortDirectionSchema.optional(),
    user_id: sortDirectionSchema.optional(),
    body_model: sortDirectionSchema.optional(),
    is_cached: sortDirectionSchema.optional(),
    request_prompt: sortDirectionSchema.optional(),
    response_text: sortDirectionSchema.optional(),
    properties: z.record(z.string(), sortDirectionSchema).optional(),
    values: z.record(z.string(), sortDirectionSchema).optional(),
    cost: sortDirectionSchema.optional()
});

export const requestFilterBranchSchema: z.ZodSchema<RequestFilterBranch> = z.lazy(() => z.object({
    left: requestFilterNodeSchema,
    operator: z.union([z.literal("or"), z.literal("and")]),
    right: requestFilterNodeSchema
}));

export const requestFilterNodeSchema: z.ZodSchema<RequestFilterNode> = z.lazy(() => z.union([filterLeafSubsetSchema, requestFilterBranchSchema, z.literal("all")]));

export const sessionFilterBranchSchema: z.ZodSchema<SessionFilterBranch> = z.lazy(() => z.object({
    left: sessionFilterNodeSchema,
    operator: z.union([z.literal("or"), z.literal("and")]),
    right: sessionFilterNodeSchema
}));

export const sessionFilterNodeSchema: z.ZodSchema<SessionFilterNode> = z.lazy(() => z.union([filterLeafSubsetSchema, sessionFilterBranchSchema, z.literal("all")]));
