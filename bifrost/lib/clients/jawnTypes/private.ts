type JsonValue = string | number | boolean | null | JsonArray | JsonObject;
interface JsonArray extends Array<JsonValue> {}
interface JsonObject { [key: string]: JsonValue; }

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/evaluator": {
    post: operations["CreateEvaluator"];
  };
  "/v1/evaluator/{evaluatorId}": {
    get: operations["GetEvaluator"];
    put: operations["UpdateEvaluator"];
    delete: operations["DeleteEvaluator"];
  };
  "/v1/evaluator/query": {
    post: operations["QueryEvaluators"];
  };
  "/v1/evaluator/{evaluatorId}/experiments": {
    get: operations["GetExperimentsForEvaluator"];
  };
  "/v1/evaluator/{evaluatorId}/onlineEvaluators": {
    get: operations["GetOnlineEvaluators"];
    post: operations["CreateOnlineEvaluator"];
  };
  "/v1/evaluator/{evaluatorId}/onlineEvaluators/{onlineEvaluatorId}": {
    delete: operations["DeleteOnlineEvaluator"];
  };
  "/v1/evaluator/python/test": {
    post: operations["TestPythonEvaluator"];
  };
  "/v1/evaluator/llm/test": {
    post: operations["TestLLMEvaluator"];
  };
  "/v1/evaluator/lastmile/test": {
    post: operations["TestLastMileEvaluator"];
  };
  "/v1/evaluator/{evaluatorId}/stats": {
    get: operations["GetEvaluatorStats"];
  };
  "/v2/experiment/create/empty": {
    post: operations["CreateEmptyExperiment"];
  };
  "/v2/experiment/create/from-request/{requestId}": {
    post: operations["CreateExperimentFromRequest"];
  };
  "/v2/experiment/new": {
    post: operations["CreateNewExperiment"];
  };
  "/v2/experiment": {
    get: operations["GetExperiments"];
  };
  "/v2/experiment/{experimentId}": {
    get: operations["GetExperimentById"];
    delete: operations["DeleteExperiment"];
  };
  "/v2/experiment/{experimentId}/prompt-version": {
    post: operations["CreateNewPromptVersionForExperiment"];
  };
  "/v2/experiment/{experimentId}/prompt-version/{promptVersionId}": {
    delete: operations["DeletePromptVersion"];
  };
  "/v2/experiment/{experimentId}/prompt-versions": {
    get: operations["GetPromptVersionsForExperiment"];
  };
  "/v2/experiment/{experimentId}/input-keys": {
    get: operations["GetInputKeysForExperiment"];
  };
  "/v2/experiment/{experimentId}/add-manual-row": {
    post: operations["AddManualRowToExperiment"];
  };
  "/v2/experiment/{experimentId}/add-manual-rows-batch": {
    post: operations["AddManualRowsToExperimentBatch"];
  };
  "/v2/experiment/{experimentId}/rows": {
    delete: operations["DeleteExperimentTableRows"];
  };
  "/v2/experiment/{experimentId}/row/insert/batch": {
    post: operations["CreateExperimentTableRowBatch"];
  };
  "/v2/experiment/{experimentId}/row/insert/dataset/{datasetId}": {
    post: operations["CreateExperimentTableRowFromDataset"];
  };
  "/v2/experiment/{experimentId}/row/update": {
    post: operations["UpdateExperimentTableRow"];
  };
  "/v2/experiment/{experimentId}/run-hypothesis": {
    post: operations["RunHypothesis"];
  };
  "/v2/experiment/{experimentId}/evaluators": {
    get: operations["GetExperimentEvaluators"];
    post: operations["CreateExperimentEvaluator"];
  };
  "/v2/experiment/{experimentId}/evaluators/{evaluatorId}": {
    delete: operations["DeleteExperimentEvaluator"];
  };
  "/v2/experiment/{experimentId}/evaluators/run": {
    post: operations["RunExperimentEvaluators"];
  };
  "/v2/experiment/{experimentId}/should-run-evaluators": {
    get: operations["ShouldRunEvaluators"];
  };
  "/v2/experiment/{experimentId}/{promptVersionId}/scores": {
    get: operations["GetExperimentPromptVersionScores"];
  };
  "/v2/experiment/{experimentId}/{requestId}/{scoreKey}": {
    get: operations["GetExperimentScore"];
  };
  "/v1/request/query": {
    post: operations["GetRequests"];
  };
  "/v1/request/query-clickhouse": {
    post: operations["GetRequestsClickhouse"];
  };
  "/v1/request/{requestId}": {
    get: operations["GetRequestById"];
  };
  "/v1/request/query-ids": {
    post: operations["GetRequestsByIds"];
  };
  "/v1/request/{requestId}/feedback": {
    post: operations["FeedbackRequest"];
  };
  "/v1/request/{requestId}/property": {
    put: operations["PutProperty"];
  };
  "/v1/request/{requestId}/assets/{assetId}": {
    post: operations["GetRequestAssetById"];
  };
  "/v1/request/{requestId}/score": {
    post: operations["AddScores"];
  };
  "/v1/prompt/query": {
    post: operations["GetPrompts"];
  };
  "/v1/prompt/{promptId}/query": {
    post: operations["GetPrompt"];
  };
  "/v1/prompt/{promptId}": {
    delete: operations["DeletePrompt"];
  };
  "/v1/prompt/create": {
    post: operations["CreatePrompt"];
  };
  "/v1/prompt/{promptId}/user-defined-id": {
    patch: operations["UpdatePromptUserDefinedId"];
  };
  "/v1/prompt/version/{promptVersionId}/edit-label": {
    post: operations["EditPromptVersionLabel"];
  };
  "/v1/prompt/version/{promptVersionId}/edit-template": {
    post: operations["EditPromptVersionTemplate"];
  };
  "/v1/prompt/version/{promptVersionId}/subversion-from-ui": {
    post: operations["CreateSubversionFromUi"];
  };
  "/v1/prompt/version/{promptVersionId}/subversion": {
    post: operations["CreateSubversion"];
  };
  "/v1/prompt/version/{promptVersionId}/promote": {
    post: operations["PromotePromptVersionToProduction"];
  };
  "/v1/prompt/version/{promptVersionId}/inputs/query": {
    post: operations["GetInputs"];
  };
  "/v1/prompt/{promptId}/experiments": {
    get: operations["GetPromptExperiments"];
  };
  "/v1/prompt/{promptId}/versions/query": {
    post: operations["GetPromptVersions"];
  };
  "/v1/prompt/version/{promptVersionId}": {
    get: operations["GetPromptVersion"];
    delete: operations["DeletePromptVersion"];
  };
  "/v1/prompt/{user_defined_id}/compile": {
    post: operations["GetPromptVersionsCompiled"];
  };
  "/v1/prompt/{user_defined_id}/template": {
    post: operations["GetPromptVersionTemplates"];
  };
  "/v1/settings/query": {
    get: operations["GetSettings"];
  };
  "/v1/stripe/subscription/cost-for-prompts": {
    get: operations["GetCostForPrompts"];
  };
  "/v1/stripe/subscription/cost-for-evals": {
    get: operations["GetCostForEvals"];
  };
  "/v1/stripe/subscription/cost-for-experiments": {
    get: operations["GetCostForExperiments"];
  };
  "/v1/stripe/subscription/free/usage": {
    get: operations["GetFreeUsage"];
  };
  "/v1/stripe/subscription/new-customer/upgrade-to-pro": {
    post: operations["UpgradeToPro"];
  };
  "/v1/stripe/subscription/existing-customer/upgrade-to-pro": {
    post: operations["UpgradeExistingCustomer"];
  };
  "/v1/stripe/subscription/new-customer/upgrade-to-team-bundle": {
    post: operations["UpgradeToTeamBundle"];
  };
  "/v1/stripe/subscription/existing-customer/upgrade-to-team-bundle": {
    post: operations["UpgradeExistingCustomerToTeamBundle"];
  };
  "/v1/stripe/subscription/manage-subscription": {
    post: operations["ManageSubscription"];
  };
  "/v1/stripe/subscription/undo-cancel-subscription": {
    post: operations["UndoCancelSubscription"];
  };
  "/v1/stripe/subscription/add-ons/{productType}": {
    post: operations["AddOns"];
    delete: operations["DeleteAddOns"];
  };
  "/v1/stripe/subscription/preview-invoice": {
    get: operations["PreviewInvoice"];
  };
  "/v1/stripe/subscription/cancel-subscription": {
    post: operations["CancelSubscription"];
  };
  "/v1/stripe/subscription/migrate-to-pro": {
    post: operations["MigrateToPro"];
  };
  "/v1/stripe/subscription": {
    get: operations["GetSubscription"];
  };
  "/v1/stripe/webhook": {
    post: operations["HandleStripeWebhook"];
  };
  "/v1/organization/user/accept_terms": {
    post: operations["AcceptTerms"];
  };
  "/v1/organization/create": {
    post: operations["CreateNewOrganization"];
  };
  "/v1/organization/{organizationId}/update": {
    post: operations["UpdateOrganization"];
  };
  "/v1/organization/onboard": {
    post: operations["OnboardOrganization"];
  };
  "/v1/organization/{organizationId}/add_member": {
    post: operations["AddMemberToOrganization"];
  };
  "/v1/organization/{organizationId}/create_filter": {
    post: operations["CreateOrganizationFilter"];
  };
  "/v1/organization/{organizationId}/update_filter": {
    post: operations["UpdateOrganizationFilter"];
  };
  "/v1/organization/delete": {
    delete: operations["DeleteOrganization"];
  };
  "/v1/organization/{organizationId}/layout": {
    get: operations["GetOrganizationLayout"];
  };
  "/v1/organization/{organizationId}/members": {
    get: operations["GetOrganizationMembers"];
  };
  "/v1/organization/{organizationId}/update_member": {
    post: operations["UpdateOrganizationMember"];
  };
  "/v1/organization/{organizationId}/owner": {
    get: operations["GetOrganizationOwner"];
  };
  "/v1/organization/{organizationId}/remove_member": {
    delete: operations["RemoveMemberFromOrganization"];
  };
  "/v1/organization/setup-demo": {
    post: operations["SetupDemo"];
  };
  "/v1/organization/update_onboarding": {
    post: operations["UpdateOnboardingStatus"];
  };
  "/v1/log/request": {
    post: operations["GetRequests"];
  };
  "/v1/gov-organization/limits/member/{memberId}": {
    get: operations["GetMemberLimits"];
    post: operations["SetMemberLimits"];
  };
  "/v1/gov-organization/my-limits": {
    get: operations["GetMyLimits"];
  };
  "/v1/gov-organization/is-governance-org": {
    get: operations["IsGovernanceOrg"];
  };
  "/v1/key/generateHash": {
    post: operations["GenerateHash"];
  };
  "/v1/dataset/{datasetId}/fine-tune": {
    post: operations["DatasetFineTune"];
  };
  "/v1/fine-tune": {
    post: operations["FineTune"];
  };
  "/v1/fine-tune/{jobId}/stats": {
    get: operations["FineTuneJobStats"];
  };
  "/v1/filter": {
    get: operations["GetFilters"];
    post: operations["CreateFilter"];
  };
  "/v1/filter/{id}": {
    get: operations["GetFilter"];
    delete: operations["DeleteFilter"];
    patch: operations["UpdateFilter"];
  };
  "/v1/demo/completion": {
    post: operations["DemoCompletion"];
  };
  "/v1/alert/query": {
    get: operations["GetAlerts"];
  };
  "/v1/alert/create": {
    post: operations["CreateAlert"];
  };
  "/v1/alert/{alertId}": {
    delete: operations["DeleteAlert"];
  };
  "/v1/admin/feature-flags": {
    post: operations["UpdateFeatureFlags"];
    delete: operations["DeleteFeatureFlag"];
  };
  "/v1/admin/feature-flags/query": {
    post: operations["GetFeatureFlags"];
  };
  "/v1/admin/orgs/top-usage": {
    post: operations["GetTopOrgsByUsage"];
  };
  "/v1/admin/orgs/top": {
    post: operations["GetTopOrgs"];
  };
  "/v1/admin/admins/query": {
    get: operations["GetAdmins"];
  };
  "/v1/admin/whodis": {
    post: operations["Whodis"];
  };
  "/v1/admin/settings/{name}": {
    get: operations["GetSetting"];
  };
  "/v1/admin/azure/run-test": {
    post: operations["AzureTest"];
  };
  "/v1/admin/settings": {
    post: operations["UpdateSetting"];
  };
  "/v1/admin/orgs/query": {
    post: operations["FindAllOrgs"];
  };
  "/v1/admin/orgs/over-time/query": {
    post: operations["NewOrgsOverTime"];
  };
  "/v1/admin/admins/org/query": {
    post: operations["AddAdminsToOrg"];
  };
  "/v1/admin/alert_banners": {
    post: operations["CreateAlertBanner"];
    patch: operations["UpdateAlertBanner"];
  };
  "/v1/admin/top-orgs-over-time": {
    post: operations["GetTopOrgsOverTime"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    EvaluatorResult: {
      id: string;
      created_at: string;
      scoring_type: string;
      llm_template: unknown;
      organization_id: string;
      updated_at: string;
      name: string;
      code_template: unknown;
      last_mile_config: unknown;
    };
    ResultSuccess_EvaluatorResult_: {
      data: components["schemas"]["EvaluatorResult"];
      /** @enum {number|null} */
      error: null;
    };
    ResultError_string_: {
      /** @enum {number|null} */
      data: null;
      error: string;
    };
    "Result_EvaluatorResult.string_": components["schemas"]["ResultSuccess_EvaluatorResult_"] | components["schemas"]["ResultError_string_"];
    CreateEvaluatorParams: {
      scoring_type: string;
      llm_template?: unknown;
      name: string;
      code_template?: unknown;
      last_mile_config?: unknown;
    };
    "ResultSuccess_EvaluatorResult-Array_": {
      data: components["schemas"]["EvaluatorResult"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_EvaluatorResult-Array.string_": components["schemas"]["ResultSuccess_EvaluatorResult-Array_"] | components["schemas"]["ResultError_string_"];
    UpdateEvaluatorParams: {
      scoring_type?: string;
      llm_template?: unknown;
      code_template?: unknown;
      name?: string;
      last_mile_config?: unknown;
    };
    ResultSuccess_null_: {
      /** @enum {number|null} */
      data: null;
      /** @enum {number|null} */
      error: null;
    };
    "Result_null.string_": components["schemas"]["ResultSuccess_null_"] | components["schemas"]["ResultError_string_"];
    EvaluatorExperiment: {
      experiment_name: string;
      experiment_created_at: string;
      experiment_id: string;
    };
    "ResultSuccess_EvaluatorExperiment-Array_": {
      data: components["schemas"]["EvaluatorExperiment"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_EvaluatorExperiment-Array.string_": components["schemas"]["ResultSuccess_EvaluatorExperiment-Array_"] | components["schemas"]["ResultError_string_"];
    OnlineEvaluatorByEvaluatorId: {
      config: unknown;
      id: string;
    };
    "ResultSuccess_OnlineEvaluatorByEvaluatorId-Array_": {
      data: components["schemas"]["OnlineEvaluatorByEvaluatorId"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_OnlineEvaluatorByEvaluatorId-Array.string_": components["schemas"]["ResultSuccess_OnlineEvaluatorByEvaluatorId-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.any_": {
      [key: string]: unknown;
    };
    CreateOnlineEvaluatorParams: {
      config: components["schemas"]["Record_string.any_"];
    };
    "ResultSuccess__output-string--traces-string-Array--statusCode_63_-number__": {
      data: {
        /** Format: double */
        statusCode?: number;
        traces: string[];
        output: string;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__output-string--traces-string-Array--statusCode_63_-number_.string_": components["schemas"]["ResultSuccess__output-string--traces-string-Array--statusCode_63_-number__"] | components["schemas"]["ResultError_string_"];
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.string_": {
      [key: string]: string;
    };
    TestInput: {
      promptTemplate?: string;
      inputs: {
        autoInputs?: components["schemas"]["Record_string.string_"];
        inputs: components["schemas"]["Record_string.string_"];
      };
      outputBody: string;
      inputBody: string;
    };
    EvaluatorScore: {
      score: number | boolean;
    };
    ResultSuccess_EvaluatorScore_: {
      data: components["schemas"]["EvaluatorScore"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_EvaluatorScore.string_": components["schemas"]["ResultSuccess_EvaluatorScore_"] | components["schemas"]["ResultError_string_"];
    EvaluatorScoreResult: components["schemas"]["Result_EvaluatorScore.string_"];
    EvaluatorConfig: {
      evaluator_code_template?: string;
      evaluator_llm_template?: string;
      evaluator_scoring_type: string;
    };
    "ResultSuccess__score-number--input-string--output-string--ground_truth_63_-string__": {
      data: {
        ground_truth?: string;
        output: string;
        input: string;
        /** Format: double */
        score: number;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__score-number--input-string--output-string--ground_truth_63_-string_.string_": components["schemas"]["ResultSuccess__score-number--input-string--output-string--ground_truth_63_-string__"] | components["schemas"]["ResultError_string_"];
    DataEntry: {
      /** @enum {string} */
      _type: "system-prompt";
    } | {
      inputKey: string;
      /** @enum {string} */
      _type: "prompt-input";
    } | ({
      /** @enum {string} */
      content: "jsonify" | "message";
      /** @enum {string} */
      _type: "input-body";
    }) | ({
      /** @enum {string} */
      content: "jsonify" | "message";
      /** @enum {string} */
      _type: "output-body";
    });
    BaseLastMileConfigForm: {
      output: components["schemas"]["DataEntry"];
      input: components["schemas"]["DataEntry"];
      name: string;
    };
    LastMileConfigForm: components["schemas"]["BaseLastMileConfigForm"] & (({
      /** @enum {string} */
      _type: "relevance" | "context_relevance";
    }) | {
      groundTruth: components["schemas"]["DataEntry"];
      /** @enum {string} */
      _type: "faithfulness";
    });
    EvaluatorStats: {
      /** Format: double */
      averageScore: number;
      /** Format: double */
      totalUses: number;
      /** @enum {string} */
      recentTrend: "up" | "down" | "stable";
      scoreDistribution: {
          /** Format: double */
          count: number;
          range: string;
        }[];
      timeSeriesData: {
          /** Format: double */
          value: number;
          date: string;
        }[];
    };
    ResultSuccess_EvaluatorStats_: {
      data: components["schemas"]["EvaluatorStats"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_EvaluatorStats.string_": components["schemas"]["ResultSuccess_EvaluatorStats_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__experimentId-string__": {
      data: {
        experimentId: string;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__experimentId-string_.string_": components["schemas"]["ResultSuccess__experimentId-string__"] | components["schemas"]["ResultError_string_"];
    ExperimentV2: {
      id: string;
      name: string;
      original_prompt_version: string;
      copied_original_prompt_version: string | null;
      input_keys: string[] | null;
      created_at: string;
    };
    "ResultSuccess_ExperimentV2-Array_": {
      data: components["schemas"]["ExperimentV2"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ExperimentV2-Array.string_": components["schemas"]["ResultSuccess_ExperimentV2-Array_"] | components["schemas"]["ResultError_string_"];
    ExperimentV2Output: {
      id: string;
      request_id: string;
      is_original: boolean;
      prompt_version_id: string;
      created_at: string;
      input_record_id: string;
    };
    ExperimentV2Row: {
      id: string;
      inputs: components["schemas"]["Record_string.string_"];
      prompt_version: string;
      requests: components["schemas"]["ExperimentV2Output"][];
      auto_prompt_inputs: unknown[];
    };
    ExtendedExperimentData: {
      id: string;
      name: string;
      original_prompt_version: string;
      copied_original_prompt_version: string | null;
      input_keys: string[] | null;
      created_at: string;
      rows: components["schemas"]["ExperimentV2Row"][];
    };
    ResultSuccess_ExtendedExperimentData_: {
      data: components["schemas"]["ExtendedExperimentData"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ExtendedExperimentData.string_": components["schemas"]["ResultSuccess_ExtendedExperimentData_"] | components["schemas"]["ResultError_string_"];
    PromptVersionResult: {
      id: string;
      /** Format: double */
      minor_version: number;
      /** Format: double */
      major_version: number;
      prompt_v2: string;
      model: string;
      helicone_template: string;
      created_at: string;
      metadata: components["schemas"]["Record_string.any_"];
      parent_prompt_version?: string | null;
      experiment_id?: string | null;
      updated_at?: string;
    };
    ResultSuccess_PromptVersionResult_: {
      data: components["schemas"]["PromptVersionResult"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptVersionResult.string_": components["schemas"]["ResultSuccess_PromptVersionResult_"] | components["schemas"]["ResultError_string_"];
    CreateNewPromptVersionForExperimentParams: {
      newHeliconeTemplate: unknown;
      isMajorVersion?: boolean;
      metadata?: components["schemas"]["Record_string.any_"];
      experimentId?: string;
      bumpForMajorPromptVersionId?: string;
      parentPromptVersionId: string;
    };
Json: JsonObject;
    ExperimentV2PromptVersion: {
      created_at: string | null;
      experiment_id: string | null;
      helicone_template: components["schemas"]["Json"] | null;
      id: string;
      /** Format: double */
      major_version: number;
      metadata: components["schemas"]["Json"] | null;
      /** Format: double */
      minor_version: number;
      model: string | null;
      organization: string;
      prompt_v2: string;
      soft_delete: boolean | null;
    };
    "ResultSuccess_ExperimentV2PromptVersion-Array_": {
      data: components["schemas"]["ExperimentV2PromptVersion"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ExperimentV2PromptVersion-Array.string_": components["schemas"]["ResultSuccess_ExperimentV2PromptVersion-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess_string-Array_": {
      data: string[];
      /** @enum {number|null} */
      error: null;
    };
    "Result_string-Array.string_": components["schemas"]["ResultSuccess_string-Array_"] | components["schemas"]["ResultError_string_"];
    ResultSuccess_string_: {
      data: string;
      /** @enum {number|null} */
      error: null;
    };
    "Result_string.string_": components["schemas"]["ResultSuccess_string_"] | components["schemas"]["ResultError_string_"];
    ResultSuccess_boolean_: {
      data: boolean;
      /** @enum {number|null} */
      error: null;
    };
    "Result_boolean.string_": components["schemas"]["ResultSuccess_boolean_"] | components["schemas"]["ResultError_string_"];
    ScoreV2: {
      valueType: string;
      value: number | string;
      /** Format: double */
      max: number;
      /** Format: double */
      min: number;
    };
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.ScoreV2_": {
      [key: string]: components["schemas"]["ScoreV2"];
    };
    "ResultSuccess_Record_string.ScoreV2__": {
      data: components["schemas"]["Record_string.ScoreV2_"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_Record_string.ScoreV2_.string_": components["schemas"]["ResultSuccess_Record_string.ScoreV2__"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess_ScoreV2-or-null_": {
      data: components["schemas"]["ScoreV2"] | null;
      /** @enum {number|null} */
      error: null;
    };
    "Result_ScoreV2-or-null.string_": components["schemas"]["ResultSuccess_ScoreV2-or-null_"] | components["schemas"]["ResultError_string_"];
    /** @enum {string} */
    ProviderName: "OPENAI" | "ANTHROPIC" | "AZURE" | "LOCAL" | "HELICONE" | "AMDBARTEK" | "ANYSCALE" | "CLOUDFLARE" | "2YFV" | "TOGETHER" | "LEMONFOX" | "FIREWORKS" | "PERPLEXITY" | "GOOGLE" | "OPENROUTER" | "WISDOMINANUTSHELL" | "GROQ" | "COHERE" | "MISTRAL" | "DEEPINFRA" | "QSTASH" | "FIRECRAWL" | "AWS" | "DEEPSEEK" | "X" | "AVIAN" | "NEBIUS" | "NOVITA";
    Provider: components["schemas"]["ProviderName"] | "CUSTOM";
    /** @enum {string} */
    LlmType: "chat" | "completion";
    FunctionCall: {
      name: string;
      arguments: components["schemas"]["Record_string.any_"];
    };
    Message: {
      contentArray?: components["schemas"]["Message"][];
      /** Format: double */
      idx?: number;
      audio_data?: string;
      image_url?: string;
      timestamp?: string;
      tool_call_id?: string;
      tool_calls?: components["schemas"]["FunctionCall"][];
      content?: string;
      name?: string;
      role?: string;
      id?: string;
      /** @enum {string} */
      _type: "functionCall" | "function" | "image" | "message" | "autoInput" | "contentArray" | "audio";
    };
    Tool: {
      name: string;
      description: string;
      parameters?: components["schemas"]["Record_string.any_"];
    };
    HeliconeEventTool: {
      /** @enum {string} */
      _type: "tool";
      toolName: string;
      input: unknown;
      [key: string]: unknown;
    };
    HeliconeEventVectorDB: {
      /** @enum {string} */
      _type: "vector_db";
      /** @enum {string} */
      operation: "search" | "insert" | "delete" | "update";
      text?: string;
      vector?: number[];
      /** Format: double */
      topK?: number;
      filter?: Record<string, never>;
      databaseName?: string;
      [key: string]: unknown;
    };
    LLMRequestBody: {
      llm_type?: components["schemas"]["LlmType"];
      provider?: string;
      model?: string;
      messages?: components["schemas"]["Message"][] | null;
      prompt?: string | null;
      /** Format: double */
      max_tokens?: number | null;
      /** Format: double */
      temperature?: number | null;
      /** Format: double */
      top_p?: number | null;
      /** Format: double */
      seed?: number | null;
      stream?: boolean | null;
      /** Format: double */
      presence_penalty?: number | null;
      /** Format: double */
      frequency_penalty?: number | null;
      stop?: (string[] | string) | null;
      /** @enum {string|null} */
      reasoning_effort?: "low" | "medium" | "high" | null;
      tools?: components["schemas"]["Tool"][];
      parallel_tool_calls?: boolean | null;
      tool_choice?: {
        name?: string;
        /** @enum {string} */
        type: "none" | "auto" | "any" | "tool";
      };
      response_format?: {
        json_schema?: unknown;
        type: string;
      };
      toolDetails?: components["schemas"]["HeliconeEventTool"];
      vectorDBDetails?: components["schemas"]["HeliconeEventVectorDB"];
      input?: string | string[];
      /** Format: double */
      n?: number | null;
      size?: string;
      quality?: string;
    };
    LLMResponseBody: {
      vectorDBDetailsResponse?: {
        /** @enum {string} */
        _type: "vector_db";
        metadata: {
          timestamp: string;
          destination_parsed?: boolean;
          destination?: string;
        };
        /** Format: double */
        actualSimilarity?: number;
        /** Format: double */
        similarityThreshold?: number;
        message: string;
        status: string;
      };
      toolDetailsResponse?: {
        toolName: string;
        /** @enum {string} */
        _type: "tool";
        metadata: {
          timestamp: string;
        };
        tips: string[];
        message: string;
        status: string;
      };
      error?: {
        heliconeMessage: unknown;
      };
      model?: string | null;
      messages?: components["schemas"]["Message"][] | null;
    };
    LlmSchema: {
      request: components["schemas"]["LLMRequestBody"];
      response?: components["schemas"]["LLMResponseBody"] | null;
    };
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.number_": {
      [key: string]: number;
    };
    HeliconeRequest: {
      response_id: string | null;
      response_created_at: string | null;
      response_body?: unknown;
      /** Format: double */
      response_status: number;
      response_model: string | null;
      request_id: string;
      request_created_at: string;
      request_body: unknown;
      request_path: string;
      request_user_id: string | null;
      request_properties: components["schemas"]["Record_string.string_"] | null;
      request_model: string | null;
      model_override: string | null;
      helicone_user: string | null;
      provider: components["schemas"]["Provider"];
      /** Format: double */
      delay_ms: number | null;
      /** Format: double */
      time_to_first_token: number | null;
      /** Format: double */
      total_tokens: number | null;
      /** Format: double */
      prompt_tokens: number | null;
      /** Format: double */
      prompt_cache_write_tokens: number | null;
      /** Format: double */
      prompt_cache_read_tokens: number | null;
      /** Format: double */
      completion_tokens: number | null;
      prompt_id: string | null;
      feedback_created_at?: string | null;
      feedback_id?: string | null;
      feedback_rating?: boolean | null;
      signed_body_url?: string | null;
      llmSchema: components["schemas"]["LlmSchema"] | null;
      country_code: string | null;
      asset_ids: string[] | null;
      asset_urls: components["schemas"]["Record_string.string_"] | null;
      scores: components["schemas"]["Record_string.number_"] | null;
      /** Format: double */
      costUSD?: number | null;
      properties: components["schemas"]["Record_string.string_"];
      assets: string[];
      target_url: string;
      model: string;
    };
    "ResultSuccess_HeliconeRequest-Array_": {
      data: components["schemas"]["HeliconeRequest"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_HeliconeRequest-Array.string_": components["schemas"]["ResultSuccess_HeliconeRequest-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description Make all properties in T optional */
    Partial_NumberOperators_: {
      /** Format: double */
      "not-equals"?: number;
      /** Format: double */
      equals?: number;
      /** Format: double */
      gte?: number;
      /** Format: double */
      lte?: number;
      /** Format: double */
      lt?: number;
      /** Format: double */
      gt?: number;
    };
    /** @description Make all properties in T optional */
    Partial_TimestampOperators_: {
      gte?: string;
      lte?: string;
      lt?: string;
      gt?: string;
    };
    /** @description Make all properties in T optional */
    Partial_BooleanOperators_: {
      equals?: boolean;
    };
    /** @description Make all properties in T optional */
    Partial_TextOperators_: {
      "not-equals"?: string;
      equals?: string;
      like?: string;
      ilike?: string;
      contains?: string;
      "not-contains"?: string;
    };
    /** @description Make all properties in T optional */
    Partial_FeedbackTableToOperators_: {
      id?: components["schemas"]["Partial_NumberOperators_"];
      created_at?: components["schemas"]["Partial_TimestampOperators_"];
      rating?: components["schemas"]["Partial_BooleanOperators_"];
      response_id?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description Make all properties in T optional */
    Partial_RequestTableToOperators_: {
      prompt?: components["schemas"]["Partial_TextOperators_"];
      created_at?: components["schemas"]["Partial_TimestampOperators_"];
      user_id?: components["schemas"]["Partial_TextOperators_"];
      auth_hash?: components["schemas"]["Partial_TextOperators_"];
      org_id?: components["schemas"]["Partial_TextOperators_"];
      id?: components["schemas"]["Partial_TextOperators_"];
      node_id?: components["schemas"]["Partial_TextOperators_"];
      model?: components["schemas"]["Partial_TextOperators_"];
      modelOverride?: components["schemas"]["Partial_TextOperators_"];
      path?: components["schemas"]["Partial_TextOperators_"];
      prompt_id?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description Make all properties in T optional */
    Partial_ResponseTableToOperators_: {
      body_tokens?: components["schemas"]["Partial_NumberOperators_"];
      body_model?: components["schemas"]["Partial_TextOperators_"];
      body_completion?: components["schemas"]["Partial_TextOperators_"];
      status?: components["schemas"]["Partial_NumberOperators_"];
      model?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description Make all properties in T optional */
    Partial_VectorOperators_: {
      contains?: string;
    };
    /** @description Make all properties in T optional */
    Partial_RequestResponseSearchToOperators_: {
      request_body_vector?: components["schemas"]["Partial_VectorOperators_"];
      response_body_vector?: components["schemas"]["Partial_VectorOperators_"];
    };
    /** @description Make all properties in T optional */
    Partial_TimestampOperatorsTyped_: {
      /** Format: date-time */
      gte?: string;
      /** Format: date-time */
      lte?: string;
      /** Format: date-time */
      lt?: string;
      /** Format: date-time */
      gt?: string;
    };
    /** @description Make all properties in T optional */
    Partial_CacheHitsTableToOperators_: {
      organization_id?: components["schemas"]["Partial_TextOperators_"];
      request_id?: components["schemas"]["Partial_TextOperators_"];
      latency?: components["schemas"]["Partial_NumberOperators_"];
      completion_tokens?: components["schemas"]["Partial_NumberOperators_"];
      prompt_tokens?: components["schemas"]["Partial_NumberOperators_"];
      created_at?: components["schemas"]["Partial_TimestampOperatorsTyped_"];
    };
    /** @description Make all properties in T optional */
    Partial_RequestResponseRMTToOperators_: {
      latency?: components["schemas"]["Partial_NumberOperators_"];
      status?: components["schemas"]["Partial_NumberOperators_"];
      request_created_at?: components["schemas"]["Partial_TimestampOperatorsTyped_"];
      response_created_at?: components["schemas"]["Partial_TimestampOperatorsTyped_"];
      model?: components["schemas"]["Partial_TextOperators_"];
      user_id?: components["schemas"]["Partial_TextOperators_"];
      organization_id?: components["schemas"]["Partial_TextOperators_"];
      node_id?: components["schemas"]["Partial_TextOperators_"];
      job_id?: components["schemas"]["Partial_TextOperators_"];
      threat?: components["schemas"]["Partial_BooleanOperators_"];
      request_id?: components["schemas"]["Partial_TextOperators_"];
      prompt_tokens?: components["schemas"]["Partial_NumberOperators_"];
      completion_tokens?: components["schemas"]["Partial_NumberOperators_"];
      total_tokens?: components["schemas"]["Partial_NumberOperators_"];
      target_url?: components["schemas"]["Partial_TextOperators_"];
      properties?: {
        [key: string]: components["schemas"]["Partial_TextOperators_"];
      };
      search_properties?: {
        [key: string]: components["schemas"]["Partial_TextOperators_"];
      };
      scores?: {
        [key: string]: components["schemas"]["Partial_TextOperators_"];
      };
      scores_column?: components["schemas"]["Partial_TextOperators_"];
      request_body?: components["schemas"]["Partial_VectorOperators_"];
      response_body?: components["schemas"]["Partial_VectorOperators_"];
    };
    /** @description Make all properties in T optional */
    Partial_SessionsRequestResponseRMTToOperators_: {
      session_session_id?: components["schemas"]["Partial_TextOperators_"];
      session_session_name?: components["schemas"]["Partial_TextOperators_"];
      session_total_cost?: components["schemas"]["Partial_NumberOperators_"];
      session_total_tokens?: components["schemas"]["Partial_NumberOperators_"];
      session_prompt_tokens?: components["schemas"]["Partial_NumberOperators_"];
      session_completion_tokens?: components["schemas"]["Partial_NumberOperators_"];
      session_total_requests?: components["schemas"]["Partial_NumberOperators_"];
      session_created_at?: components["schemas"]["Partial_TimestampOperatorsTyped_"];
      session_latest_request_created_at?: components["schemas"]["Partial_TimestampOperatorsTyped_"];
    };
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_FilterLeaf.feedback-or-request-or-response-or-properties-or-values-or-request_response_search-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_": {
      feedback?: components["schemas"]["Partial_FeedbackTableToOperators_"];
      request?: components["schemas"]["Partial_RequestTableToOperators_"];
      response?: components["schemas"]["Partial_ResponseTableToOperators_"];
      properties?: {
        [key: string]: components["schemas"]["Partial_TextOperators_"];
      };
      values?: {
        [key: string]: components["schemas"]["Partial_TextOperators_"];
      };
      request_response_search?: components["schemas"]["Partial_RequestResponseSearchToOperators_"];
      cache_hits?: components["schemas"]["Partial_CacheHitsTableToOperators_"];
      request_response_rmt?: components["schemas"]["Partial_RequestResponseRMTToOperators_"];
      sessions_request_response_rmt?: components["schemas"]["Partial_SessionsRequestResponseRMTToOperators_"];
    };
    "FilterLeafSubset_feedback-or-request-or-response-or-properties-or-values-or-request_response_search-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_": components["schemas"]["Pick_FilterLeaf.feedback-or-request-or-response-or-properties-or-values-or-request_response_search-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_"];
    RequestFilterNode: components["schemas"]["FilterLeafSubset_feedback-or-request-or-response-or-properties-or-values-or-request_response_search-or-cache_hits-or-request_response_rmt-or-sessions_request_response_rmt_"] | components["schemas"]["RequestFilterBranch"] | "all";
    RequestFilterBranch: {
      right: components["schemas"]["RequestFilterNode"];
      /** @enum {string} */
      operator: "or" | "and";
      left: components["schemas"]["RequestFilterNode"];
    };
    /** @enum {string} */
    SortDirection: "asc" | "desc";
    SortLeafRequest: {
      /** @enum {boolean} */
      random?: true;
      created_at?: components["schemas"]["SortDirection"];
      cache_created_at?: components["schemas"]["SortDirection"];
      latency?: components["schemas"]["SortDirection"];
      last_active?: components["schemas"]["SortDirection"];
      total_tokens?: components["schemas"]["SortDirection"];
      completion_tokens?: components["schemas"]["SortDirection"];
      prompt_tokens?: components["schemas"]["SortDirection"];
      user_id?: components["schemas"]["SortDirection"];
      body_model?: components["schemas"]["SortDirection"];
      is_cached?: components["schemas"]["SortDirection"];
      request_prompt?: components["schemas"]["SortDirection"];
      response_text?: components["schemas"]["SortDirection"];
      properties?: {
        [key: string]: components["schemas"]["SortDirection"];
      };
      values?: {
        [key: string]: components["schemas"]["SortDirection"];
      };
      cost_usd?: components["schemas"]["SortDirection"];
    };
    RequestQueryParams: {
      filter: components["schemas"]["RequestFilterNode"];
      /** Format: double */
      offset?: number;
      /** Format: double */
      limit?: number;
      sort?: components["schemas"]["SortLeafRequest"];
      isCached?: boolean;
      includeInputs?: boolean;
      isPartOfExperiment?: boolean;
      isScored?: boolean;
    };
    ResultSuccess_HeliconeRequest_: {
      data: components["schemas"]["HeliconeRequest"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_HeliconeRequest.string_": components["schemas"]["ResultSuccess_HeliconeRequest_"] | components["schemas"]["ResultError_string_"];
    HeliconeRequestAsset: {
      assetUrl: string;
    };
    ResultSuccess_HeliconeRequestAsset_: {
      data: components["schemas"]["HeliconeRequestAsset"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_HeliconeRequestAsset.string_": components["schemas"]["ResultSuccess_HeliconeRequestAsset_"] | components["schemas"]["ResultError_string_"];
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.number-or-boolean-or-undefined_": {
      [key: string]: number | boolean;
    };
    Scores: components["schemas"]["Record_string.number-or-boolean-or-undefined_"];
    ScoreRequest: {
      scores: components["schemas"]["Scores"];
    };
    PromptsResult: {
      id: string;
      user_defined_id: string;
      description: string;
      pretty_name: string;
      created_at: string;
      /** Format: double */
      major_version: number;
      metadata?: components["schemas"]["Record_string.any_"];
    };
    "ResultSuccess_PromptsResult-Array_": {
      data: components["schemas"]["PromptsResult"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptsResult-Array.string_": components["schemas"]["ResultSuccess_PromptsResult-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description Make all properties in T optional */
    Partial_PromptToOperators_: {
      id?: components["schemas"]["Partial_TextOperators_"];
      user_defined_id?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_FilterLeaf.prompt_v2_": {
      prompt_v2?: components["schemas"]["Partial_PromptToOperators_"];
    };
    FilterLeafSubset_prompt_v2_: components["schemas"]["Pick_FilterLeaf.prompt_v2_"];
    PromptsFilterNode: components["schemas"]["FilterLeafSubset_prompt_v2_"] | components["schemas"]["PromptsFilterBranch"] | "all";
    PromptsFilterBranch: {
      right: components["schemas"]["PromptsFilterNode"];
      /** @enum {string} */
      operator: "or" | "and";
      left: components["schemas"]["PromptsFilterNode"];
    };
    PromptsQueryParams: {
      filter: components["schemas"]["PromptsFilterNode"];
    };
    PromptResult: {
      id: string;
      user_defined_id: string;
      description: string;
      pretty_name: string;
      /** Format: double */
      major_version: number;
      latest_version_id: string;
      latest_model_used: string;
      created_at: string;
      last_used: string;
      versions: string[];
      metadata?: components["schemas"]["Record_string.any_"];
    };
    ResultSuccess_PromptResult_: {
      data: components["schemas"]["PromptResult"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptResult.string_": components["schemas"]["ResultSuccess_PromptResult_"] | components["schemas"]["ResultError_string_"];
    PromptQueryParams: {
      timeFilter: {
        end: string;
        start: string;
      };
    };
    CreatePromptResponse: {
      id: string;
      prompt_version_id: string;
    };
    ResultSuccess_CreatePromptResponse_: {
      data: components["schemas"]["CreatePromptResponse"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_CreatePromptResponse.string_": components["schemas"]["ResultSuccess_CreatePromptResponse_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__metadata-Record_string.any___": {
      data: {
        metadata: components["schemas"]["Record_string.any_"];
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__metadata-Record_string.any__.string_": components["schemas"]["ResultSuccess__metadata-Record_string.any___"] | components["schemas"]["ResultError_string_"];
    PromptEditSubversionLabelParams: {
      label: string;
    };
    PromptEditSubversionTemplateParams: {
      heliconeTemplate: unknown;
      experimentId?: string;
    };
    PromptCreateSubversionParams: {
      newHeliconeTemplate: unknown;
      isMajorVersion?: boolean;
      metadata?: components["schemas"]["Record_string.any_"];
      experimentId?: string;
      bumpForMajorPromptVersionId?: string;
    };
    PromptInputRecord: {
      id: string;
      inputs: components["schemas"]["Record_string.string_"];
      dataset_row_id?: string;
      source_request: string;
      prompt_version: string;
      created_at: string;
      response_body?: string;
      request_body?: string;
      auto_prompt_inputs: unknown[];
    };
    "ResultSuccess_PromptInputRecord-Array_": {
      data: components["schemas"]["PromptInputRecord"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptInputRecord-Array.string_": components["schemas"]["ResultSuccess_PromptInputRecord-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array_": {
      data: {
          meta: components["schemas"]["Record_string.any_"];
          dataset: string;
          /** Format: double */
          num_hypotheses: number;
          created_at: string;
          id: string;
        }[];
      /** @enum {number|null} */
      error: null;
    };
    "Result__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array.string_": components["schemas"]["ResultSuccess__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess_PromptVersionResult-Array_": {
      data: components["schemas"]["PromptVersionResult"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptVersionResult-Array.string_": components["schemas"]["ResultSuccess_PromptVersionResult-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description Make all properties in T optional */
    Partial_PromptVersionsToOperators_: {
      minor_version?: components["schemas"]["Partial_NumberOperators_"];
      major_version?: components["schemas"]["Partial_NumberOperators_"];
      id?: components["schemas"]["Partial_TextOperators_"];
      prompt_v2?: components["schemas"]["Partial_TextOperators_"];
    };
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_FilterLeaf.prompts_versions_": {
      prompts_versions?: components["schemas"]["Partial_PromptVersionsToOperators_"];
    };
    FilterLeafSubset_prompts_versions_: components["schemas"]["Pick_FilterLeaf.prompts_versions_"];
    PromptVersionsFilterNode: components["schemas"]["FilterLeafSubset_prompts_versions_"] | components["schemas"]["PromptVersionsFilterBranch"] | "all";
    PromptVersionsFilterBranch: {
      right: components["schemas"]["PromptVersionsFilterNode"];
      /** @enum {string} */
      operator: "or" | "and";
      left: components["schemas"]["PromptVersionsFilterNode"];
    };
    PromptVersionsQueryParams: {
      filter?: components["schemas"]["PromptVersionsFilterNode"];
      includeExperimentVersions?: boolean;
    };
    PromptVersionResultCompiled: {
      id: string;
      /** Format: double */
      minor_version: number;
      /** Format: double */
      major_version: number;
      prompt_v2: string;
      model: string;
      prompt_compiled: unknown;
    };
    ResultSuccess_PromptVersionResultCompiled_: {
      data: components["schemas"]["PromptVersionResultCompiled"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptVersionResultCompiled.string_": components["schemas"]["ResultSuccess_PromptVersionResultCompiled_"] | components["schemas"]["ResultError_string_"];
    PromptVersiosQueryParamsCompiled: {
      filter?: components["schemas"]["PromptVersionsFilterNode"];
      includeExperimentVersions?: boolean;
      inputs: components["schemas"]["Record_string.string_"];
    };
    PromptVersionResultFilled: {
      id: string;
      /** Format: double */
      minor_version: number;
      /** Format: double */
      major_version: number;
      prompt_v2: string;
      model: string;
      filled_helicone_template: unknown;
    };
    ResultSuccess_PromptVersionResultFilled_: {
      data: components["schemas"]["PromptVersionResultFilled"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_PromptVersionResultFilled.string_": components["schemas"]["ResultSuccess_PromptVersionResultFilled_"] | components["schemas"]["ResultError_string_"];
    UpgradeToProRequest: {
      addons?: {
        evals?: boolean;
        experiments?: boolean;
        prompts?: boolean;
        alerts?: boolean;
      };
      /** Format: double */
      seats?: number;
      /** @enum {string} */
      ui_mode?: "embedded" | "hosted";
    };
    UpgradeToTeamBundleRequest: {
      /** @enum {string} */
      ui_mode?: "embedded" | "hosted";
    };
    LLMUsage: {
      model: string;
      provider: string;
      /** Format: double */
      prompt_tokens: number;
      /** Format: double */
      completion_tokens: number;
      /** Format: double */
      total_count: number;
      /** Format: double */
      amount: number;
      description: string;
      totalCost: {
        /** Format: double */
        prompt_token: number;
        /** Format: double */
        completion_token: number;
      };
    };
    NewOrganizationParams: {
      tier?: string | null;
      subscription_status?: string | null;
      stripe_subscription_item_id?: string | null;
      stripe_subscription_id?: string | null;
      stripe_metadata?: components["schemas"]["Json"];
      stripe_customer_id?: string | null;
      soft_delete?: boolean;
      size?: string | null;
      reseller_id?: string | null;
      /** Format: double */
      request_limit?: number | null;
      referral?: string | null;
      /** Format: double */
      percent_to_log?: number | null;
      owner: string;
      organization_type?: string;
      org_provider_key?: string | null;
      onboarding_status?: components["schemas"]["Json"];
      name: string;
      logo_path?: string | null;
      limits?: components["schemas"]["Json"] | null;
      is_personal?: boolean;
      is_main_org?: boolean;
      id?: string;
      icon?: string;
      has_onboarded?: boolean;
      governance_settings?: components["schemas"]["Json"] | null;
      domain?: string | null;
      created_at?: string | null;
      color?: string;
    };
    /** @description From T, pick a set of properties whose keys are in the union K */
    "Pick_NewOrganizationParams.name-or-color-or-icon-or-org_provider_key-or-limits-or-reseller_id-or-organization_type-or-onboarding_status_": {
      name: string;
      color?: string;
      icon?: string;
      org_provider_key?: string;
      limits?: components["schemas"]["Json"];
      reseller_id?: string;
      organization_type?: string;
      onboarding_status?: components["schemas"]["Json"];
    };
    UpdateOrganizationParams: components["schemas"]["Pick_NewOrganizationParams.name-or-color-or-icon-or-org_provider_key-or-limits-or-reseller_id-or-organization_type-or-onboarding_status_"] & {
      variant?: string;
    };
    UIFilterRowTree: components["schemas"]["UIFilterRowNode"] | components["schemas"]["FilterRow"];
    UIFilterRowNode: {
      /** @enum {string} */
      operator: "and" | "or";
      rows: components["schemas"]["UIFilterRowTree"][];
    };
    FilterRow: {
      value: string;
      /** Format: double */
      operatorIdx: number;
      /** Format: double */
      filterMapIdx: number;
    };
    OrganizationFilter: {
      softDelete: boolean;
      createdAt?: string;
      filter: components["schemas"]["UIFilterRowTree"][];
      name: string;
      id: string;
    };
    OrganizationLayout: {
      filters: components["schemas"]["OrganizationFilter"][];
      type: string;
      organization_id: string;
      id: string;
    };
    ResultSuccess_OrganizationLayout_: {
      data: components["schemas"]["OrganizationLayout"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_OrganizationLayout.string_": components["schemas"]["ResultSuccess_OrganizationLayout_"] | components["schemas"]["ResultError_string_"];
    OrganizationMember: {
      org_role: string;
      member: string;
      email: string;
    };
    "ResultSuccess_OrganizationMember-Array_": {
      data: components["schemas"]["OrganizationMember"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_OrganizationMember-Array.string_": components["schemas"]["ResultSuccess_OrganizationMember-Array_"] | components["schemas"]["ResultError_string_"];
    OrganizationOwner: {
      tier: string;
      email: string;
    };
    "ResultSuccess_OrganizationOwner-Array_": {
      data: components["schemas"]["OrganizationOwner"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_OrganizationOwner-Array.string_": components["schemas"]["ResultSuccess_OrganizationOwner-Array_"] | components["schemas"]["ResultError_string_"];
    /** @description Make all properties in T optional */
    "Partial__currentStep-string--selectedTier-string--hasOnboarded-boolean--members-any-Array--addons_58__prompts-boolean--experiments-boolean--evals-boolean___": {
      currentStep?: string;
      selectedTier?: string;
      hasOnboarded?: boolean;
      members?: unknown[];
      addons?: {
        evals: boolean;
        experiments: boolean;
        prompts: boolean;
      };
    };
    OnboardingStatus: components["schemas"]["Partial__currentStep-string--selectedTier-string--hasOnboarded-boolean--members-any-Array--addons_58__prompts-boolean--experiments-boolean--evals-boolean___"];
    HeliconeMeta: {
      heliconeManualAccessKey?: string;
      lytixHost?: string;
      lytixKey?: string;
      posthogHost?: string;
      posthogApiKey?: string;
      webhookEnabled: boolean;
      omitResponseLog: boolean;
      omitRequestLog: boolean;
      modelOverride?: string;
    };
    /**
     * @description Parses a string containing custom JSX-like tags and extracts information to produce two outputs:
     * 1. A version of the string with all JSX tags removed, leaving only the text content.
     * 2. An object representing a template with self-closing JSX tags and a separate mapping of keys to their
     *    corresponding text content.
     *
     * The function specifically targets `<helicone-prompt-input>` tags, which include a `key` attribute and enclosed text content.
     * These tags are transformed or removed based on the desired output structure. The process involves regular expressions
     * to match and manipulate the input string to produce the outputs.
     *
     * Parameters:
     * - input: A string containing the text and JSX-like tags to be parsed.
     *
     * Returns:
     * An object with two properties:
     * 1. stringWithoutJSXTags: A string where all `<helicone-prompt-input>` tags are removed, and only their text content remains.
     * 2. templateWithInputs: An object containing:
     *    - template: A version of the input string where `<helicone-prompt-input>` tags are replaced with self-closing versions,
     *      preserving the `key` attributes but removing the text content.
     *    - inputs: An object mapping the `key` attributes to their corresponding text content, effectively extracting
     *      the data from the original tags.
     *
     * Example Usage:
     * ```ts
     * const input = `
     * The scene is <helicone-prompt-input key="scene" >Harry Potter</helicone-prompt-input>.
     * <helicone-prompt-input key="name" >justin</helicone-prompt-input>  test`;
     *
     * const expectedOutput = parseJSXString(input);
     * console.log(expectedOutput);
     * ```
     * The function is useful for preprocessing strings with embedded custom JSX-like tags, extracting useful data,
     * and preparing templates for further processing or rendering. It demonstrates a practical application of regular
     * expressions for text manipulation in TypeScript, specifically tailored to a custom JSX-like syntax.
     */
    TemplateWithInputs: {
      template: Record<string, never>;
      inputs: {
        [key: string]: string;
      };
      autoInputs: unknown[];
    };
    Log: {
      response: {
        /** Format: double */
        delayMs: number;
        /** Format: date-time */
        responseCreatedAt: string;
        /** Format: double */
        timeToFirstToken?: number;
        /** Format: double */
        bodySize: number;
        /** Format: double */
        status: number;
        id: string;
      };
      request: {
        experimentRowIndex?: string;
        experimentColumnId?: string;
        heliconeTemplate?: components["schemas"]["TemplateWithInputs"];
        isStream: boolean;
        /** Format: date-time */
        requestCreatedAt: string;
        countryCode?: string;
        threat?: boolean;
        path: string;
        /** Format: double */
        bodySize: number;
        provider: components["schemas"]["Provider"];
        targetUrl: string;
        heliconeProxyKeyId?: string;
        /** Format: double */
        heliconeApiKeyId?: number;
        properties: components["schemas"]["Record_string.string_"];
        promptVersion?: string;
        promptId?: string;
        userId: string;
        id: string;
      };
    };
    KafkaMessageContents: {
      log: components["schemas"]["Log"];
      heliconeMeta: components["schemas"]["HeliconeMeta"];
      authorization: string;
    };
    ResultSuccess_unknown_: {
      data: unknown;
      /** @enum {number|null} */
      error: null;
    };
    ResultError_unknown_: {
      /** @enum {number|null} */
      data: null;
      error: unknown;
    };
    "PostgrestResponseSuccess__created_at-string--governance_limits-Json--member-string--org_role-string--organization-string__": {
      /** Format: double */
      status: number;
      statusText: string;
      /** @enum {number|null} */
      error: null;
      data: {
        organization: string;
        org_role: string;
        member: string;
        governance_limits: components["schemas"]["Json"];
        created_at: string;
      };
      /** Format: double */
      count: number | null;
    };
    /**
     * @description Error format
     *
     * {@link https://postgrest.org/en/stable/api.html?highlight=options#errors-and-http-status-codes}
     */
    PostgrestError: {
      name: string;
      message: string;
      stack?: string;
      details: string;
      hint: string;
      code: string;
    };
    PostgrestResponseFailure: {
      /** Format: double */
      status: number;
      statusText: string;
      error: components["schemas"]["PostgrestError"];
      /** @enum {number|null} */
      data: null;
      /** @enum {number|null} */
      count: null;
    };
    "PostgrestSingleResponse__created_at-string--governance_limits-Json--member-string--org_role-string--organization-string__": components["schemas"]["PostgrestResponseSuccess__created_at-string--governance_limits-Json--member-string--org_role-string--organization-string__"] | components["schemas"]["PostgrestResponseFailure"];
    "PostgrestResponseSuccess__governance_settings-Json__": {
      /** Format: double */
      status: number;
      statusText: string;
      /** @enum {number|null} */
      error: null;
      data: {
        governance_settings: components["schemas"]["Json"];
      };
      /** Format: double */
      count: number | null;
    };
    "PostgrestSingleResponse__governance_settings-Json__": components["schemas"]["PostgrestResponseSuccess__governance_settings-Json__"] | components["schemas"]["PostgrestResponseFailure"];
    /** @enum {string} */
    KeyPermissions: "w" | "rw";
    GenerateHashQueryParams: {
      apiKey: string;
      governance: boolean;
      keyName: string;
      permissions: components["schemas"]["KeyPermissions"];
    };
    FineTuneResult: {
      error: string;
    } | {
      data: {
        url: string;
        fineTuneJob: string;
      };
      success: boolean;
    };
    FineTuneBodyParams: {
      providerKeyId: string;
    };
    FineTuneBody: {
      providerKeyId: string;
    };
    StoreFilterType: {
      createdAt?: string;
      filter: unknown;
      name: string;
      id?: string;
    };
    "ResultSuccess_StoreFilterType-Array_": {
      data: components["schemas"]["StoreFilterType"][];
      /** @enum {number|null} */
      error: null;
    };
    "Result_StoreFilterType-Array.string_": components["schemas"]["ResultSuccess_StoreFilterType-Array_"] | components["schemas"]["ResultError_string_"];
    ResultSuccess_StoreFilterType_: {
      data: components["schemas"]["StoreFilterType"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_StoreFilterType.string_": components["schemas"]["ResultSuccess_StoreFilterType_"] | components["schemas"]["ResultError_string_"];
    "ResultSuccess__id-string__": {
      data: {
        id: string;
      };
      /** @enum {number|null} */
      error: null;
    };
    "Result__id-string_.string_": components["schemas"]["ResultSuccess__id-string__"] | components["schemas"]["ResultError_string_"];
    "ChatCompletionTokenLogprob.TopLogprob": {
      /** @description The token. */
      token: string;
      /**
       * @description A list of integers representing the UTF-8 bytes representation of the token.
       * Useful in instances where characters are represented by multiple tokens and
       * their byte representations must be combined to generate the correct text
       * representation. Can be `null` if there is no bytes representation for the token.
       */
      bytes: number[] | null;
      /**
       * Format: double
       * @description The log probability of this token, if it is within the top 20 most likely
       * tokens. Otherwise, the value `-9999.0` is used to signify that the token is very
       * unlikely.
       */
      logprob: number;
    };
    ChatCompletionTokenLogprob: {
      /** @description The token. */
      token: string;
      /**
       * @description A list of integers representing the UTF-8 bytes representation of the token.
       * Useful in instances where characters are represented by multiple tokens and
       * their byte representations must be combined to generate the correct text
       * representation. Can be `null` if there is no bytes representation for the token.
       */
      bytes: number[] | null;
      /**
       * Format: double
       * @description The log probability of this token, if it is within the top 20 most likely
       * tokens. Otherwise, the value `-9999.0` is used to signify that the token is very
       * unlikely.
       */
      logprob: number;
      /**
       * @description List of the most likely tokens and their log probability, at this token
       * position. In rare cases, there may be fewer than the number of requested
       * `top_logprobs` returned.
       */
      top_logprobs: components["schemas"]["ChatCompletionTokenLogprob.TopLogprob"][];
    };
    /** @description Log probability information for the choice. */
    "ChatCompletion.Choice.Logprobs": {
      /** @description A list of message content tokens with log probability information. */
      content: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
      /** @description A list of message refusal tokens with log probability information. */
      refusal: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
    };
    /**
     * @description If the audio output modality is requested, this object contains data about the
     * audio response from the model.
     * [Learn more](https://platform.openai.com/docs/guides/audio).
     */
    ChatCompletionAudio: {
      /** @description Unique identifier for this audio response. */
      id: string;
      /**
       * @description Base64 encoded audio bytes generated by the model, in the format specified in
       * the request.
       */
      data: string;
      /**
       * Format: double
       * @description The Unix timestamp (in seconds) for when this audio response will no longer be
       * accessible on the server for use in multi-turn conversations.
       */
      expires_at: number;
      /** @description Transcript of the audio generated by the model. */
      transcript: string;
    };
    /** @deprecated */
    "ChatCompletionMessage.FunctionCall": {
      /**
       * @description The arguments to call the function with, as generated by the model in JSON
       * format. Note that the model does not always generate valid JSON, and may
       * hallucinate parameters not defined by your function schema. Validate the
       * arguments in your code before calling your function.
       */
      arguments: string;
      /** @description The name of the function to call. */
      name: string;
    };
    /** @description The function that the model called. */
    "ChatCompletionMessageToolCall.Function": {
      /**
       * @description The arguments to call the function with, as generated by the model in JSON
       * format. Note that the model does not always generate valid JSON, and may
       * hallucinate parameters not defined by your function schema. Validate the
       * arguments in your code before calling your function.
       */
      arguments: string;
      /** @description The name of the function to call. */
      name: string;
    };
    ChatCompletionMessageToolCall: {
      /** @description The ID of the tool call. */
      id: string;
      /** @description The function that the model called. */
      function: components["schemas"]["ChatCompletionMessageToolCall.Function"];
      /**
       * @description The type of the tool. Currently, only `function` is supported.
       * @enum {string}
       */
      type: "function";
    };
    /** @description A chat completion message generated by the model. */
    ChatCompletionMessage: {
      /** @description The contents of the message. */
      content: string | null;
      /** @description The refusal message generated by the model. */
      refusal: string | null;
      /**
       * @description The role of the author of this message.
       * @enum {string}
       */
      role: "assistant";
      /**
       * @description If the audio output modality is requested, this object contains data about the
       * audio response from the model.
       * [Learn more](https://platform.openai.com/docs/guides/audio).
       */
      audio?: components["schemas"]["ChatCompletionAudio"] | null;
      /** @deprecated */
      function_call?: components["schemas"]["ChatCompletionMessage.FunctionCall"] | null;
      /** @description The tool calls generated by the model, such as function calls. */
      tool_calls?: components["schemas"]["ChatCompletionMessageToolCall"][];
    };
    "ChatCompletion.Choice": {
      /**
       * @description The reason the model stopped generating tokens. This will be `stop` if the model
       * hit a natural stop point or a provided stop sequence, `length` if the maximum
       * number of tokens specified in the request was reached, `content_filter` if
       * content was omitted due to a flag from our content filters, `tool_calls` if the
       * model called a tool, or `function_call` (deprecated) if the model called a
       * function.
       * @enum {string}
       */
      finish_reason: "stop" | "length" | "tool_calls" | "content_filter" | "function_call";
      /**
       * Format: double
       * @description The index of the choice in the list of choices.
       */
      index: number;
      /** @description Log probability information for the choice. */
      logprobs: components["schemas"]["ChatCompletion.Choice.Logprobs"] | null;
      /** @description A chat completion message generated by the model. */
      message: components["schemas"]["ChatCompletionMessage"];
    };
    /** @description Breakdown of tokens used in a completion. */
    "CompletionUsage.CompletionTokensDetails": {
      /**
       * Format: double
       * @description Audio input tokens generated by the model.
       */
      audio_tokens?: number;
      /**
       * Format: double
       * @description Tokens generated by the model for reasoning.
       */
      reasoning_tokens?: number;
    };
    /** @description Breakdown of tokens used in the prompt. */
    "CompletionUsage.PromptTokensDetails": {
      /**
       * Format: double
       * @description Audio input tokens present in the prompt.
       */
      audio_tokens?: number;
      /**
       * Format: double
       * @description Cached tokens present in the prompt.
       */
      cached_tokens?: number;
    };
    /** @description Usage statistics for the completion request. */
    CompletionUsage: {
      /**
       * Format: double
       * @description Number of tokens in the generated completion.
       */
      completion_tokens: number;
      /**
       * Format: double
       * @description Number of tokens in the prompt.
       */
      prompt_tokens: number;
      /**
       * Format: double
       * @description Total number of tokens used in the request (prompt + completion).
       */
      total_tokens: number;
      /** @description Breakdown of tokens used in a completion. */
      completion_tokens_details?: components["schemas"]["CompletionUsage.CompletionTokensDetails"];
      /** @description Breakdown of tokens used in the prompt. */
      prompt_tokens_details?: components["schemas"]["CompletionUsage.PromptTokensDetails"];
    };
    /**
     * @description Represents a chat completion response returned by model, based on the provided
     * input.
     */
    ChatCompletion: {
      /** @description A unique identifier for the chat completion. */
      id: string;
      /**
       * @description A list of chat completion choices. Can be more than one if `n` is greater
       * than 1.
       */
      choices: components["schemas"]["ChatCompletion.Choice"][];
      /**
       * Format: double
       * @description The Unix timestamp (in seconds) of when the chat completion was created.
       */
      created: number;
      /** @description The model used for the chat completion. */
      model: string;
      /**
       * @description The object type, which is always `chat.completion`.
       * @enum {string}
       */
      object: "chat.completion";
      /**
       * @description The service tier used for processing the request. This field is only included if
       * the `service_tier` parameter is specified in the request.
       * @enum {string|null}
       */
      service_tier?: "scale" | "default" | null;
      /**
       * @description This fingerprint represents the backend configuration that the model runs with.
       *
       * Can be used in conjunction with the `seed` request parameter to understand when
       * backend changes have been made that might impact determinism.
       */
      system_fingerprint?: string;
      /** @description Usage statistics for the completion request. */
      usage?: components["schemas"]["CompletionUsage"];
    };
    ResultSuccess_ChatCompletion_: {
      data: components["schemas"]["ChatCompletion"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_ChatCompletion.string_": components["schemas"]["ResultSuccess_ChatCompletion_"] | components["schemas"]["ResultError_string_"];
    /**
     * @description Learn about
     * [text inputs](https://platform.openai.com/docs/guides/text-generation).
     */
    ChatCompletionContentPartText: {
      /** @description The text content. */
      text: string;
      /**
       * @description The type of the content part.
       * @enum {string}
       */
      type: "text";
    };
    ChatCompletionSystemMessageParam: {
      /** @description The contents of the system message. */
      content: string | components["schemas"]["ChatCompletionContentPartText"][];
      /**
       * @description The role of the messages author, in this case `system`.
       * @enum {string}
       */
      role: "system";
      /**
       * @description An optional name for the participant. Provides the model information to
       * differentiate between participants of the same role.
       */
      name?: string;
    };
    "ChatCompletionContentPartImage.ImageURL": {
      /** @description Either a URL of the image or the base64 encoded image data. */
      url: string;
      /**
       * @description Specifies the detail level of the image. Learn more in the
       * [Vision guide](https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding).
       * @enum {string}
       */
      detail?: "auto" | "low" | "high";
    };
    /** @description Learn about [image inputs](https://platform.openai.com/docs/guides/vision). */
    ChatCompletionContentPartImage: {
      image_url: components["schemas"]["ChatCompletionContentPartImage.ImageURL"];
      /**
       * @description The type of the content part.
       * @enum {string}
       */
      type: "image_url";
    };
    "ChatCompletionContentPartInputAudio.InputAudio": {
      /** @description Base64 encoded audio data. */
      data: string;
      /**
       * @description The format of the encoded audio data. Currently supports "wav" and "mp3".
       * @enum {string}
       */
      format: "wav" | "mp3";
    };
    /** @description Learn about [audio inputs](https://platform.openai.com/docs/guides/audio). */
    ChatCompletionContentPartInputAudio: {
      input_audio: components["schemas"]["ChatCompletionContentPartInputAudio.InputAudio"];
      /**
       * @description The type of the content part. Always `input_audio`.
       * @enum {string}
       */
      type: "input_audio";
    };
    /**
     * @description Learn about
     * [text inputs](https://platform.openai.com/docs/guides/text-generation).
     */
    ChatCompletionContentPart: components["schemas"]["ChatCompletionContentPartText"] | components["schemas"]["ChatCompletionContentPartImage"] | components["schemas"]["ChatCompletionContentPartInputAudio"];
    ChatCompletionUserMessageParam: {
      /** @description The contents of the user message. */
      content: string | components["schemas"]["ChatCompletionContentPart"][];
      /**
       * @description The role of the messages author, in this case `user`.
       * @enum {string}
       */
      role: "user";
      /**
       * @description An optional name for the participant. Provides the model information to
       * differentiate between participants of the same role.
       */
      name?: string;
    };
    /**
     * @description Data about a previous audio response from the model.
     * [Learn more](https://platform.openai.com/docs/guides/audio).
     */
    "ChatCompletionAssistantMessageParam.Audio": {
      /** @description Unique identifier for a previous audio response from the model. */
      id: string;
    };
    ChatCompletionContentPartRefusal: {
      /** @description The refusal message generated by the model. */
      refusal: string;
      /**
       * @description The type of the content part.
       * @enum {string}
       */
      type: "refusal";
    };
    /** @deprecated */
    "ChatCompletionAssistantMessageParam.FunctionCall": {
      /**
       * @description The arguments to call the function with, as generated by the model in JSON
       * format. Note that the model does not always generate valid JSON, and may
       * hallucinate parameters not defined by your function schema. Validate the
       * arguments in your code before calling your function.
       */
      arguments: string;
      /** @description The name of the function to call. */
      name: string;
    };
    ChatCompletionAssistantMessageParam: {
      /**
       * @description The role of the messages author, in this case `assistant`.
       * @enum {string}
       */
      role: "assistant";
      /**
       * @description Data about a previous audio response from the model.
       * [Learn more](https://platform.openai.com/docs/guides/audio).
       */
      audio?: components["schemas"]["ChatCompletionAssistantMessageParam.Audio"] | null;
      /**
       * @description The contents of the assistant message. Required unless `tool_calls` or
       * `function_call` is specified.
       */
      content?: (string | ((components["schemas"]["ChatCompletionContentPartText"] | components["schemas"]["ChatCompletionContentPartRefusal"])[])) | null;
      /** @deprecated */
      function_call?: components["schemas"]["ChatCompletionAssistantMessageParam.FunctionCall"] | null;
      /**
       * @description An optional name for the participant. Provides the model information to
       * differentiate between participants of the same role.
       */
      name?: string;
      /** @description The refusal message by the assistant. */
      refusal?: string | null;
      /** @description The tool calls generated by the model, such as function calls. */
      tool_calls?: components["schemas"]["ChatCompletionMessageToolCall"][];
    };
    ChatCompletionToolMessageParam: {
      /** @description The contents of the tool message. */
      content: string | components["schemas"]["ChatCompletionContentPartText"][];
      /**
       * @description The role of the messages author, in this case `tool`.
       * @enum {string}
       */
      role: "tool";
      /** @description Tool call that this message is responding to. */
      tool_call_id: string;
    };
    /** @deprecated */
    ChatCompletionFunctionMessageParam: {
      /** @description The contents of the function message. */
      content: string | null;
      /** @description The name of the function to call. */
      name: string;
      /**
       * @description The role of the messages author, in this case `function`.
       * @enum {string}
       */
      role: "function";
    };
    ChatCompletionMessageParam: components["schemas"]["ChatCompletionSystemMessageParam"] | components["schemas"]["ChatCompletionUserMessageParam"] | components["schemas"]["ChatCompletionAssistantMessageParam"] | components["schemas"]["ChatCompletionToolMessageParam"] | components["schemas"]["ChatCompletionFunctionMessageParam"];
    /** @description Construct a type with a set of properties K of type T */
    "Record_string.unknown_": {
      [key: string]: unknown;
    };
    /**
     * @description The parameters the functions accepts, described as a JSON Schema object. See the
     * [guide](https://platform.openai.com/docs/guides/function-calling) for examples,
     * and the
     * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
     * documentation about the format.
     *
     * Omitting `parameters` defines a function with an empty parameter list.
     */
    FunctionParameters: components["schemas"]["Record_string.unknown_"];
    FunctionDefinition: {
      /**
       * @description The name of the function to be called. Must be a-z, A-Z, 0-9, or contain
       * underscores and dashes, with a maximum length of 64.
       */
      name: string;
      /**
       * @description A description of what the function does, used by the model to choose when and
       * how to call the function.
       */
      description?: string;
      /**
       * @description The parameters the functions accepts, described as a JSON Schema object. See the
       * [guide](https://platform.openai.com/docs/guides/function-calling) for examples,
       * and the
       * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
       * documentation about the format.
       *
       * Omitting `parameters` defines a function with an empty parameter list.
       */
      parameters?: components["schemas"]["FunctionParameters"];
      /**
       * @description Whether to enable strict schema adherence when generating the function call. If
       * set to true, the model will follow the exact schema defined in the `parameters`
       * field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn
       * more about Structured Outputs in the
       * [function calling guide](docs/guides/function-calling).
       */
      strict?: boolean | null;
    };
    ChatCompletionTool: {
      function: components["schemas"]["FunctionDefinition"];
      /**
       * @description The type of the tool. Currently, only `function` is supported.
       * @enum {string}
       */
      type: "function";
    };
    "ChatCompletionNamedToolChoice.Function": {
      /** @description The name of the function to call. */
      name: string;
    };
    /**
     * @description Specifies a tool the model should use. Use to force the model to call a specific
     * function.
     */
    ChatCompletionNamedToolChoice: {
      function: components["schemas"]["ChatCompletionNamedToolChoice.Function"];
      /**
       * @description The type of the tool. Currently, only `function` is supported.
       * @enum {string}
       */
      type: "function";
    };
    /**
     * @description Controls which (if any) tool is called by the model. `none` means the model will
     * not call any tool and instead generates a message. `auto` means the model can
     * pick between generating a message or calling one or more tools. `required` means
     * the model must call one or more tools. Specifying a particular tool via
     * `{"type": "function", "function": {"name": "my_function"}}` forces the model to
     * call that tool.
     *
     * `none` is the default when no tools are present. `auto` is the default if tools
     * are present.
     */
    ChatCompletionToolChoiceOption: components["schemas"]["ChatCompletionNamedToolChoice"] | ("none" | "auto" | "required");
    AlertResponse: {
      alerts: ({
          updated_at: string | null;
          /** Format: double */
          time_window: number;
          /** Format: double */
          time_block_duration: number;
          /** Format: double */
          threshold: number;
          status: string;
          soft_delete: boolean;
          slack_channels: string[];
          org_id: string;
          name: string;
          /** Format: double */
          minimum_request_count: number | null;
          metric: string;
          id: string;
          emails: string[];
          created_at: string | null;
        })[];
      history: ({
          updated_at: string | null;
          triggered_value: string;
          status: string;
          soft_delete: boolean;
          org_id: string;
          id: string;
          created_at: string | null;
          alert_start_time: string;
          alert_name: string;
          alert_metric: string;
          alert_id: string;
          alert_end_time: string | null;
        })[];
    };
    ResultSuccess_AlertResponse_: {
      data: components["schemas"]["AlertResponse"];
      /** @enum {number|null} */
      error: null;
    };
    "Result_AlertResponse.string_": components["schemas"]["ResultSuccess_AlertResponse_"] | components["schemas"]["ResultError_string_"];
    AlertRequest: {
      name: string;
      metric: string;
      /** Format: double */
      threshold: number;
      time_window: string;
      emails: string[];
      slack_channels: string[];
      /** Format: double */
      minimum_request_count?: number;
    };
    "ResultSuccess__organization_id-string--name-string--flags-string-Array_-Array_": {
      data: {
          flags: string[];
          name: string;
          organization_id: string;
        }[];
      /** @enum {number|null} */
      error: null;
    };
    "Result__organization_id-string--name-string--flags-string-Array_-Array.string_": components["schemas"]["ResultSuccess__organization_id-string--name-string--flags-string-Array_-Array_"] | components["schemas"]["ResultError_string_"];
    KafkaSettings: {
      /** Format: double */
      miniBatchSize: number;
    };
    AzureExperiment: {
      azureBaseUri: string;
      azureApiVersion: string;
      azureDeploymentName: string;
      azureApiKey: string;
    };
    ApiKey: {
      apiKey: string;
    };
    Setting: components["schemas"]["KafkaSettings"] | components["schemas"]["AzureExperiment"] | components["schemas"]["ApiKey"];
    /** @enum {string} */
    SettingName: "kafka:dlq" | "kafka:log" | "kafka:score" | "kafka:dlq:score" | "kafka:dlq:eu" | "kafka:log:eu" | "kafka:orgs-to-dlq" | "azure:experiment" | "openai:apiKey" | "anthropic:apiKey" | "openrouter:apiKey";
    /**
     * @description The URL interface represents an object providing static methods used for creating object URLs.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL)
     * `URL` class is a global reference for `import { URL } from 'node:url'`
     * https://nodejs.org/api/url.html#the-whatwg-url-api
     */
    "url.URL": string;
  };
  responses: {
  };
  parameters: {
  };
  requestBodies: {
  };
  headers: {
  };
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  CreateEvaluator: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEvaluatorParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorResult.string_"];
        };
      };
    };
  };
  GetEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorResult.string_"];
        };
      };
    };
  };
  UpdateEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateEvaluatorParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorResult.string_"];
        };
      };
    };
  };
  DeleteEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  QueryEvaluators: {
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorResult-Array.string_"];
        };
      };
    };
  };
  GetExperimentsForEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorExperiment-Array.string_"];
        };
      };
    };
  };
  GetOnlineEvaluators: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_OnlineEvaluatorByEvaluatorId-Array.string_"];
        };
      };
    };
  };
  CreateOnlineEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOnlineEvaluatorParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  DeleteOnlineEvaluator: {
    parameters: {
      path: {
        evaluatorId: string;
        onlineEvaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  TestPythonEvaluator: {
    requestBody: {
      content: {
        "application/json": {
          testInput: components["schemas"]["TestInput"];
          code: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__output-string--traces-string-Array--statusCode_63_-number_.string_"];
        };
      };
    };
  };
  TestLLMEvaluator: {
    requestBody: {
      content: {
        "application/json": {
          evaluatorName: string;
          testInput: components["schemas"]["TestInput"];
          evaluatorConfig: components["schemas"]["EvaluatorConfig"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["EvaluatorScoreResult"];
        };
      };
    };
  };
  TestLastMileEvaluator: {
    requestBody: {
      content: {
        "application/json": {
          testInput: components["schemas"]["TestInput"];
          config: components["schemas"]["LastMileConfigForm"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__score-number--input-string--output-string--ground_truth_63_-string_.string_"];
        };
      };
    };
  };
  GetEvaluatorStats: {
    parameters: {
      path: {
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorStats.string_"];
        };
      };
    };
  };
  CreateEmptyExperiment: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__experimentId-string_.string_"];
        };
      };
    };
  };
  CreateExperimentFromRequest: {
    parameters: {
      path: {
        requestId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__experimentId-string_.string_"];
        };
      };
    };
  };
  CreateNewExperiment: {
    requestBody: {
      content: {
        "application/json": {
          originalPromptVersion: string;
          name: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__experimentId-string_.string_"];
        };
      };
    };
  };
  GetExperiments: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ExperimentV2-Array.string_"];
        };
      };
    };
  };
  GetExperimentById: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ExtendedExperimentData.string_"];
        };
      };
    };
  };
  DeleteExperiment: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateNewPromptVersionForExperiment: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateNewPromptVersionForExperimentParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult.string_"];
        };
      };
    };
  };
  DeletePromptVersion: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetPromptVersionsForExperiment: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ExperimentV2PromptVersion-Array.string_"];
        };
      };
    };
  };
  GetInputKeysForExperiment: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string-Array.string_"];
        };
      };
    };
  };
  AddManualRowToExperiment: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputs: components["schemas"]["Record_string.string_"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string.string_"];
        };
      };
    };
  };
  AddManualRowsToExperimentBatch: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputs: components["schemas"]["Record_string.string_"][];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  DeleteExperimentTableRows: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputRecordIds: string[];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateExperimentTableRowBatch: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          rows: {
              autoInputs: unknown[];
              inputs: components["schemas"]["Record_string.string_"];
              inputRecordId: string;
            }[];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateExperimentTableRowFromDataset: {
    parameters: {
      path: {
        experimentId: string;
        datasetId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  UpdateExperimentTableRow: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputs: components["schemas"]["Record_string.string_"];
          inputRecordId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  RunHypothesis: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          inputRecordId: string;
          promptVersionId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string.string_"];
        };
      };
    };
  };
  GetExperimentEvaluators: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_EvaluatorResult-Array.string_"];
        };
      };
    };
  };
  CreateExperimentEvaluator: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          evaluatorId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  DeleteExperimentEvaluator: {
    parameters: {
      path: {
        experimentId: string;
        evaluatorId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  RunExperimentEvaluators: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  ShouldRunEvaluators: {
    parameters: {
      path: {
        experimentId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_boolean.string_"];
        };
      };
    };
  };
  GetExperimentPromptVersionScores: {
    parameters: {
      path: {
        experimentId: string;
        promptVersionId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_Record_string.ScoreV2_.string_"];
        };
      };
    };
  };
  GetExperimentScore: {
    parameters: {
      path: {
        experimentId: string;
        requestId: string;
        scoreKey: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ScoreV2-or-null.string_"];
        };
      };
    };
  };
  GetRequests: {
    /** @description Log message to log */
    requestBody: {
      content: {
        "application/json": components["schemas"]["KafkaMessageContents"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  GetRequestsClickhouse: {
    /** @description Request query filters */
    requestBody: {
      content: {
        /**
         * @example {
         *   "filter": "all",
         *   "isCached": false,
         *   "limit": 100,
         *   "offset": 0,
         *   "sort": {
         *     "created_at": "desc"
         *   },
         *   "includeInputs": false,
         *   "isScored": false,
         *   "isPartOfExperiment": false
         * }
         */
        "application/json": components["schemas"]["RequestQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeRequest-Array.string_"];
        };
      };
    };
  };
  GetRequestById: {
    parameters: {
      query?: {
        includeBody?: boolean;
      };
      path: {
        requestId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeRequest.string_"];
        };
      };
    };
  };
  GetRequestsByIds: {
    requestBody: {
      content: {
        "application/json": {
          requestIds: string[];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeRequest-Array.string_"];
        };
      };
    };
  };
  FeedbackRequest: {
    parameters: {
      path: {
        requestId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          rating: boolean;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  PutProperty: {
    parameters: {
      path: {
        requestId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          value: string;
          key: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetRequestAssetById: {
    parameters: {
      path: {
        requestId: string;
        assetId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_HeliconeRequestAsset.string_"];
        };
      };
    };
  };
  AddScores: {
    parameters: {
      path: {
        requestId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScoreRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetPrompts: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptsQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptsResult-Array.string_"];
        };
      };
    };
  };
  GetPrompt: {
    parameters: {
      path: {
        promptId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptResult.string_"];
        };
      };
    };
  };
  DeletePrompt: {
    parameters: {
      path: {
        promptId: string;
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  CreatePrompt: {
    requestBody: {
      content: {
        "application/json": {
          metadata: components["schemas"]["Record_string.any_"];
          prompt: unknown;
          userDefinedId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_CreatePromptResponse.string_"];
        };
      };
    };
  };
  UpdatePromptUserDefinedId: {
    parameters: {
      path: {
        promptId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          userDefinedId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  EditPromptVersionLabel: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptEditSubversionLabelParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__metadata-Record_string.any__.string_"];
        };
      };
    };
  };
  EditPromptVersionTemplate: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptEditSubversionTemplateParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateSubversionFromUi: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptCreateSubversionParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult.string_"];
        };
      };
    };
  };
  CreateSubversion: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptCreateSubversionParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult.string_"];
        };
      };
    };
  };
  PromotePromptVersionToProduction: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          previousProductionVersionId: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult.string_"];
        };
      };
    };
  };
  GetInputs: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          random?: boolean;
          /** Format: double */
          limit: number;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptInputRecord-Array.string_"];
        };
      };
    };
  };
  GetPromptExperiments: {
    parameters: {
      path: {
        promptId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__id-string--created_at-string--num_hypotheses-number--dataset-string--meta-Record_string.any__-Array.string_"];
        };
      };
    };
  };
  GetPromptVersions: {
    parameters: {
      path: {
        promptId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptVersionsQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult-Array.string_"];
        };
      };
    };
  };
  GetPromptVersion: {
    parameters: {
      path: {
        promptVersionId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResult.string_"];
        };
      };
    };
  };
  GetPromptVersionsCompiled: {
    parameters: {
      path: {
        user_defined_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptVersiosQueryParamsCompiled"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResultCompiled.string_"];
        };
      };
    };
  };
  GetPromptVersionTemplates: {
    parameters: {
      path: {
        user_defined_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PromptVersiosQueryParamsCompiled"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_PromptVersionResultFilled.string_"];
        };
      };
    };
  };
  GetSettings: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            useAzureForExperiment: boolean;
          };
        };
      };
    };
  };
  GetCostForPrompts: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  GetCostForEvals: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  GetCostForExperiments: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  GetFreeUsage: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  UpgradeToPro: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpgradeToProRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  UpgradeExistingCustomer: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpgradeToProRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  UpgradeToTeamBundle: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpgradeToTeamBundleRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  UpgradeExistingCustomerToTeamBundle: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpgradeToTeamBundleRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  ManageSubscription: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  UndoCancelSubscription: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": null;
        };
      };
    };
  };
  AddOns: {
    parameters: {
      path: {
        productType: "alerts" | "prompts" | "experiments" | "evals";
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": null;
        };
      };
    };
  };
  DeleteAddOns: {
    parameters: {
      path: {
        productType: "alerts" | "prompts" | "experiments" | "evals";
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": null;
        };
      };
    };
  };
  PreviewInvoice: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": ({
            evaluators_usage: components["schemas"]["LLMUsage"][];
            experiments_usage: components["schemas"]["LLMUsage"][];
            /** Format: double */
            total: number;
            /** Format: double */
            tax: number | null;
            /** Format: double */
            subtotal: number;
            discount: ({
              coupon: {
                /** Format: double */
                amount_off: number | null;
                /** Format: double */
                percent_off: number | null;
                name: string | null;
              };
            }) | null;
            lines: ({
              data: ({
                  description: string | null;
                  /** Format: double */
                  amount: number | null;
                  id: string | null;
                })[];
            }) | null;
            /** Format: double */
            next_payment_attempt: number | null;
            currency: string | null;
          }) | null;
        };
      };
    };
  };
  CancelSubscription: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": null;
        };
      };
    };
  };
  MigrateToPro: {
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  GetSubscription: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": ({
            items: ({
                price: {
                  product: ({
                    name: string | null;
                  }) | null;
                };
                /** Format: double */
                quantity?: number;
              })[];
            /** Format: double */
            trial_end: number | null;
            id: string;
            /** Format: double */
            current_period_start: number;
            /** Format: double */
            current_period_end: number;
            cancel_at_period_end: boolean;
            status: string;
          }) | null;
        };
      };
    };
  };
  HandleStripeWebhook: {
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  AcceptTerms: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateNewOrganization: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewOrganizationParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string.string_"];
        };
      };
    };
  };
  UpdateOrganization: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateOrganizationParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  OnboardOrganization: {
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  AddMemberToOrganization: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          email: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  CreateOrganizationFilter: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          filterType: "dashboard" | "requests";
          filters: components["schemas"]["OrganizationFilter"][];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  UpdateOrganizationFilter: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          filterType: "dashboard" | "requests";
          filters: components["schemas"]["OrganizationFilter"][];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  DeleteOrganization: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetOrganizationLayout: {
    parameters: {
      query: {
        filterType: string;
      };
      path: {
        organizationId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_OrganizationLayout.string_"];
        };
      };
    };
  };
  GetOrganizationMembers: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_OrganizationMember-Array.string_"];
        };
      };
    };
  };
  UpdateOrganizationMember: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          memberId: string;
          role: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetOrganizationOwner: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_OrganizationOwner-Array.string_"];
        };
      };
    };
  };
  RemoveMemberFromOrganization: {
    parameters: {
      query: {
        memberId: string;
      };
      path: {
        organizationId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  SetupDemo: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  UpdateOnboardingStatus: {
    requestBody: {
      content: {
        "application/json": {
          has_onboarded: boolean;
          name: string;
          onboarding_status: components["schemas"]["OnboardingStatus"];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  GetMemberLimits: {
    parameters: {
      path: {
        memberId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["PostgrestSingleResponse__created_at-string--governance_limits-Json--member-string--org_role-string--organization-string__"];
        };
      };
    };
  };
  SetMemberLimits: {
    parameters: {
      path: {
        memberId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: double */
          days: number;
          /** Format: double */
          limitUSD: number;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ResultSuccess_unknown_"] | components["schemas"]["ResultError_unknown_"];
        };
      };
    };
  };
  GetMyLimits: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["PostgrestSingleResponse__created_at-string--governance_limits-Json--member-string--org_role-string--organization-string__"];
        };
      };
    };
  };
  IsGovernanceOrg: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["PostgrestSingleResponse__governance_settings-Json__"];
        };
      };
    };
  };
  GenerateHash: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateHashQueryParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            error?: {
              details?: string;
              message?: string;
            };
            success?: boolean;
          };
        };
      };
    };
  };
  DatasetFineTune: {
    parameters: {
      path: {
        datasetId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FineTuneBodyParams"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["FineTuneResult"];
        };
      };
    };
  };
  FineTune: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FineTuneBody"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            error: string;
          } | {
            data: {
              url: string;
              fineTuneJob: string;
            };
            success: boolean;
          };
        };
      };
    };
  };
  FineTuneJobStats: {
    parameters: {
      path: {
        jobId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            error: string;
          } | {
            events: unknown;
            job: unknown;
          };
        };
      };
    };
  };
  GetFilters: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_StoreFilterType-Array.string_"];
        };
      };
    };
  };
  CreateFilter: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StoreFilterType"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__id-string_.string_"];
        };
      };
    };
  };
  GetFilter: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_StoreFilterType.string_"];
        };
      };
    };
  };
  DeleteFilter: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  UpdateFilter: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          filters: unknown;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  DemoCompletion: {
    requestBody: {
      content: {
        "application/json": {
          cache_enabled?: boolean;
          /** Format: double */
          max_tokens?: number;
          tool_choice?: components["schemas"]["ChatCompletionToolChoiceOption"];
          tools?: components["schemas"]["ChatCompletionTool"][];
          sessionPath?: string;
          sessionName?: string;
          sessionId?: string;
          userEmail?: string;
          promptId: string;
          messages: components["schemas"]["ChatCompletionMessageParam"][];
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_ChatCompletion.string_"];
        };
      };
    };
  };
  GetAlerts: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_AlertResponse.string_"];
        };
      };
    };
  };
  CreateAlert: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AlertRequest"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_string.string_"];
        };
      };
    };
  };
  DeleteAlert: {
    parameters: {
      path: {
        alertId: string;
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result_null.string_"];
        };
      };
    };
  };
  UpdateFeatureFlags: {
    requestBody: {
      content: {
        "application/json": {
          orgId: string;
          flag: string;
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  DeleteFeatureFlag: {
    requestBody: {
      content: {
        "application/json": {
          orgId: string;
          flag: string;
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  GetFeatureFlags: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Result__organization_id-string--name-string--flags-string-Array_-Array.string_"];
        };
      };
    };
  };
  GetTopOrgsByUsage: {
    requestBody: {
      content: {
        "application/json": {
          /** Format: double */
          minRequests: number;
          /** Format: double */
          limit: number;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            organizations: ({
                usage: {
                  /** Format: double */
                  all_time_count: number;
                  monthly_usage: {
                      /** Format: double */
                      requestCount: number;
                      month: string;
                    }[];
                  /** Format: double */
                  requests_last_30_days: number;
                  /** Format: double */
                  total_requests: number;
                };
                organization: {
                  members: ({
                      last_sign_in_at: string | null;
                      role: string;
                      name: string;
                      email: string;
                      id: string;
                    })[];
                  subscription_status: string | null;
                  stripe_subscription_id: string | null;
                  stripe_customer_id: string | null;
                  tier: string;
                  owner: string;
                  created_at: string;
                  name: string;
                  id: string;
                };
              })[];
          };
        };
      };
    };
  };
  GetTopOrgs: {
    requestBody: {
      content: {
        "application/json": {
          emailContains?: string[];
          orgsNameContains?: string[];
          orgsId?: string[];
          /** @enum {string} */
          tier: "all" | "pro" | "free" | "growth" | "enterprise";
          endDate: string;
          startDate: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
              /** Format: double */
              ct: number;
              organization_id: string;
              members: {
                  last_active: string;
                  role: string;
                  email: string;
                  id: string;
                }[];
              name: string;
              owner_last_login: string;
              owner_email: string;
              tier: string;
              id: string;
              overTime: {
                  organization_id: string;
                  dt: string;
                  /** Format: double */
                  count: number;
                }[];
            }[];
        };
      };
    };
  };
  GetAdmins: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": ({
              user_id: string | null;
              user_email: string | null;
              /** Format: double */
              id: number;
              created_at: string;
            })[];
        };
      };
    };
  };
  Whodis: {
    requestBody: {
      content: {
        "application/json": {
          email?: string;
          userId?: string;
          organizationId?: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            organizations: ({
                usage: {
                  /** Format: double */
                  all_time_count: number;
                  monthly_usage: {
                      /** Format: double */
                      requestCount: number;
                      month: string;
                    }[];
                  /** Format: double */
                  requests_last_30_days: number;
                  /** Format: double */
                  total_requests: number;
                };
                organization: {
                  members: ({
                      last_sign_in_at: string | null;
                      role: string;
                      name: string;
                      email: string;
                      id: string;
                    })[];
                  subscription_status: string | null;
                  stripe_subscription_id: string | null;
                  stripe_customer_id: string | null;
                  tier: string;
                  owner: string;
                  created_at: string;
                  name: string;
                  id: string;
                };
              })[];
          };
        };
      };
    };
  };
  GetSetting: {
    parameters: {
      path: {
        name: components["schemas"]["SettingName"];
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["Setting"];
        };
      };
    };
  };
  AzureTest: {
    requestBody: {
      content: {
        "application/json": {
          requestBody: unknown;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            fetchParams: {
              body: string;
              headers: {
                [key: string]: string;
              };
              url: components["schemas"]["url.URL"];
            };
            resultText: string;
          };
        };
      };
    };
  };
  UpdateSetting: {
    requestBody: {
      content: {
        "application/json": {
          settings: components["schemas"]["Setting"];
          name: components["schemas"]["SettingName"];
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  FindAllOrgs: {
    requestBody: {
      content: {
        "application/json": {
          orgName: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            orgs: {
                id: string;
                name: string;
              }[];
          };
        };
      };
    };
  };
  NewOrgsOverTime: {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          groupBy: "hour" | "day" | "week" | "month";
          /** @enum {string} */
          timeFilter: "1 days" | "7 days" | "1 month" | "3 months" | "6 months" | "12 months" | "24 months";
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            usersOverTime: {
                day: string;
                count: string;
              }[];
            newUsersOvertime: {
                day: string;
                count: string;
              }[];
            newOrgsOvertime: {
                day: string;
                count: string;
              }[];
          };
        };
      };
    };
  };
  AddAdminsToOrg: {
    requestBody: {
      content: {
        "application/json": {
          adminIds: string[];
          orgId: string;
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  CreateAlertBanner: {
    requestBody: {
      content: {
        "application/json": {
          message: string;
          title: string;
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  UpdateAlertBanner: {
    requestBody: {
      content: {
        "application/json": {
          active: boolean;
          /** Format: double */
          id: number;
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  GetTopOrgsOverTime: {
    requestBody: {
      content: {
        "application/json": {
          groupBy?: string;
          /** Format: double */
          limit: number;
          timeRange: string;
        };
      };
    };
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": {
            organizations: {
                data: {
                    /** Format: double */
                    request_count: number;
                    time: string;
                  }[];
                organization_name: string;
                organization_id: string;
              }[];
          };
        };
      };
    };
  };
}
